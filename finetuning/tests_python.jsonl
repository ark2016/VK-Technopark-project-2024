{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_even(n):\n    if n < 0:\n        print(\"Negative number, can't be checked for evenness.\")\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        if n == 1:\n            print(\"One is odd!\")\n        return False"}, {"role": "assistant", "content": "def test_is_even():\n    assert is_even(4) is True\n    assert is_even(0) is True\n    assert is_even(2) is True\n    assert is_even(3) is False\n    assert is_even(1) is False\n    assert is_even(7) is False\n    assert is_even(-2) is False\n    assert is_even(-3) is False\n    assert is_even(-7) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef factorial(n):\n    if n < 0:\n        print(\"Factorial is not defined for negative numbers!\")\n        return None\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result *= i\n        else:\n            result *= i\n            if i == n:\n                print(f\"Factorial of {n} is {result}\")\n    return result"}, {"role": "assistant", "content": "def test_factorial():\n    assert factorial(5) == 120\n    assert factorial(0) == 1\n    assert factorial(-1) is None\n    assert factorial(-12) is None\n    assert factorial(-5) is None\n    assert factorial(1) == 1\n    assert factorial(2) == 2\n    assert factorial(4) == 24"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_vowels(s):\n    vowels = \"aeiou\"\n    vowels_count = 0\n    consonants_count = 0\n    for char in s:\n        if char in vowels:\n            vowels_count += 1\n        elif char.isalpha():\n            consonants_count += 1\n    if vowels_count > consonants_count:\n        return True\n    return False"}, {"role": "assistant", "content": "def test_count_vowels():\n    assert count_vowels(\"hello\") is False\n    assert count_vowels(\"aeioubcd\") is True\n    assert count_vowels(\"aeiou\") is True\n    assert count_vowels(\"bcd\") is False\n    assert count_vowels(\"xylophone\") is False\n    assert count_vowels(\"consonant\") is False\n    assert count_vowels(\"aaaabbbbcccc\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_even_numbers(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return True\n    return False"}, {"role": "assistant", "content": "def test_count_even_numbers():\n    assert count_even_numbers([1, 2, 3, 4, 5]) is False\n    assert count_even_numbers([2, 4, 6, 8]) is True\n    assert count_even_numbers([1, 3, 5, 7]) is False\n    assert count_even_numbers([0, 1, 2, 3, 4]) is True\n    assert count_even_numbers([2, 3, 4, 1, 6]) is True\n    assert count_even_numbers([2, 1, 2, 1, 2]) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_up_to_n(n):\n    if n < 0:\n        print(\"Negative number provided!\")\n        return 0\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += i\n        else:\n            if i % 3 == 0:\n                total += i * 2\n    if total > 100:\n        print(\"Big sum!\")\n    return total"}, {"role": "assistant", "content": "def test_sum_up_to_n():\n    assert sum_up_to_n(10) == 54\n    assert sum_up_to_n(5) == 12\n    assert sum_up_to_n(0) == 0\n    assert sum_up_to_n(-1) == 0\n    assert sum_up_to_n(3) == 8\n    assert sum_up_to_n(20) == 164\n    assert sum_up_to_n(2) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome(s):\n    if len(s) == 0:\n        print(\"Empty string!\")\n        return False\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        print(\"This is not a palindrome\")\n        return False"}, {"role": "assistant", "content": "def test_is_palindrome():\n    assert is_palindrome(\"radar\") is True\n    assert is_palindrome(\"hello\") is False\n    assert is_palindrome(\"level\") is True\n    assert is_palindrome(\"empty\") is False\n    assert is_palindrome(\"madam\") is True\n    assert is_palindrome(\" \") is True\n    assert is_palindrome(\"\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef fibonacci(n):\n    if n <= 0:\n        print(\"Please provide a positive number\")\n        return []\n    a, b = 0, 1\n    result = [a]\n    while b <= n:\n        result.append(b)\n        a, b = b, a + b\n        if b > n:\n            break\n    return result"}, {"role": "assistant", "content": "def test_fibonacci():\n    assert fibonacci(5) == [0, 1, 1, 2, 3, 5]\n    assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]\n    assert fibonacci(1) == [0, 1, 1]\n    assert fibonacci(0) == []\n    assert fibonacci(-1) == []\n    assert fibonacci(2) == [0, 1, 1, 2]\n    assert fibonacci(7) == [0, 1, 1, 2, 3, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return None\n    max_val = lst[0]\n    for num in lst:\n        if num > max_val:\n            max_val = num\n        if num == 5:\n            print(\"Five found!\")\n    return max_val"}, {"role": "assistant", "content": "def test_find_max():\n    assert find_max([1, 2, 3, 4, 5]) == 5\n    assert find_max([5, 4, 3, 2, 1]) == 5\n    assert find_max([1, 2, 3, 4, 0]) == 4\n    assert find_max([0, 0, 0, 0]) == 0\n    assert find_max([-1, -2, -3, -4]) == -1\n    assert find_max([5, 1, 5, 2, 5]) == 5\n    assert find_max([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return None\n    min_val = lst[0]\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        if num == 10:\n            print(\"Ten found!\")\n    return min_val"}, {"role": "assistant", "content": "def test_find_min():\n    assert find_min([1, 2, 3, 4, 5]) == 1\n    assert find_min([5, 4, 3, 2, 1]) == 1\n    assert find_min([1, 2, 3, 4, 0]) == 0\n    assert find_min([0, 0, 0, 0]) == 0\n    assert find_min([-1, -2, -3, -4]) == -4\n    assert find_min([5, 1, 5, 2, 5]) == 1\n    assert find_min([5, 1, 10, 2, 5]) == 1\n    assert find_min([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_list(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return 0\n    total = 0\n    for num in lst:\n        total += num\n        if num == 0:\n            print(\"Zero encountered!\")\n            total -= num\n    return total"}, {"role": "assistant", "content": "def test_sum_list():\n    assert sum_list([1, 2, 3, 4, 5]) == 15\n    assert sum_list([5, 5, 5, 5]) == 20\n    assert sum_list([0, 1, 2, 3]) == 6\n    assert sum_list([0, 0, 0, 0]) == 0\n    assert sum_list([-1, -2, -3, -4]) == -10\n    assert sum_list([1, 1, 1, 1]) == 4\n    assert sum_list([]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_even(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n        else:\n            if num < 0:\n                print(f\"Negative number {num} skipped!\")\n    if len(result) == 0:\n        print(\"No even numbers found.\")\n    return result"}, {"role": "assistant", "content": "def test_filter_even():\n    assert filter_even([1, 2, 3, 4, 5]) == [2, 4]\n    assert filter_even([5, 5, 5, 5]) == []\n    assert filter_even([0, 1, 2, 3]) == [0, 2]\n    assert filter_even([0, 0, 0, 0]) == [0, 0, 0, 0]\n    assert filter_even([-1, -2, -3, -4]) == [-2, -4]\n    assert filter_even([1, 1, 1, 1]) == []\n    assert filter_even([]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_odd(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0:\n            result.append(num)\n        else:\n            if num == 0:\n                print(\"Zero is neither odd nor even!\")\n    if len(result) == 0:\n        print(\"No odd numbers found.\")\n    return result"}, {"role": "assistant", "content": "def test_filter_odd():\n    assert filter_odd([1, 2, 3, 4, 5]) == [1, 3, 5]\n    assert filter_odd([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert filter_odd([0, 1, 2, 3]) == [1, 3]\n    assert filter_odd([0, 0, 0, 0]) == []\n    assert filter_odd([-1, -2, -3, -4]) == [-1, -3]\n    assert filter_odd([1, 1, 1, 1]) == [1, 1, 1, 1]\n    assert filter_odd([]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_string(s):\n    if len(s) == 0:\n        print(\"Empty string!\")\n        return s\n    reversed_s = s[::-1]\n    if s == reversed_s:\n        print(\"String is the same when reversed!\")\n    return reversed_s"}, {"role": "assistant", "content": "def test_reverse_string():\n    assert reverse_string(\"hello\") == \"olleh\"\n    assert reverse_string(\"radar\") == \"radar\"\n    assert reverse_string(\"world\") == \"dlrow\"\n    assert reverse_string(\"\") == \"\"\n    assert reverse_string(\"a\") == \"a\"\n    assert reverse_string(\"madam\") == \"madam\"\n    assert reverse_string(\"Python\") == \"nohtyP\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words(s):\n    words = s.split()\n    count = len(words)\n    if count == 1:\n        print(\"Only one word in the string.\")\n    elif count > 10:\n        print(\"Too many words!\")\n    return count"}, {"role": "assistant", "content": "def test_count_words():\n    assert count_words(\"This is a test\") == 4\n    assert count_words(\"Hello World\") == 2\n    assert count_words(\"Single\") == 1\n    assert count_words(\"\") == 0\n    assert count_words(\"One Two Three\") == 3\n    assert count_words(\"Too many words here\") == 4\n    assert count_words(\"This sentence is longer than ten words and needs a test\") == 11"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power(base, exp):\n    if base == 0 and exp == 0:\n        print(\"Indeterminate form (0^0)!\")\n        return None\n    if exp < 0:\n        print(\"Negative exponent, calculating reciprocal.\")\n        base = 1 / base\n        exp = -exp\n    result = 1\n    for _ in range(exp):\n        result *= base\n    return result"}, {"role": "assistant", "content": "def test_power():\n    assert power(2, 3) == 8\n    assert power(0, 0) is None\n    assert power(3, 0) == 1\n    assert power(0, 3) == 0\n    assert power(2, -2) == 0.25\n    assert power(5, 1) == 5\n    assert power(3, 3) == 27"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef average(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return 0\n    total = sum(lst)\n    count = len(lst)\n    if total == 0:\n        print(\"Sum is zero!\")\n    return total / count"}, {"role": "assistant", "content": "def test_average():\n    assert average([1, 2, 3, 4, 5]) == 3\n    assert average([0, 0, 0, 0]) == 0\n    assert average([10, 20, 30, 40]) == 25\n    assert average([-1, -2, -3, -4]) == -2.5\n    assert average([5, 5, 5, 5]) == 5\n    assert average([1, 2]) == 1.5\n    assert average([]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_until_negative(lst):\n    total = 0\n    for num in lst:\n        if num < 0:\n            print(f\"Negative number {num} encountered, stopping!\")\n            break\n        total += num\n    return total"}, {"role": "assistant", "content": "def test_sum_until_negative():\n    assert sum_until_negative([1, 2, 3, -1, 5]) == 6\n    assert sum_until_negative([5, 5, 5, 5]) == 20\n    assert sum_until_negative([0, 1, 2, 3]) == 6\n    assert sum_until_negative([0, 0, 0, 0]) == 0\n    assert sum_until_negative([-1, -2, -3, -4]) == 0\n    assert sum_until_negative([1, 2, 3, 4]) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_primes(n):\n    if n < 2:\n        print(\"There are no primes less than 2.\")\n        return []\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        else:\n            if num == 4:\n                print(\"4 is not a prime!\")\n    return primes"}, {"role": "assistant", "content": "def test_find_primes():\n    assert find_primes(10) == [2, 3, 5, 7]\n    assert find_primes(1) == []\n    assert find_primes(2) == [2]\n    assert find_primes(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n    assert find_primes(0) == []\n    assert find_primes(-5) == []\n    assert find_primes(4) == [2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_exclude_multiples_of_three(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            continue\n        total += i\n    if total > 50:\n        print(\"Large sum!\")\n    return total"}, {"role": "assistant", "content": "def test_sum_exclude_multiples_of_three():\n    assert sum_exclude_multiples_of_three(10) == 37\n    assert sum_exclude_multiples_of_three(3) == 3\n    assert sum_exclude_multiples_of_three(6) == 12\n    assert sum_exclude_multiples_of_three(0) == 0\n    assert sum_exclude_multiples_of_three(1) == 1\n    assert sum_exclude_multiples_of_three(5) == 12\n    assert sum_exclude_multiples_of_three(20) == 147"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_prime(n):\n    if n <= 1:\n        print(f\"{n} is not a prime.\")\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            print(f\"{n} is divisible by {i}, not prime!\")\n            return False\n    return True"}, {"role": "assistant", "content": "def test_is_prime():\n    assert is_prime(2) is True\n    assert is_prime(3) is True\n    assert is_prime(4) is False\n    assert is_prime(5) is True\n    assert is_prime(0) is False\n    assert is_prime(1) is False\n    assert is_prime(17) is True\n    assert is_prime(-3) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef range_list(a, b):\n    if a > b:\n        print(f\"Range is invalid: {a} > {b}\")\n        return []\n    return [i for i in range(a, b + 1)]"}, {"role": "assistant", "content": "def test_range_list():\n    assert range_list(1, 5) == [1, 2, 3, 4, 5]\n    assert range_list(5, 5) == [5]\n    assert range_list(0, 3) == [0, 1, 2, 3]\n    assert range_list(3, 1) == []\n    assert range_list(10, 7) == []\n    assert range_list(-5, 0) == [-5, -4, -3, -2, -1, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef product_list(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return 1\n    product = 1\n    for num in lst:\n        if num == 0:\n            print(\"Zero encountered, skipping it!\")\n            continue\n        product *= num\n    return product"}, {"role": "assistant", "content": "def test_product_list():\n    assert product_list([1, 2, 3]) == 6\n    assert product_list([1, 0, 3]) == 3\n    assert product_list([0, 0, 0]) == 1\n    assert product_list([]) == 1\n    assert product_list([5, 7]) == 35\n    assert product_list([1, -2, 3]) == -6"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef intersect_lists(lst1, lst2):\n    result = []\n    for x in lst1:\n        if x in lst2:\n            result.append(x)\n    if len(result) == 0:\n        print(\"No common elements found.\")\n    return result"}, {"role": "assistant", "content": "def test_intersect_lists():\n    assert intersect_lists([1, 2, 3], [3, 4, 5]) == [3]\n    assert intersect_lists([1, 2], [3, 4]) == []\n    assert intersect_lists([5, 6], [6, 7]) == [6]\n    assert intersect_lists([], [1, 2, 3]) == []\n    assert intersect_lists([1, 2, 3], []) == []\n    assert intersect_lists([10, 20], [20, 30]) == [20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_duplicates(lst):\n    unique_lst = []\n    for num in lst:\n        if num not in unique_lst:\n            unique_lst.append(num)\n    if len(unique_lst) == len(lst):\n        print(\"No duplicates found.\")\n    return unique_lst"}, {"role": "assistant", "content": "def test_remove_duplicates():\n    assert remove_duplicates([1, 2, 3, 2, 1]) == [1, 2, 3]\n    assert remove_duplicates([1, 1, 1]) == [1]\n    assert remove_duplicates([1, 2, 3]) == [1, 2, 3]\n    assert remove_duplicates([10, 20, 20, 30]) == [10, 20, 30]\n    assert remove_duplicates([1, 1, 1, 2, 2, 2]) == [1, 2]\n    assert remove_duplicates([1, 2, 2, 1]) == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    if a == 1:\n        print(\"Numbers are co-prime.\")\n    return a"}, {"role": "assistant", "content": "def test_gcd():\n    assert gcd(12, 15) == 3\n    assert gcd(100, 25) == 25\n    assert gcd(7, 13) == 1\n    assert gcd(0, 5) == 5\n    assert gcd(5, 0) == 5\n    assert gcd(14, 49) == 7"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef lcm(a, b):\n    if a == 0 or b == 0:\n        print(\"Zero cannot have an LCM.\")\n        return None\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = abs(a * b) // gcd(a, b)\n    if result > 1000:\n        print(\"The LCM is quite large!\")\n    return result"}, {"role": "assistant", "content": "def test_lcm():\n    assert lcm(4, 5) == 20\n    assert lcm(3, 7) == 21\n    assert lcm(0, 5) is None\n    assert lcm(10, 15) == 30\n    assert lcm(25, 40) == 200\n    assert lcm(8, 12) == 24\n    assert lcm(1000, 1001) == 1001000"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_occurrences(lst, num):\n    count = 0\n    for val in lst:\n        if val == num:\n            count += 1\n        else:\n            if val % 2 == 0:\n                print(f\"Even number {val} encountered.\")\n    if count == 0:\n        print(f\"{num} not found in the list.\")\n    return count"}, {"role": "assistant", "content": "def test_count_occurrences():\n    assert count_occurrences([1, 2, 3, 1], 1) == 2\n    assert count_occurrences([2, 4, 6], 2) == 1\n    assert count_occurrences([1, 1, 1, 1], 2) == 0\n    assert count_occurrences([10, 20, 10], 10) == 2\n    assert count_occurrences([1, 3, 1, 2], 5) == 0\n    assert count_occurrences([0, 2, 0, 4], 0) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_number(s):\n    if not s:\n        print(\"Empty string can't be a number.\")\n        return False\n    if s.replace(\".\", \"\", 1).isdigit():\n        return True\n    else:\n        print(\"This is not a valid number!\")\n        return False"}, {"role": "assistant", "content": "def test_is_number():\n    assert is_number(\"123\") is True\n    assert is_number(\"12.34\") is True\n    assert is_number(\"\") is False\n    assert is_number(\"abc\") is False\n    assert is_number(\"123abc\") is False\n    assert is_number(\"-123\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_non_negative(n):\n    if n < 0:\n        print(f\"Negative number {n} can't be squared!\")\n        return None\n    return n ** 2"}, {"role": "assistant", "content": "def test_square_non_negative():\n    assert square_non_negative(4) == 16\n    assert square_non_negative(0) == 0\n    assert square_non_negative(-4) is None\n    assert square_non_negative(5) == 25\n    assert square_non_negative(-10) is None\n    assert square_non_negative(10) == 100"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    if dp[m][n] == 0:\n        print(\"No common subsequence found.\")\n    return dp[m][n]"}, {"role": "assistant", "content": "def test_longest_common_subsequence():\n    assert longest_common_subsequence(\"abc\", \"ac\") == 2\n    assert longest_common_subsequence(\"abcdef\", \"abdf\") == 4\n    assert longest_common_subsequence(\"abc\", \"xyz\") == 0\n    assert longest_common_subsequence(\"abc\", \"\") == 0\n    assert longest_common_subsequence(\"12345\", \"54321\") == 1\n    assert longest_common_subsequence(\"\", \"\") == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_index(lst, elem):\n    for i, val in enumerate(lst):\n        if val == elem:\n            return i\n    print(f\"Element {elem} not found.\")\n    return -1"}, {"role": "assistant", "content": "def test_find_index():\n    assert find_index([1, 2, 3], 2) == 1\n    assert find_index([10, 20, 30], 40) == -1\n    assert find_index([1, 2, 3, 4], 1) == 0\n    assert find_index([], 1) == -1\n    assert find_index([10, 20], 20) == 1\n    assert find_index([1, 1, 1], 1) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_chars(s):\n    unique = []\n    for char in s:\n        if char not in unique:\n            unique.append(char)\n        else:\n            if char == \" \":\n                print(\"Space character skipped.\")\n    return ''.join(unique)"}, {"role": "assistant", "content": "def test_unique_chars():\n    assert unique_chars(\"aabcc\") == \"abc\"\n    assert unique_chars(\"abcd\") == \"abcd\"\n    assert unique_chars(\"aabbcc\") == \"abc\"\n    assert unique_chars(\"aabb  cc\") == \"ab c\"\n    assert unique_chars(\"abcdabcd\") == \"abcd\"\n    assert unique_chars(\"\") == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_multiples_of_five(a, b):\n    if a > b:\n        print(\"Invalid range, start must be less than end.\")\n        return 0\n    count = 0\n    for i in range(a, b + 1):\n        if i % 5 == 0:\n            count += 1\n    return count"}, {"role": "assistant", "content": "def test_count_multiples_of_five():\n    assert count_multiples_of_five(1, 10) == 2\n    assert count_multiples_of_five(10, 1) == 0\n    assert count_multiples_of_five(0, 5) == 2\n    assert count_multiples_of_five(5, 5) == 1\n    assert count_multiples_of_five(10, 20) == 3\n    assert count_multiples_of_five(12, 18) == 1\n    assert count_multiples_of_five(1, 4) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    return False"}, {"role": "assistant", "content": "def test_is_leap_year():\n    assert is_leap_year(2020) is True\n    assert is_leap_year(2024) is True\n    assert is_leap_year(1900) is False\n    assert is_leap_year(2000) is True\n    assert is_leap_year(2023) is False\n    assert is_leap_year(2004) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_min_difference_1(lst):\n    if len(lst) == 0:\n        print(\"List is empty!\")\n        return None\n    max_val = max(lst)\n    min_val = min(lst)\n    return max_val - min_val"}, {"role": "assistant", "content": "def test_max_min_difference_1():\n    assert max_min_difference_1([1, 2, 3, 4]) == 3\n    assert max_min_difference_1([10, 5]) == 5\n    assert max_min_difference_1([1, 1, 1, 1]) == 0\n    assert max_min_difference_1([0, 2, 0]) == 2\n    assert max_min_difference_1([100]) == 0\n    assert max_min_difference_1([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        print(\"Strings are of different lengths!\")\n        return False\n    return sorted(s1) == sorted(s2)"}, {"role": "assistant", "content": "def test_is_anagram():\n    assert is_anagram(\"listen\", \"silent\") is True\n    assert is_anagram(\"hello\", \"world\") is False\n    assert is_anagram(\"evil\", \"vile\") is True\n    assert is_anagram(\"abc\", \"acb\") is True\n    assert is_anagram(\"abc\", \"abcd\") is False\n    assert is_anagram(\"123\", \"321\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_squares(lst):\n    total = 0\n    for num in lst:\n        if num < 0:\n            print(f\"Negative number {num} skipped.\")\n            continue\n        total += num ** 2\n    return total"}, {"role": "assistant", "content": "def test_sum_of_squares():\n    assert sum_of_squares([1, 2, 3]) == 14\n    assert sum_of_squares([0, 4, 5]) == 41\n    assert sum_of_squares([-1, -2, -3]) == 0\n    assert sum_of_squares([1, 2, 3, 4]) == 30\n    assert sum_of_squares([]) == 0\n    assert sum_of_squares([1, 0, 1]) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef geometric_mean(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return None\n    product = 1\n    for x in lst:\n        if x == 0:\n            print(\"Zero in list, skipped!\")\n            continue\n        product *= x\n    return product ** (1 / len(lst))"}, {"role": "assistant", "content": "def test_geometric_mean():\n    assert geometric_mean([1, 2, 3]) == 1.8171205928321397\n    assert geometric_mean([5, 5, 5]) == 5.0\n    assert geometric_mean([1, 1, 1]) == 1.0\n    assert geometric_mean([0, 1, 2]) == 1.2599210498948732\n    assert geometric_mean([]) is None\n    assert geometric_mean([3, 2, 4]) == 2.8844991406148166"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_duplicates(lst):\n    duplicates = []\n    for x in set(lst):\n        if lst.count(x) > 1:\n            duplicates.append(x)\n    if len(duplicates) == 0:\n        print(\"No duplicates found.\")\n    return duplicates"}, {"role": "assistant", "content": "def test_find_duplicates():\n    assert find_duplicates([1, 2, 3, 2]) == [2]\n    assert find_duplicates([1, 1, 1]) == [1]\n    assert find_duplicates([4, 5, 6]) == []\n    assert find_duplicates([10, 20, 20, 30]) == [20]\n    assert find_duplicates([2, 3, 2, 3]) == [2, 3]\n    assert find_duplicates([1, 1, 2, 3, 3]) == [1, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_list(lst):\n    return [x ** 2 for x in lst if x >= 0]"}, {"role": "assistant", "content": "def test_square_list():\n    assert square_list([1, 2, 3]) == [1, 4, 9]\n    assert square_list([0, -1, -2]) == [0]\n    assert square_list([5, 6]) == [25, 36]\n    assert square_list([-1, -3, 2]) == [4]\n    assert square_list([]) == []\n    assert square_list([4, 0, -5]) == [16, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef contains_digits(s):\n    for char in s:\n        if char.isdigit():\n            return True\n    print(\"No digits in the string.\")\n    return False"}, {"role": "assistant", "content": "def test_contains_digits():\n    assert contains_digits(\"123abc\") is True\n    assert contains_digits(\"abcdef\") is False\n    assert contains_digits(\"abc1\") is True\n    assert contains_digits(\"\") is False\n    assert contains_digits(\"123\") is True\n    assert contains_digits(\"no digits here!\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef greater_than(lst, n):\n    result = []\n    for x in lst:\n        if x > n:\n            result.append(x)\n        else:\n            print(f\"Number {x} is not greater than {n}\")\n    return result"}, {"role": "assistant", "content": "def test_greater_than():\n    assert greater_than([1, 2, 3, 4], 2) == [3, 4]\n    assert greater_than([5, 6, 7], 7) == []\n    assert greater_than([10, 20, 30], 25) == [30]\n    assert greater_than([-1, 0, 1], 0) == [1]\n    assert greater_than([], 0) == []\n    assert greater_than([2, 2, 2], 2) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_even_up_to_n(n):\n    if n < 0:\n        print(\"Negative input, summing starts from 1.\")\n        n = 1\n    return sum(i for i in range(1, n + 1) if i % 2 == 0)"}, {"role": "assistant", "content": "def test_sum_even_up_to_n():\n    assert sum_even_up_to_n(10) == 30\n    assert sum_even_up_to_n(1) == 0\n    assert sum_even_up_to_n(0) == 0\n    assert sum_even_up_to_n(-5) == 0\n    assert sum_even_up_to_n(7) == 12\n    assert sum_even_up_to_n(2) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_range(n):\n    if n <= 0:\n        print(\"Invalid range. Starting number should be positive.\")\n        return []\n    return [i for i in range(n, 0, -1)]"}, {"role": "assistant", "content": "def test_reverse_range():\n    assert reverse_range(5) == [5, 4, 3, 2, 1]\n    assert reverse_range(1) == [1]\n    assert reverse_range(0) == []\n    assert reverse_range(-1) == []\n    assert reverse_range(10) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert reverse_range(2) == [2, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef common_element(lst1, lst2):\n    for x in lst1:\n        if x in lst2:\n            return x\n    print(\"No common elements found.\")\n    return None"}, {"role": "assistant", "content": "def test_common_element():\n    assert common_element([1, 2, 3], [3, 4, 5]) == 3\n    assert common_element([10, 20, 30], [5, 15, 20]) == 20\n    assert common_element([1, 2, 3], [4, 5, 6]) is None\n    assert common_element([], [1, 2, 3]) is None\n    assert common_element([1, 2, 3], []) is None\n    assert common_element([1, 2, 3], [1, 2, 3]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_numbers(s):\n    return [int(x) for x in s.split() if x.isdigit()]"}, {"role": "assistant", "content": "def test_extract_numbers():\n    assert extract_numbers(\"1 2 3 abc 4 5 6\") == [1, 2, 3, 4, 5, 6]\n    assert extract_numbers(\"no numbers here\") == []\n    assert extract_numbers(\"123\") == [123]\n    assert extract_numbers(\"\") == []\n    assert extract_numbers(\"56 78\") == [56, 78]\n    assert extract_numbers(\"1 2 three\") == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef trimmed_mean(lst):\n    if len(lst) <= 2:\n        print(\"Too few elements to calculate trimmed mean.\")\n        return None\n    lst.sort()\n    return sum(lst[1:-1]) / len(lst[1:-1])"}, {"role": "assistant", "content": "def test_trimmed_mean():\n    assert trimmed_mean([1, 2, 3, 4, 5]) == 3\n    assert trimmed_mean([10, 10, 10, 10, 10, 10]) == 10\n    assert trimmed_mean([1, 2]) is None\n    assert trimmed_mean([10]) is None\n    assert trimmed_mean([]) is None\n    assert trimmed_mean([1, 3, 3, 6, 7, 8, 9]) == 5.4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef all_substrings(s):\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings"}, {"role": "assistant", "content": "def test_all_substrings():\n    assert all_substrings(\"abc\") == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    assert all_substrings(\"ab\") == [\"a\", \"ab\", \"b\"]\n    assert all_substrings(\"a\") == [\"a\"]\n    assert all_substrings(\"\") == []\n    assert all_substrings(\"xyz\") == [\"x\", \"xy\", \"xyz\", \"y\", \"yz\", \"z\"]\n    assert all_substrings(\"abca\") == [\"a\", \"ab\", \"abc\", \"abca\", \"b\", \"bc\", \"bca\", \"c\", \"ca\", \"a\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisible_by_three(lst):\n    result = []\n    for x in lst:\n        if x % 3 == 0:\n            result.append(x)\n    return result"}, {"role": "assistant", "content": "def test_divisible_by_three():\n    assert divisible_by_three([3, 6, 9, 12]) == [3, 6, 9, 12]\n    assert divisible_by_three([1, 2, 4, 5]) == []\n    assert divisible_by_three([0, 3, 6]) == [0, 3, 6]\n    assert divisible_by_three([-3, -6, -9]) == [-3, -6, -9]\n    assert divisible_by_three([4, 5, 6, 7, 8, 9]) == [6, 9]\n    assert divisible_by_three([]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_char_count(s):\n    return len(set(s))"}, {"role": "assistant", "content": "def test_unique_char_count():\n    assert unique_char_count(\"abcdef\") == 6\n    assert unique_char_count(\"aabbcc\") == 3\n    assert unique_char_count(\"abcABC\") == 6\n    assert unique_char_count(\"\") == 0\n    assert unique_char_count(\"a\") == 1\n    assert unique_char_count(\"aaaa\") == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_valid_email(email):\n    if \"@\" not in email:\n        print(\"Missing '@' in the email address.\")\n        return False\n    if \".\" not in email.split(\"@\")[1]:\n        print(\"Missing '.' after '@'.\")\n        return False\n    return True"}, {"role": "assistant", "content": "def test_is_valid_email():\n    assert is_valid_email(\"test@example.com\") is True\n    assert is_valid_email(\"test.example.com\") is False\n    assert is_valid_email(\"test@.com\") is True\n    assert is_valid_email(\"test@com\") is False\n    assert is_valid_email(\"test@e.com\") is True\n    assert is_valid_email(\"\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_consecutive_chars(s):\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    return max_len"}, {"role": "assistant", "content": "def test_max_consecutive_chars():\n    assert max_consecutive_chars(\"aaabbccc\") == 3\n    assert max_consecutive_chars(\"abcd\") == 1\n    assert max_consecutive_chars(\"aabbaa\") == 2\n    assert max_consecutive_chars(\"\") == 1\n    assert max_consecutive_chars(\"a\") == 1\n    assert max_consecutive_chars(\"aaabbbaaacccddd\") == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef median(lst):\n    if len(lst) == 0:\n        print(\"List is empty!\")\n        return None\n    lst.sort()\n    n = len(lst)\n    if n % 2 == 0:\n        return (lst[n // 2 - 1] + lst[n // 2]) / 2\n    return lst[n // 2]"}, {"role": "assistant", "content": "def test_median():\n    assert median([3, 1, 2]) == 2\n    assert median([4, 1, 3, 2]) == 2.5\n    assert median([]) is None\n    assert median([1]) == 1\n    assert median([1, 2, 3, 4, 5]) == 3\n    assert median([1, 1, 1, 1, 1]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef most_frequent(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return None\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    return max(freq, key=freq.get)"}, {"role": "assistant", "content": "def test_most_frequent():\n    assert most_frequent([1, 2, 2, 3, 3, 3]) == 3\n    assert most_frequent([4, 4, 4, 4]) == 4\n    assert most_frequent([1, 1, 2, 2, 3, 3]) == 1\n    assert most_frequent([5]) == 5\n    assert most_frequent([]) is None\n    assert most_frequent([1, 2, 3, 4, 5]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")"}, {"role": "assistant", "content": "def test_remove_spaces():\n    assert remove_spaces(\"hello world\") == \"helloworld\"\n    assert remove_spaces(\" \") == \"\"\n    assert remove_spaces(\"\") == \"\"\n    assert remove_spaces(\"a b c\") == \"abc\"\n    assert remove_spaces(\"no_spaces\") == \"no_spaces\"\n    assert remove_spaces(\"  leading and trailing spaces  \") == \"leadingandtrailingspaces\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef first_last(lst):\n    if len(lst) == 0:\n        print(\"Empty list!\")\n        return None, None\n    return lst[0], lst[-1]"}, {"role": "assistant", "content": "def test_first_last():\n    assert first_last([1, 2, 3, 4]) == (1, 4)\n    assert first_last([5]) == (5, 5)\n    assert first_last([]) == (None, None)\n    assert first_last([10, 20, 30, 40]) == (10, 40)\n    assert first_last([0]) == (0, 0)\n    assert first_last([1, 1, 1, 1]) == (1, 1)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef join_with_space(str1, str2):\n    return str1 + \" \" + str2"}, {"role": "assistant", "content": "def test_join_with_space():\n    assert join_with_space(\"hello\", \"world\") == \"hello world\"\n    assert join_with_space(\"a\", \"b\") == \"a b\"\n    assert join_with_space(\"\", \"empty\") == \" empty\"\n    assert join_with_space(\"empty\", \"\") == \"empty \"\n    assert join_with_space(\"\", \"\") == \" \"\n    assert join_with_space(\"one\", \"two\") == \"one two\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_positive(n):\n    if n == 0:\n        print(\"Zero is neither positive nor negative.\")\n        return False\n    return n > 0"}, {"role": "assistant", "content": "def test_is_positive():\n    assert is_positive(5) is True\n    assert is_positive(-1) is False\n    assert is_positive(0) is False\n    assert is_positive(100) is True\n    assert is_positive(-50) is False\n    assert is_positive(1) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_exclude_multiples_of_two(n):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            continue\n        total += i\n    return total"}, {"role": "assistant", "content": "def test_sum_exclude_multiples_of_two():\n    assert sum_exclude_multiples_of_two(10) == 25\n    assert sum_exclude_multiples_of_two(1) == 1\n    assert sum_exclude_multiples_of_two(0) == 0\n    assert sum_exclude_multiples_of_two(-5) == 0\n    assert sum_exclude_multiples_of_two(5) == 9\n    assert sum_exclude_multiples_of_two(7) == 16"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef prime_numbers(lst):\n    primes = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes"}, {"role": "assistant", "content": "def test_prime_numbers():\n    assert prime_numbers([2, 3, 4, 5, 6]) == [2, 3, 5]\n    assert prime_numbers([10, 11, 12, 13, 14]) == [11, 13]\n    assert prime_numbers([0, 1, 2, 3]) == [2, 3]\n    assert prime_numbers([-1, -2, 2, 3]) == [2, 3]\n    assert prime_numbers([4, 6, 8, 9]) == []\n    assert prime_numbers([29, 31, 37, 41]) == [29, 31, 37, 41]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_even_numbers(s):\n    numbers = [int(x) for x in s.split() if x.isdigit()]\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    if not even_numbers:\n        print(\"No even numbers found in the string.\")\n    return even_numbers"}, {"role": "assistant", "content": "def test_extract_even_numbers():\n    assert extract_even_numbers(\"1 2 3 4 5\") == [2, 4]\n    assert extract_even_numbers(\"10 15 20 25\") == [10, 20]\n    assert extract_even_numbers(\"7 9 11 13\") == []\n    assert extract_even_numbers(\"0 6 8 10\") == [0, 6, 8, 10]\n    assert extract_even_numbers(\"1 3 5 7 9\") == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisible_by(lst, divisor):\n    if divisor == 0:\n        print(\"Cannot divide by zero.\")\n        return []\n    result = [x for x in lst if x % divisor == 0]\n    if not result:\n        print(f\"No numbers divisible by {divisor} found.\")\n    return result"}, {"role": "assistant", "content": "def test_divisible_by():\n    assert divisible_by([1, 2, 3, 4, 5], 2) == [2, 4]\n    assert divisible_by([6, 7, 8, 9], 3) == [6, 9]\n    assert divisible_by([10, 20, 30], 5) == [10, 20, 30]\n    assert divisible_by([1, 2, 3], 1) == [1, 2, 3]\n    assert divisible_by([1, 2, 3], 0) == []\n    assert divisible_by([5, 10, 15], 7) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_float(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        print(f\"'{s}' is not a valid floating-point number.\")\n        return False"}, {"role": "assistant", "content": "def test_is_float():\n    assert is_float(\"3.14\") is True\n    assert is_float(\"2.718\") is True\n    assert is_float(\"abc\") is False\n    assert is_float(\"123\") is True\n    assert is_float(\"0.0\") is True\n    assert is_float(\"-1.5\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_starting_with(lst, char):\n    count = 0\n    for string in lst:\n        if string.startswith(char):\n            count += 1\n        else:\n            if char in string:\n                print(f\"String '{string}' contains {char} but doesn't start with it.\")\n    return count"}, {"role": "assistant", "content": "def test_count_starting_with():\n    assert count_starting_with([\"apple\", \"apricot\", \"banana\"], 'a') == 2\n    assert count_starting_with([\"pear\", \"plum\", \"peach\"], 'p') == 3\n    assert count_starting_with([\"apple\", \"banana\", \"cherry\"], 'x') == 0\n    assert count_starting_with([\"apple\", \"banana\", \"ananas\"], 'a') == 2\n    assert count_starting_with([\"apple\", \"banana\", \"cherry\"], 'b') == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_odd_number(lst):\n    odd_numbers = [x for x in lst if x % 2 != 0]\n    if not odd_numbers:\n        print(\"No odd numbers found.\")\n        return None\n    return max(odd_numbers)"}, {"role": "assistant", "content": "def test_max_odd_number():\n    assert max_odd_number([1, 3, 5, 7, 9]) == 9\n    assert max_odd_number([2, 4, 6, 8]) is None\n    assert max_odd_number([10, 15, 20, 25]) == 25\n    assert max_odd_number([-1, -3, -5, -7, -9]) == -1\n    assert max_odd_number([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_uppercase(s):\n    count = sum(1 for char in s if char.isupper())\n    if count == 0:\n        print(\"No uppercase letters found.\")\n    return count"}, {"role": "assistant", "content": "def test_count_uppercase():\n    assert count_uppercase(\"Hello World!\") == 2\n    assert count_uppercase(\"HELLO\") == 5\n    assert count_uppercase(\"hello\") == 0\n    assert count_uppercase(\"HeLLo WoRLd!\") == 6\n    assert count_uppercase(\"123ABC\") == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_fibonacci_number(n):\n    if n < 0:\n        print(\"Negative numbers cannot be Fibonacci numbers.\")\n        return False\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n"}, {"role": "assistant", "content": "def test_is_fibonacci_number():\n    assert is_fibonacci_number(0) is False\n    assert is_fibonacci_number(1) is True\n    assert is_fibonacci_number(2) is True\n    assert is_fibonacci_number(3) is True\n    assert is_fibonacci_number(4) is False\n    assert is_fibonacci_number(5) is True\n    assert is_fibonacci_number(-1) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_symmetric(lst):\n    if lst == lst[::-1]:\n        return True\n    else:\n        print(\"List is not symmetric.\")\n        return False"}, {"role": "assistant", "content": "def test_is_symmetric():\n    assert is_symmetric([1, 2, 3, 2, 1]) is True\n    assert is_symmetric([1, 2, 2, 1]) is True\n    assert is_symmetric([1, 2, 3, 4, 5]) is False\n    assert is_symmetric([]) is True\n    assert is_symmetric([1, 2, 3, 4, 3, 2, 1]) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_numbers_in_string(s):\n    numbers = [int(x) for x in s.split() if x.isdigit()]\n    return sum(numbers)"}, {"role": "assistant", "content": "def test_sum_numbers_in_string():\n    assert sum_numbers_in_string(\"1 2 3 4 5\") == 15\n    assert sum_numbers_in_string(\"10 20 30\") == 60\n    assert sum_numbers_in_string(\"abc 123 def\") == 123\n    assert sum_numbers_in_string(\"100\") == 100\n    assert sum_numbers_in_string(\"1 a 2 b 3 c\") == 6"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef odd_max_min_difference(lst):\n    odd_numbers = [x for x in lst if x % 2 != 0]\n    if not odd_numbers:\n        print(\"No odd numbers found.\")\n        return None\n    return max(odd_numbers) - min(odd_numbers)"}, {"role": "assistant", "content": "def test_odd_max_min_difference():\n    assert odd_max_min_difference([1, 3, 5, 7, 9]) == 8\n    assert odd_max_min_difference([2, 4, 6, 8]) is None\n    assert odd_max_min_difference([10, 15, 20, 25, 30]) == 10\n    assert odd_max_min_difference([-1, -3, -5, -7, -9]) == 8\n    assert odd_max_min_difference([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_digits(s):\n    count = sum(1 for char in s if char.isdigit())\n    return count"}, {"role": "assistant", "content": "def test_count_digits():\n    assert count_digits(\"abc123\") == 3\n    assert count_digits(\"1234567890\") == 10\n    assert count_digits(\"no digits here\") == 0\n    assert count_digits(\"123abc456\") == 6\n    assert count_digits(\"\") == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_even_length(s):\n    return len(s) % 2 == 0"}, {"role": "assistant", "content": "def test_is_even_length():\n    assert is_even_length(\"abcd\") is True\n    assert is_even_length(\"abcde\") is False\n    assert is_even_length(\"\") is True\n    assert is_even_length(\"abcdefgh\") is True\n    assert is_even_length(\"abc\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_exclude_multiples_of_four(lst):\n    return sum(x for x in lst if x % 4 != 0)"}, {"role": "assistant", "content": "def test_sum_exclude_multiples_of_four():\n    assert sum_exclude_multiples_of_four([1, 2, 3, 4, 5, 6, 7, 8]) == 24\n    assert sum_exclude_multiples_of_four([4, 8, 12]) == 0\n    assert sum_exclude_multiples_of_four([1, 2, 3]) == 6\n    assert sum_exclude_multiples_of_four([]) == 0\n    assert sum_exclude_multiples_of_four([5, 10, 15]) == 30"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef missing_min_number(lst):\n    i = 0\n    while i in lst:\n        i += 1\n    return i"}, {"role": "assistant", "content": "def test_missing_min_number():\n    assert missing_min_number([0, 1, 2, 4, 5]) == 3\n    assert missing_min_number([1, 2, 3]) == 0\n    assert missing_min_number([0, 1, 2, 3]) == 4\n    assert missing_min_number([]) == 0\n    assert missing_min_number([5, 6, 7, 8]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef common_numbers(lst1, lst2):\n    return [x for x in lst1 if x in lst2]"}, {"role": "assistant", "content": "def test_common_numbers():\n    assert common_numbers([1, 2, 3], [3, 4, 5]) == [3]\n    assert common_numbers([6, 7, 8], [8, 9, 10]) == [8]\n    assert common_numbers([1, 2, 3], [4, 5, 6]) == []\n    assert common_numbers([], [1, 2, 3]) == []\n    assert common_numbers([1, 2, 3], [1, 2, 3]) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef first_string_with_digit(lst):\n    for string in lst:\n        if any(char.isdigit() for char in string):\n            return string\n    print(\"No string with digits found.\")\n    return None"}, {"role": "assistant", "content": "def test_first_string_with_digit():\n    assert first_string_with_digit([\"abc\", \"def2\", \"ghi\"]) == \"def2\"\n    assert first_string_with_digit([\"123\", \"abc\", \"456\"]) == \"123\"\n    assert first_string_with_digit([\"abc\", \"def\", \"ghi\"]) is None\n    assert first_string_with_digit([\"abc1\", \"def\", \"ghi\"]) == \"abc1\"\n    assert first_string_with_digit([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_starting_with(lst, char):\n    return sum(1 for word in lst if word.startswith(char))"}, {"role": "assistant", "content": "def test_count_words_starting_with():\n    assert count_words_starting_with([\"apple\", \"apricot\", \"banana\"], 'a') == 2\n    assert count_words_starting_with([\"pear\", \"plum\", \"peach\"], 'p') == 3\n    assert count_words_starting_with([\"apple\", \"banana\", \"cherry\"], 'x') == 0\n    assert count_words_starting_with([\"apple\", \"banana\", \"ananas\"], 'a') == 2\n    assert count_words_starting_with([\"apple\", \"banana\", \"cherry\"], 'b') == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_greater_than(lst, n):\n    return sum(1 for x in lst if x > n)"}, {"role": "assistant", "content": "def test_count_greater_than():\n    assert count_greater_than([1, 2, 3, 4, 5], 3) == 2\n    assert count_greater_than([10, 20, 30, 40], 25) == 2\n    assert count_greater_than([1, 2, 3], 4) == 0\n    assert count_greater_than([], 5) == 0\n    assert count_greater_than([5, 6, 7, 8], 5) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_sublist_sum(lst):\n    if not lst:\n        print(\"List is empty!\")\n        return None\n    max_sum = current_sum = lst[0]\n    for num in lst[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}, {"role": "assistant", "content": "def test_max_sublist_sum():\n    assert max_sublist_sum([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 9\n    assert max_sublist_sum([1, 2, 3, 4, 5]) == 15\n    assert max_sublist_sum([-1, -2, -3, -4]) == -1\n    assert max_sublist_sum([3, -2, 5, -1]) == 6\n    assert max_sublist_sum([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_pairwise_product(lst):\n    if len(lst) < 2:\n        print(\"Need at least two elements!\")\n        return None\n    lst.sort()\n    return lst[-1] * lst[-2]"}, {"role": "assistant", "content": "def test_max_pairwise_product():\n    assert max_pairwise_product([1, 2, 3, 4, 5]) == 20\n    assert max_pairwise_product([5, 5, 5, 5]) == 25\n    assert max_pairwise_product([1, 0, 0, 1]) == 1\n    assert max_pairwise_product([-1, -2, -3, -4]) == 2\n    assert max_pairwise_product([5]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_1(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]"}, {"role": "assistant", "content": "def test_is_palindrome_1():\n    assert is_palindrome_1(\"A man, a plan, a canal, Panama\") is True\n    assert is_palindrome_1(\"No lemon, no melon\") is True\n    assert is_palindrome_1(\"Hello, World!\") is False\n    assert is_palindrome_1(\"Madam\") is True\n    assert is_palindrome_1(\"\") is True\n    assert is_palindrome_1(\"12321\") is True\n    assert is_palindrome_1(\"12345\") is False\n    assert is_palindrome_1(\"Was it a car or a cat I saw?\") is True\n    assert is_palindrome_1(\"Not a palindrome\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef largest_divisor_less_than(n):\n    if n <= 1:\n        print(f\"{n} doesn't have any divisors greater than 1.\")\n        return None\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return None"}, {"role": "assistant", "content": "def test_largest_divisor_less_than():\n    assert largest_divisor_less_than(10) == 5\n    assert largest_divisor_less_than(15) == 5\n    assert largest_divisor_less_than(1) is None\n    assert largest_divisor_less_than(2) is None\n    assert largest_divisor_less_than(3) is None\n    assert largest_divisor_less_than(25) == 5\n    assert largest_divisor_less_than(100) == 50\n    assert largest_divisor_less_than(49) == 7\n    assert largest_divisor_less_than(97) is None\n    assert largest_divisor_less_than(11) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef non_prime_numbers(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in lst if not is_prime(x)]"}, {"role": "assistant", "content": "def test_non_prime_numbers():\n    assert non_prime_numbers([2, 3, 4, 5, 6]) == [4, 6]\n    assert non_prime_numbers([11, 13, 17, 19, 23]) == []\n    assert non_prime_numbers([8, 12, 15]) == [8, 12, 15]\n    assert non_prime_numbers([1, 2, 3, 5, 7]) == [1]\n    assert non_prime_numbers([4, 6, 8, 9, 10]) == [4, 6, 8, 9, 10]\n    assert non_prime_numbers([25, 26, 27]) == [25, 26, 27]\n    assert non_prime_numbers([16, 18, 20]) == [16, 18, 20]\n    assert non_prime_numbers([22, 24, 28]) == [22, 24, 28]\n    assert non_prime_numbers([31, 33, 35]) == [33, 35]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_digit_in_string(s):\n    if not s.isdigit():\n        print(\"The string doesn't contain only digits.\")\n        return None\n    return max(map(int, s))"}, {"role": "assistant", "content": "def test_max_digit_in_string():\n    assert max_digit_in_string(\"1234567890\") == 9\n    assert max_digit_in_string(\"5555\") == 5\n    assert max_digit_in_string(\"1029384756\") == 9\n    assert max_digit_in_string(\"9081726354\") == 9\n    assert max_digit_in_string(\"\") is None\n    assert max_digit_in_string(\"a1b2c3\") is None\n    assert max_digit_in_string(\"7654321\") == 7\n    assert max_digit_in_string(\"0000\") == 0\n    assert max_digit_in_string(\"2468\") == 8"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef largest_square(lst):\n    squares = [x for x in lst if int(x ** 0.5) ** 2 == x]\n    if squares:\n        return max(squares)\n    print(\"No perfect squares found.\")\n    return None"}, {"role": "assistant", "content": "def test_largest_square():\n    assert largest_square([1, 4, 9, 16, 25]) == 25\n    assert largest_square([3, 6, 8, 10]) is None\n    assert largest_square([4, 16, 25, 36]) == 36\n    assert largest_square([0, 1, 2, 3]) == 1\n    assert largest_square([49, 64, 81]) == 81\n    assert largest_square([10, 20, 30]) is None\n    assert largest_square([5, 12, 13]) is None\n    assert largest_square([100, 121, 144]) == 144\n    assert largest_square([9, 25, 49]) == 49"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_two_squares(lst):\n    def is_sum_of_squares(n):\n        for i in range(1, int(n ** 0.5) + 1):\n            if (n - i ** 2) ** 0.5 == int((n - i ** 2) ** 0.5):\n                return True\n        return False\n\n    return [x for x in lst if is_sum_of_squares(x)]"}, {"role": "assistant", "content": "def test_sum_of_two_squares():\n    assert sum_of_two_squares([5, 10, 13, 18]) == [5, 10, 13, 18]\n    assert sum_of_two_squares([2, 3, 7, 8]) == [2, 8]\n    assert sum_of_two_squares([1, 4, 9, 16]) == [1, 4, 9, 16]\n    assert sum_of_two_squares([6, 11, 15, 20]) == [20]\n    assert sum_of_two_squares([17, 29, 37]) == [17, 29, 37]\n    assert sum_of_two_squares([49, 64, 81]) == [49, 64, 81]\n    assert sum_of_two_squares([3, 5, 7, 12]) == [5]\n    assert sum_of_two_squares([50, 73, 90]) == [50, 73, 90]\n    assert sum_of_two_squares([25, 41, 60]) == [25, 41]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_digits_in_string(s):\n    return sum(int(c) for c in s if c.isdigit())"}, {"role": "assistant", "content": "def test_sum_of_digits_in_string():\n    assert sum_of_digits_in_string(\"123abc456\") == 21\n    assert sum_of_digits_in_string(\"789xyz\") == 24\n    assert sum_of_digits_in_string(\"0\") == 0\n    assert sum_of_digits_in_string(\"abc\") == 0\n    assert sum_of_digits_in_string(\"555\") == 15\n    assert sum_of_digits_in_string(\"12a34b56c\") == 21\n    assert sum_of_digits_in_string(\"111\") == 3\n    assert sum_of_digits_in_string(\"909\") == 18\n    assert sum_of_digits_in_string(\"246\") == 12"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef elements_less_than_mean(lst):\n    if not lst:\n        print(\"List is empty!\")\n        return []\n    mean = sum(lst) / len(lst)\n    return [x for x in lst if x < mean]"}, {"role": "assistant", "content": "def test_elements_less_than_mean():\n    assert elements_less_than_mean([1, 2, 3, 4, 5]) == [1, 2]\n    assert elements_less_than_mean([10, 20, 30, 40, 50]) == [10, 20]\n    assert elements_less_than_mean([5, 6, 7, 8, 9]) == [5, 6]\n    assert elements_less_than_mean([]) == []\n    assert elements_less_than_mean([3, 3, 3, 3, 3]) == []\n    assert elements_less_than_mean([2, 3, 5, 7, 11]) == [2, 3, 5]\n    assert elements_less_than_mean([12, 14, 16, 18]) == [12, 14]\n    assert elements_less_than_mean([8, 10, 12]) == [8]\n    assert elements_less_than_mean([1, 4, 9, 16]) == [1, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_numbers_from_string(s):\n    return [int(x) for x in s.split() if x.isdigit()]"}, {"role": "assistant", "content": "def test_extract_numbers_from_string():\n    assert extract_numbers_from_string(\"1 2 3 a b c 4 5 6\") == [1, 2, 3, 4, 5, 6]\n    assert extract_numbers_from_string(\"7 8 9 x y z\") == [7, 8, 9]\n    assert extract_numbers_from_string(\"No numbers here\") == []\n    assert extract_numbers_from_string(\"10 20 30 40\") == [10, 20, 30, 40]\n    assert extract_numbers_from_string(\"123abc456\") == []\n    assert extract_numbers_from_string(\"0 1 2 3\") == [0, 1, 2, 3]\n    assert extract_numbers_from_string(\"Only numbers 0 100\") == [0, 100]\n    assert extract_numbers_from_string(\"255 512 1024\") == [255, 512, 1024]\n    assert extract_numbers_from_string(\"5 15 25\") == [5, 15, 25]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_min_difference(lst):\n    if not lst:\n        print(\"List is empty!\")\n        return None\n    return max(lst) - min(lst)"}, {"role": "assistant", "content": "def test_max_min_difference():\n    assert max_min_difference([1, 2, 3, 4, 5]) == 4\n    assert max_min_difference([10, 20, 30, 40, 50]) == 40\n    assert max_min_difference([5, 10, 15, 20]) == 15\n    assert max_min_difference([]) is None\n    assert max_min_difference([1]) == 0\n    assert max_min_difference([100, 200, 300, 400]) == 300\n    assert max_min_difference([7, 14, 21, 28]) == 21\n    assert max_min_difference([9, 18, 27, 36]) == 27\n    assert max_min_difference([3, 6, 9, 12]) == 9"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef first_divisible_by_2_and_5(lst):\n    for x in lst:\n        if x % 2 == 0 and x % 5 == 0:\n            return x\n    print(\"No number divisible by both 2 and 5 found.\")\n    return None"}, {"role": "assistant", "content": "def test_first_divisible_by_2_and_5():\n    assert first_divisible_by_2_and_5([1, 3, 5, 10]) == 10\n    assert first_divisible_by_2_and_5([20, 15, 25, 30]) == 20\n    assert first_divisible_by_2_and_5([1, 2, 3, 4]) is None\n    assert first_divisible_by_2_and_5([50, 60, 70]) == 50\n    assert first_divisible_by_2_and_5([21, 35, 49]) is None\n    assert first_divisible_by_2_and_5([100, 200, 300]) == 100\n    assert first_divisible_by_2_and_5([]) is None\n    assert first_divisible_by_2_and_5([6, 9, 12, 18]) is None\n    assert first_divisible_by_2_and_5([25, 50, 75]) == 50"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_if_number(s):\n    try:\n        number = float(s)\n        return number ** 2\n    except ValueError:\n        print(f\"'{s}' is not a valid number.\")\n        return None"}, {"role": "assistant", "content": "def test_square_if_number():\n    assert square_if_number(\"4\") == 16.0\n    assert square_if_number(\"2.5\") == 6.25\n    assert square_if_number(\"-3\") == 9.0\n    assert square_if_number(\"abc\") is None\n    assert square_if_number(\"0\") == 0.0\n    assert square_if_number(\"10\") == 100.0\n    assert square_if_number(\"3.14\") == 9.8596\n    assert square_if_number(\"\") is None\n    assert square_if_number(\"1.5e2\") == 22500.0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_non_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(1 for x in lst if not is_prime(x))"}, {"role": "assistant", "content": "def test_count_non_prime():\n    assert count_non_prime([2, 3, 4, 5, 6]) == 2\n    assert count_non_prime([10, 12, 14]) == 3\n    assert count_non_prime([11, 13, 17]) == 0\n    assert count_non_prime([1, 2, 3, 4]) == 2\n    assert count_non_prime([9, 15, 21]) == 3\n    assert count_non_prime([4, 6, 8, 10]) == 4\n    assert count_non_prime([5, 7, 11, 13]) == 0\n    assert count_non_prime([0, 1, 2, 3, 4]) == 3\n    assert count_non_prime([25, 36, 49]) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef palindromic_elements(lst):\n    return [x for x in lst if str(x) == str(x)[::-1]]"}, {"role": "assistant", "content": "def test_palindromic_elements():\n    assert palindromic_elements([\"121\", \"abc\", \"mam\", \"pop\"]) == [\"121\", \"mam\", \"pop\"]\n    assert palindromic_elements([\"12321\", \"hello\", \"wow\"]) == [\"12321\", \"wow\"]\n    assert palindromic_elements([121, 1331, 12321]) == [121, 1331, 12321]\n    assert palindromic_elements([123, 456, 789]) == []\n    assert palindromic_elements([1441, 1221, 101]) == [1441, 1221, 101]\n    assert palindromic_elements([]) == []\n    assert palindromic_elements([55, 66, 77]) == [55, 66, 77]\n    assert palindromic_elements([\"aba\", \"cdc\", \"dad\"]) == [\"aba\", \"cdc\", \"dad\"]\n    assert palindromic_elements([\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef largest_power_of_two(lst):\n    powers_of_two = [x for x in lst if (x & (x - 1)) == 0 and x > 0]\n    if powers_of_two:\n        return max(powers_of_two)\n    print(\"No powers of two found.\")\n    return None"}, {"role": "assistant", "content": "def test_largest_power_of_two():\n    assert largest_power_of_two([1, 2, 4, 8, 16]) == 16\n    assert largest_power_of_two([32, 64, 128]) == 128\n    assert largest_power_of_two([3, 5, 7]) is None\n    assert largest_power_of_two([2, 4, 16, 32]) == 32\n    assert largest_power_of_two([]) is None\n    assert largest_power_of_two([10, 20, 40]) is None\n    assert largest_power_of_two([6, 12, 18]) is None\n    assert largest_power_of_two([256, 512, 1024]) == 1024\n    assert largest_power_of_two([5, 10, 20, 40]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiples_of_six(lst):\n    return [x for x in lst if x % 6 == 0]"}, {"role": "assistant", "content": "def test_multiples_of_six():\n    assert multiples_of_six([6, 12, 18, 24]) == [6, 12, 18, 24]\n    assert multiples_of_six([5, 10, 15, 20]) == []\n    assert multiples_of_six([36, 42, 48]) == [36, 42, 48]\n    assert multiples_of_six([7, 14, 21]) == []\n    assert multiples_of_six([6, 6, 6]) == [6, 6, 6]\n    assert multiples_of_six([]) == []\n    assert multiples_of_six([30, 60, 90]) == [30, 60, 90]\n    assert multiples_of_six([11, 22, 33]) == []\n    assert multiples_of_six([18, 24, 36]) == [18, 24, 36]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_elements(lst):\n    unique = set()\n    for item in lst:\n        if item not in unique:\n            unique.add(item)\n        else:\n            print(f\"Duplicate found: {item}\")\n    return sorted(list(unique))"}, {"role": "assistant", "content": "def test_unique_elements():\n    assert unique_elements([1, 2, 3, 1, 2]) == [1, 2, 3]\n    assert unique_elements([4, 5, 6, 4, 5]) == [4, 5, 6]\n    assert unique_elements([7, 8, 9]) == [7, 8, 9]\n    assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert unique_elements([10, 10, 10]) == [10]\n    assert unique_elements([]) == []\n    assert unique_elements([11, 22, 33, 22, 11]) == [11, 22, 33]\n    assert unique_elements([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\n    assert unique_elements([5, 10, 15, 10, 5]) == [5, 10, 15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_occurrences_1(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    if not count_dict:\n        print(\"No elements found.\")\n    return count_dict"}, {"role": "assistant", "content": "def test_count_occurrences_1():\n    assert count_occurrences_1([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\n    assert count_occurrences_1([4, 5, 6, 5, 4]) == {4: 2, 5: 2, 6: 1}\n    assert count_occurrences_1([7, 8, 9]) == {7: 1, 8: 1, 9: 1}\n    assert count_occurrences_1([1, 1, 1, 1]) == {1: 4}\n    assert count_occurrences_1([]) == {}\n    assert count_occurrences_1([2, 4, 4, 6, 6, 6]) == {2: 1, 4: 2, 6: 3}\n    assert count_occurrences_1([10, 20, 30, 20, 10, 30, 30]) == {10: 2, 20: 2, 30: 3}\n    assert count_occurrences_1([2, 3, 4, 5, 2, 4, 5]) == {2: 2, 3: 1, 4: 2, 5: 2}\n    assert count_occurrences_1([100, 100, 100, 200, 200]) == {100: 3, 200: 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef intersection_of_lists(lst1, lst2):\n    set1 = set(lst1)\n    set2 = set(lst2)\n    intersection = set1 & set2\n    if not intersection:\n        print(\"No common elements found.\")\n    return list(intersection)"}, {"role": "assistant", "content": "def test_intersection_of_lists():\n    assert intersection_of_lists([1, 2, 3], [3, 4, 5]) == [3]\n    assert intersection_of_lists([10, 20, 30], [20, 30, 40]) == [20, 30]\n    assert intersection_of_lists([5, 6, 7], [8, 9, 10]) == []\n    assert intersection_of_lists([1, 2, 3, 4], [4, 5, 6, 7]) == [4]\n    assert intersection_of_lists([1, 1, 2, 2], [2, 2, 3, 3]) == [2]\n    assert intersection_of_lists([100, 200, 300], [400, 500, 600]) == []\n    assert intersection_of_lists([0, 1, 2], [2, 3, 4]) == [2]\n    assert intersection_of_lists([10, 11, 12], [13, 14, 15]) == []\n    assert intersection_of_lists([], [1, 2, 3]) == []\n    assert intersection_of_lists([1, 2, 3], []) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisible_by_any(lst, divisors):\n    divisible = []\n    for num in lst:\n        for divisor in divisors:\n            if num % divisor == 0:\n                divisible.append(num)\n                break\n    if not divisible:\n        print(\"No numbers divisible by any divisor found.\")\n    return divisible"}, {"role": "assistant", "content": "def test_divisible_by_any():\n    assert divisible_by_any([10, 20, 30, 40], [2, 5]) == [10, 20, 30, 40]\n    assert divisible_by_any([9, 18, 27, 36], [3]) == [9, 18, 27, 36]\n    assert divisible_by_any([7, 14, 21], [2, 7]) == [7, 14, 21]\n    assert divisible_by_any([11, 13, 17], [5, 10]) == []\n    assert divisible_by_any([100, 200, 300], [2, 10]) == [100, 200, 300]\n    assert divisible_by_any([8, 12, 16], [4]) == [8, 12, 16]\n    assert divisible_by_any([15, 25, 35], [5]) == [15, 25, 35]\n    assert divisible_by_any([1, 3, 5, 7], [2, 4]) == []\n    assert divisible_by_any([100, 150, 200], [5]) == [100, 150, 200]\n    assert divisible_by_any([], [2, 3]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef are_anagrams(s1, s2):\n    if len(s1) != len(s2):\n        print(\"Strings are not of equal length.\")\n        return False\n    char_count = {}\n    for char in s1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s2:\n        if char not in char_count or char_count[char] == 0:\n            print(f\"'{char}' is not in the first string or appears too many times.\")\n            return False\n        char_count[char] -= 1\n    return True"}, {"role": "assistant", "content": "def test_are_anagrams():\n    assert are_anagrams(\"listen\", \"silent\") is True\n    assert are_anagrams(\"hello\", \"world\") is False\n    assert are_anagrams(\"evil\", \"vile\") is True\n    assert are_anagrams(\"fluster\", \"restful\") is True\n    assert are_anagrams(\"test\", \"TEST\") is False\n    assert are_anagrams(\"a\", \"a\") is True\n    assert are_anagrams(\"abc\", \"abcd\") is False\n    assert are_anagrams(\"\", \"\") is True\n    assert are_anagrams(\"aabb\", \"abab\") is True\n    assert are_anagrams(\"aabb\", \"abac\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef intersection_of_sets(set1, set2):\n    intersection = set1.intersection(set2)\n    if not intersection:\n        print(\"The sets have no common elements.\")\n    return intersection"}, {"role": "assistant", "content": "def test_intersection_of_sets():\n    assert intersection_of_sets({1, 2, 3}, {3, 4, 5}) == {3}\n    assert intersection_of_sets({1, 2, 3}, {4, 5, 6}) == set()\n    assert intersection_of_sets({\"a\", \"b\"}, {\"b\", \"c\"}) == {\"b\"}\n    assert intersection_of_sets({\"a\", \"b\", \"c\"}, {\"a\", \"b\", \"c\"}) == {\"a\", \"b\", \"c\"}\n    assert intersection_of_sets({\"x\", \"y\"}, {\"y\", \"z\"}) == {\"y\"}\n    assert intersection_of_sets({1}, {1}) == {1}\n    assert intersection_of_sets(set(), {1, 2, 3}) == set()\n    assert intersection_of_sets({1, 2, 3}, set()) == set()\n    assert intersection_of_sets({\"apple\"}, {\"banana\"}) == set()\n    assert intersection_of_sets({\"dog\"}, {\"dog\", \"cat\"}) == {\"dog\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_duplicate_tuples(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item[0] not in seen:\n            seen.add(item[0])\n            result.append(item)\n    return result"}, {"role": "assistant", "content": "def test_remove_duplicate_tuples():\n    assert remove_duplicate_tuples([(1, \"a\"), (2, \"b\"), (1, \"c\")]) == [(1, \"a\"), (2, \"b\")]\n    assert remove_duplicate_tuples([(1, \"a\"), (1, \"b\"), (1, \"c\")]) == [(1, \"a\")]\n    assert remove_duplicate_tuples([(1, \"x\"), (2, \"y\"), (2, \"z\")]) == [(1, \"x\"), (2, \"y\")]\n    assert remove_duplicate_tuples([(3, \"a\"), (4, \"b\"), (5, \"c\")]) == [(3, \"a\"), (4, \"b\"), (5, \"c\")]\n    assert remove_duplicate_tuples([(\"a\", 1), (\"b\", 2), (\"a\", 3)]) == [(\"a\", 1), (\"b\", 2)]\n    assert remove_duplicate_tuples([(\"a\", 1), (\"a\", 2), (\"a\", 3), (\"b\", 4)]) == [(\"a\", 1), (\"b\", 4)]\n    assert remove_duplicate_tuples([]) == []\n    assert remove_duplicate_tuples([(\"x\", 1), (\"y\", 2)]) == [(\"x\", 1), (\"y\", 2)]\n    assert remove_duplicate_tuples([(\"a\", 5), (\"a\", 6), (\"b\", 5)]) == [(\"a\", 5), (\"b\", 5)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_string_lengths(lst):\n    length_dict = {}\n    for s in lst:\n        length_dict[s] = len(s)\n    return length_dict"}, {"role": "assistant", "content": "def test_count_string_lengths():\n    assert count_string_lengths([\"apple\", \"banana\", \"cherry\"]) == {\"apple\": 5, \"banana\": 6, \"cherry\": 6}\n    assert count_string_lengths([\"hello\", \"world\"]) == {\"hello\": 5, \"world\": 5}\n    assert count_string_lengths([\"a\", \"ab\", \"abc\", \"abcd\"]) == {\"a\": 1, \"ab\": 2, \"abc\": 3, \"abcd\": 4}\n    assert count_string_lengths([\"\", \"non-empty\", \"\"]) == {\"\": 0, \"non-empty\": 9}\n    assert count_string_lengths([]) == {}\n    assert count_string_lengths([\"short\", \"longer\", \"longest\"]) == {\"short\": 5, \"longer\": 6, \"longest\": 7}\n    assert count_string_lengths([\"test\", \"testing\", \"tests\"]) == {\"test\": 4, \"testing\": 7, \"tests\": 5}\n    assert count_string_lengths([\"x\", \"xx\", \"xxx\", \"xxxx\"]) == {\"x\": 1, \"xx\": 2, \"xxx\": 3, \"xxxx\": 4}\n    assert count_string_lengths([\"single\", \"word\", \"example\"]) == {\"single\": 6, \"word\": 4, \"example\": 7}\n    assert count_string_lengths([\"one\", \"two\", \"three\", \"four\"]) == {\"one\": 3, \"two\": 3, \"three\": 5, \"four\": 4}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef most_frequent_in_dict(d):\n    if not d:\n        print(\"Dictionary is empty.\")\n        return None\n    max_key = max(d, key=d.get)\n    return max_key, d[max_key]"}, {"role": "assistant", "content": "def test_most_frequent_in_dict():\n    assert most_frequent_in_dict(None) is None\n    assert most_frequent_in_dict({\"a\": 1, \"b\": 2, \"c\": 2}) == (\"b\", 2)\n    assert most_frequent_in_dict({\"x\": 10, \"y\": 15, \"z\": 10}) == (\"y\", 15)\n    assert most_frequent_in_dict({\"apple\": 3, \"banana\": 2, \"cherry\": 5}) == (\"cherry\", 5)\n    assert most_frequent_in_dict({\"a\": 1, \"b\": 2, \"c\": 2, \"d\": 3}) == (\"d\", 3)\n    assert most_frequent_in_dict({\"a\": 0, \"b\": 0, \"c\": 0}) == (\"a\", 0)\n    assert most_frequent_in_dict({\"a\": 4}) == (\"a\", 4)\n    assert most_frequent_in_dict({}) is None\n    assert most_frequent_in_dict({\"x\": 5, \"y\": 5, \"z\": 5}) == (\"x\", 5)\n    assert most_frequent_in_dict({\"p\": 10, \"q\": 12}) == (\"q\", 12)\n    assert most_frequent_in_dict({\"cat\": 2, \"dog\": 3, \"rabbit\": 1}) == (\"dog\", 3)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_dicts(d1, d2):\n    merged = d1.copy()\n    for key, value in d2.items():\n        if key in merged:\n            merged[key] += value\n        else:\n            merged[key] = value\n    return merged"}, {"role": "assistant", "content": "def test_merge_dicts():\n    assert merge_dicts({\"a\": 1, \"b\": 2}, {\"b\": 3, \"c\": 4}) == {\"a\": 1, \"b\": 5, \"c\": 4}\n    assert merge_dicts({\"x\": 5, \"y\": 6}, {\"y\": 7, \"z\": 8}) == {\"x\": 5, \"y\": 13, \"z\": 8}\n    assert merge_dicts({\"a\": 2}, {\"a\": 3}) == {\"a\": 5}\n    assert merge_dicts({\"apple\": 2, \"banana\": 3}, {\"apple\": 4, \"cherry\": 5}) == {\"apple\": 6, \"banana\": 3, \"cherry\": 5}\n    assert merge_dicts({\"a\": 1, \"b\": 2}, {}) == {\"a\": 1, \"b\": 2}\n    assert merge_dicts({}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}\n    assert merge_dicts({\"x\": 1}, {\"x\": 1}) == {\"x\": 2}\n    assert merge_dicts({\"key1\": 10}, {\"key2\": 20}) == {\"key1\": 10, \"key2\": 20}\n    assert merge_dicts({}, {}) == {}\n    assert merge_dicts({\"a\": 1}, {\"b\": 2, \"a\": 3}) == {\"a\": 4, \"b\": 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_even_odd(lst):\n    count = {\"even\": 0, \"odd\": 0}\n    for num in lst:\n        if num % 2 == 0:\n            count[\"even\"] += 1\n        else:\n            count[\"odd\"] += 1\n    return count"}, {"role": "assistant", "content": "def test_count_even_odd():\n    assert count_even_odd([1, 2, 3, 4, 5]) == {\"even\": 2, \"odd\": 3}\n    assert count_even_odd([2, 4, 6]) == {\"even\": 3, \"odd\": 0}\n    assert count_even_odd([1, 3, 5]) == {\"even\": 0, \"odd\": 3}\n    assert count_even_odd([0, -2, -4, 1, 3]) == {\"even\": 3, \"odd\": 2}\n    assert count_even_odd([]) == {\"even\": 0, \"odd\": 0}\n    assert count_even_odd([2, 3, 5, 7]) == {\"even\": 1, \"odd\": 3}\n    assert count_even_odd([0, 2, 4, 6]) == {\"even\": 4, \"odd\": 0}\n    assert count_even_odd([10, 11, 12, 13, 14]) == {\"even\": 3, \"odd\": 2}\n    assert count_even_odd([1, 2, 3, 5, 6]) == {\"even\": 2, \"odd\": 3}\n    assert count_even_odd([1, 1, 1, 1]) == {\"even\": 0, \"odd\": 4}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef min_key_in_dict(d):\n    if not d:\n        print(\"Dictionary is empty.\")\n        return None\n    return min(d, key=d.get)"}, {"role": "assistant", "content": "def test_min_key_in_dict():\n    assert min_key_in_dict({\"a\": 1, \"b\": 2, \"c\": 3}) == \"a\"\n    assert min_key_in_dict({\"apple\": 10, \"banana\": 5, \"cherry\": 15}) == \"banana\"\n    assert min_key_in_dict({\"x\": 1, \"y\": 0, \"z\": 2}) == \"y\"\n    assert min_key_in_dict({\"a\": 100, \"b\": 50, \"c\": 150}) == \"b\"\n    assert min_key_in_dict({}) is None\n    assert min_key_in_dict({\"cat\": 5, \"dog\": 3, \"rabbit\": 8}) == \"dog\"\n    assert min_key_in_dict({\"p\": 0, \"q\": 1}) == \"p\"\n    assert min_key_in_dict({\"a\": -1, \"b\": 2}) == \"a\"\n    assert min_key_in_dict({\"a\": -1, \"b\": -2}) == \"b\"\n    assert min_key_in_dict({\"x\": 4, \"y\": 1, \"z\": 4}) == \"y\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef list_to_dict(lst):\n    result = {}\n    for index, value in enumerate(lst):\n        result[index] = value\n    return result"}, {"role": "assistant", "content": "def test_list_to_dict():\n    assert list_to_dict([1, 2, 3]) == {0: 1, 1: 2, 2: 3}\n    assert list_to_dict([\"a\", \"b\", \"c\"]) == {0: \"a\", 1: \"b\", 2: \"c\"}\n    assert list_to_dict([True, False, True]) == {0: True, 1: False, 2: True}\n    assert list_to_dict([3.14, 2.71]) == {0: 3.14, 1: 2.71}\n    assert list_to_dict([]) == {}\n    assert list_to_dict([\"apple\", \"banana\", \"cherry\"]) == {0: \"apple\", 1: \"banana\", 2: \"cherry\"}\n    assert list_to_dict([10, 20, 30, 40]) == {0: 10, 1: 20, 2: 30, 3: 40}\n    assert list_to_dict([1]) == {0: 1}\n    assert list_to_dict([0, 0, 0]) == {0: 0, 1: 0, 2: 0}\n    assert list_to_dict([\"one\", \"two\", \"three\"]) == {0: \"one\", 1: \"two\", 2: \"three\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef check_and_square(s):\n    try:\n        num = float(s)\n        return num ** 2\n    except ValueError:\n        print(f\"'{s}' is not a valid number.\")\n        return None"}, {"role": "assistant", "content": "def test_check_and_square():\n    assert check_and_square(\"4\") == 16\n    assert check_and_square(\"-3\") == 9\n    assert check_and_square(\"2.5\") == 6.25\n    assert check_and_square(\"abc\") is None\n    assert check_and_square(\"0\") == 0\n    assert check_and_square(\"100\") == 10000\n    assert check_and_square(\"1.5\") == 2.25\n    assert check_and_square(\"-2\") == 4\n    assert check_and_square(\"1000\") == 1000000\n    assert check_and_square(\"\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_tuples(t1, t2):\n    return tuple(sorted(set(t1 + t2)))"}, {"role": "assistant", "content": "def test_merge_tuples():\n    assert merge_tuples((1, 2), (2, 3)) == (1, 2, 3)\n    assert merge_tuples((\"a\", \"b\"), (\"b\", \"c\")) == (\"a\", \"b\", \"c\")\n    assert merge_tuples((1, 2, 3), (4, 5)) == (1, 2, 3, 4, 5)\n    assert merge_tuples((1, 1), (1, 2)) == (1, 2)\n    assert merge_tuples((\"x\", \"y\"), (\"z\", \"y\")) == (\"x\", \"y\", \"z\")\n    assert merge_tuples((1, 1, 2), (2, 3)) == (1, 2, 3)\n    assert merge_tuples((5, 5), (5, 6)) == (5, 6)\n    assert merge_tuples((), ()) == ()\n    assert merge_tuples((\"a\", \"b\"), (\"a\", \"c\", \"d\")) == (\"a\", \"b\", \"c\", \"d\")\n    assert merge_tuples((\"apple\", \"banana\"), (\"orange\", \"banana\")) == (\"apple\", \"banana\", \"orange\")"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_numbers(lst):\n    unique = set()\n    for num in lst:\n        unique.add(num)\n    return sorted(list(unique))"}, {"role": "assistant", "content": "def test_unique_numbers():\n    assert unique_numbers([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    assert unique_numbers([10, 10, 10]) == [10]\n    assert unique_numbers([5, 7, 8, 5, 8]) == [5, 7, 8]\n    assert unique_numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert unique_numbers([0, 0, 1]) == [0, 1]\n    assert unique_numbers([100, 200, 100, 300]) == [100, 200, 300]\n    assert unique_numbers([1, 3, 2, 4, 3]) == [1, 2, 3, 4]\n    assert unique_numbers([5, 6, 7, 8]) == [5, 6, 7, 8]\n    assert unique_numbers([]) == []\n    assert unique_numbers([1, 1, 1, 1]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_frequency_dict(lst):\n    frequency_dict = {}\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"}, {"role": "assistant", "content": "def test_create_frequency_dict():\n    assert create_frequency_dict([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\n    assert create_frequency_dict([\"apple\", \"banana\", \"apple\"]) == {\"apple\": 2, \"banana\": 1}\n    assert create_frequency_dict([1, 1, 2, 2, 3]) == {1: 2, 2: 2, 3: 1}\n    assert create_frequency_dict([]) == {}\n    assert create_frequency_dict([\"a\", \"a\", \"b\", \"c\", \"b\"]) == {\"a\": 2, \"b\": 2, \"c\": 1}\n    assert create_frequency_dict([5, 5, 5]) == {5: 3}\n    assert create_frequency_dict([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n    assert create_frequency_dict([1, 1, 1, 1]) == {1: 4}\n    assert create_frequency_dict([9, 8, 7, 6]) == {9: 1, 8: 1, 7: 1, 6: 1}\n    assert create_frequency_dict([1, 1, 1]) == {1: 3}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef difference_of_lists(lst1, lst2):\n    result = []\n    for item in lst1:\n        if item not in lst2:\n            result.append(item)\n    for item in lst2:\n        if item not in lst1:\n            result.append(item)\n    return result"}, {"role": "assistant", "content": "def test_difference_of_lists():\n    assert difference_of_lists([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]\n    assert difference_of_lists([1, 2], [2, 3]) == [1, 3]\n    assert difference_of_lists([1, 2, 3], [1, 2, 3]) == []\n    assert difference_of_lists([], [1, 2]) == [1, 2]\n    assert difference_of_lists([5, 6, 7], [7, 8, 9]) == [5, 6, 8, 9]\n    assert difference_of_lists([1], [1]) == []\n    assert difference_of_lists([1, 2], [3, 4]) == [1, 2, 3, 4]\n    assert difference_of_lists([1, 3, 5], [2, 4, 6]) == [1, 3, 5, 2, 4, 6]\n    assert difference_of_lists([1, 2, 3], []) == [1, 2, 3]\n    assert difference_of_lists([], []) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_collection(lst, collection):\n    result = []\n    for item in lst:\n        if item in collection:\n            result.append(item)\n    if not result:\n        print(\"No elements found in the collection.\")\n    return result"}, {"role": "assistant", "content": "def test_find_in_collection():\n    assert find_in_collection([1, 2, 3], {3, 4, 5}) == [3]\n    assert find_in_collection([1, 2, 3], {4, 5, 6}) == []\n    assert find_in_collection([\"a\", \"b\", \"c\"], {\"b\", \"c\", \"d\"}) == [\"b\", \"c\"]\n    assert find_in_collection([1, 2], {1, 2, 3}) == [1, 2]\n    assert find_in_collection([5, 6, 7], {7, 8}) == [7]\n    assert find_in_collection([], {1, 2, 3}) == []\n    assert find_in_collection([1, 2], set()) == []\n    assert find_in_collection([1, 2, 3], {3, 4, 5}) == [3]\n    assert find_in_collection([\"apple\", \"banana\"], {\"banana\", \"orange\"}) == [\"banana\"]\n    assert find_in_collection([10, 20], {5, 10, 15}) == [10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_duplicates(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    total = 0\n    for key, value in count_dict.items():\n        if value > 1:\n            total += key\n    if total == 0:\n        print(\"No duplicates found.\")\n    return total"}, {"role": "assistant", "content": "def test_sum_of_duplicates():\n    assert sum_of_duplicates([1, 2, 2, 3, 4, 4]) == 6\n    assert sum_of_duplicates([5, 5, 5, 5]) == 5\n    assert sum_of_duplicates([1, 1, 1]) == 1\n    assert sum_of_duplicates([10, 20, 30]) == 0\n    assert sum_of_duplicates([1, 2, 3, 4, 5]) == 0\n    assert sum_of_duplicates([1, 2, 2, 3, 3, 3, 4]) == 5\n    assert sum_of_duplicates([7, 8, 9, 9, 9]) == 9\n    assert sum_of_duplicates([10, 10, 10]) == 10\n    assert sum_of_duplicates([1, 2, 2, 3, 3]) == 5\n    assert sum_of_duplicates([1, 1, 1, 1, 1]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_in_first(lst1, lst2):\n    unique_elements = []\n    for item in lst1:\n        if item not in lst2:\n            unique_elements.append(item)\n    if not unique_elements:\n        print(\"No unique elements found in the first list.\")\n    return unique_elements"}, {"role": "assistant", "content": "def test_unique_in_first():\n    assert unique_in_first([1, 2, 3], [3, 4, 5]) == [1, 2]\n    assert unique_in_first([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\n    assert unique_in_first([5, 6, 7], [7, 8, 9]) == [5, 6]\n    assert unique_in_first([1, 2], [1, 2]) == []\n    assert unique_in_first([1, 2, 3], []) == [1, 2, 3]\n    assert unique_in_first([], [1, 2, 3]) == []\n    assert unique_in_first([10, 20, 30], [20, 40, 60]) == [10, 30]\n    assert unique_in_first([1, 1, 2], [1, 3]) == [2]\n    assert unique_in_first([100, 200], [100, 300]) == [200]\n    assert unique_in_first([1, 2, 3], [3]) == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef lcm_1(a, b):\n    if a == 0 or b == 0:\n        print(\"LCM is undefined for 0.\")\n        return None\n\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    return abs(a * b) // gcd(a, b)"}, {"role": "assistant", "content": "def test_lcm_1():\n    assert lcm_1(4, 5) == 20\n    assert lcm_1(0, 5) is None\n    assert lcm_1(6, 8) == 24\n    assert lcm_1(9, 12) == 36\n    assert lcm_1(3, 7) == 21\n    assert lcm_1(10, 0) is None\n    assert lcm_1(13, 17) == 221\n    assert lcm_1(15, 25) == 75\n    assert lcm_1(1, 1) == 1\n    assert lcm_1(10, 20) == 20"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_dict_by_value(d, threshold):\n    result = {}\n    for key, value in d.items():\n        if value > threshold:\n            result[key] = value\n    if not result:\n        print(\"No elements above the threshold.\")\n    return result"}, {"role": "assistant", "content": "def test_filter_dict_by_value():\n    assert filter_dict_by_value({\"apple\": 100, \"banana\": 50}, 1000) == {}\n    assert filter_dict_by_value({\"a\": 5, \"b\": 10, \"c\": 2}, 4) == {\"a\": 5, \"b\": 10}\n    assert filter_dict_by_value({\"apple\": 5, \"banana\": 3}, 4) == {\"apple\": 5}\n    assert filter_dict_by_value({\"x\": 1, \"y\": 2, \"z\": 3}, 2) == {\"z\": 3}\n    assert filter_dict_by_value({\"a\": 1, \"b\": 2}, 2) == {}\n    assert filter_dict_by_value({}, 2) == {}\n    assert filter_dict_by_value({\"apple\": 10, \"banana\": 20}, 15) == {\"banana\": 20}\n    assert filter_dict_by_value({\"a\": 1, \"b\": 1, \"c\": 1}, 1) == {}\n    assert filter_dict_by_value({\"cat\": 5, \"dog\": 3}, 4) == {\"cat\": 5}\n    assert filter_dict_by_value({\"cat\": 1, \"dog\": 0}, 0) == {\"cat\": 1}\n    assert filter_dict_by_value({\"apple\": 100, \"banana\": 50}, 60) == {\"apple\": 100}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_dict(d):\n    reversed_dict = {}\n    for key, value in d.items():\n        if value in reversed_dict:\n            print(f\"Duplicate value {value} found, skipping.\")\n        else:\n            reversed_dict[value] = key\n    return reversed_dict"}, {"role": "assistant", "content": "def test_reverse_dict():\n    assert reverse_dict({\"a\": 1, \"b\": 2}) == {1: \"a\", 2: \"b\"}\n    assert reverse_dict({\"x\": 10, \"y\": 20}) == {10: \"x\", 20: \"y\"}\n    assert reverse_dict({\"apple\": 100, \"banana\": 200}) == {100: \"apple\", 200: \"banana\"}\n    assert reverse_dict({\"cat\": 5, \"dog\": 3}) == {5: \"cat\", 3: \"dog\"}\n    assert reverse_dict({\"one\": 1, \"two\": 2}) == {1: \"one\", 2: \"two\"}\n    assert reverse_dict({\"x\": 1, \"y\": 1}) == {1: \"x\"}\n    assert reverse_dict({\"key1\": \"value1\", \"key2\": \"value2\"}) == {\"value1\": \"key1\", \"value2\": \"key2\"}\n    assert reverse_dict({}) == {}\n    assert reverse_dict({\"p\": 0, \"q\": 0}) == {0: \"p\"}\n    assert reverse_dict({\"a\": 10, \"b\": 10}) == {10: \"a\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiples_from_list(lst1, lst2):\n    multiples = []\n    for num in lst1:\n        for divisor in lst2:\n            if num % divisor == 0:\n                multiples.append(num)\n                break\n    if not multiples:\n        print(\"No numbers are divisible by elements from the second list.\")\n    return multiples"}, {"role": "assistant", "content": "def test_multiples_from_list():\n    assert multiples_from_list([10, 20, 30], [2, 5]) == [10, 20, 30]\n    assert multiples_from_list([11, 22, 33], [3, 7]) == [33]\n    assert multiples_from_list([1, 2, 3], [4, 5]) == []\n    assert multiples_from_list([6, 8, 10], [2]) == [6, 8, 10]\n    assert multiples_from_list([9, 15, 25], [3, 5]) == [9, 15, 25]\n    assert multiples_from_list([17, 19, 23], [4, 8]) == []\n    assert multiples_from_list([12, 14, 18], [3, 6]) == [12, 18]\n    assert multiples_from_list([5, 10, 20], [1]) == [5, 10, 20]\n    assert multiples_from_list([], [2, 3]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef case_insensitive_char_frequency(s):\n    freq = {}\n    for char in s.lower():\n        if char.isalpha():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    if not freq:\n        print(\"No alphabetical characters found.\")\n    return freq"}, {"role": "assistant", "content": "def test_case_insensitive_char_frequency():\n    assert case_insensitive_char_frequency(\"Hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    assert case_insensitive_char_frequency(\"AaBbCc\") == {'a': 2, 'b': 2, 'c': 2}\n    assert case_insensitive_char_frequency(\"Python!\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert case_insensitive_char_frequency(\"Nope\") == {'n': 1, 'o': 1, 'p': 1, 'e': 1}\n    assert case_insensitive_char_frequency(\"MixedCase\") == {'m': 1, 'i': 1, 'x': 1, 'e': 2, 'd': 1, 'c': 1, 'a': 1, 's': 1}\n    assert case_insensitive_char_frequency(\"12345\") == {}\n    assert case_insensitive_char_frequency(\"\") == {}\n    assert case_insensitive_char_frequency(\"A\") == {'a': 1}\n    assert case_insensitive_char_frequency(\"ABaB\") == {'a': 2, 'b': 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_unique_with_frequency(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}, {"role": "assistant", "content": "def test_count_unique_with_frequency():\n    assert count_unique_with_frequency([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\n    assert count_unique_with_frequency([\"a\", \"b\", \"a\", \"c\", \"c\", \"c\"]) == {\"a\": 2, \"b\": 1, \"c\": 3}\n    assert count_unique_with_frequency([5, 5, 5, 5, 5]) == {5: 5}\n    assert count_unique_with_frequency([]) == {}\n    assert count_unique_with_frequency([1, 2, 3]) == {1: 1, 2: 1, 3: 1}\n    assert count_unique_with_frequency([0, 0, 1, 1, 1]) == {0: 2, 1: 3}\n    assert count_unique_with_frequency([\"x\", \"y\", \"z\"]) == {\"x\": 1, \"y\": 1, \"z\": 1}\n    assert count_unique_with_frequency([1, \"1\", 2, \"2\", 2]) == {1: 1, \"1\": 1, 2: 2, \"2\": 1}\n    assert count_unique_with_frequency([3, 3, 3]) == {3: 3}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_consecutive_chars(s):\n    if not s:\n        print(\"Empty string provided.\")\n        return {}\n    count = {}\n    current_char = s[0]\n    current_count = 1\n    for char in s[1:]:\n        if char == current_char:\n            current_count += 1\n        else:\n            if current_char in count:\n                count[current_char] += current_count\n            else:\n                count[current_char] = current_count\n            current_char = char\n            current_count = 1\n    if current_char in count:\n        count[current_char] += current_count\n    else:\n        count[current_char] = current_count\n    return count"}, {"role": "assistant", "content": "def test_count_consecutive_chars():\n    assert count_consecutive_chars(\"aaabbcc\") == {'a': 3, 'b': 2, 'c': 2}\n    assert count_consecutive_chars(\"abcd\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\n    assert count_consecutive_chars(\"aaAAa\") == {'A': 2, 'a': 3}\n    assert count_consecutive_chars(\"\") == {}\n    assert count_consecutive_chars(\"x\") == {'x': 1}\n    assert count_consecutive_chars(\"zzz\") == {'z': 3}\n    assert count_consecutive_chars(\"aabbccdd\") == {'a': 2, 'b': 2, 'c': 2, 'd': 2}\n    assert count_consecutive_chars(\"aaaAAA\") == {'a': 3, 'A': 3}\n    assert count_consecutive_chars(\"hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    assert count_consecutive_chars(\"aaraaraarraarrr\") == {'a': 8, 'r': 7}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_in_set(s, d):\n    result = []\n    for item in s:\n        if item in d:\n            result.append(item)\n    if not result:\n        print(\"No elements from the set found in the dictionary keys.\")\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_keys_in_set():\n    assert find_keys_in_set({1, 2, 3}, {1: \"one\", 2: \"two\", 4: \"four\"}) == [1, 2]\n    assert find_keys_in_set({\"a\", \"b\", \"c\"}, {\"a\": \"alpha\", \"b\": \"beta\"}) == [\"a\", \"b\"]\n    assert find_keys_in_set({5, 6, 7}, {8: \"eight\", 9: \"nine\"}) == []\n    assert find_keys_in_set(set(), {\"a\": 1, \"b\": 2}) == []\n    assert find_keys_in_set({1, 2, 3}, {}) == []\n    assert find_keys_in_set({1, 2}, {1: \"one\", 2: \"two\"}) == [1, 2]\n    assert find_keys_in_set({\"x\"}, {\"x\": \"ex\"}) == [\"x\"]\n    assert find_keys_in_set({\"y\"}, {\"z\": \"zee\"}) == []\n    assert find_keys_in_set({\"hello\", \"world\"}, {\"hello\": \"greeting\", \"earth\": \"planet\"}) == [\"hello\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_prime_numbers(lst):\n    primes = []\n    for num in lst:\n        if num < 2:\n            continue\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}, {"role": "assistant", "content": "def test_find_prime_numbers():\n    assert find_prime_numbers([2, 3, 4, 5, 6]) == [2, 3, 5]\n    assert find_prime_numbers([10, 11, 12, 13, 14]) == [11, 13]\n    assert find_prime_numbers([1, 2]) == [2]\n    assert find_prime_numbers([15, 16, 17, 18]) == [17]\n    assert find_prime_numbers([]) == []\n    assert find_prime_numbers([0, 1]) == []\n    assert find_prime_numbers([19, 20, 21, 22]) == [19]\n    assert find_prime_numbers([23, 24, 25, 26]) == [23]\n    assert find_prime_numbers([2, 2, 3, 3]) == [2, 2, 3, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef split_digits_and_others(s):\n    digits = []\n    others = []\n    for char in s:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            others.append(char)\n    return digits, others"}, {"role": "assistant", "content": "def test_split_digits_and_others():\n    assert split_digits_and_others(\"123abc\") == (['1', '2', '3'], ['a', 'b', 'c'])\n    assert split_digits_and_others(\"1a2b3c\") == (['1', '2', '3'], ['a', 'b', 'c'])\n    assert split_digits_and_others(\"\") == ([], [])\n    assert split_digits_and_others(\"123\") == (['1', '2', '3'], [])\n    assert split_digits_and_others(\"abc\") == ([], ['a', 'b', 'c'])\n    assert split_digits_and_others(\"1!2@3#\") == (['1', '2', '3'], ['!', '@', '#'])\n    assert split_digits_and_others(\"a1b2c3\") == (['1', '2', '3'], ['a', 'b', 'c'])\n    assert split_digits_and_others(\"456def\") == (['4', '5', '6'], ['d', 'e', 'f'])\n    assert split_digits_and_others(\"xyz789\") == (['7', '8', '9'], ['x', 'y', 'z'])"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef min_max_tuple(lst):\n    if not lst:\n        print(\"List is empty.\")\n        return None\n    return min(lst), max(lst)"}, {"role": "assistant", "content": "def test_min_max_tuple():\n    assert min_max_tuple([1, 2, 3]) == (1, 3)\n    assert min_max_tuple([10, 5, 15]) == (5, 15)\n    assert min_max_tuple([0, -1, 1]) == (-1, 1)\n    assert min_max_tuple([-10, -5, -1]) == (-10, -1)\n    assert min_max_tuple([1]) == (1, 1)\n    assert min_max_tuple([]) is None\n    assert min_max_tuple([100, 200, 300]) == (100, 300)\n    assert min_max_tuple([-100, 0, 100]) == (-100, 100)\n    assert min_max_tuple([7, 7, 7]) == (7, 7)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_keys_with_different_values(d1, d2):\n    common_keys = set(d1.keys()) & set(d2.keys())\n    result = []\n    for key in common_keys:\n        if d1[key] != d2[key]:\n            result.append(key)\n    if not result:\n        print(\"No keys with different values found.\")\n    return result"}, {"role": "assistant", "content": "def test_find_common_keys_with_different_values():\n    assert find_common_keys_with_different_values({'a': 1, 'b': 2}, {'a': 2, 'b': 2}) == ['a']\n    assert find_common_keys_with_different_values({'x': 1, 'y': 2}, {'y': 3, 'z': 4}) == ['y']\n    assert find_common_keys_with_different_values({'k': 10, 'l': 20}, {'m': 30, 'n': 40}) == []\n    assert find_common_keys_with_different_values({}, {}) == []\n    assert find_common_keys_with_different_values({'a': 1, 'b': 1}, {'a': 1, 'b': 2}) == ['b']\n    assert find_common_keys_with_different_values({'key1': 100, 'key2': 200}, {'key1': 300, 'key2': 200}) == ['key1']\n    assert find_common_keys_with_different_values({'k1': 1, 'k2': 2}, {'k2': 3, 'k3': 4}) == ['k2']\n    assert find_common_keys_with_different_values({'a': 1}, {'a': 2}) == ['a']\n    assert find_common_keys_with_different_values({'x': 5}, {'y': 5}) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef string_to_numbers(s):\n    try:\n        return [int(x) for x in s.split()]\n    except ValueError:\n        print(\"String contains non-numeric values.\")\n        return []"}, {"role": "assistant", "content": "def test_string_to_numbers():\n    assert string_to_numbers(\"1 2 3\") == [1, 2, 3]\n    assert string_to_numbers(\"10 20 30\") == [10, 20, 30]\n    assert string_to_numbers(\"4 5 6\") == [4, 5, 6]\n    assert string_to_numbers(\"a b c\") == []\n    assert string_to_numbers(\"123 abc 456\") == []\n    assert string_to_numbers(\"\") == []\n    assert string_to_numbers(\"7 8 9\") == [7, 8, 9]\n    assert string_to_numbers(\"0\") == [0]\n    assert string_to_numbers(\"0 1 2\") == [0, 1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_two_in_string(s):\n    numbers = []\n    for word in s.split():\n        try:\n            num = int(word)\n            if (num & (num - 1)) == 0 and num > 0:\n                numbers.append(num)\n        except ValueError:\n            continue\n    return numbers"}, {"role": "assistant", "content": "def test_find_powers_of_two_in_string():\n    assert find_powers_of_two_in_string(\"1 2 3 4 5\") == [1, 2, 4]\n    assert find_powers_of_two_in_string(\"16 32 64\") == [16, 32, 64]\n    assert find_powers_of_two_in_string(\"7 9 11\") == []\n    assert find_powers_of_two_in_string(\"0 128 256\") == [128, 256]\n    assert find_powers_of_two_in_string(\"2 4 8 16 32\") == [2, 4, 8, 16, 32]\n    assert find_powers_of_two_in_string(\"1024\") == [1024]\n    assert find_powers_of_two_in_string(\"non-numeric 2 words\") == [2]\n    assert find_powers_of_two_in_string(\"\") == []\n    assert find_powers_of_two_in_string(\"3 6 12\") == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_palindromes(lst):\n    palindromes = []\n    for word in lst:\n        if word == word[::-1]:\n            palindromes.append(word)\n    return palindromes"}, {"role": "assistant", "content": "def test_find_palindromes():\n    assert find_palindromes([\"radar\", \"hello\", \"level\"]) == [\"radar\", \"level\"]\n    assert find_palindromes([\"world\", \"noon\", \"civic\"]) == [\"noon\", \"civic\"]\n    assert find_palindromes([\"abc\", \"def\", \"ghi\"]) == []\n    assert find_palindromes([\"madam\", \"racecar\", \"apple\"]) == [\"madam\", \"racecar\"]\n    assert find_palindromes([]) == []\n    assert find_palindromes([\"kayak\", \"refer\"]) == [\"kayak\", \"refer\"]\n    assert find_palindromes([\"\", \"a\", \"bb\"]) == [\"\", \"a\", \"bb\"]\n    assert find_palindromes([\"rotor\", \"deed\"]) == [\"rotor\", \"deed\"]\n    assert find_palindromes([\"not\", \"a\", \"palindrome\"]) == ['a']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_lists_no_duplicates(lst1, lst2):\n    result = lst1.copy()\n    for item in lst2:\n        if item not in result:\n            result.append(item)\n        else:\n            print(f\"Duplicate item found: {item}\")\n    return result"}, {"role": "assistant", "content": "def test_merge_lists_no_duplicates():\n    assert merge_lists_no_duplicates([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert merge_lists_no_duplicates([\"a\", \"b\"], [\"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    assert merge_lists_no_duplicates([], [1, 2, 3]) == [1, 2, 3]\n    assert merge_lists_no_duplicates([1, 2, 3], []) == [1, 2, 3]\n    assert merge_lists_no_duplicates([1], [1, 2, 3]) == [1, 2, 3]\n    assert merge_lists_no_duplicates([\"x\", \"y\"], [\"y\", \"z\"]) == [\"x\", \"y\", \"z\"]\n    assert merge_lists_no_duplicates([1, 1, 1], [1, 1, 1]) == [1, 1, 1]\n    assert merge_lists_no_duplicates([4, 5, 6], [7, 8, 9]) == [4, 5, 6, 7, 8, 9]\n    assert merge_lists_no_duplicates([10, 20], [20, 30, 40]) == [10, 20, 30, 40]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisible_by_2_not_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 3 != 0:\n            result.append(num)\n    if not result:\n        print(\"No numbers divisible by 2 but not by 3 found.\")\n    return result"}, {"role": "assistant", "content": "def test_divisible_by_2_not_3():\n    assert divisible_by_2_not_3([2, 4, 6, 8]) == [2, 4, 8]\n    assert divisible_by_2_not_3([12, 15, 20]) == [20]\n    assert divisible_by_2_not_3([3, 5, 9]) == []\n    assert divisible_by_2_not_3([18, 21, 24]) == []\n    assert divisible_by_2_not_3([1, 2, 3]) == [2]\n    assert divisible_by_2_not_3([10, 14, 22]) == [10, 14, 22]\n    assert divisible_by_2_not_3([0, 6, 12]) == []\n    assert divisible_by_2_not_3([7, 8, 9]) == [8]\n    assert divisible_by_2_not_3([]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_numbers_in_string(s):\n    result = []\n    current_num = ''\n    for char in s:\n        if char.isdigit():\n            current_num += char\n        elif current_num:\n            num = int(current_num)\n            if num % 2 == 0:\n                result.append(num)\n            current_num = ''\n    if current_num:\n        num = int(current_num)\n        if num % 2 == 0:\n            result.append(num)\n    return result"}, {"role": "assistant", "content": "def test_find_even_numbers_in_string():\n    assert find_even_numbers_in_string(\"12 34 56\") == [12, 34, 56]\n    assert find_even_numbers_in_string(\"135 246 789\") == [246]\n    assert find_even_numbers_in_string(\"11 33 55\") == []\n    assert find_even_numbers_in_string(\"222 333 444\") == [222, 444]\n    assert find_even_numbers_in_string(\"2 4 6 8\") == [2, 4, 6, 8]\n    assert find_even_numbers_in_string(\"9\") == []\n    assert find_even_numbers_in_string(\"10 20 30\") == [10, 20, 30]\n    assert find_even_numbers_in_string(\"\") == []\n    assert find_even_numbers_in_string(\"100 200\") == [100, 200]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_non_prime_numbers(lst):\n    non_primes = []\n    for num in lst:\n        if num < 2:\n            non_primes.append(num)\n        else:\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    non_primes.append(num)\n                    break\n    return non_primes"}, {"role": "assistant", "content": "def test_find_non_prime_numbers():\n    assert find_non_prime_numbers([1, 2, 3, 4, 5]) == [1, 4]\n    assert find_non_prime_numbers([10, 11, 12, 13]) == [10, 12]\n    assert find_non_prime_numbers([17, 19, 21, 23]) == [21]\n    assert find_non_prime_numbers([24, 25, 26, 27]) == [24, 25, 26, 27]\n    assert find_non_prime_numbers([29, 30, 31]) == [30]\n    assert find_non_prime_numbers([2, 3, 5]) == []\n    assert find_non_prime_numbers([4, 6, 8]) == [4, 6, 8]\n    assert find_non_prime_numbers([]) == []\n    assert find_non_prime_numbers([0, 1, 2]) == [0, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_chars_ignore_spaces(s):\n    unique_chars = {}\n    for char in s:\n        if char != ' ':\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    return list(unique_chars.keys())"}, {"role": "assistant", "content": "def test_unique_chars_ignore_spaces():\n    assert unique_chars_ignore_spaces(\"hello world\") == ['h', 'e', 'l', 'o', 'w', 'r', 'd']\n    assert unique_chars_ignore_spaces(\"a b c\") == ['a', 'b', 'c']\n    assert unique_chars_ignore_spaces(\"abc abc\") == ['a', 'b', 'c']\n    assert unique_chars_ignore_spaces(\"  \") == []\n    assert unique_chars_ignore_spaces(\"unique characters\") == ['u', 'n', 'i', 'q', 'e', 'c', 'h', 'a', 'r', 't', 's']\n    assert unique_chars_ignore_spaces(\"xyz 123\") == ['x', 'y', 'z', '1', '2', '3']\n    assert unique_chars_ignore_spaces(\"AAA\") == ['A']\n    assert unique_chars_ignore_spaces(\"alpha beta\") == ['a', 'l', 'p', 'h', 'b', 'e', 't']\n    assert unique_chars_ignore_spaces(\"ignore spaces\") == ['i', 'g', 'n', 'o', 'r', 'e', 's', 'p', 'a', 'c']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_ignore_punctuation(s):\n    word_count = 0\n    current_word = ''\n    for char in s:\n        if char.isalnum():\n            current_word += char\n        elif current_word:\n            word_count += 1\n            current_word = ''\n    if current_word:\n        word_count += 1\n    return word_count"}, {"role": "assistant", "content": "def test_count_words_ignore_punctuation():\n    assert count_words_ignore_punctuation(\"hello world!\") == 2\n    assert count_words_ignore_punctuation(\"a b c\") == 3\n    assert count_words_ignore_punctuation(\"this, is a test.\") == 4\n    assert count_words_ignore_punctuation(\"...\") == 0\n    assert count_words_ignore_punctuation(\"count these words!\") == 3\n    assert count_words_ignore_punctuation(\"punctuation, should be ignored.\") == 4\n    assert count_words_ignore_punctuation(\"\") == 0\n    assert count_words_ignore_punctuation(\"one two three\") == 3\n    assert count_words_ignore_punctuation(\"   \") == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares(lst):\n    squares = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num:\n            squares.append(num)\n    return squares"}, {"role": "assistant", "content": "def test_find_squares():\n    assert find_squares([1, 4, 9, 16, 25]) == [1, 4, 9, 16, 25]\n    assert find_squares([2, 3, 5, 6, 7]) == []\n    assert find_squares([36, 49, 64, 81]) == [36, 49, 64, 81]\n    assert find_squares([10, 20, 30]) == []\n    assert find_squares([100, 121, 144]) == [100, 121, 144]\n    assert find_squares([]) == []\n    assert find_squares([0, 1, 2, 3]) == [0, 1]\n    assert find_squares([50, 60, 70, 80]) == []\n    assert find_squares([9, 25, 36, 49]) == [9, 25, 36, 49]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef word_frequency_in_string(s):\n    word_count = {}\n    current_word = ''\n    for char in s:\n        if char.isalnum():\n            current_word += char\n        elif current_word:\n            if current_word in word_count:\n                word_count[current_word] += 1\n            else:\n                word_count[current_word] = 1\n            current_word = ''\n    if current_word:\n        if current_word in word_count:\n            word_count[current_word] += 1\n        else:\n            word_count[current_word] = 1\n    return word_count"}, {"role": "assistant", "content": "def test_word_frequency_in_string():\n    assert word_frequency_in_string(\"hello world\") == {'hello': 1, 'world': 1}\n    assert word_frequency_in_string(\"hello hello world\") == {'hello': 2, 'world': 1}\n    assert word_frequency_in_string(\"test test test\") == {'test': 3}\n    assert word_frequency_in_string(\"a b a b c\") == {'a': 2, 'b': 2, 'c': 1}\n    assert word_frequency_in_string(\"one two three two one\") == {'one': 2, 'two': 2, 'three': 1}\n    assert word_frequency_in_string(\"punctuation should be ignored\") == {'punctuation': 1, 'should': 1, 'be': 1, 'ignored': 1}\n    assert word_frequency_in_string(\"the quick brown fox\") == {'the': 1, 'quick': 1, 'brown': 1, 'fox': 1}\n    assert word_frequency_in_string(\"hello world!\") == {'hello': 1, 'world': 1}\n    assert word_frequency_in_string(\"repeat repeat repeat repeat\") == {'repeat': 4}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_squares(lst):\n    def is_sum_of_two_squares(n):\n        for i in range(1, int(n ** 0.5) + 1):\n            if (n - i ** 2) ** 0.5 == int((n - i ** 2) ** 0.5):\n                return True\n        return False\n\n    result = []\n    for num in lst:\n        if is_sum_of_two_squares(num):\n            result.append(num)\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_squares():\n    assert find_sum_of_two_squares([1, 2, 3, 4, 5, 10, 25]) == [1, 2, 4, 5, 10, 25]\n    assert find_sum_of_two_squares([0, 1, 2, 9, 16, 20, 25]) == [1, 2, 9, 16, 20, 25]\n    assert find_sum_of_two_squares([3, 5, 7, 8, 10, 15, 50]) == [5, 8, 10, 50]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_non_numeric_elements(lst):\n    result = []\n    for item in lst:\n        if not any(char.isdigit() for char in item):\n            result.append(item)\n    return result"}, {"role": "assistant", "content": "def test_find_non_numeric_elements():\n    assert find_non_numeric_elements([\"hello\", \"123\", \"world\", \"456\"]) == [\"hello\", \"world\"]\n    assert find_non_numeric_elements([\"abc\", \"def\", \"456\", \"789\"]) == [\"abc\", \"def\"]\n    assert find_non_numeric_elements([\"123\", \"456\", \"789\"]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_and_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 5 == 0:\n            result.append(num)\n    if not result:\n        print(\"No odd numbers divisible by 5 found.\")\n    return result"}, {"role": "assistant", "content": "def test_find_odd_and_divisible_by_5():\n    assert find_odd_and_divisible_by_5([5, 10, 15, 20, 25, 30]) == [5, 15, 25]\n    assert find_odd_and_divisible_by_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5]\n    assert find_odd_and_divisible_by_5([2, 4, 6, 8, 10]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_elements_above_threshold(d, threshold):\n    count = 0\n    for key, value in d.items():\n        if value > threshold:\n            count += 1\n    return count"}, {"role": "assistant", "content": "def test_count_elements_above_threshold():\n    assert count_elements_above_threshold({\"a\": 5, \"b\": 10, \"c\": 15}, 7) == 2\n    assert count_elements_above_threshold({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == 1\n    assert count_elements_above_threshold({\"a\": 20, \"b\": 25, \"c\": 30}, 15) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_three(lst):\n    powers_of_three = []\n    for num in lst:\n        while num % 3 == 0 and num > 0:\n            num //= 3\n        if num == 1:\n            powers_of_three.append(num)\n    return powers_of_three"}, {"role": "assistant", "content": "def test_find_powers_of_three():\n    assert find_powers_of_three([1, 3, 9, 27, 81, 243]) == [1, 1, 1, 1, 1, 1]\n    assert find_powers_of_three([1, 2, 4, 8, 16]) == [1]\n    assert find_powers_of_three([1, 3, 9, 27, 81, 243]) == [1, 1, 1, 1, 1, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_greater_than_mean(s):\n    nums = [int(x) for x in s.split() if x.isdigit()]\n    mean = sum(nums) / len(nums) if nums else 0\n    result = []\n    for num in nums:\n        if num > mean:\n            result.append(num)\n    return result"}, {"role": "assistant", "content": "def test_find_numbers_greater_than_mean():\n    assert find_numbers_greater_than_mean(\"1 2 3 4 5 6 7 8 9\") == [6, 7, 8, 9]\n    assert find_numbers_greater_than_mean(\"10 20 30 40 50\") == [40, 50]\n    assert find_numbers_greater_than_mean(\"5 5 5 5 5\") == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_and_not_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    non_prime_odd = []\n    for num in lst:\n        if num % 2 != 0 and not is_prime(num):\n            non_prime_odd.append(num)\n    return non_prime_odd"}, {"role": "assistant", "content": "def test_find_odd_and_not_prime():\n    assert find_odd_and_not_prime([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 9, 15]\n    assert find_odd_and_not_prime([2, 4, 6, 8, 10]) == []\n    assert find_odd_and_not_prime([21, 33, 35, 39]) == [21, 33, 35, 39]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_in_list(lst):\n    divisors = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j and lst[i] % lst[j] == 0:\n                divisors.append(lst[i])\n                break\n    return divisors"}, {"role": "assistant", "content": "def test_find_divisors_in_list():\n    assert find_divisors_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert find_divisors_in_list([10, 20, 30, 40]) == [20, 30, 40]\n    assert find_divisors_in_list([1, 3, 5, 7]) == [3, 5, 7]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_non_multiples(lst1, lst2):\n    non_multiples = []\n    for num in lst1:\n        if all(num % divisor != 0 for divisor in lst2):\n            non_multiples.append(num)\n    return non_multiples"}, {"role": "assistant", "content": "def test_find_non_multiples():\n    assert find_non_multiples([1, 2, 3, 4, 5, 6], [2, 3]) == [1, 5]\n    assert find_non_multiples([10, 15, 20, 25], [5]) == []\n    assert find_non_multiples([8, 16, 24], [4]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_elements(lst1, lst2):\n    common_elements = []\n    for item in lst1:\n        if item in lst2:\n            common_elements.append(item)\n    if not common_elements:\n        print(\"No common elements found.\")\n    return common_elements"}, {"role": "assistant", "content": "def test_find_common_elements():\n    assert find_common_elements([1, 2, 3], [3, 4, 5]) == [3]\n    assert find_common_elements([\"a\", \"b\", \"c\"], [\"c\", \"d\", \"e\"]) == [\"c\"]\n    assert find_common_elements([1, 2, 3], [4, 5, 6]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_square(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and num % 2 != 0:\n            result.append(num)\n    return result"}, {"role": "assistant", "content": "def test_find_odd_square():\n    assert find_odd_square([1, 2, 3, 4, 5, 9, 16, 25]) == [1, 9, 25]\n    assert find_odd_square([2, 4, 6, 8, 10, 12, 14, 18]) == []\n    assert find_odd_square([1, 5, 13, 15, 21, 22, 27, 28]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_with_vowels(lst):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for item in lst:\n        if any(char in vowels for char in item):\n            result.append(item)\n    return result"}, {"role": "assistant", "content": "def test_find_elements_with_vowels():\n    assert find_elements_with_vowels([\"hello\", \"world\", \"sky\", \"tryst\"]) == [\"hello\", \"world\"]\n    assert find_elements_with_vowels([\"rhythm\", \"gym\", \"sky\"]) == []\n    assert find_elements_with_vowels([\"apple\", \"banana\", \"grape\"]) == [\"apple\", \"banana\", \"grape\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_2_and_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 3 != 0:\n            result.append(num)\n    if not result:\n        print(\"No numbers found that are not divisible by 2 or 3.\")\n        return []\n    return result"}, {"role": "assistant", "content": "def test_find_not_divisible_by_2_and_3():\n    assert find_not_divisible_by_2_and_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 5, 7]\n    assert find_not_divisible_by_2_and_3([2, 4, 6, 8, 10]) == []\n    assert find_not_divisible_by_2_and_3([11, 13, 17, 19, 23, 25, 29]) == [11, 13, 17, 19, 23, 25, 29]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_unique_chars_in_string(s):\n    char_count = {}\n    for char in s:\n        if char.isalpha():\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n    if not char_count:\n        print(\"No alphabetical characters found.\")\n        return {}\n    return char_count"}, {"role": "assistant", "content": "def test_count_unique_chars_in_string():\n    assert count_unique_chars_in_string(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}\n    assert count_unique_chars_in_string(\"abcdefg\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\n    assert count_unique_chars_in_string(\"1234 5678\") == {}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_even_numbers(lst):\n    result = []\n    for num in lst:\n        for i in range(2, num // 2 + 1, 2):\n            if num % i == 0 and (num // i) % 2 == 0:\n                result.append(num)\n                break\n    if not result:\n        print(\"No numbers found that are the product of two even numbers.\")\n        return []\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_even_numbers():\n    assert find_product_of_two_even_numbers([4, 8, 12, 16, 20]) == [4, 8, 12, 16, 20]\n    assert find_product_of_two_even_numbers([1, 3, 5, 7, 9]) == []\n    assert find_product_of_two_even_numbers([6, 10, 14, 18, 22]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_5_not_10(lst):\n    result = []\n    for num in lst:\n        if num % 5 == 0 and num % 10 != 0:\n            result.append(num)\n    if not result:\n        print(\"No multiples of 5 that are not divisible by 10.\")\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_5_not_10():\n    assert find_multiples_of_5_not_10([5, 10, 15, 20, 25, 30]) == [5, 15, 25]\n    assert find_multiples_of_5_not_10([2, 4, 6, 8, 10]) == []\n    assert find_multiples_of_5_not_10([1, 3, 7, 9, 11]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_double_digits_not_divisible_by_2(lst):\n    result = []\n    for num in lst:\n        if 10 <= num <= 99 and num % 2 != 0:\n            result.append(num)\n    if not result:\n        print(\"No double-digit numbers found that are not divisible by 2.\")\n    return result"}, {"role": "assistant", "content": "def test_find_double_digits_not_divisible_by_2():\n    assert find_double_digits_not_divisible_by_2([10, 12, 14, 16, 18]) == []\n    assert find_double_digits_not_divisible_by_2([11, 13, 15, 17, 19]) == [11, 13, 15, 17, 19]\n    assert find_double_digits_not_divisible_by_2([21, 23, 25, 27, 29]) == [21, 23, 25, 27, 29]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_numbers_in_strings(s1, s2):\n    nums1 = {int(x) for x in s1.split() if x.isdigit()}\n    nums2 = {int(x) for x in s2.split() if x.isdigit()}\n    common = nums1 & nums2\n    if not common:\n        print(\"No common numbers found between the two strings.\")\n        return set()\n    return common"}, {"role": "assistant", "content": "def test_find_common_numbers_in_strings():\n    assert find_common_numbers_in_strings(\"1 2 3 4 5\", \"3 4 5 6 7\") == {3, 4, 5}\n    assert find_common_numbers_in_strings(\"1 2 3 4 5\", \"6 7 8 9 10\") == set()\n    assert find_common_numbers_in_strings(\"10 20 30 40 50\", \"15 25 35 45 55\") == set()"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_not_11(lst):\n    result = []\n    for num in lst:\n        if num % 7 == 0 and num % 11 != 0:\n            result.append(num)\n    if not result:\n        print(\"No numbers found divisible by 7 but not 11.\")\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_7_not_11():\n    assert find_divisible_by_7_not_11([7, 14, 21, 28, 35, 42]) == [7, 14, 21, 28, 35, 42]\n    assert find_divisible_by_7_not_11([11, 22, 33, 44, 55, 66]) == []\n    assert find_divisible_by_7_not_11([49, 63, 77, 84]) == [49, 63, 84]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_word_in_string(s, word):\n    s = s.lower()\n    word = word.lower()\n    count = s.split().count(word)\n    if count == 0:\n        print(f\"The word '{word}' was not found.\")\n        return 0\n    return count"}, {"role": "assistant", "content": "def test_count_word_in_string():\n    assert count_word_in_string(\"Hello world, hello universe\", \"hello\") == 2\n    assert count_word_in_string(\"Python is great. I love Python.\", \"Python\") == 1\n    assert count_word_in_string(\"This is a test string.\", \"python\") == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_primes_not_multiples_of_3(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        if is_prime(num) and num % 3 != 0:\n            result.append(num)\n    if not result:\n        print(\"No prime numbers found that are not divisible by 3.\")\n    return result"}, {"role": "assistant", "content": "def test_find_primes_not_multiples_of_3():\n    assert find_primes_not_multiples_of_3([2, 3, 5, 6, 7, 9, 11, 12]) == [2, 5, 7, 11]\n    assert find_primes_not_multiples_of_3([3, 6, 9, 12, 15]) == []\n    assert find_primes_not_multiples_of_3([1, 2, 4, 5, 8, 10, 14]) == [2, 5]\n    assert find_primes_not_multiples_of_3([7, 11, 13, 17, 19, 23]) == [7, 11, 13, 17, 19, 23]\n    assert find_primes_not_multiples_of_3([]) == []\n    assert find_primes_not_multiples_of_3([29, 31, 37, 41]) == [29, 31, 37, 41]\n    assert find_primes_not_multiples_of_3([9, 27, 30]) == []\n    assert find_primes_not_multiples_of_3([2, 3, 5, 9, 15, 21]) == [2, 5]\n    assert find_primes_not_multiples_of_3([4, 6, 8, 10, 12, 14]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_numbers_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 4 == 0:\n            result.append(num)\n    if not result:\n        print(\"No even numbers divisible by 4 found.\")\n    return result"}, {"role": "assistant", "content": "def test_find_even_numbers_divisible_by_4():\n    assert find_even_numbers_divisible_by_4([4, 8, 12, 16, 20, 24]) == [4, 8, 12, 16, 20, 24]\n    assert find_even_numbers_divisible_by_4([1, 2, 3, 5, 7, 11]) == []\n    assert find_even_numbers_divisible_by_4([4, 5, 6, 7, 8, 9, 10, 11]) == [4, 8]\n    assert find_even_numbers_divisible_by_4([32, 48, 64, 80, 96, 112]) == [32, 48, 64, 80, 96, 112]\n    assert find_even_numbers_divisible_by_4([]) == []\n    assert find_even_numbers_divisible_by_4([12, 14, 18, 20]) == [12, 20]\n    assert find_even_numbers_divisible_by_4([3, 5, 7, 9, 11]) == []\n    assert find_even_numbers_divisible_by_4([0, 4, 8, 16, 32]) == [0, 4, 8, 16, 32]\n    assert find_even_numbers_divisible_by_4([2, 6, 10, 14]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_non_powers_of_two(lst):\n    result = []\n    for num in lst:\n        if (num & (num - 1)) != 0:\n            result.append(num)\n    if not result:\n        print(\"No numbers found that are not powers of two.\")\n    return result"}, {"role": "assistant", "content": "def test_find_non_powers_of_two():\n    assert find_non_powers_of_two([1, 2, 3, 4, 5, 6, 7, 8]) == [3, 5, 6, 7]\n    assert find_non_powers_of_two([8, 16, 32, 64, 128]) == []\n    assert find_non_powers_of_two([3, 5, 6, 7, 10, 12]) == [3, 5, 6, 7, 10, 12]\n    assert find_non_powers_of_two([1, 2, 4, 8, 16]) == []\n    assert find_non_powers_of_two([]) == []\n    assert find_non_powers_of_two([1024, 2048, 4096]) == []\n    assert find_non_powers_of_two([1, 2, 4, 6, 8, 12, 18]) == [6, 12, 18]\n    assert find_non_powers_of_two([10, 20, 30, 40]) == [10, 20, 30, 40]\n    assert find_non_powers_of_two([7, 14, 21, 28]) == [7, 14, 21, 28]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_numbers_greater_than_average(s):\n    nums = [int(x) for x in s.split() if x.isdigit()]\n    if not nums:\n        print(\"No numbers found in the string.\")\n        return 0\n    average = sum(nums) / len(nums)\n    count = sum(1 for num in nums if num > average)\n    return count"}, {"role": "assistant", "content": "def test_count_numbers_greater_than_average():\n    assert count_numbers_greater_than_average(\"1 2 3 4 5 6 7 8 9\") == 4\n    assert count_numbers_greater_than_average(\"10 20 30 40 50\") == 2\n    assert count_numbers_greater_than_average(\"5 5 5 5\") == 0\n    assert count_numbers_greater_than_average(\"100\") == 0\n    assert count_numbers_greater_than_average(\"\") == 0\n    assert count_numbers_greater_than_average(\"10 15 20 25 30\") == 2\n    assert count_numbers_greater_than_average(\"7 14 21 28\") == 2\n    assert count_numbers_greater_than_average(\"3 6 9 12 15 18\") == 3\n    assert count_numbers_greater_than_average(\"0 1 2 3 4 5 6 7 8 9 10\") == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_4_or_5_not_20(lst):\n    result = []\n    for num in lst:\n        if (num % 4 == 0 or num % 5 == 0) and num % 20 != 0:\n            result.append(num)\n    if not result:\n        print(\"No numbers found that are divisible by 4 or 5, but not by 20.\")\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_4_or_5_not_20():\n    assert find_multiples_of_4_or_5_not_20([4, 5, 8, 10, 12, 15, 16, 25, 40]) == [4, 5, 8, 10, 12, 15, 16, 25]\n    assert find_multiples_of_4_or_5_not_20([20, 40, 60, 80, 100]) == []\n    assert find_multiples_of_4_or_5_not_20([3, 6, 9, 11, 13, 17, 19]) == []\n    assert find_multiples_of_4_or_5_not_20([25, 30, 35, 50]) == [25, 30, 35, 50]\n    assert find_multiples_of_4_or_5_not_20([]) == []\n    assert find_multiples_of_4_or_5_not_20([4, 8, 12, 16, 24]) == [4, 8, 12, 16, 24]\n    assert find_multiples_of_4_or_5_not_20([5, 10, 15, 25]) == [5, 10, 15, 25]\n    assert find_multiples_of_4_or_5_not_20([1, 2, 3, 7, 11]) == []\n    assert find_multiples_of_4_or_5_not_20([9, 27, 33, 45]) == [45]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_exact_divisors_of_100(lst):\n    result = []\n    for num in lst:\n        if 100 % num == 0:\n            result.append(num)\n    if not result:\n        print(\"No numbers found that are exact divisors of 100.\")\n    return result"}, {"role": "assistant", "content": "def test_find_exact_divisors_of_100():\n    assert find_exact_divisors_of_100([1, 2, 4, 5, 10, 20, 25, 50, 100]) == [1, 2, 4, 5, 10, 20, 25, 50, 100]\n    assert find_exact_divisors_of_100([3, 6, 9, 12, 15, 18, 21]) == []\n    assert find_exact_divisors_of_100([4, 8, 16, 32, 64]) == [4]\n    assert find_exact_divisors_of_100([50, 100]) == [50, 100]\n    assert find_exact_divisors_of_100([]) == []\n    assert find_exact_divisors_of_100([10, 20, 30, 40]) == [10, 20]\n    assert find_exact_divisors_of_100([1, 25, 100]) == [1, 25, 100]\n    assert find_exact_divisors_of_100([5, 15, 20]) == [5, 20]\n    assert find_exact_divisors_of_100([7, 14, 21, 35, 70]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_not_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        print(\"No odd numbers found that are not divisible by 5.\")\n    return result"}, {"role": "assistant", "content": "def test_find_odd_not_divisible_by_5():\n    assert find_odd_not_divisible_by_5([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 7, 9, 11, 13, 17, 19]\n    assert find_odd_not_divisible_by_5([5, 10, 15, 20, 25]) == []\n    assert find_odd_not_divisible_by_5([2, 4, 6, 8, 10, 12]) == []\n    assert find_odd_not_divisible_by_5([1, 2, 3, 4, 5]) == [1, 3]\n    assert find_odd_not_divisible_by_5([]) == []\n    assert find_odd_not_divisible_by_5([11, 12, 13, 14, 15, 16]) == [11, 13]\n    assert find_odd_not_divisible_by_5([1, 21, 31, 41]) == [1, 21, 31, 41]\n    assert find_odd_not_divisible_by_5([25, 30, 35, 40, 45, 50]) == []\n    assert find_odd_not_divisible_by_5([33, 37, 39, 43, 47]) == [33, 37, 39, 43, 47]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_2_or_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 3 != 0:\n            result.append(num)\n        elif num % 3 == 0 and num % 2 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are multiples of 2 or 3, but not both.\"\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_2_or_3():\n    assert find_multiples_of_2_or_3([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 3, 4, 8, 9, 10]\n    assert find_multiples_of_2_or_3([3, 6, 9, 12, 15, 18, 21]) == [3, 9, 15, 21]\n    assert find_multiples_of_2_or_3([2, 4, 6, 8, 10, 12]) == [2, 4, 8, 10]\n    assert find_multiples_of_2_or_3([1, 3, 5, 7, 9, 11]) == [3, 9]\n    assert find_multiples_of_2_or_3([]) == 'No numbers found that are multiples of 2 or 3, but not both.'\n    assert find_multiples_of_2_or_3([6, 12, 18, 24]) == 'No numbers found that are multiples of 2 or 3, but not both.'\n    assert find_multiples_of_2_or_3([3, 6, 7, 9, 14]) == [3, 9, 14]\n    assert find_multiples_of_2_or_3([2, 3, 5, 7]) == [2, 3]\n    assert find_multiples_of_2_or_3([5, 10, 15, 20, 25, 30]) == [10, 15, 20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_or_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 or num % 4 == 0:\n            result.append(num)\n    if not result:\n        return \"No odd numbers or numbers divisible by 4 found.\"\n    return result"}, {"role": "assistant", "content": "def test_find_odd_or_divisible_by_4():\n    assert find_odd_or_divisible_by_4([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 4, 5, 7, 8, 9]\n    assert find_odd_or_divisible_by_4([2, 4, 6, 8, 10]) == [4, 8]\n    assert find_odd_or_divisible_by_4([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 3, 5, 7, 9, 11, 13, 15]\n    assert find_odd_or_divisible_by_4([4, 8, 12, 16, 20]) == [4, 8, 12, 16, 20]\n    assert find_odd_or_divisible_by_4([]) == 'No odd numbers or numbers divisible by 4 found.'\n    assert find_odd_or_divisible_by_4([3, 5, 6, 7]) == [3, 5, 7]\n    assert find_odd_or_divisible_by_4([10, 12, 14, 16]) == [12, 16]\n    assert find_odd_or_divisible_by_4([2, 3, 4, 5]) == [3, 4, 5]\n    assert find_odd_or_divisible_by_4([9, 10, 12, 15]) == [9, 12, 15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_squares(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and num % 2 == 0:\n            result.append(num)\n    if not result:\n        return \"No even square numbers found.\"\n    return result"}, {"role": "assistant", "content": "def test_find_even_squares():\n    assert find_even_squares([4, 16, 25, 36, 49, 64, 81, 100]) == [4, 16, 36, 64, 100]\n    assert find_even_squares([1, 3, 5, 7, 9]) == 'No even square numbers found.'\n    assert find_even_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4]\n    assert find_even_squares([9, 25, 49, 81, 121]) == 'No even square numbers found.'\n    assert find_even_squares([]) == 'No even square numbers found.'\n    assert find_even_squares([0, 4, 8, 12]) == [0, 4]\n    assert find_even_squares([2, 6, 8, 10, 14, 18]) == 'No even square numbers found.'\n    assert find_even_squares([4, 5, 6, 7, 8, 9]) == [4]\n    assert find_even_squares([4, 16, 36, 64]) == [4, 16, 36, 64]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_or_5_not_both(lst):\n    result = []\n    for num in lst:\n        if (num % 3 == 0 or num % 5 == 0) and not (num % 3 == 0 and num % 5 == 0):\n            result.append(num)\n    if not result:\n        return \"No numbers found that are multiples of 3 or 5 but not both.\"\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_3_or_5_not_both():\n    assert find_multiples_of_3_or_5_not_both([3, 5, 6, 10, 15, 18, 20]) == [3, 5, 6, 10, 18, 20]\n    assert find_multiples_of_3_or_5_not_both([15, 30, 45, 60]) == 'No numbers found that are multiples of 3 or 5 but not both.'\n    assert find_multiples_of_3_or_5_not_both([1, 2, 4, 7]) == 'No numbers found that are multiples of 3 or 5 but not both.'\n    assert find_multiples_of_3_or_5_not_both([3, 6, 9, 12, 18]) == [3, 6, 9, 12, 18]\n    assert find_multiples_of_3_or_5_not_both([]) == 'No numbers found that are multiples of 3 or 5 but not both.'\n    assert find_multiples_of_3_or_5_not_both([5, 10, 20, 25]) == [5, 10, 20, 25]\n    assert find_multiples_of_3_or_5_not_both([7, 11, 13]) == 'No numbers found that are multiples of 3 or 5 but not both.'\n    assert find_multiples_of_3_or_5_not_both([2, 4, 8, 16]) == 'No numbers found that are multiples of 3 or 5 but not both.'\n    assert find_multiples_of_3_or_5_not_both([15, 25, 35, 45]) == [25, 35]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_numbers_greater_than_mean(s):\n    nums = [int(x) for x in s.split() if x.isdigit()]\n    if not nums:\n        return \"No numbers found in the string.\"\n\n    mean = sum(nums) / len(nums)\n    count = len([num for num in nums if num > mean])\n    if count == 0:\n        return \"No numbers greater than the mean.\"\n    return count"}, {"role": "assistant", "content": "def test_count_numbers_greater_than_mean():\n    assert count_numbers_greater_than_mean(\"1 2 3 4 5\") == 2\n    assert count_numbers_greater_than_mean(\"10 20 30 40\") == 2\n    assert count_numbers_greater_than_mean(\"5 5 5 5 5\") == \"No numbers greater than the mean.\"\n    assert count_numbers_greater_than_mean(\"100\") == \"No numbers greater than the mean.\"\n    assert count_numbers_greater_than_mean(\"\") == \"No numbers found in the string.\"\n    assert count_numbers_greater_than_mean(\"10 20 30\") == 1\n    assert count_numbers_greater_than_mean(\"1 1 1 1 1 2 2 2 2 2\") == 5\n    assert count_numbers_greater_than_mean(\"50 100 150 200\") == 2\n    assert count_numbers_greater_than_mean(\"6 7 8 9 10\") == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_2(lst):\n    result = []\n    for num in lst:\n        if (num & (num - 1)) == 0:\n            result.append(num)\n    if not result:\n        return \"No powers of 2 found.\"\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_2():\n    assert find_powers_of_2([1, 2, 3, 4, 5, 8, 16, 32, 64]) == [1, 2, 4, 8, 16, 32, 64]\n    assert find_powers_of_2([7, 14, 21, 28]) == 'No powers of 2 found.'\n    assert find_powers_of_2([2, 3, 6, 7, 9, 12]) == [2]\n    assert find_powers_of_2([]) == 'No powers of 2 found.'\n    assert find_powers_of_2([1024, 2048, 4096]) == [1024, 2048, 4096]\n    assert find_powers_of_2([1, 4, 8, 16, 32]) == [1, 4, 8, 16, 32]\n    assert find_powers_of_2([1, 2, 3, 4, 6, 7]) == [1, 2, 4]\n    assert find_powers_of_2([5, 10, 20, 40]) == 'No powers of 2 found.'\n    assert find_powers_of_2([64, 128, 256, 512]) == [64, 128, 256, 512]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_and_divisible_by_8(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 8 == 0:\n            result.append(num)\n    if not result:\n        return \"No even numbers divisible by 8 found.\"\n    return result"}, {"role": "assistant", "content": "def test_find_even_and_divisible_by_8():\n    assert find_even_and_divisible_by_8([8, 16, 24, 32, 40, 48, 56, 64]) == [8, 16, 24, 32, 40, 48, 56, 64]\n    assert find_even_and_divisible_by_8([7, 14, 21, 28]) == 'No even numbers divisible by 8 found.'\n    assert find_even_and_divisible_by_8([2, 4, 6, 10, 12, 14]) == 'No even numbers divisible by 8 found.'\n    assert find_even_and_divisible_by_8([8, 16, 32, 40]) == [8, 16, 32, 40]\n    assert find_even_and_divisible_by_8([]) == 'No even numbers divisible by 8 found.'\n    assert find_even_and_divisible_by_8([80, 96, 112]) == [80, 96, 112]\n    assert find_even_and_divisible_by_8([1, 3, 5, 7]) == 'No even numbers divisible by 8 found.'\n    assert find_even_and_divisible_by_8([0, 8, 16, 24]) == [0, 8, 16, 24]\n    assert find_even_and_divisible_by_8([9, 18, 27, 36]) == 'No even numbers divisible by 8 found.'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_and_divisible_by_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 3 == 0:\n            result.append(num)\n    if not result:\n        return \"No odd numbers divisible by 3 found.\"\n    return result"}, {"role": "assistant", "content": "def test_find_odd_and_divisible_by_3():\n    assert find_odd_and_divisible_by_3([3, 6, 9, 12, 15, 18, 21, 24]) == [3, 9, 15, 21]\n    assert find_odd_and_divisible_by_3([2, 4, 6, 8, 10, 12]) == 'No odd numbers divisible by 3 found.'\n    assert find_odd_and_divisible_by_3([5, 10, 15, 20, 25, 30]) == [15]\n    assert find_odd_and_divisible_by_3([1, 2, 3, 4, 5]) == [3]\n    assert find_odd_and_divisible_by_3([]) == 'No odd numbers divisible by 3 found.'\n    assert find_odd_and_divisible_by_3([9, 18, 27, 36]) == [9, 27]\n    assert find_odd_and_divisible_by_3([3, 5, 7, 11, 13, 15]) == [3, 15]\n    assert find_odd_and_divisible_by_3([21, 33, 45, 57]) == [21, 33, 45, 57]\n    assert find_odd_and_divisible_by_3([8, 16, 32, 64]) == 'No odd numbers divisible by 3 found.'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_non_even_or_not_multiples_of_7(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 or num % 7 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are not even or not divisible by 7.\"\n    return result"}, {"role": "assistant", "content": "def test_find_non_even_or_not_multiples_of_7():\n    assert find_non_even_or_not_multiples_of_7([2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 6, 7, 8, 9]\n    assert find_non_even_or_not_multiples_of_7([7, 14, 21, 28]) == [7, 21]\n    assert find_non_even_or_not_multiples_of_7([1, 2, 4, 8, 16, 32]) == [1, 2, 4, 8, 16, 32]\n    assert find_non_even_or_not_multiples_of_7([2, 3, 5, 7]) == [2, 3, 5, 7]\n    assert find_non_even_or_not_multiples_of_7([0, 7, 14, 21]) == [7, 21]\n    assert find_non_even_or_not_multiples_of_7([9, 18, 27, 36]) == [9, 18, 27, 36]\n    assert find_non_even_or_not_multiples_of_7([3, 7, 10, 13]) == [3, 7, 10, 13]\n    assert find_non_even_or_not_multiples_of_7([2, 6, 14, 28]) == [2, 6]\n    assert find_non_even_or_not_multiples_of_7([5, 10, 20, 25]) == [5, 10, 20, 25]\n    assert find_non_even_or_not_multiples_of_7([28, 14]) == \"No numbers found that are not even or not divisible by 7.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_2_but_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 5 == 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are not divisible by 2 but divisible by 5.\"\n    return result"}, {"role": "assistant", "content": "def test_find_not_divisible_by_2_but_divisible_by_5():\n    assert find_not_divisible_by_2_but_divisible_by_5([5, 10, 15, 20, 25, 30]) == [5, 15, 25]\n    assert find_not_divisible_by_2_but_divisible_by_5([2, 4, 6, 8, 10]) == 'No numbers found that are not divisible by 2 but divisible by 5.'\n    assert find_not_divisible_by_2_but_divisible_by_5([1, 2, 3, 4, 5]) == [5]\n    assert find_not_divisible_by_2_but_divisible_by_5([11, 13, 15, 17]) == [15]\n    assert find_not_divisible_by_2_but_divisible_by_5([]) == 'No numbers found that are not divisible by 2 but divisible by 5.'\n    assert find_not_divisible_by_2_but_divisible_by_5([21, 25, 29]) == [25]\n    assert find_not_divisible_by_2_but_divisible_by_5([30, 35, 40, 45]) == [35, 45]\n    assert find_not_divisible_by_2_but_divisible_by_5([7, 14, 21, 28]) == 'No numbers found that are not divisible by 2 but divisible by 5.'\n    assert find_not_divisible_by_2_but_divisible_by_5([50, 75, 95]) == [75, 95]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_5_or_7(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are multiples of 3, 5, or 7.\"\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_3_5_or_7():\n    assert find_multiples_of_3_5_or_7([3, 5, 7, 9, 10, 14, 15, 21, 25, 30]) == [3, 5, 7, 9, 10, 14, 15, 21, 25, 30]\n    assert find_multiples_of_3_5_or_7([1, 2, 4, 8, 11]) == 'No numbers found that are multiples of 3, 5, or 7.'\n    assert find_multiples_of_3_5_or_7([3, 6, 12, 18]) == [3, 6, 12, 18]\n    assert find_multiples_of_3_5_or_7([5, 10, 20, 25]) == [5, 10, 20, 25]\n    assert find_multiples_of_3_5_or_7([7, 14, 28, 35]) == [7, 14, 28, 35]\n    assert find_multiples_of_3_5_or_7([]) == 'No numbers found that are multiples of 3, 5, or 7.'\n    assert find_multiples_of_3_5_or_7([9, 15, 21, 27, 33]) == [9, 15, 21, 27, 33]\n    assert find_multiples_of_3_5_or_7([35, 45, 55, 65]) == [35, 45, 55, 65]\n    assert find_multiples_of_3_5_or_7([50, 75, 100]) == [50, 75, 100]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_not_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 4 != 0:\n            result.append(num)\n    if not result:\n        return \"No even numbers found that are not divisible by 4.\"\n    return result"}, {"role": "assistant", "content": "def test_find_even_not_divisible_by_4():\n    assert find_even_not_divisible_by_4([2, 3, 4, 6, 8, 10, 12, 14, 16]) == [2, 6, 10, 14]\n    assert find_even_not_divisible_by_4([4, 8, 12, 16, 20]) == 'No even numbers found that are not divisible by 4.'\n    assert find_even_not_divisible_by_4([1, 3, 5, 7, 9]) == 'No even numbers found that are not divisible by 4.'\n    assert find_even_not_divisible_by_4([10, 20, 30, 40]) == [10, 30]\n    assert find_even_not_divisible_by_4([]) == 'No even numbers found that are not divisible by 4.'\n    assert find_even_not_divisible_by_4([6, 18, 26]) == [6, 18, 26]\n    assert find_even_not_divisible_by_4([14, 28, 44, 52]) == [14]\n    assert find_even_not_divisible_by_4([32, 36, 48, 60]) == 'No even numbers found that are not divisible by 4.'\n    assert find_even_not_divisible_by_4([22, 26, 38]) == [22, 26, 38]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_or_5_not_15(lst):\n    result = []\n    for num in lst:\n        if (num % 3 == 0 or num % 5 == 0) and num % 15 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are multiples of 3 or 5 but not 15.\"\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_3_or_5_not_15():\n    assert find_multiples_of_3_or_5_not_15([3, 5, 9, 10, 12, 18, 20, 30, 33]) == [3, 5, 9, 10, 12, 18, 20, 33]\n    assert find_multiples_of_3_or_5_not_15([15, 30, 45, 60]) == 'No numbers found that are multiples of 3 or 5 but not 15.'\n    assert find_multiples_of_3_or_5_not_15([1, 2, 4, 7, 11]) == 'No numbers found that are multiples of 3 or 5 but not 15.'\n    assert find_multiples_of_3_or_5_not_15([5, 10, 20, 25]) == [5, 10, 20, 25]\n    assert find_multiples_of_3_or_5_not_15([3, 6, 9, 12]) == [3, 6, 9, 12]\n    assert find_multiples_of_3_or_5_not_15([]) == 'No numbers found that are multiples of 3 or 5 but not 15.'\n    assert find_multiples_of_3_or_5_not_15([27, 33, 39]) == [27, 33, 39]\n    assert find_multiples_of_3_or_5_not_15([5, 25, 35]) == [5, 25, 35]\n    assert find_multiples_of_3_or_5_not_15([9, 21, 27, 39]) == [9, 21, 27, 39]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_squares(lst):\n    result = []\n    for num in lst:\n        for i in range(1, int(num ** 0.5) + 1):\n            if (num + i ** 2) ** 0.5 == int((num + i ** 2) ** 0.5):\n                result.append(num)\n                break\n    if not result:\n        return \"No numbers found that are the difference of two squares.\"\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_squares():\n    assert find_difference_of_two_squares([1, 7, 8]) == [8]\n    assert find_difference_of_two_squares([14, 15, 17]) == [15]\n    assert find_difference_of_two_squares([2, 3, 5]) == [3, 5]\n    assert find_difference_of_two_squares([16, 24, 35]) == [16, 24, 35]\n    assert find_difference_of_two_squares([16, 24, 35]) == [16, 24, 35]\n    assert find_difference_of_two_squares([]) == \"No numbers found that are the difference of two squares.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_divisible_by_3(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if i % 3 == 0 and (num - i) % 3 == 0:\n                result.append(num)\n                break\n    if not result:\n        return \"No numbers found that are the sum of two numbers divisible by 3.\"\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_divisible_by_3():\n    assert find_sum_of_two_divisible_by_3([6, 15, 21]) == [6, 15, 21]\n    assert find_sum_of_two_divisible_by_3([5, 7, 11]) == \"No numbers found that are the sum of two numbers divisible by 3.\"\n    assert find_sum_of_two_divisible_by_3([9, 18, 30]) == [9, 18, 30]\n    assert find_sum_of_two_divisible_by_3([1, 2, 4]) == \"No numbers found that are the sum of two numbers divisible by 3.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_even_but_divisible_by_9(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 9 == 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are not even but divisible by 9.\"\n    return result"}, {"role": "assistant", "content": "def test_find_not_even_but_divisible_by_9():\n    assert find_not_even_but_divisible_by_9([9, 27, 45]) == [9, 27, 45]\n    assert find_not_even_but_divisible_by_9([2, 4, 6]) == \"No numbers found that are not even but divisible by 9.\"\n    assert find_not_even_but_divisible_by_9([15, 33, 81]) == [81]\n    assert find_not_even_but_divisible_by_9([12, 18, 24]) == \"No numbers found that are not even but divisible by 9.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 4 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers.\"\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2():\n    assert find_divisible_by_2([4, 16, 28]) == 'No numbers.'\n    assert find_divisible_by_2([1, 3, 5]) == 'No numbers.'\n    assert find_divisible_by_2([20, 22, 32]) == [22]\n    assert find_divisible_by_2([6, 7, 10]) == [6, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_or_3_not_6(lst):\n    result = []\n    for num in lst:\n        if (num % 2 == 0 or num % 3 == 0) and num % 6 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are divisible by 2 or 3 but not 6.\"\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_or_3_not_6():\n    assert find_divisible_by_2_or_3_not_6([2, 5, 8]) == [2, 8]\n    assert find_divisible_by_2_or_3_not_6([4, 10, 14]) == [4, 10, 14]\n    assert find_divisible_by_2_or_3_not_6([6, 12, 24]) == \"No numbers found that are divisible by 2 or 3 but not 6.\"\n    assert find_divisible_by_2_or_3_not_6([1, 7, 11]) == \"No numbers found that are divisible by 2 or 3 but not 6.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_12_not_even(lst):\n    result = []\n    for num in lst:\n        if 12 % num == 0 and num % 2 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are divisors of 12 but not even.\"\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_12_not_even():\n    assert find_divisors_of_12_not_even([1, 3, 6]) == [1, 3]\n    assert find_divisors_of_12_not_even([2, 4, 8]) == \"No numbers found that are divisors of 12 but not even.\"\n    assert find_divisors_of_12_not_even([5, 7, 9]) == \"No numbers found that are divisors of 12 but not even.\"\n    assert find_divisors_of_12_not_even([12, 18, 24]) == \"No numbers found that are divisors of 12 but not even.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_6_not_12(lst):\n    result = []\n    for num in lst:\n        if 6 % num == 0 and num != 12:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are divisors of 6 but not 12.\"\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_6_not_12():\n    assert find_divisors_of_6_not_12([1, 3, 6]) == [1, 3, 6]\n    assert find_divisors_of_6_not_12([2, 4, 8]) == [2]\n    assert find_divisors_of_6_not_12([5, 9, 11]) == \"No numbers found that are divisors of 6 but not 12.\"\n    assert find_divisors_of_6_not_12([12, 18, 24]) == \"No numbers found that are divisors of 6 but not 12.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_even_numbers(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 == 0:\n            result.append(num)\n    if not result:\n        return \"No squares of even numbers found.\"\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_even_numbers():\n    assert find_squares_of_even_numbers([4, 16, 36]) == [4, 16, 36]\n    assert find_squares_of_even_numbers([9, 25, 49]) == \"No squares of even numbers found.\"\n    assert find_squares_of_even_numbers([8, 18, 32]) == \"No squares of even numbers found.\"\n    assert find_squares_of_even_numbers([64, 100, 144]) == [64, 100, 144]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_not_powers_of_2(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and (num & (num - 1)) != 0:\n            result.append(num)\n    if not result:\n        return \"No even numbers found that are not powers of 2.\"\n    return result"}, {"role": "assistant", "content": "def test_find_even_not_powers_of_2():\n    assert find_even_not_powers_of_2([2, 3, 6, 9]) == [6]\n    assert find_even_not_powers_of_2([4, 8, 16, 32]) == \"No even numbers found that are not powers of 2.\"\n    assert find_even_not_powers_of_2([18, 20, 22, 24]) == [18, 20, 22, 24]\n    assert find_even_not_powers_of_2([1, 2, 4, 8]) == \"No even numbers found that are not powers of 2.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_even_and_not_divisible_by_9(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 9 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are neither even nor divisible by 9.\"\n    return result"}, {"role": "assistant", "content": "def test_find_not_even_and_not_divisible_by_9():\n    assert find_not_even_and_not_divisible_by_9([1, 3, 7, 11]) == [1, 3, 7, 11]\n    assert find_not_even_and_not_divisible_by_9([2, 4, 8, 16]) == \"No numbers found that are neither even nor divisible by 9.\"\n    assert find_not_even_and_not_divisible_by_9([5, 15, 25, 35]) == [5, 15, 25, 35]\n    assert find_not_even_and_not_divisible_by_9([18, 27, 36, 45]) == \"No numbers found that are neither even nor divisible by 9.\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_and_5_not_7(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 and num % 5 == 0 and num % 7 != 0:\n            result.append(num)\n    if not result:\n        return \"No numbers found that are divisible by 3 and 5 but not 7.\"\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_3_and_5_not_7():\n    assert find_multiples_of_3_and_5_not_7([15, 30, 45]) == [15, 30, 45]\n    assert find_multiples_of_3_and_5_not_7([21, 42, 63]) == \"No numbers found that are divisible by 3 and 5 but not 7.\"\n    assert find_multiples_of_3_and_5_not_7([35, 50, 55]) == \"No numbers found that are divisible by 3 and 5 but not 7.\"\n    assert find_multiples_of_3_and_5_not_7([75, 90, 105]) == [75, 90]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_odd_numbers(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1, 2):\n            if num % i == 0 and (num // i) % 2 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_odd_numbers():\n    assert find_product_of_two_odd_numbers([9, 15, 25]) == [9, 15, 25]\n    assert find_product_of_two_odd_numbers([10, 16, 20]) is None\n    assert find_product_of_two_odd_numbers([21, 27, 45]) == [21, 27, 45]\n    assert find_product_of_two_odd_numbers([14, 18, 22]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_primes(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num // i):\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_primes():\n    assert find_product_of_two_primes([6, 10, 14]) == [6, 10, 14]\n    assert find_product_of_two_primes([8, 12, 18]) is None\n    assert find_product_of_two_primes([15, 21, 35]) == [15, 21, 35]\n    assert find_product_of_two_primes([20, 28, 30]) is None\n    assert find_product_of_two_primes([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_not_power_of_2(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and (num & (num - 1)) != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_not_power_of_2():\n    assert find_odd_not_power_of_2([1, 3, 7]) == [3, 7]\n    assert find_odd_not_power_of_2([2, 4, 8]) is None\n    assert find_odd_not_power_of_2([9, 11, 13]) == [9, 11, 13]\n    assert find_odd_not_power_of_2([16, 32, 64]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_not_9(lst):\n    result = []\n    for num in lst:\n        if num % 6 == 0 and num % 9 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_6_not_9():\n    assert find_divisible_by_6_not_9([6, 12, 24]) == [6, 12, 24]\n    assert find_divisible_by_6_not_9([9, 18, 27]) is None\n    assert find_divisible_by_6_not_9([30, 36, 42]) == [30, 42]\n    assert find_divisible_by_6_not_9([45, 54, 63]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_24_not_8(lst):\n    result = []\n    for num in lst:\n        if 24 % num == 0 and num % 8 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_24_not_8():\n    assert find_divisors_of_24_not_8([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert find_divisors_of_24_not_8([8, 16, 24]) is None\n    assert find_divisors_of_24_not_8([6, 12, 18]) == [6, 12]\n    assert find_divisors_of_24_not_8([5, 10, 15]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_odd_numbers(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_odd_numbers():\n    assert find_squares_of_odd_numbers([9, 25, 49]) == [9, 25, 49]\n    assert find_squares_of_odd_numbers([16, 36, 64]) is None\n    assert find_squares_of_odd_numbers([81, 121, 169]) == [81, 121, 169]\n    assert find_squares_of_odd_numbers([100, 144, 196]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_2_not_even(lst):\n    result = []\n    for num in lst:\n        if (num & (num - 1)) == 0 and num % 2 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_2_not_even():\n    assert find_powers_of_2_not_even([1, 3, 7]) == [1]\n    assert find_powers_of_2_not_even([8, 16, 32]) is None\n    assert find_powers_of_2_not_even([2, 4, 64]) is None\n    assert find_powers_of_2_not_even([128, 256, 512]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_multiples_of_3_but_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if num % 3 != 0 and num % 5 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_not_multiples_of_3_but_divisible_by_5():\n    assert find_not_multiples_of_3_but_divisible_by_5([5, 10, 20]) == [5, 10, 20]\n    assert find_not_multiples_of_3_but_divisible_by_5([9, 15, 21]) is None\n    assert find_not_multiples_of_3_but_divisible_by_5([25, 35, 50]) == [25, 35, 50]\n    assert find_not_multiples_of_3_but_divisible_by_5([6, 12, 18]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_15_not_3(lst):\n    result = []\n    for num in lst:\n        if 15 % num == 0 and num % 3 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_15_not_3():\n    assert find_divisors_of_15_not_3([1, 5, 15]) == [1, 5]\n    assert find_divisors_of_15_not_3([3, 9, 12]) is None\n    assert find_divisors_of_15_not_3([2, 4, 6]) is None\n    assert find_divisors_of_15_not_3([7, 11, 13]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_2_not_multiples_of_4(lst):\n    result = []\n    for num in lst:\n        if (num & (num - 1)) == 0 and num % 4 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_2_not_multiples_of_4():\n    assert find_powers_of_2_not_multiples_of_4([1, 2, 3, 4, 8, 16]) == [1, 2]\n    assert find_powers_of_2_not_multiples_of_4([32, 64, 128]) is None\n    assert find_powers_of_2_not_multiples_of_4([3, 5, 7]) is None\n    assert find_powers_of_2_not_multiples_of_4([1024, 256]) is None\n    assert find_powers_of_2_not_multiples_of_4([2, 4, 8, 16]) == [2]\n    assert find_powers_of_2_not_multiples_of_4([1, 3, 9, 5]) == [1]\n    assert find_powers_of_2_not_multiples_of_4([0]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_not_square(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and int(num ** 0.5) ** 2 != num:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_not_square():\n    assert find_odd_not_square([1, 2, 3, 5, 7, 9, 10]) == [3, 5, 7]\n    assert find_odd_not_square([9, 1, 3, 11]) == [3, 11]\n    assert find_odd_not_square([4, 16, 25]) is None\n    assert find_odd_not_square([1, 3, 5, 7, 11]) == [3, 5, 7, 11]\n    assert find_odd_not_square([25, 49, 81]) is None\n    assert find_odd_not_square([4, 16, 64]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_even_not_divisible_by_8(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 == 0 and num % 8 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_even_not_divisible_by_8():\n    assert find_squares_of_even_not_divisible_by_8([4, 16, 64, 36, 49]) == [4, 36]\n    assert find_squares_of_even_not_divisible_by_8([16, 64, 4, 81]) == [4]\n    assert find_squares_of_even_not_divisible_by_8([1, 9, 25]) is None\n    assert find_squares_of_even_not_divisible_by_8([100, 144]) == [100]\n    assert find_squares_of_even_not_divisible_by_8([64, 256]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_6_not_2(lst):\n    result = []\n    for num in lst:\n        if 6 % num == 0 and num != 2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_6_not_2():\n    assert find_divisors_of_6_not_2([1, 2, 3, 6]) == [1, 3, 6]\n    assert find_divisors_of_6_not_2([6, 9, 12]) == [6]\n    assert find_divisors_of_6_not_2([2, 3, 6]) == [3, 6]\n    assert find_divisors_of_6_not_2([12, 3]) == [3]\n    assert find_divisors_of_6_not_2([8, 10, 6]) == [6]\n    assert find_divisors_of_6_not_2([18, 24, 30]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_48_not_16(lst):\n    result = []\n    for num in lst:\n        if 48 % num == 0 and num % 16 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_48_not_16():\n    assert find_divisors_of_48_not_16([1, 2, 3, 4, 6, 8]) == [1, 2, 3, 4, 6, 8]\n    assert find_divisors_of_48_not_16([16, 8, 4, 24]) == [8, 4, 24]\n    assert find_divisors_of_48_not_16([1, 2, 3, 6, 9]) == [1, 2, 3, 6]\n    assert find_divisors_of_48_not_16([16, 48]) is None\n    assert find_divisors_of_48_not_16([12, 16, 24]) == [12, 24]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_20_not_even(lst):\n    result = []\n    for num in lst:\n        if 20 % num == 0 and num % 2 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_20_not_even():\n    assert find_divisors_of_20_not_even([1, 2, 5, 10]) == [1, 5]\n    assert find_divisors_of_20_not_even([4, 6, 8]) is None\n    assert find_divisors_of_20_not_even([5, 15, 30]) == [5]\n    assert find_divisors_of_20_not_even([1, 2, 5]) == [1, 5]\n    assert find_divisors_of_20_not_even([20, 10]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_not_4_or_8(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 4 != 0 and num % 8 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_not_4_or_8():\n    assert find_divisible_by_2_not_4_or_8([2, 4, 8, 10]) == [2, 10]\n    assert find_divisible_by_2_not_4_or_8([2, 6, 10, 14]) == [2, 6, 10, 14]\n    assert find_divisible_by_2_not_4_or_8([1, 3, 5]) is None\n    assert find_divisible_by_2_not_4_or_8([8, 16, 32]) is None\n    assert find_divisible_by_2_not_4_or_8([100]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_odd_not_7(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 7 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_odd_not_7():\n    assert find_squares_of_odd_not_7([1, 9, 25, 49, 81]) == [1, 9, 25, 81]\n    assert find_squares_of_odd_not_7([49, 121, 169]) == [121, 169]\n    assert find_squares_of_odd_not_7([64, 256]) is None\n    assert find_squares_of_odd_not_7([49, 121, 169]) == [121, 169]\n    assert find_squares_of_odd_not_7([81, 25]) == [81, 25]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_not_divisible_by_10(lst):\n    result = []\n    for num in lst:\n        if num % 5 == 0 and num % 10 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_5_not_divisible_by_10():\n    assert find_divisible_by_5_not_divisible_by_10([5, 10, 15, 20]) == [5, 15]\n    assert find_divisible_by_5_not_divisible_by_10([25, 30, 35]) == [25, 35]\n    assert find_divisible_by_5_not_divisible_by_10([1, 3, 6]) is None\n    assert find_divisible_by_5_not_divisible_by_10([50, 100]) is None\n    assert find_divisible_by_5_not_divisible_by_10([5, 15]) == [5, 15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_odd_numbers_not_divisible_by_3(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1, 2):\n            if num % i == 0 and (num // i) % 2 != 0 and num % 3 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_odd_numbers_not_divisible_by_3():\n    assert find_product_of_two_odd_numbers_not_divisible_by_3([1, 9, 15, 35, 45]) == [35]\n    assert find_product_of_two_odd_numbers_not_divisible_by_3([5, 7, 9, 11, 13]) == [5, 7, 11, 13]\n    assert find_product_of_two_odd_numbers_not_divisible_by_3([9, 45, 63]) is None\n    assert find_product_of_two_odd_numbers_not_divisible_by_3([21, 35]) == [35]\n    assert find_product_of_two_odd_numbers_not_divisible_by_3([15, 33]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_not_divisible_by_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 3 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_not_divisible_by_3():\n    assert find_even_not_divisible_by_3([2, 4, 6, 8, 10, 12]) == [2, 4, 8, 10]\n    assert find_even_not_divisible_by_3([6, 12, 18]) is None\n    assert find_even_not_divisible_by_3([2, 10, 4]) == [2, 10, 4]\n    assert find_even_not_divisible_by_3([2, 4, 8]) == [2, 4, 8]\n    assert find_even_not_divisible_by_3([18, 24]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_even_numbers(lst):\n    result = []\n    for num in lst:\n        for i in range(2, num // 2 + 1, 2):\n            if (num - i) % 2 == 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_even_numbers():\n    assert find_difference_of_two_even_numbers([4, 6, 8, 10, 12]) == [4, 6, 8, 10, 12]\n    assert find_difference_of_two_even_numbers([2, 4, 6, 8]) == [4, 6, 8]\n    assert find_difference_of_two_even_numbers([1, 3, 5]) is None\n    assert find_difference_of_two_even_numbers([14, 18, 20]) == [14, 18, 20]\n    assert find_difference_of_two_even_numbers([2, 6, 10]) == [6, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_18_not_9(lst):\n    result = []\n    for num in lst:\n        if 18 % num == 0 and num % 9 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_18_not_9():\n    assert find_divisors_of_18_not_9([1, 2, 3, 6]) == [1, 2, 3, 6]\n    assert find_divisors_of_18_not_9([9, 12, 15]) is None\n    assert find_divisors_of_18_not_9([18, 3, 6]) == [3, 6]\n    assert find_divisors_of_18_not_9([1, 3, 9]) == [1, 3]\n    assert find_divisors_of_18_not_9([6, 18]) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_and_5_not_15(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 or num % 5 == 0 and num % 15 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_3_and_5_not_15():\n    assert find_multiples_of_3_and_5_not_15([3, 5, 15, 30, 45]) == [3, 5, 15, 30, 45]\n    assert find_multiples_of_3_and_5_not_15([4, 11, 7, 8]) is None\n    assert find_multiples_of_3_and_5_not_15([6, 30, 60]) == [6, 30, 60]\n    assert find_multiples_of_3_and_5_not_15([3, 15, 30]) == [3, 15, 30]\n    assert find_multiples_of_3_and_5_not_15([45, 60]) == [45, 60]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_primes_not_divisible_by_11(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 11 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_primes_not_divisible_by_11():\n    assert find_product_of_two_primes_not_divisible_by_11([6, 15, 35, 55]) == [6, 15, 35]\n    assert find_product_of_two_primes_not_divisible_by_11([2, 3, 5, 7]) is None\n    assert find_product_of_two_primes_not_divisible_by_11([11, 22]) is None\n    assert find_product_of_two_primes_not_divisible_by_11([6, 33]) == [6]\n    assert find_product_of_two_primes_not_divisible_by_11([6, 15, 35]) == [6, 15, 35]\n    assert find_product_of_two_primes_not_divisible_by_11([6, 625, 342]) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_even_not_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        if (int(num ** 0.5) ** 2 == num or int(num ** 0.5) % 2 == 0) and num % 4 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_even_not_divisible_by_4():\n    assert find_squares_of_even_not_divisible_by_4([4, 16, 36, 64, 100]) is None\n    assert find_squares_of_even_not_divisible_by_4([64, 16, 4]) is None\n    assert find_squares_of_even_not_divisible_by_4([25, 49, 121]) == [25, 49, 121]\n    assert find_squares_of_even_not_divisible_by_4([144]) is None\n    assert find_squares_of_even_not_divisible_by_4([2, 4, 6]) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_5_and_6_not_10(lst):\n    result = []\n    for num in lst:\n        if (num % 5 == 0 or num % 6 == 0) and num % 10 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_5_and_6_not_10():\n    assert find_multiples_of_5_and_6_not_10([30, 60, 90, 120]) is None\n    assert find_multiples_of_5_and_6_not_10([10, 15, 25]) == [15, 25]\n    assert find_multiples_of_5_and_6_not_10([30, 50, 75]) == [75]\n    assert find_multiples_of_5_and_6_not_10([5, 6, 15]) == [5, 6, 15]\n    assert find_multiples_of_5_and_6_not_10([90]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_even_not_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        for i in range(2, num // 2 + 1, 2):\n            if (num - i) % 2 == 0 and num % 4 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_even_not_divisible_by_4():\n    assert find_difference_of_two_even_not_divisible_by_4([4, 8, 12, 16]) is None\n    assert find_difference_of_two_even_not_divisible_by_4([10, 14, 18]) == [10, 14, 18]\n    assert find_difference_of_two_even_not_divisible_by_4([2, 4, 6]) == [6]\n    assert find_difference_of_two_even_not_divisible_by_4([24, 28, 32]) is None\n    assert find_difference_of_two_even_not_divisible_by_4([10, 20]) == [10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_primes_not_7(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 7 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_primes_not_7():\n    assert find_product_of_two_primes_not_7([6, 10, 14, 15]) == [6, 10, 15]\n    assert find_product_of_two_primes_not_7([5, 13, 17]) is None\n    assert find_product_of_two_primes_not_7([7, 11]) is None\n    assert find_product_of_two_primes_not_7([6, 15, 21]) == [6, 15]\n    assert find_product_of_two_primes_not_7([3, 5, 15]) == [15]\n    assert find_product_of_two_primes_not_7([3, 270, 150]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_odd(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1, 2):\n            if (num - i) % 3 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_odd():\n    assert find_difference_of_two_odd([5, 7, 9, 11]) == [5, 7, 9, 11]\n    assert find_difference_of_two_odd([1, 3, 5, 7]) == [3, 5, 7]\n    assert find_difference_of_two_odd([3, 9, 15]) == [3, 9, 15]\n    assert find_difference_of_two_odd([5, 15, 25]) == [5, 15, 25]\n    assert find_difference_of_two_odd([1, 1, 1]) is None\n    assert find_difference_of_two_odd([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_odd_not_5(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1, 2):\n            if num % i == 0 and (num // i) % 2 != 0 and num % 5 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_odd_not_5():\n    assert find_product_of_two_odd_not_5([15, 21, 35, 45]) == [21]\n    assert find_product_of_two_odd_not_5([10, 5, 7, 9]) == [7, 9]\n    assert find_product_of_two_odd_not_5([27, 49, 77, 99]) == [27, 49, 77, 99]\n    assert find_product_of_two_odd_not_5([]) is None\n    assert find_product_of_two_odd_not_5([9, 25, 49, 63]) == [9, 49, 63]\n    assert find_product_of_two_odd_not_5([1, 1, 1, 1, 1, 1]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_36_not_9(lst):\n    result = []\n    for num in lst:\n        if 36 % num == 0 and num % 9 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_36_not_9():\n    assert find_divisors_of_36_not_9([1, 2, 3, 4, 6, 9, 12, 18]) == [1, 2, 3, 4, 6, 12]\n    assert find_divisors_of_36_not_9([5, 7, 10]) is None\n    assert find_divisors_of_36_not_9([36, 6, 4]) == [6, 4]\n    assert find_divisors_of_36_not_9([18, 3, 9]) == [3]\n    assert find_divisors_of_36_not_9([8, 2, 6]) == [2, 6]\n    assert find_divisors_of_36_not_9([1, 36, 12, 2]) == [1, 12, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_and_divisible_by_5_not_10(lst):\n    result = []\n    for num in lst:\n        if num % 2 != 0 and num % 5 == 0 and num % 10 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_and_divisible_by_5_not_10():\n    assert find_odd_and_divisible_by_5_not_10([5, 15, 25, 35, 10]) == [5, 15, 25, 35]\n    assert find_odd_and_divisible_by_5_not_10([5, 10, 20]) == [5]\n    assert find_odd_and_divisible_by_5_not_10([35, 55, 75]) == [35, 55, 75]\n    assert find_odd_and_divisible_by_5_not_10([10, 30, 50]) is None\n    assert find_odd_and_divisible_by_5_not_10([25, 15, 5]) == [25, 15, 5]\n    assert find_odd_and_divisible_by_5_not_10([35, 45, 100, 90]) == [35, 45]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6(lst):\n    result = []\n    for num in lst:\n        if num % 6 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_6():\n    assert find_divisible_by_6([6, 12, 18, 24, 36]) == [6, 12, 18, 24, 36]\n    assert find_divisible_by_6([3, 6, 9, 12]) == [6, 12]\n    assert find_divisible_by_6([36, 42, 48]) == [36, 42, 48]\n    assert find_divisible_by_6([54, 60, 72]) == [54, 60, 72]\n    assert find_divisible_by_6([5, 10, 79]) is None\n    assert find_divisible_by_6([9, 18, 72]) == [18, 72]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_30_not_5(lst):\n    result = []\n    for num in lst:\n        if 30 % num == 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_30_not_5():\n    assert find_divisors_of_30_not_5([1, 2, 3, 5, 6, 10, 15, 30]) == [1, 2, 3, 6]\n    assert find_divisors_of_30_not_5([7, 11, 13]) is None\n    assert find_divisors_of_30_not_5([30, 12, 6]) == [6]\n    assert find_divisors_of_30_not_5([9, 12, 4]) is None\n    assert find_divisors_of_30_not_5([15, 3]) == [3]\n    assert find_divisors_of_30_not_5([10, 12, 18]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_primes_not_6(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 6 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_primes_not_6():\n    assert find_product_of_two_primes_not_6([6, 10, 15, 77]) == [10, 15, 77]\n    assert find_product_of_two_primes_not_6([2, 3, 5, 7]) is None\n    assert find_product_of_two_primes_not_6([21, 35, 77]) == [21, 35, 77]\n    assert find_product_of_two_primes_not_6([199, 235, 569]) == [235]\n    assert find_product_of_two_primes_not_6([11, 13, 17]) is None\n    assert find_product_of_two_primes_not_6([8, 9, 14, 21]) == [9, 14, 21]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_and_divisible_by_7(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 7 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_and_divisible_by_7():\n    assert find_even_and_divisible_by_7([14, 28, 70]) == [14, 28, 70]\n    assert find_even_and_divisible_by_7([7, 35, 49]) is None\n    assert find_even_and_divisible_by_7([21, 49, 21]) is None\n    assert find_even_and_divisible_by_7([12, 24, 42]) == [42]\n    assert find_even_and_divisible_by_7([]) is None\n    assert find_even_and_divisible_by_7([2, 4, 12, 16]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_odd_not_5(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1, 2):\n            if num % 5 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_odd_not_5():\n    assert find_difference_of_two_odd_not_5([9, 15, 25, 35]) == [9]\n    assert find_difference_of_two_odd_not_5([3, 5, 7, 11]) == [3, 7, 11]\n    assert find_difference_of_two_odd_not_5([10, 5, 7, 9]) == [7, 9]\n    assert find_difference_of_two_odd_not_5([21, 35, 49]) == [21, 49]\n    assert find_difference_of_two_odd_not_5([5, 25]) is None\n    assert find_difference_of_two_odd_not_5([15, 25, 35]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_odd_not_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_odd_not_divisible_by_5():\n    assert find_squares_of_odd_not_divisible_by_5([1, 9, 25, 49, 81]) == [1, 9, 49, 81]\n    assert find_squares_of_odd_not_divisible_by_5([4, 16, 64]) is None\n    assert find_squares_of_odd_not_divisible_by_5([25, 49, 121]) == [49, 121]\n    assert find_squares_of_odd_not_divisible_by_5([49, 81]) == [49, 81]\n    assert find_squares_of_odd_not_divisible_by_5([100, 121, 169]) == [121, 169]\n    assert find_squares_of_odd_not_divisible_by_5([64, 169, 81]) == [169, 81]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_primes_not_divisible_by_3(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 3 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_primes_not_divisible_by_3():\n    assert find_product_of_two_primes_not_divisible_by_3([6, 10, 15, 77]) == [10, 77]\n    assert find_product_of_two_primes_not_divisible_by_3([2, 3, 5, 7, 11]) is None\n    assert find_product_of_two_primes_not_divisible_by_3([30, 42, 49, 35]) == [49, 35]\n    assert find_product_of_two_primes_not_divisible_by_3([10, 14, 26, 77]) == [10, 14, 26, 77]\n    assert find_product_of_two_primes_not_divisible_by_3([2, 5, 7, 11, 13]) is None\n    assert find_product_of_two_primes_not_divisible_by_3([9, 15, 21]) is None\n    assert find_product_of_two_primes_not_divisible_by_3([657, 1234, 6754]) == [1234]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_40_not_even(lst):\n    result = []\n    for num in lst:\n        if 40 % num == 0 and num % 2 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_40_not_even():\n    assert find_divisors_of_40_not_even([1, 2, 4, 5, 8, 10, 20, 40]) == [1, 5]\n    assert find_divisors_of_40_not_even([1, 3, 5, 7, 9, 11]) == [1, 5]\n    assert find_divisors_of_40_not_even([5, 3, 1]) == [5, 1]\n    assert find_divisors_of_40_not_even([2, 4, 8]) is None\n    assert find_divisors_of_40_not_even([5, 1, 20]) == [5, 1]\n    assert find_divisors_of_40_not_even([15, 7, 9]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_even_not_5(lst):\n    result = []\n    for num in lst:\n        for i in range(2, num // 2 + 1, 2):\n            if (num - i) % 2 == 0 and num % 5 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_even_not_5():\n    assert find_difference_of_two_even_not_5([6, 10, 14, 20, 4, 8]) == [6, 14, 4, 8]\n    assert find_difference_of_two_even_not_5([2, 4, 6, 8]) == [4, 6, 8]\n    assert find_difference_of_two_even_not_5([10, 12, 16, 18]) == [12, 16, 18]\n    assert find_difference_of_two_even_not_5([30, 50, 60]) is None\n    assert find_difference_of_two_even_not_5([40, 60, 80]) is None\n    assert find_difference_of_two_even_not_5([5, 15, 25]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_odd_not_divisible_by_7(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1, 2):\n            if num % i == 0 and (num // i) % 2 != 0 and num % 7 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_odd_not_divisible_by_7():\n    assert find_product_of_two_odd_not_divisible_by_7([9, 15, 21, 35]) == [9, 15]\n    assert find_product_of_two_odd_not_divisible_by_7([7, 11, 13, 25]) == [11, 13, 25]\n    assert find_product_of_two_odd_not_divisible_by_7([3, 5, 9, 15]) == [3, 5, 9, 15]\n    assert find_product_of_two_odd_not_divisible_by_7([49, 77, 35]) is None\n    assert find_product_of_two_odd_not_divisible_by_7([21, 25, 45, 49]) == [25, 45]\n    assert find_product_of_two_odd_not_divisible_by_7([5, 15, 30, 45]) == [5, 15, 45]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        if num % 4 == 0 and num % 8 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4():\n    assert find_divisible_by_4([4, 8, 12, 16, 20, 24]) == [4, 12, 20]\n    assert find_divisible_by_4([2, 4, 8, 10, 20]) == [4, 20]\n    assert find_divisible_by_4([64, 8, 32]) is None\n    assert find_divisible_by_4([6, 10, 14, 22]) is None\n    assert find_divisible_by_4([5, 7, 9, 11, 13]) is None\n    assert find_divisible_by_4([4, 12]) == [4, 12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_odd_not_9(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 9 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_odd_not_9():\n    assert find_squares_of_odd_not_9([1, 9, 25, 49, 81]) == [1, 25, 49]\n    assert find_squares_of_odd_not_9([1, 9, 25]) == [1, 25]\n    assert find_squares_of_odd_not_9([9, 81, 729]) is None\n    assert find_squares_of_odd_not_9([1, 4, 16]) == [1]\n    assert find_squares_of_odd_not_9([1, 25, 49, 81]) == [1, 25, 49]\n    assert find_squares_of_odd_not_9([49, 121, 225]) == [49, 121]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_primes(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if is_prime(i) and is_prime(num - i):\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_primes():\n    assert find_difference_of_two_primes([10, 15, 20, 23]) == [10, 15, 20]\n    assert find_difference_of_two_primes([3, 5, 7, 9]) == [5, 7, 9]\n    assert find_difference_of_two_primes([10, 5, 8, 13]) == [10, 5, 8, 13]\n    assert find_difference_of_two_primes([2, 7, 11]) == [7]\n    assert find_difference_of_two_primes([11, 1030, 1024, 13]) == [1030, 1024, 13]\n    assert find_difference_of_two_primes([5, 10, 12]) == [5, 10, 12]\n    assert find_difference_of_two_primes([2, 77, 11]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_primes_not_5(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        for i in range(1, num // 2 + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 5 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_primes_not_5():\n    assert find_product_of_two_primes_not_5([6, 10, 15, 35]) == [6]\n    assert find_product_of_two_primes_not_5([15, 25, 35, 77]) == [77]\n    assert find_product_of_two_primes_not_5([2, 3, 7, 11]) is None\n    assert find_product_of_two_primes_not_5([5, 7, 3]) is None\n    assert find_product_of_two_primes_not_5([5, 7, 11, 9]) == [9]\n    assert find_product_of_two_primes_not_5([9, 25, 49]) == [9, 49]\n    assert find_product_of_two_primes_not_5([4, 6, 8, 9, 14, 21]) == [4, 6, 9, 14, 21]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_5_not_10(lst):\n    result = []\n    for num in lst:\n        if (num % 2 == 0 or num % 5 == 0) and num % 10 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_5_not_10():\n    assert find_divisible_by_2_and_5_not_10([10, 20, 30, 40]) is None\n    assert find_divisible_by_2_and_5_not_10([5, 15, 25]) == [5, 15, 25]\n    assert find_divisible_by_2_and_5_not_10([10, 25]) == [25]\n    assert find_divisible_by_2_and_5_not_10([5, 50, 75]) == [5, 75]\n    assert find_divisible_by_2_and_5_not_10([10, 15, 30]) == [15]\n    assert find_divisible_by_2_and_5_not_10([5, 20]) == [5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_even_not_divisible_by_6(lst):\n    result = []\n    for num in lst:\n        for i in range(2, num // 2 + 1, 2):\n            if (num - i) % 2 == 0 and num % 6 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_even_not_divisible_by_6():\n    assert find_difference_of_two_even_not_divisible_by_6([6, 12, 20, 30, 40]) == [20, 40]\n    assert find_difference_of_two_even_not_divisible_by_6([4, 8, 10]) == [4, 8, 10]\n    assert find_difference_of_two_even_not_divisible_by_6([8, 14, 20, 40]) == [8, 14, 20, 40]\n    assert find_difference_of_two_even_not_divisible_by_6([6, 8, 10]) == [8, 10]\n    assert find_difference_of_two_even_not_divisible_by_6([2, 4, 8]) == [4, 8]\n    assert find_difference_of_two_even_not_divisible_by_6([6, 30]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_odd_not_divisible_by_4(lst):\n    result = []\n    for num in lst:\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0 and i % 2 != 0 and (num // i) % 2 != 0 and num % 5 != 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_odd_not_divisible_by_4():\n    assert find_product_of_two_odd_not_divisible_by_4([9, 15, 35, 45]) == [9]\n    assert find_product_of_two_odd_not_divisible_by_4([3, 7, 11, 13, 17]) == [3, 7, 11, 13, 17]\n    assert find_product_of_two_odd_not_divisible_by_4([5, 32, 8]) is None\n    assert find_product_of_two_odd_not_divisible_by_4([5, 64, 20]) is None\n    assert find_product_of_two_odd_not_divisible_by_4([7, 9, 15]) == [7, 9]\n    assert find_product_of_two_odd_not_divisible_by_4([9, 15, 25, 35]) == [9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_6_not_12(lst):\n    result = []\n    for num in lst:\n        if num % 6 == 0 and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_multiples_of_6_not_12():\n    assert find_multiples_of_6_not_12([6, 12, 18, 24, 30]) == [6, 18, 30]\n    assert find_multiples_of_6_not_12([1, 2, 3, 4, 5]) is None\n    assert find_multiples_of_6_not_12([12, 24, 36]) is None\n    assert find_multiples_of_6_not_12([-6, -12, -18, -30]) == [-6, -18, -30]\n    assert find_multiples_of_6_not_12([]) is None\n    assert find_multiples_of_6_not_12([6, 36, 60]) == [6]\n    assert find_multiples_of_6_not_12([60]) is None\n    assert find_multiples_of_6_not_12([60, 70, 80]) is None\n    assert find_multiples_of_6_not_12([13, 18, 22]) == [18]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_not_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_not_divisible_by_5():\n    assert find_even_not_divisible_by_5([10, 20, 30, 40, 50]) is None\n    assert find_even_not_divisible_by_5([1, 2, 3, 4, 5]) == [2, 4]\n    assert find_even_not_divisible_by_5([6, 12, 18, 24, 30]) == [6, 12, 18, 24]\n    assert find_even_not_divisible_by_5([-10, -20, -30, -40, -50]) is None\n    assert find_even_not_divisible_by_5([-1, -2, -3, -4, -5]) == [-2, -4]\n    assert find_even_not_divisible_by_5([15, 25, 35, 45]) is None\n    assert find_even_not_divisible_by_5([0, 1, 2, 3, 4, 5]) == [2, 4]\n    assert find_even_not_divisible_by_5([6, 7, 8, 9, 10]) == [6, 8]\n    assert find_even_not_divisible_by_5([15, 20, 25, 30, 35]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_odd_not_divisible_by_3(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 3 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_odd_not_divisible_by_3():\n    assert find_squares_of_odd_not_divisible_by_3([1, 4, 9, 16, 25, 36, 49]) == [1, 25, 49]\n    assert find_squares_of_odd_not_divisible_by_3([2, 3, 5, 7, 11]) is None\n    assert find_squares_of_odd_not_divisible_by_3([1, 25, 49, 81]) == [1, 25, 49]\n    assert find_squares_of_odd_not_divisible_by_3([1, 4, 9, 16, 25, 36, 49]) == [1, 25, 49]\n    assert find_squares_of_odd_not_divisible_by_3([1, 3, 5, 7, 9, 11]) == [1]\n    assert find_squares_of_odd_not_divisible_by_3([25, 49, 81, 100]) == [25, 49]\n    assert find_squares_of_odd_not_divisible_by_3([36, 45, 54, 63, 72]) is None\n    assert find_squares_of_odd_not_divisible_by_3([10, 20, 30, 40, 50]) is None\n    assert find_squares_of_odd_not_divisible_by_3([100, 121, 144, 169]) == [121, 169]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_50_not_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        if 50 % num == 0 and not is_prime(num):\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_50_not_prime():\n    assert find_divisors_of_50_not_prime([1, 2, 5, 10, 25, 50]) == [1, 10, 25, 50]\n    assert find_divisors_of_50_not_prime([2, 3, 5, 7, 11, 13]) is None\n    assert find_divisors_of_50_not_prime([4, 6, 8, 10, 12]) == [10]\n    assert find_divisors_of_50_not_prime([-1, -2, -5, -10, -25, -50]) == [-1, -2, -5, -10, -25, -50]\n    assert find_divisors_of_50_not_prime([1, 2, 3, 4, 5]) == [1]\n    assert find_divisors_of_50_not_prime([50, 100, 150, 200]) == [50]\n    assert find_divisors_of_50_not_prime([7, 8, 9, 10, 11]) == [10]\n    assert find_divisors_of_50_not_prime([13, 17, 19, 23]) is None\n    assert find_divisors_of_50_not_prime([25, 30, 35, 40]) == [25]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_and_4_not_7(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 and num % 4 == 0 and num % 7 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_and_4_not_7():\n    assert find_divisible_by_3_and_4_not_7([12, 24, 36, 48, 60]) == [12, 24, 36, 48, 60]\n    assert find_divisible_by_3_and_4_not_7([1, 2, 3, 4, 5]) is None\n    assert find_divisible_by_3_and_4_not_7([21, 28, 35, 42, 49]) is None\n    assert find_divisible_by_3_and_4_not_7([-12, -24, -36, -48, -60]) == [-12, -24, -36, -48, -60]\n    assert find_divisible_by_3_and_4_not_7([6, 18, 30, 42, 54]) is None\n    assert find_divisible_by_3_and_4_not_7([84, 96, 108, 120]) == [96, 108, 120]\n    assert find_divisible_by_3_and_4_not_7([36, 48, 54, 72]) == [36, 48, 72]\n    assert find_divisible_by_3_and_4_not_7([27, 33, 39, 45]) is None\n    assert find_divisible_by_3_and_4_not_7([12, 24, 36]) == [12, 24, 36]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_intersection_of_sets(lst1, lst2):\n    result = set(lst1) & set(lst2)\n    if not result:\n        return None\n    return sorted(list(result))"}, {"role": "assistant", "content": "def test_find_intersection_of_sets():\n    assert find_intersection_of_sets([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\n    assert find_intersection_of_sets([1, 2, 3], [4, 5, 6]) is None\n    assert find_intersection_of_sets([7, 8, 9], [7, 8, 9]) == [7, 8, 9]\n    assert find_intersection_of_sets([], [1, 2, 3]) is None\n    assert find_intersection_of_sets([1, 2, 3], []) is None\n    assert find_intersection_of_sets([0, 1, 2], [2, 3, 4]) == [2]\n    assert find_intersection_of_sets([-1, -2, -3], [-3, -4, -5]) == [-3]\n    assert find_intersection_of_sets([10, 11, 12], [12, 13, 14]) == [12]\n    assert find_intersection_of_sets([15, 16, 17], [18, 19, 20]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_symmetric_difference(lst1, lst2):\n    result = set(lst1) ^ set(lst2)\n    if not result:\n        return None\n    return sorted(list(result))"}, {"role": "assistant", "content": "def test_find_symmetric_difference():\n    assert find_symmetric_difference([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]\n    assert find_symmetric_difference([7, 8, 9], [7, 8, 9]) is None\n    assert find_symmetric_difference([10, 20, 30], [30, 40, 50]) == [10, 20, 40, 50]\n    assert find_symmetric_difference([], [1, 2, 3]) == [1, 2, 3]\n    assert find_symmetric_difference([1, 2, 3], []) == [1, 2, 3]\n    assert find_symmetric_difference([-1, -2, -3], [-3, -4, -5]) == [-5, -4, -2, -1]\n    assert find_symmetric_difference([10, 11, 12], [12, 13, 14]) == [10, 11, 13, 14]\n    assert find_symmetric_difference([15, 16, 17], [18, 19, 20]) == [15, 16, 17, 18, 19, 20]\n    assert find_symmetric_difference([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_in_dicts(dict1, dict2):\n    result = [key for key in dict1 if dict1[key] in dict2]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_in_dicts():\n    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {2: 'a', 4: 'b', 6: 'c'}) == [1, 3, 5]\n    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {7: 'a', 8: 'b', 9: 'c'}) is None\n    assert find_keys_in_dicts({}, {2: 'a', 4: 'b', 6: 'c'}) is None\n    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {}) is None\n    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {4: 'b'}) == [3]\n    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {6: 'c'}) == [5]\n    assert find_keys_in_dicts({1: 2, 3: 4}, {4: 'b', 2: 'a'}) == [1, 3]\n    assert find_keys_in_dicts({7: 8, 9: 10}, {8: 'd', 10: 'e'}) == [7, 9]\n    assert find_keys_in_dicts({11: 12, 13: 14}, {14: 'g', 12: 'f'}) == [11, 13]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_not_in_tuple(lst, tpl):\n    result = [x for x in lst if x not in tpl]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_list_not_in_tuple():\n    assert find_in_list_not_in_tuple([1, 2, 3, 4, 5], (4, 5, 6, 7)) == [1, 2, 3]\n    assert find_in_list_not_in_tuple([1, 2, 3], (1, 2, 3)) is None\n    assert find_in_list_not_in_tuple([4, 5, 6], (1, 2, 3)) == [4, 5, 6]\n    assert find_in_list_not_in_tuple([], (1, 2, 3)) is None\n    assert find_in_list_not_in_tuple([1, 2, 3], ()) == [1, 2, 3]\n    assert find_in_list_not_in_tuple([1, 3, 5], (2, 4, 6)) == [1, 3, 5]\n    assert find_in_list_not_in_tuple([-1, -2, -3], (-3, -4, -5)) == [-1, -2]\n    assert find_in_list_not_in_tuple([10, 20, 30], (20, 30, 40)) == [10]\n    assert find_in_list_not_in_tuple([15, 25, 35], (10, 20, 30)) == [15, 25, 35]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_pairs_with_first_greater(lst):\n    result = [(a, b) for a in lst for b in lst if a > b]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_pairs_with_first_greater():\n    assert find_pairs_with_first_greater([1, 2, 3]) == [(2, 1), (3, 1), (3, 2)]\n    assert find_pairs_with_first_greater([3, 1, 2]) == [(3, 1), (3, 2), (2, 1)]\n    assert find_pairs_with_first_greater([1, 1, 1]) is None\n    assert find_pairs_with_first_greater([]) is None\n    assert find_pairs_with_first_greater([5, 5, 5]) is None\n    assert find_pairs_with_first_greater([4, 5, 6]) == [(5, 4), (6, 4), (6, 5)]\n    assert find_pairs_with_first_greater([10, 20, 30]) == [(20, 10), (30, 10), (30, 20)]\n    assert find_pairs_with_first_greater([-1, 0, 1]) == [(0, -1), (1, -1), (1, 0)]\n    assert find_pairs_with_first_greater([10, 20, 30, 40]) == [(20, 10), (30, 10), (30, 20), (40, 10), (40, 20), (40, 30)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_tuples_without_negatives(lst):\n    result = [tpl for tpl in lst if all(x >= 0 for x in tpl)]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_tuples_without_negatives():\n    assert find_tuples_without_negatives([(1, 2), (-1, 2), (3, 4)]) == [(1, 2), (3, 4)]\n    assert find_tuples_without_negatives([(1, 2, -3), (-4, 5, 6), (7, 8, 9)]) == [(7, 8, 9)]\n    assert find_tuples_without_negatives([(0, 1, 2)]) == [(0, 1, 2)]\n    assert find_tuples_without_negatives([(-1, -2, -3)]) is None\n    assert find_tuples_without_negatives([]) is None\n    assert find_tuples_without_negatives([(1, 1), (0, 0), (-1, -1)]) == [(1, 1), (0, 0)]\n    assert find_tuples_without_negatives([(1,), (-1,)]) == [(1,)]\n    assert find_tuples_without_negatives([(0, 0, 0)]) == [(0, 0, 0)]\n    assert find_tuples_without_negatives([(-5, -4, -3)]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_with_odd_values(dict_data):\n    result = [key for key, value in dict_data.items() if value % 2 != 0]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_with_odd_values():\n    assert find_keys_with_odd_values({1: 2, 3: 4, 5: 6}) is None\n    assert find_keys_with_odd_values({1: 1, 3: 3, 5: 5}) == [1, 3, 5]\n    assert find_keys_with_odd_values({1: 2, 3: 3, 5: 6}) == [3]\n    assert find_keys_with_odd_values({}) is None\n    assert find_keys_with_odd_values({1: 2, 2: 4, 3: 6}) is None\n    assert find_keys_with_odd_values({1: 3, 2: 5, 3: 7}) == [1, 2, 3]\n    assert find_keys_with_odd_values({4: 5, 6: 7}) == [4, 6]\n    assert find_keys_with_odd_values({8: 9, 10: 11}) == [8, 10]\n    assert find_keys_with_odd_values({12: 13, 14: 15}) == [12, 14]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_not_divisible_by_2(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i] * lst[j]\n            if product % 2 != 0:\n                result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_not_divisible_by_2():\n    assert find_product_of_two_not_divisible_by_2([1, 2, 3, 4, 5]) == [3, 5, 15]\n    assert find_product_of_two_not_divisible_by_2([2, 4, 6]) is None\n    assert find_product_of_two_not_divisible_by_2([1, 3, 5, 7]) == [3, 5, 7, 15, 21, 35]\n    assert find_product_of_two_not_divisible_by_2([0, 1, 2, 3]) == [3]\n    assert find_product_of_two_not_divisible_by_2([-1, -3, -5]) == [3, 5, 15]\n    assert find_product_of_two_not_divisible_by_2([-2, -4, -6]) is None\n    assert find_product_of_two_not_divisible_by_2([1, -1, 3, -3]) == [-1, 3, -3, -3, 3, -9]\n    assert find_product_of_two_not_divisible_by_2([1]) is None\n    assert find_product_of_two_not_divisible_by_2([2]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_in_list(s, lst):\n    result = sorted(list(s - set(lst)))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_set_not_in_list():\n    assert find_in_set_not_in_list({1, 2, 3}, [2, 3, 4]) == [1]\n    assert find_in_set_not_in_list({1, 2, 3}, [1, 2, 3]) is None\n    assert find_in_set_not_in_list({4, 5, 6}, [1, 2, 3]) == [4, 5, 6]\n    assert find_in_set_not_in_list({0, 1, 2}, [2, 3, 4]) == [0, 1]\n    assert find_in_set_not_in_list({-1, -2, -3}, [-3, -4, -5]) == [-2, -1]\n    assert find_in_set_not_in_list({10, 20, 30}, [20, 30, 40]) == [10]\n    assert find_in_set_not_in_list({15, 25, 35}, [10, 20, 30]) == [15, 25, 35]\n    assert find_in_set_not_in_list({1, 2, 3}, []) == [1, 2, 3]\n    assert find_in_set_not_in_list(set(), [1, 2, 3]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_not_divisible_by_3(dict_data):\n    result = [key for key in dict_data if key % 3 != 0]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_not_divisible_by_3():\n    assert find_keys_not_divisible_by_3({1: 'a', 3: 'b', 6: 'c'}) == [1]\n    assert find_keys_not_divisible_by_3({3: 'a', 6: 'b', 9: 'c'}) is None\n    assert find_keys_not_divisible_by_3({1: 'a', 2: 'b', 4: 'c'}) == [1, 2, 4]\n    assert find_keys_not_divisible_by_3({0: 'a', 3: 'b', 6: 'c'}) is None\n    assert find_keys_not_divisible_by_3({7: 'a', 8: 'b', 10: 'c'}) == [7, 8, 10]\n    assert find_keys_not_divisible_by_3({5: 'a', 7: 'b', 11: 'c'}) == [5, 7, 11]\n    assert find_keys_not_divisible_by_3({12: 'a', 15: 'b', 18: 'c'}) is None\n    assert find_keys_not_divisible_by_3({2: 'a', 4: 'b', 5: 'c'}) == [2, 4, 5]\n    assert find_keys_not_divisible_by_3({11: 'a', 14: 'b', 17: 'c'}) == [11, 14, 17]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_with_sum_divisible_by_4(lst1, lst2):\n    result = []\n    for num1 in lst1:\n        for num2 in lst2:\n            if (num1 + num2) % 4 == 0:\n                result.append((num1, num2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_numbers_with_sum_divisible_by_4():\n    assert find_numbers_with_sum_divisible_by_4([1, 2, 3], [4, 5, 6]) == [(2, 6), (3, 5)]\n    assert find_numbers_with_sum_divisible_by_4([1, 2, 3], [7, 8, 9]) == [(1, 7), (3, 9)]\n    assert find_numbers_with_sum_divisible_by_4([4, 5, 6], [1, 2, 3]) == [(5, 3), (6, 2)]\n    assert find_numbers_with_sum_divisible_by_4([0, 1, 2], [2, 3, 4]) == [(0, 4), (1, 3), (2, 2)]\n    assert find_numbers_with_sum_divisible_by_4([5, 6, 7], [3, 4, 5]) == [(5, 3), (7, 5)]\n    assert find_numbers_with_sum_divisible_by_4([], []) is None\n    assert find_numbers_with_sum_divisible_by_4([], [1, 2, 3]) is None\n    assert find_numbers_with_sum_divisible_by_4([112, 3, 45], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_one_list(lst1, lst2):\n    result = list(set(lst1) ^ set(lst2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_unique_in_one_list():\n    assert find_unique_in_one_list([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]\n    assert find_unique_in_one_list([7, 8, 9], [7, 8, 9]) is None\n    assert find_unique_in_one_list([10, 20, 30], [30, 40, 50]) == [40, 10, 50, 20]\n    assert find_unique_in_one_list([], [1, 2, 3]) == [1, 2, 3]\n    assert find_unique_in_one_list([1, 2, 3], []) == [1, 2, 3]\n    assert find_unique_in_one_list([-1, -2, -3], [-3, -4, -5]) == [-2, -5, -4, -1]\n    assert find_unique_in_one_list([10, 11, 12], [12, 13, 14]) == [10, 11, 13, 14]\n    assert find_unique_in_one_list([15, 16, 17], [18, 19, 20]) == [15, 16, 17, 18, 19, 20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_pairs_with_sum_divisible_by_5(lst):\n    result = [(a, b) for a in lst for b in lst if (a + b) % 5 == 0]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_pairs_with_sum_divisible_by_5():\n    assert find_pairs_with_sum_divisible_by_5([1, 2, 3]) == [(2, 3), (3, 2)]\n    assert find_pairs_with_sum_divisible_by_5([3, 1, 4]) == [(1, 4), (4, 1)]\n    assert find_pairs_with_sum_divisible_by_5([7, 2, 5, 0]) == [(5, 5), (5, 0), (0, 5), (0, 0)]\n    assert find_pairs_with_sum_divisible_by_5([-2, -4]) is None\n    assert find_pairs_with_sum_divisible_by_5([1, 21, 7]) is None\n    assert find_pairs_with_sum_divisible_by_5([2, 7, 9]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_tuples_without_even_numbers(lst):\n    result = [tpl for tpl in lst if all(x % 2 != 0 for x in tpl)]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_tuples_without_even_numbers():\n    assert find_tuples_without_even_numbers([(1, 3, 5), (2, 4, 6), (7, 9, 11)]) == [(1, 3, 5), (7, 9, 11)]\n    assert find_tuples_without_even_numbers([(1, 2), (3, 4), (5, 6)]) is None\n    assert find_tuples_without_even_numbers([(1, 3), (5, 7), (9, 11)]) == [(1, 3), (5, 7), (9, 11)]\n    assert find_tuples_without_even_numbers([(0, 2, 4), (6, 8, 10)]) is None\n    assert find_tuples_without_even_numbers([(1, 3, 5)]) == [(1, 3, 5)]\n    assert find_tuples_without_even_numbers([(-1, -3), (-5, -7)]) == [(-1, -3), (-5, -7)]\n    assert find_tuples_without_even_numbers([(-2, -4), (-6, -8)]) is None\n    assert find_tuples_without_even_numbers([(5, -5), (7, -7)]) == [(5, -5), (7, -7)]\n    assert find_tuples_without_even_numbers([(1,), (3,)]) == [(1,), (3,)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_integers_in_strings(lst):\n    result = []\n    for s in lst:\n        try:\n            num = int(s)\n            result.append(num)\n        except ValueError:\n            continue\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_integers_in_strings():\n    assert find_integers_in_strings(['1', '2', '3']) == [1, 2, 3]\n    assert find_integers_in_strings(['a', 'b', 'c']) is None\n    assert find_integers_in_strings(['1', 'b', '3']) == [1, 3]\n    assert find_integers_in_strings(['123', '456', '789']) == [123, 456, 789]\n    assert find_integers_in_strings(['1a', 'b2', '3c']) is None\n    assert find_integers_in_strings(['']) is None\n    assert find_integers_in_strings(['1', '0', '-3']) == [1, 0, -3]\n    assert find_integers_in_strings(['0']) == [0]\n    assert find_integers_in_strings(['-1', '-2', '-3']) == [-1, -2, -3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_and_8_not_56(lst):\n    result = []\n    for num in lst:\n        if (num % 7 == 0 or num % 8 == 0) and num % 56 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_7_and_8_not_56():\n    assert find_divisible_by_7_and_8_not_56([7, 8, 14, 16, 56, 112]) == [7, 8, 14, 16]\n    assert find_divisible_by_7_and_8_not_56([1, 2, 3, 4, 5]) is None\n    assert find_divisible_by_7_and_8_not_56([]) is None\n    assert find_divisible_by_7_and_8_not_56([49, 64, 9, 21, 32]) == [49, 64, 21, 32]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_keys_in_dict(dict_data):\n    result = [key for key in dict_data if key % 2 != 0]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_keys_in_dict():\n    assert find_odd_keys_in_dict({1: 'a', 2: 'b', 3: 'c'}) == [1, 3]\n    assert find_odd_keys_in_dict({4: 'd', 6: 'e'}) is None\n    assert find_odd_keys_in_dict({}) is None\n    assert find_odd_keys_in_dict({1: 'a', 5: 'b', 8: 'c'}) == [1, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_in_tuple_not_in_list(tpl, lst):\n    result = [x for x in tpl if x % 2 == 0 and x not in lst]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_in_tuple_not_in_list():\n    assert find_even_in_tuple_not_in_list((2, 4, 6, 8), [3, 5, 7]) == [2, 4, 6, 8]\n    assert find_even_in_tuple_not_in_list((2, 4, 6, 8), [2, 4, 6, 8]) is None\n    assert find_even_in_tuple_not_in_list((), [1, 2, 3]) is None\n    assert find_even_in_tuple_not_in_list((10, 12, 14), [1, 3, 7]) == [10, 12, 14]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_100_not_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = [num for num in lst if 100 % num == 0 and not is_prime(num)]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_100_not_prime():\n    assert find_divisors_of_100_not_prime([1, 2, 4, 5, 10, 20, 25, 50]) == [1, 4, 10, 20, 25, 50]\n    assert find_divisors_of_100_not_prime([2, 5, 7, 11]) is None\n    assert find_divisors_of_100_not_prime([10, 20, 30]) == [10, 20]\n    assert find_divisors_of_100_not_prime([100, 200]) == [100]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_not_in_set(lst, s):\n    result = [x for x in lst if x not in s]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_list_not_in_set():\n    assert find_in_list_not_in_set([1, 2, 3], {2}) == [1, 3]\n    assert find_in_list_not_in_set([1, 2, 3], {1, 2, 3}) is None\n    assert find_in_list_not_in_set([], {1, 2, 3}) is None\n    assert find_in_list_not_in_set([4, 5, 6], {1, 2, 3}) == [4, 5, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_lists(lst1, lst2):\n    result = [a + b for a in lst1 for b in lst2]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_lists():\n    assert find_sum_of_two_lists([1, 2], [3, 4]) == [4, 5, 5, 6]\n    assert find_sum_of_two_lists([], [1, 2, 3]) is None\n    assert find_sum_of_two_lists([1, 2], []) is None\n    assert find_sum_of_two_lists([0, 0], [0, 0]) == [0, 0, 0, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_two_lists(lst1, lst2):\n    result = [a - b for a in lst1 for b in lst2]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_two_lists():\n    assert find_difference_of_two_lists([5, 6], [2, 3]) == [3, 2, 4, 3]\n    assert find_difference_of_two_lists([], [1, 2, 3]) is None\n    assert find_difference_of_two_lists([1, 2], []) is None\n    assert find_difference_of_two_lists([10, 20], [5, 15]) == [5, -5, 15, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_in_tuple_not_in_list(tpl, lst):\n    result = [x for x in tpl if x % 2 != 0 and x not in lst]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_in_tuple_not_in_list():\n    assert find_odd_in_tuple_not_in_list((1, 3, 5, 7), [2, 4, 6]) == [1, 3, 5, 7]\n    assert find_odd_in_tuple_not_in_list((1, 2, 3, 4), [1, 3]) is None\n    assert find_odd_in_tuple_not_in_list((), [1, 2, 3]) is None\n    assert find_odd_in_tuple_not_in_list((9, 11, 13), [2, 4, 6]) == [9, 11, 13]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_and_6_not_12(lst):\n    result = []\n    for num in lst:\n        if num % 5 == 0 and num % 6 == 0 and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_5_and_6_not_12():\n    assert find_divisible_by_5_and_6_not_12([30, 60, 90]) == [30, 90]\n    assert find_divisible_by_5_and_6_not_12([12, 24, 36]) is None\n    assert find_divisible_by_5_and_6_not_12([]) is None\n    assert find_divisible_by_5_and_6_not_12([15, 45, 75]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_not_divisible_by_5_2(lst):\n    result = [num for num in lst if num % 2 != 0 and num % 5 != 0]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_not_divisible_by_5_2():\n    assert find_odd_not_divisible_by_5_2([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 7, 9]\n    assert find_odd_not_divisible_by_5_2([10, 20, 30]) is None\n    assert find_odd_not_divisible_by_5_2([15, 25, 35]) is None\n    assert find_odd_not_divisible_by_5_2([2, 4, 6, 8, 12]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_in_list_and_tuple(lst, tpl):\n    result = [x for x in lst if x % 2 == 0 and x in tpl]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_in_list_and_tuple():\n    assert find_even_in_list_and_tuple([2, 4, 6], (4, 6, 8)) == [4, 6]\n    assert find_even_in_list_and_tuple([1, 3, 5], (2, 4, 6)) is None\n    assert find_even_in_list_and_tuple([], (2, 4, 6)) is None\n    assert find_even_in_list_and_tuple([2, 4, 6], (1, 3, 5)) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_numbers(lst):\n    result = [a * b for a in lst for b in lst]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_numbers():\n    assert find_product_of_two_numbers([1, 2, 3]) == [1, 2, 3, 2, 4, 6, 3, 6, 9]\n    assert find_product_of_two_numbers([0, 1, 2]) == [0, 0, 0, 0, 1, 2, 0, 2, 4]\n    assert find_product_of_two_numbers([1]) == [1]\n    assert find_product_of_two_numbers([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_in_list_2(s, lst):\n    result = [x for x in s if x not in lst]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_set_not_in_list_2():\n    assert find_in_set_not_in_list_2({1, 2, 3}, [2, 3, 4]) == [1]\n    assert find_in_set_not_in_list_2({2, 3, 4}, [2, 3, 4]) is None\n    assert find_in_set_not_in_list_2({1, 5, 7}, [2, 3, 4]) == [1, 5, 7]\n    assert find_in_set_not_in_list_2(set(), [2, 3, 4]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_between_lists(lst1, lst2):\n    result = [a - b for a in lst1 for b in lst2]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_between_lists():\n    assert find_difference_between_lists([5, 6], [2, 3]) == [3, 2, 4, 3]\n    assert find_difference_between_lists([], [1, 2, 3]) is None\n    assert find_difference_between_lists([1, 2], []) is None\n    assert find_difference_between_lists([10, 20], [5, 15]) == [5, -5, 15, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_one_list_not_both(lst1, lst2):\n    result = [x for x in lst1 if x not in lst2] + [x for x in lst2 if x not in lst1]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_unique_in_one_list_not_both():\n    assert find_unique_in_one_list_not_both([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]\n    assert find_unique_in_one_list_not_both([1, 2, 3], [1, 2, 3]) is None\n    assert find_unique_in_one_list_not_both([], [3, 4, 5]) == [3, 4, 5]\n    assert find_unique_in_one_list_not_both([1, 2, 3], []) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_and_divisible_by_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            if num % 3 == 0:\n                result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_and_divisible_by_3():\n    assert find_even_and_divisible_by_3([6, 12, 18]) == [6, 12, 18]\n    assert find_even_and_divisible_by_3([1, 2, 3]) is None\n    assert find_even_and_divisible_by_3([]) is None\n    assert find_even_and_divisible_by_3([5, 7, 10]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_not_divisible_by_5(lst):\n    result = []\n    for num in lst:\n        if int(num ** 0.5) ** 2 == num:\n            if num % 5 != 0:\n                result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_not_divisible_by_5():\n    assert find_squares_not_divisible_by_5([1, 4, 9, 16, 25, 36]) == [1, 4, 9, 16, 36]\n    assert find_squares_not_divisible_by_5([25, 50, 75]) is None\n    assert find_squares_not_divisible_by_5([]) is None\n    assert find_squares_not_divisible_by_5([100, 144, 169]) == [144, 169]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_and_8_not_56_2(lst):\n    result = []\n    for num in lst:\n        if num % 7 == 0:\n            if num % 8 == 0:\n                if num % 56 == 0:\n                    result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_7_and_8_not_56_2():\n    assert find_divisible_by_7_and_8_not_56_2([7, 8, 14, 16, 56, 112]) == [56, 112]\n    assert find_divisible_by_7_and_8_not_56_2([1, 2, 3, 4, 5]) is None\n    assert find_divisible_by_7_and_8_not_56_2([]) is None\n    assert find_divisible_by_7_and_8_not_56_2([56, 112, 21, 32]) == [56, 112]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_and_tuple(lst, tpl):\n    result = []\n    for num in lst:\n        if num in tpl:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_list_and_tuple():\n    assert find_in_list_and_tuple([1, 2, 3], (3, 4, 5)) == [3]\n    assert find_in_list_and_tuple([1, 2, 3], (1, 2, 3)) == [1, 2, 3]\n    assert find_in_list_and_tuple([], (1, 2, 3)) is None\n    assert find_in_list_and_tuple([1, 2, 3], ()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_not_divisible_by_4(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] + lst[j]) % 4 != 0:\n                result.append(lst[i] + lst[j])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_not_divisible_by_4():\n    assert find_sum_of_two_not_divisible_by_4([1, 2, 3, 4]) == [3, 5, 5, 6, 7]\n    assert find_sum_of_two_not_divisible_by_4([4, 8, 12]) is None\n    assert find_sum_of_two_not_divisible_by_4([]) is None\n    assert find_sum_of_two_not_divisible_by_4([3, 6, 9]) == [9, 15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_both_lists(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_both_lists():\n    assert find_in_both_lists([1, 2, 3], [3, 4, 5]) == [3]\n    assert find_in_both_lists([1, 2, 3], [4, 5, 6]) is None\n    assert find_in_both_lists([], [1, 2, 3]) is None\n    assert find_in_both_lists([1, 2, 3], []) is None\n    assert find_in_both_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert find_in_both_lists([-1, -2, -3], [-3, -4, -5]) == [-3]\n    assert find_in_both_lists([0, 2, 4], [4, 0, 6]) == [0, 4]\n    assert find_in_both_lists([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [3.3]\n    assert find_in_both_lists([\"a\", \"b\", \"c\"], [\"c\", \"d\", \"e\"]) == [\"c\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_in_list(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num not in lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_not_in_list():\n    assert find_not_in_list([1, 2, 3], [3, 4, 5]) == [1, 2]\n    assert find_not_in_list([1, 2, 3], [1, 2, 3]) is None\n    assert find_not_in_list([], [1, 2, 3]) is None\n    assert find_not_in_list([1, 2, 3], []) == [1, 2, 3]\n    assert find_not_in_list([-1, -2, -3], [-3, -4, -5]) == [-1, -2]\n    assert find_not_in_list([0, 2, 4], [4, 0, 6]) == [2]\n    assert find_not_in_list([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [1.1, 2.2]\n    assert find_not_in_list([\"a\", \"b\", \"c\"], [\"c\", \"d\", \"e\"]) == [\"a\", \"b\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_not_divisible_by_7(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i] * lst[j]\n            if product % 7 != 0:\n                result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_not_divisible_by_7():\n    assert find_product_not_divisible_by_7([7, 14, 21]) is None\n    assert find_product_not_divisible_by_7([1, 7, 14]) is None\n    assert find_product_not_divisible_by_7([]) is None\n    assert find_product_not_divisible_by_7([2, 3]) == [6]\n    assert find_product_not_divisible_by_7([3, 5]) == [15]\n    assert find_product_not_divisible_by_7([1, 2, 3, 4]) == [2, 3, 4, 6, 8, 12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_two_odds(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] % 2 != 0 and lst[j] % 2 != 0:\n                result.append(lst[i] * lst[j])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_two_odds():\n    assert find_product_of_two_odds([1, 3, 5, 7]) == [3, 5, 7, 15, 21, 35]\n    assert find_product_of_two_odds([2, 4, 6]) is None\n    assert find_product_of_two_odds([1, 2, 3, 4]) == [3]\n    assert find_product_of_two_odds([]) is None\n    assert find_product_of_two_odds([9, 7]) == [63]\n    assert find_product_of_two_odds([11, 15, 19]) == [165, 209, 285]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_odds(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] % 2 != 0 and lst[j] % 2 != 0:\n                result.append(lst[i] + lst[j])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_odds():\n    assert find_sum_of_two_odds([1, 3, 5, 7]) == [4, 6, 8, 8, 10, 12]\n    assert find_sum_of_two_odds([2, 4, 6]) is None\n    assert find_sum_of_two_odds([1, 2, 3, 4]) == [4]\n    assert find_sum_of_two_odds([]) is None\n    assert find_sum_of_two_odds([9, 7]) == [16]\n    assert find_sum_of_two_odds([11, 15, 19]) == [26, 30, 34]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_in_tuple(tpl):\n    result = []\n    for num in tpl:\n        if num % 2 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_in_tuple():\n    assert find_even_in_tuple((1, 2, 3, 4, 5)) == [2, 4]\n    assert find_even_in_tuple((1, 3, 5)) is None\n    assert find_even_in_tuple((2, 4, 6, 8)) == [2, 4, 6, 8]\n    assert find_even_in_tuple(()) is None\n    assert find_even_in_tuple((1, 3, 4)) == [4]\n    assert find_even_in_tuple((2, 0, -2, -4)) == [2, 0, -2, -4]\n    assert find_even_in_tuple((7, 8, 10)) == [8, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_not_divisible_by_5(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i] * lst[j]\n            if product % 5 != 0:\n                result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_not_divisible_by_5():\n    assert find_product_not_divisible_by_5([1, 2, 3, 4]) == [2, 3, 4, 6, 8, 12]\n    assert find_product_not_divisible_by_5([5, 10, 15]) is None\n    assert find_product_not_divisible_by_5([1, 5, 10]) is None\n    assert find_product_not_divisible_by_5([]) is None\n    assert find_product_not_divisible_by_5([2, 3]) == [6]\n    assert find_product_not_divisible_by_5([3, 4, 7]) == [12, 21, 28]\n    assert find_product_not_divisible_by_5([11, 3, 2]) == [33, 22, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_in_dict_not_in_other(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key not in dict2:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_in_dict_not_in_other():\n    assert find_keys_in_dict_not_in_other({\"a\": 1, \"b\": 2, \"c\": 3}, {\"b\": 4, \"d\": 5}) == [\"a\", \"c\"]\n    assert find_keys_in_dict_not_in_other({\"a\": 1}, {\"a\": 2}) is None\n    assert find_keys_in_dict_not_in_other({}, {\"a\": 2}) is None\n    assert find_keys_in_dict_not_in_other({\"a\": 1, \"b\": 2}, {}) == [\"a\", \"b\"]\n    assert find_keys_in_dict_not_in_other({\"x\": 9, \"y\": 8}, {\"y\": 7}) == [\"x\"]\n    assert find_keys_in_dict_not_in_other({\"k\": 11}, {\"m\": 13}) == [\"k\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_in_tuple(tpl):\n    result = []\n    for i in range(len(tpl)):\n        for j in range(i + 1, len(tpl)):\n            result.append(abs(tpl[i] - tpl[j]))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_in_tuple():\n    assert find_difference_in_tuple((1, 2, 3)) == [1, 2, 1]\n    assert find_difference_in_tuple((1, 1, 1)) == [0, 0, 0]\n    assert find_difference_in_tuple((4, 6, 8)) == [2, 4, 2]\n    assert find_difference_in_tuple(()) is None\n    assert find_difference_in_tuple((3,)) is None\n    assert find_difference_in_tuple((10, 5, 1)) == [5, 9, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_between_lists_2(lst1, lst2):\n    result = []\n    for num1 in lst1:\n        for num2 in lst2:\n            result.append(abs(num1 - num2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_between_lists_2():\n    assert find_difference_between_lists_2([1, 2, 3], [4, 5, 6]) == [3, 4, 5, 2, 3, 4, 1, 2, 3]\n    assert find_difference_between_lists_2([1, 1, 1], [1, 1, 1]) == [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    assert find_difference_between_lists_2([10, 20], [1, 2]) == [9, 8, 19, 18]\n    assert find_difference_between_lists_2([5], [3]) == [2]\n    assert find_difference_between_lists_2([], [1, 2, 3]) is None\n    assert find_difference_between_lists_2([1, 2, 3], []) is None\n    assert find_difference_between_lists_2([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_in_one_list(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num % 2 != 0 and num not in lst2:\n            result.append(num)\n    for num in lst2:\n        if num % 2 != 0 and num not in lst1:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_odd_in_one_list():\n    assert find_odd_in_one_list([1, 2, 3], [3, 4, 5]) == [1, 5]\n    assert find_odd_in_one_list([1, 3, 5], [1, 3, 5]) is None\n    assert find_odd_in_one_list([], [1, 3, 5]) == [1, 3, 5]\n    assert find_odd_in_one_list([1, 2, 4], []) == [1]\n    assert find_odd_in_one_list([-1, -2, -3], [-3, -4, -5]) == [-1, -5]\n    assert find_odd_in_one_list([0, 2, 4], [4, 0, 6]) is None\n    assert find_odd_in_one_list([1, 2, 3], [1, 4, 3]) is None\n    assert find_odd_in_one_list([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [1.1, 2.2, 4.4, 5.5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_from_one_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            result.append(lst[i] + lst[j])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_from_one_list():\n    assert find_sum_of_two_from_one_list([1, 2, 3, 4]) == [3, 4, 5, 5, 6, 7]\n    assert find_sum_of_two_from_one_list([1, 1, 1]) == [2, 2, 2]\n    assert find_sum_of_two_from_one_list([]) is None\n    assert find_sum_of_two_from_one_list([0, 2, 4]) == [2, 4, 6]\n    assert find_sum_of_two_from_one_list([-1, -2, -3]) == [-3, -4, -5]\n    assert find_sum_of_two_from_one_list([1.1, 2.2, 3.3]) == [3.3000000000000003, 4.4, 5.5]\n    assert find_sum_of_two_from_one_list([0, 0, 0]) == [0, 0, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_not_in_both_lists(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2:\n            if num not in result:\n                result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_not_in_both_lists():\n    assert find_common_not_in_both_lists([1, 2, 3], [3, 4, 5]) == [3]\n    assert find_common_not_in_both_lists([1, 2, 3], [4, 5, 6]) is None\n    assert find_common_not_in_both_lists([], [1, 2, 3]) is None\n    assert find_common_not_in_both_lists([1, 2, 3], []) is None\n    assert find_common_not_in_both_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert find_common_not_in_both_lists([-1, -2, -3], [-3, -4, -5]) == [-3]\n    assert find_common_not_in_both_lists([0, 2, 4], [4, 0, 6]) == [0, 4]\n    assert find_common_not_in_both_lists([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [3.3]\n    assert find_common_not_in_both_lists([\"a\", \"b\", \"c\"], [\"c\", \"d\", \"e\"]) == [\"c\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_elements_from_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_elements_from_two_lists():\n    assert find_sum_of_elements_from_two_lists([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n    assert find_sum_of_elements_from_two_lists([1, 1, 1], [1, 1, 1]) == [2, 2, 2]\n    assert find_sum_of_elements_from_two_lists([], [1, 2, 3]) is None\n    assert find_sum_of_elements_from_two_lists([1, 2, 3], []) is None\n    assert find_sum_of_elements_from_two_lists([1, 2, 3], [1, 2, 3]) == [2, 4, 6]\n    assert find_sum_of_elements_from_two_lists([-1, -2, -3], [-3, -4, -5]) == [-4, -6, -8]\n    assert find_sum_of_elements_from_two_lists([0, 2, 4], [4, 0, 6]) == [4, 2, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_elements_from_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a - b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_elements_from_two_lists():\n    assert find_difference_of_elements_from_two_lists([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n    assert find_difference_of_elements_from_two_lists([1, 1, 1], [1, 1, 1]) == [0, 0, 0]\n    assert find_difference_of_elements_from_two_lists([], [1, 2, 3]) is None\n    assert find_difference_of_elements_from_two_lists([1, 2, 3], []) is None\n    assert find_difference_of_elements_from_two_lists([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert find_difference_of_elements_from_two_lists([-1, -2, -3], [-3, -4, -5]) == [2, 2, 2]\n    assert find_difference_of_elements_from_two_lists([0, 2, 4], [4, 0, 6]) == [-4, 2, -2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_numbers(lst):\n    result = list(map(lambda x: x ** 2, lst))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_square_numbers():\n    assert square_numbers([1, 2, 3, 4]) == [1, 4, 9, 16]\n    assert square_numbers([0, 1, -1, 2]) == [0, 1, 1, 4]\n    assert square_numbers([5, 6, 7]) == [25, 36, 49]\n    assert square_numbers([-5, -6, -7]) == [25, 36, 49]\n    assert square_numbers([]) is None\n    assert square_numbers([1]) == [1]\n    assert square_numbers([2.2, 3.3]) == [4.840000000000001, 10.889999999999999]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_not_5(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_not_5():\n    assert find_divisible_by_3_not_5([3, 6, 9, 12, 15]) == [3, 6, 9, 12]\n    assert find_divisible_by_3_not_5([5, 10, 15]) is None\n    assert find_divisible_by_3_not_5([1, 2, 4, 5]) is None\n    assert find_divisible_by_3_not_5([]) is None\n    assert find_divisible_by_3_not_5([3, 5, 7, 11]) == [3]\n    assert find_divisible_by_3_not_5([6, 9, 18]) == [6, 9, 18]\n    assert find_divisible_by_3_not_5([-3, -6, -9]) == [-3, -6, -9]\n    assert find_divisible_by_3_not_5([21, 25, 30]) == [21]\n    assert find_divisible_by_3_not_5([0, 3, 6, 15, 30]) == [3, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_one_list_3(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if a != b:\n            result.append(a)\n            result.append(b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_unique_in_one_list_3():\n    assert find_unique_in_one_list_3([1, 2, 3], [3, 2, 1]) == [1, 3, 3, 1]\n    assert find_unique_in_one_list_3([1, 1, 1], [1, 1, 1]) is None\n    assert find_unique_in_one_list_3([], [1, 2, 3]) is None\n    assert find_unique_in_one_list_3([1, 2, 3], []) is None\n    assert find_unique_in_one_list_3([1, 2, 3], [4, 5, 6]) == [1, 4, 2, 5, 3, 6]\n    assert find_unique_in_one_list_3([-1, -2, -3], [-3, -2, -1]) == [-1, -3, -3, -1]\n    assert find_unique_in_one_list_3([0, 2, 4], [4, 2, 0]) == [0, 4, 4, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_not_in_tuple_2(lst, tpl):\n    result = []\n    for num in lst:\n        if num not in tpl:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_list_not_in_tuple_2():\n    assert find_in_list_not_in_tuple_2([1, 2, 3], (3, 4, 5)) == [1, 2]\n    assert find_in_list_not_in_tuple_2([1, 2, 3], (1, 2, 3)) is None\n    assert find_in_list_not_in_tuple_2([], (1, 2, 3)) is None\n    assert find_in_list_not_in_tuple_2([1, 2, 3], ()) == [1, 2, 3]\n    assert find_in_list_not_in_tuple_2([-1, -2, -3], (-3, -4, -5)) == [-1, -2]\n    assert find_in_list_not_in_tuple_2([0, 2, 4], (4, 0, 6)) == [2]\n    assert find_in_list_not_in_tuple_2([1.1, 2.2, 3.3], (3.3, 4.4, 5.5)) == [1.1, 2.2]\n    assert find_in_list_not_in_tuple_2([\"a\", \"b\", \"c\"], (\"c\", \"d\", \"e\")) == [\"a\", \"b\"]\n    assert find_in_list_not_in_tuple_2([\"a\", \"b\", \"c\"], (\"a\", \"b\", \"c\")) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_cubes(lst):\n    result = list(map(lambda x: x ** 3, lst))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_cubes():\n    assert find_cubes([1, 2, 3]) == [1, 8, 27]\n    assert find_cubes([-1, -2, -3]) == [-1, -8, -27]\n    assert find_cubes([0, 2, 4]) == [0, 8, 64]\n    assert find_cubes([]) is None\n    assert find_cubes([1, 1, 1]) == [1, 1, 1]\n    assert find_cubes([2]) == [8]\n    assert find_cubes([3, 5, 7]) == [27, 125, 343]\n    assert find_cubes([-4, -6, -8]) == [-64, -216, -512]\n    assert find_cubes([1.1, 2.2]) == [1.3310000000000004, 10.648000000000003]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 3 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_3():\n    assert find_divisible_by_2_and_3([6, 12, 18]) == [6, 12, 18]\n    assert find_divisible_by_2_and_3([7, 14, 21]) is None\n    assert find_divisible_by_2_and_3([2, 4, 8]) is None\n    assert find_divisible_by_2_and_3([3, 9, 15]) is None\n    assert find_divisible_by_2_and_3([6]) == [6]\n    assert find_divisible_by_2_and_3([1, 2, 3]) is None\n    assert find_divisible_by_2_and_3([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_numbers(lst, power):\n    result = list(map(lambda x: x ** power, lst))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_numbers():\n    assert find_powers_of_numbers([2, 3], 2) == [4, 9]\n    assert find_powers_of_numbers([1, 2, 3], 3) == [1, 8, 27]\n    assert find_powers_of_numbers([], 2) is None\n    assert find_powers_of_numbers([0], 5) == [0]\n    assert find_powers_of_numbers([2], 0) == [1]\n    assert find_powers_of_numbers([-2, -3], 2) == [4, 9]\n    assert find_powers_of_numbers([2], 1) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_between_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(abs(a - b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_between_two_lists():\n    assert find_difference_between_two_lists([1, 3, 5], [1, 2, 3]) == [0, 1, 2]\n    assert find_difference_between_two_lists([4, 6], [2, 3]) == [2, 3]\n    assert find_difference_between_two_lists([], []) is None\n    assert find_difference_between_two_lists([1], [0]) == [1]\n    assert find_difference_between_two_lists([0], [1]) == [1]\n    assert find_difference_between_two_lists([1], [-1]) == [2]\n    assert find_difference_between_two_lists([2, 3, 4], [5, 3, 1]) == [3, 0, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_in_both_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_in_both_dicts():\n    assert find_keys_in_both_dicts({\"a\": 1, \"b\": 2}, {\"b\": 3, \"c\": 4}) == [\"b\"]\n    assert find_keys_in_both_dicts({\"a\": 1, \"b\": 2}, {\"d\": 3, \"e\": 4}) is None\n    assert find_keys_in_both_dicts({\"a\": 1}, {\"a\": 4}) == [\"a\"]\n    assert find_keys_in_both_dicts({}, {\"a\": 4}) is None\n    assert find_keys_in_both_dicts({\"a\": 1, \"b\": 2}, {}) is None\n    assert find_keys_in_both_dicts({}, {}) is None\n    assert find_keys_in_both_dicts({\"a\": 1, \"b\": 2, \"c\": 3}, {\"c\": 4, \"d\": 5, \"a\": 0}) == [\"a\", \"c\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_elements_from_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a * b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_elements_from_two_lists():\n    assert find_product_of_elements_from_two_lists([1, 2], [3, 4]) == [3, 8]\n    assert find_product_of_elements_from_two_lists([5, 6], [0, 7]) == [0, 42]\n    assert find_product_of_elements_from_two_lists([1], [1]) == [1]\n    assert find_product_of_elements_from_two_lists([0], [2]) == [0]\n    assert find_product_of_elements_from_two_lists([2], [0]) == [0]\n    assert find_product_of_elements_from_two_lists([], []) is None\n    assert find_product_of_elements_from_two_lists([2, 3], [4, 1]) == [8, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_in_dict_not_in_list(d, lst):\n    result = []\n    for key in d:\n        if key not in lst:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_in_dict_not_in_list():\n    assert find_keys_in_dict_not_in_list({\"a\": 1, \"b\": 2}, [\"a\"]) == [\"b\"]\n    assert find_keys_in_dict_not_in_list({\"a\": 1, \"b\": 2}, [\"a\", \"b\"]) is None\n    assert find_keys_in_dict_not_in_list({}, [\"a\"]) is None\n    assert find_keys_in_dict_not_in_list({\"a\": 1}, []) == [\"a\"]\n    assert find_keys_in_dict_not_in_list({\"a\": 1, \"b\": 2}, []) == [\"a\", \"b\"]\n    assert find_keys_in_dict_not_in_list({\"a\": 1, \"b\": 2}, [\"c\"]) == [\"a\", \"b\"]\n    assert find_keys_in_dict_not_in_list({\"a\": 1}, [\"a\", \"b\"]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_numbers_in_list(lst, power):\n    result = []\n    for num in lst:\n        result.append(num ** power)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_numbers_in_list():\n    assert find_powers_of_numbers_in_list([2, 3], 2) == [4, 9]\n    assert find_powers_of_numbers_in_list([1, 2, 3], 3) == [1, 8, 27]\n    assert find_powers_of_numbers_in_list([], 2) is None\n    assert find_powers_of_numbers_in_list([0], 5) == [0]\n    assert find_powers_of_numbers_in_list([2], 0) == [1]\n    assert find_powers_of_numbers_in_list([-2, -3], 2) == [4, 9]\n    assert find_powers_of_numbers_in_list([2], 1) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_in_both_sets(set1, set2):\n    result = list(set1 & set2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_elements_in_both_sets():\n    assert find_elements_in_both_sets({1, 2, 3}, {2, 3, 4}) == [2, 3]\n    assert find_elements_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_elements_in_both_sets(set(), {1, 2, 3}) is None\n    assert find_elements_in_both_sets({1}, {1}) == [1]\n    assert find_elements_in_both_sets({1, 2, 3}, {1}) == [1]\n    assert find_elements_in_both_sets(set(), set()) is None\n    assert find_elements_in_both_sets({0, 1, 2}, {2, 0, 3}) == [0, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_diff_between_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(abs(a - b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_diff_between_lists():\n    assert find_diff_between_lists([1, 2, 3], [4, 5, 6]) == [3, 3, 3]\n    assert find_diff_between_lists([7, 8, 9], [1, 2, 3]) == [6, 6, 6]\n    assert find_diff_between_lists([0], [0]) == [0]\n    assert find_diff_between_lists([], []) is None\n    assert find_diff_between_lists([1], [0]) == [1]\n    assert find_diff_between_lists([0], [1]) == [1]\n    assert find_diff_between_lists([2, 3, 4], [5, 3, 1]) == [3, 0, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_two_lists_2(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_two_lists_2():\n    assert find_sum_of_two_lists_2([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n    assert find_sum_of_two_lists_2([7, 8, 9], [1, 2, 3]) == [8, 10, 12]\n    assert find_sum_of_two_lists_2([0], [0]) == [0]\n    assert find_sum_of_two_lists_2([], []) is None\n    assert find_sum_of_two_lists_2([1], [0]) == [1]\n    assert find_sum_of_two_lists_2([0], [1]) == [1]\n    assert find_sum_of_two_lists_2([2, 3, 4], [5, 3, 1]) == [7, 6, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_tuple_not_in_list(tpl, lst):\n    result = []\n    for num in tpl:\n        if num not in lst:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_tuple_not_in_list():\n    assert find_in_tuple_not_in_list((1, 2, 3), [2, 3, 4]) == [1]\n    assert find_in_tuple_not_in_list((5, 6), [6, 7]) == [5]\n    assert find_in_tuple_not_in_list((), [1, 2]) is None\n    assert find_in_tuple_not_in_list((1,), [1]) is None\n    assert find_in_tuple_not_in_list((1,), []) == [1]\n    assert find_in_tuple_not_in_list((1, 2, 3), (2, 4)) == [1, 3]\n    assert find_in_tuple_not_in_list((1, 2), (1, 2, 3)) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_10_not_20(lst):\n    result = []\n    for num in lst:\n        if num % 10 == 0 and num % 20 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_10_not_20():\n    assert find_divisible_by_10_not_20([10, 20, 30, 40]) == [10, 30]\n    assert find_divisible_by_10_not_20([5, 10, 15, 25]) == [10]\n    assert find_divisible_by_10_not_20([1, 2, 3, 4]) is None\n    assert find_divisible_by_10_not_20([20, 40, 60]) is None\n    assert find_divisible_by_10_not_20([10, 50, 70]) == [10, 50, 70]\n    assert find_divisible_by_10_not_20([]) is None\n    assert find_divisible_by_10_not_20([30, 50, 90]) == [30, 50, 90]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_from_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_from_two_lists():\n    assert find_sum_from_two_lists([1, 2], [3, 4]) == [4, 6]\n    assert find_sum_from_two_lists([5, 6], [1, 2]) == [6, 8]\n    assert find_sum_from_two_lists([], []) is None\n    assert find_sum_from_two_lists([1], [1]) == [2]\n    assert find_sum_from_two_lists([0], [0]) == [0]\n    assert find_sum_from_two_lists([2, 3], [4, 5]) == [6, 8]\n    assert find_sum_from_two_lists([5, 5], [5, 5]) == [10, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_elements_in_sets(set1, set2):\n    result = list(set1 & set2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_elements_in_sets():\n    assert find_common_elements_in_sets({1, 2, 3}, {3, 4, 5}) == [3]\n    assert find_common_elements_in_sets({6, 7}, {7, 8}) == [7]\n    assert find_common_elements_in_sets(set(), {1, 2}) is None\n    assert find_common_elements_in_sets({1}, {1}) == [1]\n    assert find_common_elements_in_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_common_elements_in_sets(set(), set()) is None\n    assert find_common_elements_in_sets({0, 1, 2}, {2, 3, 0}) == [0, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_in_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            result.append(lst[i] * lst[j])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_in_list():\n    assert find_product_in_list([1, 2, 3]) == [2, 3, 6]\n    assert find_product_in_list([4, 5]) == [20]\n    assert find_product_in_list([]) is None\n    assert find_product_in_list([0, 1]) == [0]\n    assert find_product_in_list([1]) is None\n    assert find_product_in_list([1, 2]) == [2]\n    assert find_product_in_list([2, 3, 4]) == [6, 8, 12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_not_in_dict(lst, d):\n    result = []\n    for num in lst:\n        if num not in d:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_list_not_in_dict():\n    assert find_in_list_not_in_dict([1, 2, 3], {3: \"a\", 4: \"b\"}) == [1, 2]\n    assert find_in_list_not_in_dict([5, 6], {5: \"x\", 7: \"y\"}) == [6]\n    assert find_in_list_not_in_dict([], {1: \"a\"}) is None\n    assert find_in_list_not_in_dict([1], {1: \"a\"}) is None\n    assert find_in_list_not_in_dict([1], {}) == [1]\n    assert find_in_list_not_in_dict([1, 2, 3], {}) == [1, 2, 3]\n    assert find_in_list_not_in_dict([1, 2], {3: \"b\", 4: \"c\"}) == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_dicts_2(dict1, dict2):\n    result = dict1.copy()\n    result.update(dict2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_merge_dicts_2():\n    assert merge_dicts_2({\"a\": 1}, {\"b\": 2}) == {\"a\": 1, \"b\": 2}\n    assert merge_dicts_2({}, {\"c\": 3}) == {\"c\": 3}\n    assert merge_dicts_2({\"d\": 4}, {}) == {\"d\": 4}\n    assert merge_dicts_2({}, {}) is None\n    assert merge_dicts_2({\"a\": 1}, {\"a\": 2}) == {\"a\": 2}\n    assert merge_dicts_2({\"a\": 1, \"b\": 2}, {\"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\n    assert merge_dicts_2({\"x\": 0}, {\"y\": -1}) == {\"x\": 0, \"y\": -1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_one_set_not_other(set1, set2):\n    result = set1.symmetric_difference(set2)\n    if not result:\n        return None\n    return list(result)"}, {"role": "assistant", "content": "def test_find_in_one_set_not_other():\n    assert find_in_one_set_not_other({1, 2}, {2, 3}) == [1, 3]\n    assert find_in_one_set_not_other({5, 6}, {6, 7}) == [5, 7]\n    assert find_in_one_set_not_other(set(), {1, 2}) == [1, 2]\n    assert find_in_one_set_not_other({1}, {1}) is None\n    assert find_in_one_set_not_other({1}, set()) == [1]\n    assert find_in_one_set_not_other(set(), set()) is None\n    assert find_in_one_set_not_other({1, 2, 3}, {4, 5, 6}) == [1, 2, 3, 4, 5, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_division_from_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result.append(a / b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_division_from_two_lists():\n    assert find_division_from_two_lists([1, 2], [1, 2]) == [1, 1]\n    assert find_division_from_two_lists([4, 6], [2, 3]) == [2, 2]\n    assert find_division_from_two_lists([], []) is None\n    assert find_division_from_two_lists([1], [1]) == [1]\n    assert find_division_from_two_lists([5], [0]) is None\n    assert find_division_from_two_lists([1, 2], [0, 1]) == [2]\n    assert find_division_from_two_lists([0, 1], [1, 2]) == [0, 0.5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_less_in_one_list(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2 and lst1.count(num) < lst2.count(num):\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_less_in_one_list():\n    assert find_common_less_in_one_list([1, 2, 3], [2, 3, 3]) == [3]\n    assert find_common_less_in_one_list([4, 5, 6], [5, 6, 7]) is None\n    assert find_common_less_in_one_list([], []) is None\n    assert find_common_less_in_one_list([1], [1]) is None\n    assert find_common_less_in_one_list([1, 2, 3], [1, 2, 2, 3]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_first_not_in_second(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num not in lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_first_not_in_second():\n    assert find_in_first_not_in_second([1, 2, 3], [2, 3, 4]) == [1]\n    assert find_in_first_not_in_second([1, 2, 3], [1, 2, 3]) is None\n    assert find_in_first_not_in_second([1, 2, 3, 4, 5], [4, 5]) == [1, 2, 3]\n    assert find_in_first_not_in_second([], [1, 2, 3]) is None\n    assert find_in_first_not_in_second([1, 2, 3], []) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_elements_diff_index(lst1, lst2):\n    result = []\n    for i, num1 in enumerate(lst1):\n        for j, num2 in enumerate(lst2):\n            if num1 == num2 and i != j:\n                result.append(num1)\n    if not result:\n        return None\n    return sorted(set(result))"}, {"role": "assistant", "content": "def test_find_common_elements_diff_index():\n    assert find_common_elements_diff_index([1, 2, 3], [3, 2, 1]) == [1, 3]\n    assert find_common_elements_diff_index([1, 2, 3], [1, 2, 3]) is None\n    assert find_common_elements_diff_index([1, 2, 2, 3], [2, 3, 1, 2]) == [1, 2, 3]\n    assert find_common_elements_diff_index([], [1, 2, 3]) is None\n    assert find_common_elements_diff_index([1, 2, 3], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef add_values_of_dicts(dict1, dict2):\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_add_values_of_dicts():\n    assert add_values_of_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'b': 5}\n    assert add_values_of_dicts({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) is None\n    assert add_values_of_dicts({'a': 1, 'b': 2, 'c': 3}, {'b': 2, 'c': 3}) == {'b': 4, 'c': 6}\n    assert add_values_of_dicts({}, {'a': 1, 'b': 2}) is None\n    assert add_values_of_dicts({'a': 1, 'b': 2}, {}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_more_in_one_set(set1, set2):\n    result = []\n    for num in set1:\n        if num in set2 and num % 3 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_more_in_one_set():\n    assert find_more_in_one_set({1, 2, 3}, {1, 2}) is None\n    assert find_more_in_one_set({1, 2, 2, 3}, {1, 2}) is None\n    assert find_more_in_one_set({1, 2, 2, 3, 3}, {2, 3}) == [3]\n    assert find_more_in_one_set({1, 2}, {3, 1}) is None\n    assert find_more_in_one_set({1, 21, 1, 2}, {21, 2}) == [21]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_numbers_by_two(lst):\n    result = []\n    for num in lst:\n        result.append(num * 2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_numbers_by_two():\n    assert multiply_numbers_by_two([1, 2, 3]) == [2, 4, 6]\n    assert multiply_numbers_by_two([0, -1, -2]) == [0, -2, -4]\n    assert multiply_numbers_by_two([10, 100, 1000]) == [20, 200, 2000]\n    assert multiply_numbers_by_two([]) is None\n    assert multiply_numbers_by_two([1]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_dict_values(dict1, dict2):\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            result[key] = dict1[key] + dict2[key]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_dict_values():\n    assert sum_dict_values({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'b': 5}\n    assert sum_dict_values({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) is None\n    assert sum_dict_values({'a': 1, 'b': 2, 'c': 3}, {'b': 2, 'c': 3}) == {'b': 4, 'c': 6}\n    assert sum_dict_values({}, {'a': 1, 'b': 2}) is None\n    assert sum_dict_values({'a': 1, 'b': 2}, {}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_2(lst):\n    result = []\n    for num in lst:\n        result.append(num ** 2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_2():\n    assert find_squares_2([1, 2, 3]) == [1, 4, 9]\n    assert find_squares_2([0, -1, -2]) == [0, 1, 4]\n    assert find_squares_2([10, 100, 1000]) == [100, 10000, 1000000]\n    assert find_squares_2([]) is None\n    assert find_squares_2([1]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_sets(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_difference_of_sets():\n    assert find_difference_of_sets({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_difference_of_sets({1, 2, 3}, {1, 2, 3}) is None\n    assert find_difference_of_sets({1, 2, 3, 4}, {3, 4}) == [1, 2]\n    assert find_difference_of_sets({1, 2}, {3, 4}) == [1, 2]\n    assert find_difference_of_sets(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_list_set(lst, s):\n    result = []\n    for num in lst:\n        if num in s:\n            result.append(num + 1)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_list_set():\n    assert find_sum_list_set([1, 2, 3], {2, 3, 4}) == [3, 4]\n    assert find_sum_list_set([1, 2, 3], {1, 2, 3}) == [2, 3, 4]\n    assert find_sum_list_set([1, 2, 3, 4], {4, 5}) == [5]\n    assert find_sum_list_set([], {1, 2, 3}) is None\n    assert find_sum_list_set([1, 2, 3], set()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_in_other_set(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_set_not_in_other_set():\n    assert find_in_set_not_in_other_set({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_in_set_not_in_other_set({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_set_not_in_other_set({1, 2, 3, 4}, {3, 4}) == [1, 2]\n    assert find_in_set_not_in_other_set({1, 2}, {3, 4}) == [1, 2]\n    assert find_in_set_not_in_other_set(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_elements_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result.append(a / b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_elements_of_lists():\n    assert divide_elements_of_lists([4, 9, 16], [2, 3, 4]) == [2, 3, 4]\n    assert divide_elements_of_lists([4, 9, 16], [2, 0, 4]) == [2, 4]\n    assert divide_elements_of_lists([1, 2, 3], [0, 1, 1]) == [2, 3]\n    assert divide_elements_of_lists([], [1, 2, 3]) is None\n    assert divide_elements_of_lists([1, 2, 3], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_both_sets_not_in_one(set1, set2):\n    result = list(set1 & set2 ^ (set1 | set2))\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_both_sets_not_in_one():\n    assert find_in_both_sets_not_in_one({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]\n    assert find_in_both_sets_not_in_one({1, 2}, {2, 3}) == [1, 3]\n    assert find_in_both_sets_not_in_one({1, 2, 3}, {4, 5, 6}) == [1, 2, 3, 4, 5, 6]\n    assert find_in_both_sets_not_in_one({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_both_sets_not_in_one(set(), set()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_set_from_list(lst, s):\n    result = []\n    for num in lst:\n        if num not in s:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_set_from_list():\n    assert subtract_set_from_list([1, 2, 3], {2, 3, 4}) == [1]\n    assert subtract_set_from_list([1, 2, 3], {1, 2, 3}) is None\n    assert subtract_set_from_list([1, 2, 3, 4], {4, 5}) == [1, 2, 3]\n    assert subtract_set_from_list([], {1, 2, 3}) is None\n    assert subtract_set_from_list([1, 2, 3], set()) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_sum_of_tuples(tpl1, tpl2):\n    result = []\n    for a, b in zip(tpl1, tpl2):\n        result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_sum_of_tuples():\n    assert find_sum_of_tuples((1, 2, 3), (4, 5, 6)) == [5, 7, 9]\n    assert find_sum_of_tuples((1, 2), (1, 2, 3)) == [2, 4]\n    assert find_sum_of_tuples((0, 0, 0), (0, 0, 0)) == [0, 0, 0]\n    assert find_sum_of_tuples((), ()) is None\n    assert find_sum_of_tuples((1, 2, 3), ()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_one_set_not_other_2(set1, set2):\n    result = list(set1 ^ set2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_one_set_not_other_2():\n    assert find_in_one_set_not_other_2({1, 2, 3}, {2, 3, 4}) == [1, 4]\n    assert find_in_one_set_not_other_2({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_one_set_not_other_2({1, 2, 3, 4}, {3, 4}) == [1, 2]\n    assert find_in_one_set_not_other_2({1, 2}, {3, 4}) == [1, 2, 3, 4]\n    assert find_in_one_set_not_other_2(set(), {1, 2, 3}) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_not_8(lst):\n    result = []\n    for num in lst:\n        if num % 4 == 0 and num % 8 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4_not_8():\n    assert find_divisible_by_4_not_8([4, 8, 16]) == [4]\n    assert find_divisible_by_4_not_8([0, 8, 16]) is None\n    assert find_divisible_by_4_not_8([4, 12, 20]) == [4, 12, 20]\n    assert find_divisible_by_4_not_8([]) is None\n    assert find_divisible_by_4_not_8([3, 5, 7]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_in_dict1_not_in_dict2(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key not in dict2:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_in_dict1_not_in_dict2():\n    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['a']\n    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) is None\n    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2, 'c': 3}, {'b': 3}) == ['a', 'c']\n    assert find_keys_in_dict1_not_in_dict2({}, {'a': 1}) is None\n    assert find_keys_in_dict1_not_in_dict2({'a': 1}, {}) == ['a']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_two(lst):\n    result = []\n    for num in lst:\n        result.append(num * 2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_two():\n    assert multiply_by_two([1, 2, 3]) == [2, 4, 6]\n    assert multiply_by_two([0, -1, -2]) == [0, -2, -4]\n    assert multiply_by_two([10, 100, 1000]) == [20, 200, 2000]\n    assert multiply_by_two([]) is None\n    assert multiply_by_two([1]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a - b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_lists():\n    assert subtract_lists([4, 9, 16], [2, 3, 4]) == [2, 6, 12]\n    assert subtract_lists([4, 9, 16], [2, 0, 4]) == [2, 9, 12]\n    assert subtract_lists([1, 2, 3], [0, 1, 1]) == [1, 1, 2]\n    assert subtract_lists([], [1, 2, 3]) is None\n    assert subtract_lists([1, 2, 3], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_in_dicts():\n    assert find_common_in_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['b']\n    assert find_common_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == ['a', 'b']\n    assert find_common_in_dicts({'a': 1, 'b': 2, 'c': 3}, {'b': 3}) == ['b']\n    assert find_common_in_dicts({}, {'a': 1}) is None\n    assert find_common_in_dicts({'a': 1}, {}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_list_3(lst):\n    return sum(lst) if lst else None"}, {"role": "assistant", "content": "def test_sum_list_3():\n    assert sum_list_3([1, 2, 3]) == 6\n    assert sum_list_3([]) is None\n    assert sum_list_3([0]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_not_9(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 and num % 9 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_not_9():\n    assert find_divisible_by_3_not_9([3, 6, 9]) == [3, 6]\n    assert find_divisible_by_3_not_9([9, 18, 27]) is None\n    assert find_divisible_by_3_not_9([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_or_7(lst):\n    result = []\n    for num in lst:\n        if num % 5 == 0 or num % 7 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_5_or_7():\n    assert find_divisible_by_5_or_7([5, 10, 7, 14, 21]) == [5, 10, 7, 14, 21]\n    assert find_divisible_by_5_or_7([1, 2, 3]) is None\n    assert find_divisible_by_5_or_7([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_dicts():\n    assert find_in_dicts({'a': 1, 'b': 2}, {'a': 3, 'c': 4}) == ['a']\n    assert find_in_dicts({'a': 1}, {'b': 2}) is None\n    assert find_in_dicts({}, {'a': 1}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_or_5(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 or num % 5 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_or_5():\n    assert find_divisible_by_3_or_5([3, 5, 15, 30]) == [3, 5, 15, 30]\n    assert find_divisible_by_3_or_5([1, 2, 4]) is None\n    assert find_divisible_by_3_or_5([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_not_6(lst):\n    result = []\n    for num in lst:\n        if num % 4 == 0 and num % 6 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4_not_6():\n    assert find_divisible_by_4_not_6([4, 8, 12, 24]) == [4, 8]\n    assert find_divisible_by_4_not_6([6, 12, 18]) is None\n    assert find_divisible_by_4_not_6([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_not_10(lst):\n    result = []\n    for num in lst:\n        if num % 5 == 0 and num % 10 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_5_not_10():\n    assert find_divisible_by_5_not_10([5, 15, 20]) == [5, 15]\n    assert find_divisible_by_5_not_10([10, 20, 30]) is None\n    assert find_divisible_by_5_not_10([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_list(lst, power):\n    result = []\n    for num in lst:\n        result.append(num ** power)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_list():\n    assert find_powers_of_list([2, 3, 4], 2) == [4, 9, 16]\n    assert find_powers_of_list([1, 0, -1], 3) == [1, 0, -1]\n    assert find_powers_of_list([], 2) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_not_12(lst):\n    result = []\n    for num in lst:\n        if num % 6 == 0 and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_6_not_12():\n    assert find_divisible_by_6_not_12([6, 18, 12, 24]) == [6, 18]\n    assert find_divisible_by_6_not_12([12, 24, 36]) is None\n    assert find_divisible_by_6_not_12([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_or_5(lst):\n    result = []\n    for num in lst:\n        if num % 4 == 0 or num % 5 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4_or_5():\n    assert find_divisible_by_4_or_5([4, 5, 8, 10]) == [4, 5, 8, 10]\n    assert find_divisible_by_4_or_5([1, 2, 3]) is None\n    assert find_divisible_by_4_or_5([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_not_in_another(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num not in lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_in_list_not_in_another():\n    assert find_in_list_not_in_another([1, 2, 3], [2, 3, 4]) == [1]\n    assert find_in_list_not_in_another([5, 6, 7], [5, 6, 7]) is None\n    assert find_in_list_not_in_another([], [1, 2, 3]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_keys_in_dict(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key not in dict2:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_unique_keys_in_dict():\n    assert find_unique_keys_in_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['a']\n    assert find_unique_keys_in_dict({'a': 1}, {'a': 2}) is None\n    assert find_unique_keys_in_dict({}, {'a': 1}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a * b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_lists():\n    assert multiply_lists([1, 2, 3], [4, 5, 6]) == [4, 10, 18]\n    assert multiply_lists([1, 2], [3, 4, 5]) == [3, 8]\n    assert multiply_lists([], [1, 2, 3]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_lists_v2(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a - b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_lists_v2():\n    assert subtract_lists_v2([5, 6, 7], [1, 2, 3]) == [4, 4, 4]\n    assert subtract_lists_v2([10, 20], [5, 5]) == [5, 15]\n    assert subtract_lists_v2([], [1, 2]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_other(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_set_not_other():\n    assert find_in_set_not_other({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_in_set_not_other({5, 6, 7}, {5, 6, 7}) is None\n    assert find_in_set_not_other(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_sets(set1, set2):\n    result = list(set1 & set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_in_sets():\n    assert find_common_in_sets({1, 2, 3}, {2, 3, 4}) == [2, 3]\n    assert find_common_in_sets({1, 2}, {3, 4}) is None\n    assert find_common_in_sets(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 2 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_in_both_sets():\n    assert find_divisible_by_2_in_both_sets({2, 4, 6}, {4, 6, 8}) == [4, 6]\n    assert find_divisible_by_2_in_both_sets({1, 3, 5}, {2, 4, 6}) is None\n    assert find_divisible_by_2_in_both_sets(set(), {2, 4, 6}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_3_in_both_sets(set1, set2):\n    result = list((set1 & set2) - {num for num in range(1, 101) if num % 3 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_not_divisible_by_3_in_both_sets():\n    assert find_not_divisible_by_3_in_both_sets({1, 2, 4}, {2, 4, 5}) == [2, 4]\n    assert find_not_divisible_by_3_in_both_sets({3, 6, 9}, {3, 6, 9}) is None\n    assert find_not_divisible_by_3_in_both_sets(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_one_set_not_other_v2(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_one_set_not_other_v2():\n    assert find_in_one_set_not_other_v2({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_in_one_set_not_other_v2({5, 6, 7}, {5, 6, 7}) is None\n    assert find_in_one_set_not_other_v2(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_or_5_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 2 == 0 or num % 5 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_or_5_in_both_sets():\n    assert find_divisible_by_2_or_5_in_both_sets({10, 15, 20}, {5, 10, 20}) == [10, 20]\n    assert find_divisible_by_2_or_5_in_both_sets({1, 3, 7}, {2, 4, 8}) is None\n    assert find_divisible_by_2_or_5_in_both_sets(set(), {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_2_or_3_in_both_sets(set1, set2):\n    result = list((set1 & set2) - {num for num in range(1, 101) if num % 2 == 0 or num % 3 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_not_divisible_by_2_or_3_in_both_sets():\n    assert find_not_divisible_by_2_or_3_in_both_sets({1, 2, 3, 5, 7}, {5, 7, 9, 11}) == [5, 7]\n    assert find_not_divisible_by_2_or_3_in_both_sets({1, 3, 5, 7}, {2, 4, 6, 8}) is None\n    assert find_not_divisible_by_2_or_3_in_both_sets(set(), set()) is None\n    assert find_not_divisible_by_2_or_3_in_both_sets({10, 15, 25}, {10, 25, 35}) == [25]\n    assert find_not_divisible_by_2_or_3_in_both_sets({5, 8, 11, 14}, {3, 6, 9, 12}) is None\n    assert find_not_divisible_by_2_or_3_in_both_sets({1, 2, 4, 5, 10}, {5, 10, 11, 20}) == [5]\n    assert find_not_divisible_by_2_or_3_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_not_divisible_by_2_or_3_in_both_sets({4, 5, 6}, {4, 5, 6}) == [5]\n    assert find_not_divisible_by_2_or_3_in_both_sets({1, 9, 13}, {2, 9, 13}) == [13]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 4 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_4_in_both_sets():\n    assert find_divisible_by_4_in_both_sets({4, 8, 12, 16}, {4, 8, 16, 20}) == [4, 8, 16]\n    assert find_divisible_by_4_in_both_sets({1, 2, 3}, {5, 7, 11}) is None\n    assert find_divisible_by_4_in_both_sets({32, 48, 64}, {32, 64, 96}) == [32, 64]\n    assert find_divisible_by_4_in_both_sets({1, 4, 6, 8}, {2, 4, 8, 16}) == [4, 8]\n    assert find_divisible_by_4_in_both_sets({16, 32, 48}, {24, 32, 48}) == [32, 48]\n    assert find_divisible_by_4_in_both_sets({3, 6, 9}, {12, 15, 18}) is None\n    assert find_divisible_by_4_in_both_sets({4, 5, 6}, {7, 8, 9}) is None\n    assert find_divisible_by_4_in_both_sets({4, 8, 12}, {16, 20, 24}) is None\n    assert find_divisible_by_4_in_both_sets({8, 12, 16}, {8, 16, 20}) == [8, 16]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_other_v2(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_set_not_other_v2():\n    assert find_in_set_not_other_v2({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_in_set_not_other_v2({4, 5, 6}, {1, 2, 3}) == [4, 5, 6]\n    assert find_in_set_not_other_v2(set(), {1, 2, 3}) is None\n    assert find_in_set_not_other_v2({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_set_not_other_v2({1, 3, 5}, {2, 4, 6}) == [1, 3, 5]\n    assert find_in_set_not_other_v2({10, 20, 30}, {20, 40, 60}) == [10, 30]\n    assert find_in_set_not_other_v2({7, 8, 9}, {7, 8, 9}) is None\n    assert find_in_set_not_other_v2({5, 6, 7}, {7, 8, 9}) == [5, 6]\n    assert find_in_set_not_other_v2({0, 1, 2}, {0, 2, 4}) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_any_set(set1, set2):\n    result = list(set1 | set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_any_set():\n    assert find_in_any_set({1, 2, 3}, {3, 4, 5}) == [1, 2, 3, 4, 5]\n    assert find_in_any_set({1, 3, 5}, {2, 4, 6}) == [1, 2, 3, 4, 5, 6]\n    assert find_in_any_set(set(), set()) is None\n    assert find_in_any_set({1, 2, 3}, {4, 5, 6}) == [1, 2, 3, 4, 5, 6]\n    assert find_in_any_set({7, 8, 9}, {10, 11, 12}) == [7, 8, 9, 10, 11, 12]\n    assert find_in_any_set({1, 2}, {2, 3}) == [1, 2, 3]\n    assert find_in_any_set({1, 3, 5}, {1, 3, 5}) == [1, 3, 5]\n    assert find_in_any_set({1, 4, 7}, {2, 5, 8}) == [1, 2, 4, 5, 7, 8]\n    assert find_in_any_set({1}, set()) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 7 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_7_in_both_sets():\n    assert find_divisible_by_7_in_both_sets({7, 14, 21}, {14, 21, 28}) == [14, 21]\n    assert find_divisible_by_7_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_7_in_both_sets({7, 14, 21, 28}, {7, 21, 35, 49}) == [7, 21]\n    assert find_divisible_by_7_in_both_sets({7, 14, 28}, {14, 21, 35}) == [14]\n    assert find_divisible_by_7_in_both_sets({14, 21, 28}, {14, 21, 28}) == [14, 21, 28]\n    assert find_divisible_by_7_in_both_sets({7, 14}, {21, 28}) is None\n    assert find_divisible_by_7_in_both_sets({2, 3, 5}, {7, 11, 13}) is None\n    assert find_divisible_by_7_in_both_sets({14, 21, 35}, {14, 21, 35}) == [14, 21, 35]\n    assert find_divisible_by_7_in_both_sets({1, 7, 14}, {7, 14, 21}) == [7, 14]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_in_sets(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_difference_in_sets():\n    assert find_difference_in_sets({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_difference_in_sets({4, 5, 6}, {1, 2, 3}) == [4, 5, 6]\n    assert find_difference_in_sets(set(), {1, 2, 3}) is None\n    assert find_difference_in_sets({1, 2, 3}, {1, 2, 3}) is None\n    assert find_difference_in_sets({1, 3, 5}, {2, 4, 6}) == [1, 3, 5]\n    assert find_difference_in_sets({10, 20, 30}, {20, 40, 60}) == [10, 30]\n    assert find_difference_in_sets({7, 8, 9}, {7, 8, 9}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_2_in_both_sets(set1, set2):\n    result = list((set1 & set2) - {num for num in range(1, 101) if num % 2 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_not_divisible_by_2_in_both_sets():\n    assert find_not_divisible_by_2_in_both_sets({1, 2, 3, 5}, {3, 5, 7, 9}) == [3, 5]\n    assert find_not_divisible_by_2_in_both_sets({2, 4, 6, 8}, {1, 3, 5, 7}) is None\n    assert find_not_divisible_by_2_in_both_sets({1, 3, 5, 7}, {3, 5, 9, 11}) == [3, 5]\n    assert find_not_divisible_by_2_in_both_sets({10, 15, 25}, {10, 25, 35}) == [25]\n    assert find_not_divisible_by_2_in_both_sets(set(), {1, 3, 5}) is None\n    assert find_not_divisible_by_2_in_both_sets({1, 3, 5}, {6, 8, 10}) is None\n    assert find_not_divisible_by_2_in_both_sets({3, 5, 7}, {1, 3, 7}) == [3, 7]\n    assert find_not_divisible_by_2_in_both_sets({5, 9, 13}, {5, 9, 17}) == [5, 9]\n    assert find_not_divisible_by_2_in_both_sets({2, 4, 6}, {3, 5, 7}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_three_sets(set1, set2, set3):\n    result = list(set1 & set2 & set3)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_in_three_sets():\n    assert find_common_in_three_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [3]\n    assert find_common_in_three_sets({1, 2, 3}, {3, 4, 5}, {5, 6, 7}) is None\n    assert find_common_in_three_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [30]\n    assert find_common_in_three_sets({5, 10, 15}, {15, 20, 25}, {15, 30, 45}) == [15]\n    assert find_common_in_three_sets({1, 1, 1}, {2, 2, 2}, {3, 3, 3}) is None\n    assert find_common_in_three_sets({4, 8, 12}, {8, 12, 16}, {12, 16, 20}) == [12]\n    assert find_common_in_three_sets({1, 3, 5}, {1, 3, 5}, {1, 3, 5}) == [1, 3, 5]\n    assert find_common_in_three_sets(set(), {1, 2, 3}, {1, 2, 3}) is None\n    assert find_common_in_three_sets({2, 4, 6}, {4, 6, 8}, {6, 8, 10}) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_in_three_sets(set1, set2, set3):\n    result = list(set1 - set2 - set3)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_difference_in_three_sets():\n    assert find_difference_in_three_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [1]\n    assert find_difference_in_three_sets({1, 2, 3}, {1, 2, 3}, {1, 2, 3}) is None\n    assert find_difference_in_three_sets({5, 10, 15}, {10, 15, 20}, {15, 20, 25}) == [5]\n    assert find_difference_in_three_sets({7, 14, 21}, {14, 21, 28}, {21, 28, 35}) == [7]\n    assert find_difference_in_three_sets({2, 3, 4}, {4, 5, 6}, {6, 7, 8}) == [2, 3]\n    assert find_difference_in_three_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [10]\n    assert find_difference_in_three_sets({1, 3, 5}, {2, 4, 6}, {3, 6, 9}) == [1, 5]\n    assert find_difference_in_three_sets({1, 2}, {2, 3}, {3, 4}) == [1]\n    assert find_difference_in_three_sets(set(), {1, 2, 3}, {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_diff_in_sets_v2(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_diff_in_sets_v2():\n    assert find_diff_in_sets_v2({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_diff_in_sets_v2({4, 5, 6}, {1, 2, 3}) == [4, 5, 6]\n    assert find_diff_in_sets_v2(set(), {1, 2, 3}) is None\n    assert find_diff_in_sets_v2({1, 2, 3}, {1, 2, 3}) is None\n    assert find_diff_in_sets_v2({1, 3, 5}, {2, 4, 6}) == [1, 3, 5]\n    assert find_diff_in_sets_v2({10, 20, 30}, {20, 40, 60}) == [10, 30]\n    assert find_diff_in_sets_v2({7, 8, 9}, {7, 8, 9}) is None\n    assert find_diff_in_sets_v2({5, 6, 7}, {7, 8, 9}) == [5, 6]\n    assert find_diff_in_sets_v2({0, 1, 2}, {0, 2, 4}) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_5_in_both_sets(set1, set2):\n    result = list((set1 & set2) - {num for num in range(1, 101) if num % 5 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_not_divisible_by_5_in_both_sets():\n    assert find_not_divisible_by_5_in_both_sets({1, 2, 3, 10, 15}, {2, 3, 20, 25}) == [2, 3]\n    assert find_not_divisible_by_5_in_both_sets({5, 10, 15}, {5, 10, 15}) is None\n    assert find_not_divisible_by_5_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_not_divisible_by_5_in_both_sets({10, 20, 30}, {40, 50, 60}) is None\n    assert find_not_divisible_by_5_in_both_sets({1, 3, 7, 11}, {7, 11, 13, 17}) == [7, 11]\n    assert find_not_divisible_by_5_in_both_sets(set(), set()) is None\n    assert find_not_divisible_by_5_in_both_sets({1, 2, 3}, {5, 10, 15}) is None\n    assert find_not_divisible_by_5_in_both_sets({5, 6, 7}, {5, 6, 7}) == [6, 7]\n    assert find_not_divisible_by_5_in_both_sets({4, 5, 6}, {4, 6, 7}) == [4, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_or_6_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 3 == 0 or num % 6 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_3_or_6_in_both_sets():\n    assert find_divisible_by_3_or_6_in_both_sets({3, 6, 9, 12}, {6, 9, 12, 18}) == [6, 9, 12]\n    assert find_divisible_by_3_or_6_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_3_or_6_in_both_sets({2, 4, 6, 8}, {3, 5, 9, 12}) is None\n    assert find_divisible_by_3_or_6_in_both_sets({2, 4, 5}, {1, 2, 5}) is None\n    assert find_divisible_by_3_or_6_in_both_sets({6, 7, 8}, {9, 10, 11}) is None\n    assert find_divisible_by_3_or_6_in_both_sets(set(), set()) is None\n    assert find_divisible_by_3_or_6_in_both_sets({3, 6, 9}, {1, 2, 3}) == [3]\n    assert find_divisible_by_3_or_6_in_both_sets({4, 5, 6}, {6, 7, 8}) == [6]\n    assert find_divisible_by_3_or_6_in_both_sets({10, 20, 30}, {10, 30, 40}) == [30]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_sets_divisible_by_3(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 3 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_in_sets_divisible_by_3():\n    assert find_common_in_sets_divisible_by_3({3, 6, 9}, {3, 9, 12}) == [3, 9]\n    assert find_common_in_sets_divisible_by_3({2, 4, 5}, {1, 2, 3}) is None\n    assert find_common_in_sets_divisible_by_3({5, 6, 7}, {5, 6, 9}) == [6]\n    assert find_common_in_sets_divisible_by_3({2, 4, 6}, {2, 4, 6}) == [6]\n    assert find_common_in_sets_divisible_by_3({3, 6, 9}, {6, 9, 12}) == [6, 9]\n    assert find_common_in_sets_divisible_by_3(set(), set()) is None\n    assert find_common_in_sets_divisible_by_3({1, 2, 3}, {1, 2, 4}) is None\n    assert find_common_in_sets_divisible_by_3({2, 5, 8}, {3, 5, 7}) is None\n    assert find_common_in_sets_divisible_by_3({1, 2, 3}, {3, 6, 9}) == [3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_not_12_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 6 == 0 and num % 12 != 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_6_not_12_in_both_sets():\n    assert find_divisible_by_6_not_12_in_both_sets({6, 18, 24}, {6, 18, 30}) == [6, 18]\n    assert find_divisible_by_6_not_12_in_both_sets({2, 4, 6}, {1, 2, 3}) is None\n    assert find_divisible_by_6_not_12_in_both_sets({12, 18, 24}, {12, 18, 24}) == [18]\n    assert find_divisible_by_6_not_12_in_both_sets({6, 12, 18}, {6, 18, 24}) == [6, 18]\n    assert find_divisible_by_6_not_12_in_both_sets({1, 3, 5}, {6, 9, 12}) is None\n    assert find_divisible_by_6_not_12_in_both_sets(set(), set()) is None\n    assert find_divisible_by_6_not_12_in_both_sets({2, 4, 6}, {2, 4, 6}) == [6]\n    assert find_divisible_by_6_not_12_in_both_sets({1, 2, 4}, {2, 4, 6}) is None\n    assert find_divisible_by_6_not_12_in_both_sets({3, 6, 9}, {6, 9, 12}) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_in_both_sets(set1, set2):\n    result = list(set1 ^ set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_not_in_both_sets():\n    assert find_not_in_both_sets({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]\n    assert find_not_in_both_sets({1, 2, 3}, {1, 2, 3}) is None\n    assert find_not_in_both_sets({4, 5, 6}, {4, 6, 7}) == [5, 7]\n    assert find_not_in_both_sets({2, 3, 4}, {1, 2, 3}) == [1, 4]\n    assert find_not_in_both_sets({10, 20, 30}, {20, 30, 40}) == [10, 40]\n    assert find_not_in_both_sets(set(), set()) is None\n    assert find_not_in_both_sets({1, 2, 4}, {2, 3, 4}) == [1, 3]\n    assert find_not_in_both_sets({2, 3, 5}, {3, 5, 7}) == [2, 7]\n    assert find_not_in_both_sets({7, 8, 9}, {8, 9, 10}) == [7, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_between_three_sets(set1, set2, set3):\n    result = list(set1 - set2 - set3)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_difference_between_three_sets():\n    assert find_difference_between_three_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [1]\n    assert find_difference_between_three_sets({1, 2, 3}, {1, 2, 3}, {1, 2, 3}) is None\n    assert find_difference_between_three_sets({5, 10, 15}, {10, 15, 20}, {15, 20, 25}) == [5]\n    assert find_difference_between_three_sets({7, 14, 21}, {14, 21, 28}, {21, 28, 35}) == [7]\n    assert find_difference_between_three_sets({2, 3, 4}, {4, 5, 6}, {6, 7, 8}) == [2, 3]\n    assert find_difference_between_three_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [10]\n    assert find_difference_between_three_sets({1, 3, 5}, {2, 4, 6}, {3, 6, 9}) == [1, 5]\n    assert find_difference_between_three_sets({1, 2}, {2, 3}, {3, 4}) == [1]\n    assert find_difference_between_three_sets(set(), {1, 2, 3}, {1, 2, 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_not_3_in_both_sets(set1, set2):\n    result = list((set1 & set2) & {num for num in range(1, 101) if num % 2 == 0 and num % 3 != 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_not_3_in_both_sets():\n    assert find_divisible_by_2_not_3_in_both_sets({2, 4, 6}, {2, 4, 8}) == [2, 4]\n    assert find_divisible_by_2_not_3_in_both_sets({1, 3, 5}, {2, 4, 6}) is None\n    assert find_divisible_by_2_not_3_in_both_sets({8, 10, 12}, {6, 8, 10}) == [8, 10]\n    assert find_divisible_by_2_not_3_in_both_sets({4, 5, 6}, {1, 2, 4}) == [4]\n    assert find_divisible_by_2_not_3_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_2_not_3_in_both_sets({2, 4, 6}, {3, 5, 7}) is None\n    assert find_divisible_by_2_not_3_in_both_sets({2, 4, 6}, {4, 6, 8}) == [4]\n    assert find_divisible_by_2_not_3_in_both_sets({1, 4, 5}, {2, 3, 4}) == [4]\n    assert find_divisible_by_2_not_3_in_both_sets({8, 10, 12}, {14, 16, 18}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_not_divisible_by_4(set1, set2):\n    result = list((set1 & set2) - {num for num in range(1, 101) if num % 4 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_not_divisible_by_4():\n    assert find_common_not_divisible_by_4({1, 2, 3, 8, 12}, {2, 3, 12, 16}) == [2, 3]\n    assert find_common_not_divisible_by_4({2, 4, 6}, {4, 6, 8}) == [6]\n    assert find_common_not_divisible_by_4({1, 2, 3}, {4, 5, 6}) is None\n    assert find_common_not_divisible_by_4({1, 3, 5}, {1, 3, 7}) == [1, 3]\n    assert find_common_not_divisible_by_4({4, 8, 12}, {4, 12, 16}) is None\n    assert find_common_not_divisible_by_4({3, 6, 9}, {6, 9, 12}) == [6, 9]\n    assert find_common_not_divisible_by_4(set(), {1, 2, 3}) is None\n    assert find_common_not_divisible_by_4({1, 2, 3}, {1, 2, 3}) == [1, 2, 3]\n    assert find_common_not_divisible_by_4({5, 6, 7}, {6, 7, 8}) == [6, 7]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_sets(set1, set2):\n    result = list(set1 ^ set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_unique_in_sets():\n    assert find_unique_in_sets({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]\n    assert find_unique_in_sets({1, 2, 3}, {1, 2, 3}) is None\n    assert find_unique_in_sets({4, 5, 6}, {4, 6, 7}) == [5, 7]\n    assert find_unique_in_sets({2, 3, 4}, {1, 2, 3}) == [1, 4]\n    assert find_unique_in_sets({10, 20, 30}, {20, 30, 40}) == [10, 40]\n    assert find_unique_in_sets(set(), set()) is None\n    assert find_unique_in_sets({1, 2, 4}, {2, 3, 4}) == [1, 3]\n    assert find_unique_in_sets({2, 3, 5}, {3, 5, 7}) == [2, 7]\n    assert find_unique_in_sets({7, 8, 9}, {8, 9, 10}) == [7, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_all_sets(set1, set2, set3):\n    result = list(set1 & set2 & set3)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_in_all_sets():\n    assert find_common_in_all_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [3]\n    assert find_common_in_all_sets({1, 2, 3}, {3, 4, 5}, {5, 6, 7}) is None\n    assert find_common_in_all_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [30]\n    assert find_common_in_all_sets({5, 10, 15}, {15, 20, 25}, {15, 30, 45}) == [15]\n    assert find_common_in_all_sets({1, 1, 1}, {2, 2, 2}, {3, 3, 3}) is None\n    assert find_common_in_all_sets({4, 8, 12}, {8, 12, 16}, {12, 16, 20}) == [12]\n    assert find_common_in_all_sets({1, 3, 5}, {1, 3, 5}, {1, 3, 5}) == [1, 3, 5]\n    assert find_common_in_all_sets(set(), {1, 2, 3}, {1, 2, 3}) is None\n    assert find_common_in_all_sets({2, 4, 6}, {4, 6, 8}, {6, 8, 10}) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_both_sets_not_divisible_by_3(set1, set2):\n    result = list((set1 & set2) - {num for num in range(1, 101) if num % 3 == 0})\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_both_sets_not_divisible_by_3():\n    assert find_in_both_sets_not_divisible_by_3({1, 2, 3, 6, 9}, {2, 3, 5, 6}) == [2]\n    assert find_in_both_sets_not_divisible_by_3({1, 2, 4}, {3, 4, 5, 6}) == [4]\n    assert find_in_both_sets_not_divisible_by_3({3, 6, 9}, {12, 15}) is None\n    assert find_in_both_sets_not_divisible_by_3(set(), {1, 2, 4}) is None\n    assert find_in_both_sets_not_divisible_by_3({1, 2, 3}, set()) is None\n    assert find_in_both_sets_not_divisible_by_3({2, 4, 6}, {2, 8, 10}) == [2]\n    assert find_in_both_sets_not_divisible_by_3({1, 7, 9, 10}, {3, 7, 10}) == [7, 10]\n    assert find_in_both_sets_not_divisible_by_3({1, 5, 12}, {4, 5, 6, 12}) == [5]\n    assert find_in_both_sets_not_divisible_by_3({8, 12, 15, 20}, {5, 8, 15, 25}) == [8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_one_set(set1, set2):\n    result = list(set1 ^ set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_unique_in_one_set():\n    assert find_unique_in_one_set({1, 2, 3}, {2, 3, 4}) == [1, 4]\n    assert find_unique_in_one_set({1, 3}, {2, 4}) == [1, 2, 3, 4]\n    assert find_unique_in_one_set({1, 2, 3}, {1, 2, 3}) is None\n    assert find_unique_in_one_set(set(), {1, 2, 3}) == [1, 2, 3]\n    assert find_unique_in_one_set({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_unique_in_one_set({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]\n    assert find_unique_in_one_set({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]\n    assert find_unique_in_one_set({9, 10}, {11, 12}) == [9, 10, 11, 12]\n    assert find_unique_in_one_set({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_other_v3(set1, set2):\n    result = []\n    for elem in set1:\n        if elem not in set2:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_set_not_other_v3():\n    assert find_in_set_not_other_v3({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_in_set_not_other_v3({1, 3}, {2, 4}) == [1, 3]\n    assert find_in_set_not_other_v3({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_set_not_other_v3(set(), {1, 2, 3}) is None\n    assert find_in_set_not_other_v3({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_in_set_not_other_v3({1, 2, 3, 5}, {2, 3, 4, 5}) == [1]\n    assert find_in_set_not_other_v3({1, 6, 7}, {2, 3, 6}) == [1, 7]\n    assert find_in_set_not_other_v3({9, 10}, {11, 12}) == [9, 10]\n    assert find_in_set_not_other_v3({7, 8, 9}, {8, 10, 11}) == [7, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_divisible_by_3(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_divisible_by_3():\n    assert find_common_divisible_by_3({1, 2, 3}, {2, 3, 4}) == [3]\n    assert find_common_divisible_by_3({3, 6, 9}, {6, 12, 18}) == [6]\n    assert find_common_divisible_by_3({3, 6, 9}, {3, 6, 9}) == [3, 6, 9]\n    assert find_common_divisible_by_3({1, 2, 4}, {5, 7, 8}) is None\n    assert find_common_divisible_by_3(set(), {3, 6, 9}) is None\n    assert find_common_divisible_by_3({3, 6, 9}, set()) is None\n    assert find_common_divisible_by_3({1, 3, 5, 9}, {9, 12, 15}) == [9]\n    assert find_common_divisible_by_3({6, 12}, {3, 6, 9}) == [6]\n    assert find_common_divisible_by_3({4, 8, 12}, {3, 9, 12}) == [12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_one_set_not_other_v3(set1, set2):\n    result = []\n    for elem in set1 | set2:\n        if (elem in set1) != (elem in set2):\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_one_set_not_other_v3():\n    assert find_in_one_set_not_other_v3({1, 2, 3}, {2, 3, 4}) == [1, 4]\n    assert find_in_one_set_not_other_v3({1, 3}, {2, 4}) == [1, 2, 3, 4]\n    assert find_in_one_set_not_other_v3({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_one_set_not_other_v3(set(), {1, 2, 3}) == [1, 2, 3]\n    assert find_in_one_set_not_other_v3({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_in_one_set_not_other_v3({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]\n    assert find_in_one_set_not_other_v3({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]\n    assert find_in_one_set_not_other_v3({9, 10}, {11, 12}) == [9, 10, 11, 12]\n    assert find_in_one_set_not_other_v3({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_not_4_in_both_sets(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 2 == 0 and elem % 4 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_not_4_in_both_sets():\n    assert find_divisible_by_2_not_4_in_both_sets({1, 2, 4}, {2, 3, 4}) == [2]\n    assert find_divisible_by_2_not_4_in_both_sets({2, 6, 10}, {4, 6, 10}) == [6, 10]\n    assert find_divisible_by_2_not_4_in_both_sets({1, 3, 5}, {7, 9, 11}) is None\n    assert find_divisible_by_2_not_4_in_both_sets({1, 2}, {2, 3}) == [2]\n    assert find_divisible_by_2_not_4_in_both_sets(set(), {2, 4, 6}) is None\n    assert find_divisible_by_2_not_4_in_both_sets({2, 4, 6}, set()) is None\n    assert find_divisible_by_2_not_4_in_both_sets({2, 3, 8}, {2, 4, 8}) == [2]\n    assert find_divisible_by_2_not_4_in_both_sets({1, 2, 6}, {2, 5, 6}) == [2, 6]\n    assert find_divisible_by_2_not_4_in_both_sets({4, 8, 10}, {2, 4, 8}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_both_sets_not_divisible_by_5(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 5 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_both_sets_not_divisible_by_5():\n    assert find_in_both_sets_not_divisible_by_5({1, 2, 5, 10}, {2, 3, 5}) == [2]\n    assert find_in_both_sets_not_divisible_by_5({5, 15, 25}, {10, 20, 30}) is None\n    assert find_in_both_sets_not_divisible_by_5({1, 2, 3, 4, 5}, {3, 5, 7, 9}) == [3]\n    assert find_in_both_sets_not_divisible_by_5({5, 10, 15}, {2, 4, 6}) is None\n    assert find_in_both_sets_not_divisible_by_5(set(), {1, 2, 3}) is None\n    assert find_in_both_sets_not_divisible_by_5({1, 2, 4}, set()) is None\n    assert find_in_both_sets_not_divisible_by_5({1, 2, 3, 7}, {2, 3, 7}) == [2, 3, 7]\n    assert find_in_both_sets_not_divisible_by_5({1, 8, 12}, {4, 8, 12}) == [8, 12]\n    assert find_in_both_sets_not_divisible_by_5({6, 7, 8}, {7, 8, 9}) == [7, 8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_both_sets_divisible_by_3(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_both_sets_divisible_by_3():\n    assert find_in_both_sets_divisible_by_3({1, 2, 3}, {3, 4, 5}) == [3]\n    assert find_in_both_sets_divisible_by_3({6, 9, 12}, {9, 12, 18}) == [9, 12]\n    assert find_in_both_sets_divisible_by_3({3, 6, 9}, {3, 6, 9}) == [3, 6, 9]\n    assert find_in_both_sets_divisible_by_3({1, 4, 5}, {7, 8, 10}) is None\n    assert find_in_both_sets_divisible_by_3(set(), {1, 2, 3}) is None\n    assert find_in_both_sets_divisible_by_3({1, 2, 3}, set()) is None\n    assert find_in_both_sets_divisible_by_3({1, 3, 6, 9}, {3, 6, 9}) == [3, 6, 9]\n    assert find_in_both_sets_divisible_by_3({4, 8, 12}, {6, 12, 18}) == [12]\n    assert find_in_both_sets_divisible_by_3({2, 3, 5, 6}, {1, 2, 3, 6}) == [3, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_sets_v2(set1, set2):\n    result = []\n    for elem in set1 ^ set2:\n        result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_unique_in_sets_v2():\n    assert find_unique_in_sets_v2({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]\n    assert find_unique_in_sets_v2({1, 3}, {2, 4}) == [1, 2, 3, 4]\n    assert find_unique_in_sets_v2({1, 2, 3}, {1, 2, 3}) is None\n    assert find_unique_in_sets_v2(set(), {1, 2, 3}) == [1, 2, 3]\n    assert find_unique_in_sets_v2({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_unique_in_sets_v2({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]\n    assert find_unique_in_sets_v2({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]\n    assert find_unique_in_sets_v2({9, 10}, {11, 12}) == [9, 10, 11, 12]\n    assert find_unique_in_sets_v2({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_first_set_not_second_divisible_by_7(set1, set2):\n    result = []\n    for elem in set1 - set2:\n        if elem % 7 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_first_set_not_second_divisible_by_7():\n    assert find_in_first_set_not_second_divisible_by_7({7, 14, 21}, {1, 2, 3}) == [7, 14, 21]\n    assert find_in_first_set_not_second_divisible_by_7({7, 14}, {14, 28}) == [7]\n    assert find_in_first_set_not_second_divisible_by_7({1, 2, 3}, {3, 7, 14}) is None\n    assert find_in_first_set_not_second_divisible_by_7({7, 14, 28}, set()) == [7, 14, 28]\n    assert find_in_first_set_not_second_divisible_by_7(set(), {1, 2, 3}) is None\n    assert find_in_first_set_not_second_divisible_by_7({7, 49, 70}, {7, 14, 49}) == [70]\n    assert find_in_first_set_not_second_divisible_by_7({1, 2, 7}, {3, 5, 9}) == [7]\n    assert find_in_first_set_not_second_divisible_by_7({14, 21, 28}, {14, 28, 35}) == [21]\n    assert find_in_first_set_not_second_divisible_by_7({7, 21, 35}, {35, 42, 49}) == [7, 21]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_not_12_in_both_sets_2(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 6 == 0 and elem % 12 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_6_not_12_in_both_sets_2():\n    assert find_divisible_by_6_not_12_in_both_sets_2({6, 12, 18}, {6, 18, 30}) == [6, 18]\n    assert find_divisible_by_6_not_12_in_both_sets_2({12, 24, 36}, {24, 36, 48}) is None\n    assert find_divisible_by_6_not_12_in_both_sets_2({6, 12, 18}, {12, 24, 36}) is None\n    assert find_divisible_by_6_not_12_in_both_sets_2(set(), {6, 18, 24}) is None\n    assert find_divisible_by_6_not_12_in_both_sets_2({6, 18, 24}, set()) is None\n    assert find_divisible_by_6_not_12_in_both_sets_2({6, 12, 18}, {6, 12, 18}) == [6, 18]\n    assert find_divisible_by_6_not_12_in_both_sets_2({18, 24, 30}, {6, 18, 30}) == [18, 30]\n    assert find_divisible_by_6_not_12_in_both_sets_2({6, 30, 48}, {12, 18, 30}) == [30]\n    assert find_divisible_by_6_not_12_in_both_sets_2({1, 2, 3, 6}, {6, 9, 12, 18}) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_one_set_not_other_divisible_by_5(set1, set2):\n    result = []\n    for elem in set1 ^ set2:\n        if elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_one_set_not_other_divisible_by_5():\n    assert find_in_one_set_not_other_divisible_by_5({5, 10, 15}, {10, 20, 30}) == [5, 15, 20, 30]\n    assert find_in_one_set_not_other_divisible_by_5({1, 2, 5}, {5, 10, 15}) == [10, 15]\n    assert find_in_one_set_not_other_divisible_by_5({5, 10}, {5, 10}) is None\n    assert find_in_one_set_not_other_divisible_by_5(set(), {5, 10, 15}) == [5, 10, 15]\n    assert find_in_one_set_not_other_divisible_by_5({5, 10, 15}, set()) == [5, 10, 15]\n    assert find_in_one_set_not_other_divisible_by_5({1, 5, 9}, {2, 5, 10}) == [10]\n    assert find_in_one_set_not_other_divisible_by_5({6, 7, 8}, {5, 10, 15}) == [5, 10, 15]\n    assert find_in_one_set_not_other_divisible_by_5({5, 12, 20}, {20, 30, 40}) == [5, 30, 40]\n    assert find_in_one_set_not_other_divisible_by_5({3, 6, 9}, {3, 6, 9}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_sets_divisible_by_4(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 4 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_common_in_sets_divisible_by_4():\n    assert find_common_in_sets_divisible_by_4({4, 8, 12}, {8, 12, 16}) == [8, 12]\n    assert find_common_in_sets_divisible_by_4({16, 32, 48}, {32, 48, 64}) == [32, 48]\n    assert find_common_in_sets_divisible_by_4({4, 8, 12}, {4, 8, 12}) == [4, 8, 12]\n    assert find_common_in_sets_divisible_by_4({2, 6, 10}, {3, 6, 9}) is None\n    assert find_common_in_sets_divisible_by_4(set(), {4, 8, 12}) is None\n    assert find_common_in_sets_divisible_by_4({4, 8, 12}, set()) is None\n    assert find_common_in_sets_divisible_by_4({8, 12, 24}, {12, 24, 36}) == [12, 24]\n    assert find_common_in_sets_divisible_by_4({16, 32, 64}, {8, 16, 32}) == [16, 32]\n    assert find_common_in_sets_divisible_by_4({1, 2, 4}, {2, 4, 8}) == [4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_in_both_sets(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_3_in_both_sets():\n    assert find_divisible_by_3_in_both_sets({3, 6, 9}, {6, 9, 12}) == [6, 9]\n    assert find_divisible_by_3_in_both_sets({3, 9, 15}, {3, 9, 15}) == [3, 9, 15]\n    assert find_divisible_by_3_in_both_sets({6, 12, 18}, {18, 24, 30}) == [18]\n    assert find_divisible_by_3_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_3_in_both_sets(set(), {3, 6, 9}) is None\n    assert find_divisible_by_3_in_both_sets({3, 6, 9}, set()) is None\n    assert find_divisible_by_3_in_both_sets({3, 12, 15}, {12, 15, 18}) == [12, 15]\n    assert find_divisible_by_3_in_both_sets({6, 9, 12}, {9, 12, 15}) == [9, 12]\n    assert find_divisible_by_3_in_both_sets({6, 9, 18}, {6, 12, 18}) == [6, 18]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_in_sets_v2(set1, set2):\n    result = []\n    for elem in set1 - set2:\n        result.append(elem)\n    for elem in set2 - set1:\n        result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_difference_in_sets_v2():\n    assert find_difference_in_sets_v2({1, 2, 3}, {2, 3, 4}) == [1, 4]\n    assert find_difference_in_sets_v2({1, 3}, {2, 4}) == [1, 2, 3, 4]\n    assert find_difference_in_sets_v2({1, 2, 3}, {1, 2, 3}) is None\n    assert find_difference_in_sets_v2(set(), {1, 2, 3}) == [1, 2, 3]\n    assert find_difference_in_sets_v2({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_difference_in_sets_v2({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]\n    assert find_difference_in_sets_v2({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]\n    assert find_difference_in_sets_v2({9, 10}, {11, 12}) == [9, 10, 11, 12]\n    assert find_difference_in_sets_v2({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_in_both_sets_2(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 4 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_4_in_both_sets_2():\n    assert find_divisible_by_4_in_both_sets_2({4, 8, 12}, {8, 12, 16}) == [8, 12]\n    assert find_divisible_by_4_in_both_sets_2({16, 32, 48}, {32, 48, 64}) == [32, 48]\n    assert find_divisible_by_4_in_both_sets_2({4, 8, 12}, {4, 8, 12}) == [4, 8, 12]\n    assert find_divisible_by_4_in_both_sets_2({2, 6, 10}, {3, 6, 9}) is None\n    assert find_divisible_by_4_in_both_sets_2(set(), {4, 8, 12}) is None\n    assert find_divisible_by_4_in_both_sets_2({4, 8, 12}, set()) is None\n    assert find_divisible_by_4_in_both_sets_2({8, 12, 24}, {12, 24, 36}) == [12, 24]\n    assert find_divisible_by_4_in_both_sets_2({16, 32, 64}, {8, 16, 32}) == [16, 32]\n    assert find_divisible_by_4_in_both_sets_2({1, 2, 4}, {2, 4, 8}) == [4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_not_divisible_by_3(set1, set2):\n    result = []\n    for elem in set1 - set2:\n        if elem % 3 != 0:\n            result.append(elem)\n    for elem in set2 - set1:\n        if elem % 3 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_unique_not_divisible_by_3():\n    assert find_unique_not_divisible_by_3({1, 2, 3, 4}, {4, 5, 6, 7}) == [1, 2, 5, 7]\n    assert find_unique_not_divisible_by_3({9, 18, 27}, {3, 6, 9}) is None\n    assert find_unique_not_divisible_by_3({7, 10, 14}, {1, 7, 10}) == [1, 14]\n    assert find_unique_not_divisible_by_3(set(), {3, 6, 9}) is None\n    assert find_unique_not_divisible_by_3({3, 6, 9}, set()) is None\n    assert find_unique_not_divisible_by_3({1, 4, 7}, {2, 5, 8}) == [1, 2, 4, 5, 7, 8]\n    assert find_unique_not_divisible_by_3({10, 20, 30}, {30, 40, 50}) == [10, 20, 40, 50]\n    assert find_unique_not_divisible_by_3({2, 3, 4}, {5, 6, 7}) == [2, 4, 5, 7]\n    assert find_unique_not_divisible_by_3({15, 21, 27}, {3, 9, 21}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_in_both_sets(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_5_in_both_sets():\n    assert find_divisible_by_5_in_both_sets({5, 10, 15}, {10, 15, 20}) == [10, 15]\n    assert find_divisible_by_5_in_both_sets({25, 30, 35}, {35, 40, 45}) == [35]\n    assert find_divisible_by_5_in_both_sets({50, 55}, {55, 60}) == [55]\n    assert find_divisible_by_5_in_both_sets({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_5_in_both_sets(set(), {5, 10, 15}) is None\n    assert find_divisible_by_5_in_both_sets({5, 10, 15}, set()) is None\n    assert find_divisible_by_5_in_both_sets({20, 25, 30}, {25, 35, 40}) == [25]\n    assert find_divisible_by_5_in_both_sets({10, 20, 30}, {10, 40, 50}) == [10]\n    assert find_divisible_by_5_in_both_sets({15, 45}, {5, 15, 25}) == [15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_both_sets_not_divisible_by_2(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 2 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_both_sets_not_divisible_by_2():\n    assert find_in_both_sets_not_divisible_by_2({1, 3, 5}, {3, 5, 7}) == [3, 5]\n    assert find_in_both_sets_not_divisible_by_2({11, 13, 15}, {13, 15, 17}) == [13, 15]\n    assert find_in_both_sets_not_divisible_by_2({19, 21, 23}, {21, 23, 25}) == [21, 23]\n    assert find_in_both_sets_not_divisible_by_2({2, 4, 6}, {8, 10, 12}) is None\n    assert find_in_both_sets_not_divisible_by_2(set(), {1, 3, 5}) is None\n    assert find_in_both_sets_not_divisible_by_2({1, 3, 5}, set()) is None\n    assert find_in_both_sets_not_divisible_by_2({7, 9, 11}, {11, 13, 15}) == [11]\n    assert find_in_both_sets_not_divisible_by_2({5, 7, 9}, {7, 9, 11}) == [7, 9]\n    assert find_in_both_sets_not_divisible_by_2({3, 6, 9}, {3, 9, 12}) == [3, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_between_sets(set1, set2):\n    result = list(set1 - set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_difference_between_sets():\n    assert find_difference_between_sets({1, 2, 3}, {2, 3, 4}) == [1]\n    assert find_difference_between_sets({5, 6, 7}, {6, 8, 9}) == [5, 7]\n    assert find_difference_between_sets({1, 2, 3}, {1, 2, 3}) is None\n    assert find_difference_between_sets(set(), {1, 2, 3}) is None\n    assert find_difference_between_sets({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_difference_between_sets({7, 8, 9}, {8, 9, 10}) == [7]\n    assert find_difference_between_sets({3, 6, 9}, {6, 9, 12}) == [3]\n    assert find_difference_between_sets({15, 18, 21}, {18, 21, 24}) == [15]\n    assert find_difference_between_sets({2, 4, 6}, {4, 6, 8}) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_elements_in_sets(set1, set2):\n    result = list(set1 ^ set2)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_unique_elements_in_sets():\n    assert find_unique_elements_in_sets({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]\n    assert find_unique_elements_in_sets({1, 2, 3}, {1, 2, 3}) is None\n    assert find_unique_elements_in_sets({1}, {2}) == [1, 2]\n    assert find_unique_elements_in_sets(set(), {1, 2, 3}) == [1, 2, 3]\n    assert find_unique_elements_in_sets({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_unique_elements_in_sets(set(), set()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_in_both_sets_2(set1, set2):\n    result = []\n    for elem in set1 & set2:\n        if elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_in_both_sets_2():\n    assert find_divisible_by_2_in_both_sets_2({2, 4, 6}, {4, 6, 8}) == [4, 6]\n    assert find_divisible_by_2_in_both_sets_2({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_2_in_both_sets_2({1, 3, 5}, {7, 9, 11}) is None\n    assert find_divisible_by_2_in_both_sets_2({2, 4, 6, 8}, {4, 8, 10}) == [4, 8]\n    assert find_divisible_by_2_in_both_sets_2({2, 4, 6}, {1, 3, 5}) is None\n    assert find_divisible_by_2_in_both_sets_2({2}, {2}) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_first_set_not_second(set1, set2):\n    result = []\n    for elem in set1 - set2:\n        result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_in_first_set_not_second():\n    assert find_in_first_set_not_second({1, 2, 3}, {3, 4, 5}) == [1, 2]\n    assert find_in_first_set_not_second({1, 2, 3}, {1, 2, 3}) is None\n    assert find_in_first_set_not_second({1}, {2}) == [1]\n    assert find_in_first_set_not_second(set(), {1, 2, 3}) is None\n    assert find_in_first_set_not_second({1, 2, 3}, set()) == [1, 2, 3]\n    assert find_in_first_set_not_second({1, 2, 3}, {2}) == [1, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_in_one_set(set1, set2):\n    result = []\n    for elem in set1:\n        if elem % 5 == 0 and elem not in set2:\n            result.append(elem)\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_5_in_one_set():\n    assert find_divisible_by_5_in_one_set({5, 10, 15}, {10, 20, 30}) == [5, 15]\n    assert find_divisible_by_5_in_one_set({5, 10, 15}, {5, 10, 15}) is None\n    assert find_divisible_by_5_in_one_set({1, 2, 3}, {4, 5, 6}) is None\n    assert find_divisible_by_5_in_one_set({10, 20, 30}, {5, 15, 25}) == [10, 20, 30]\n    assert find_divisible_by_5_in_one_set({5, 10, 15}, {2, 4, 6}) == [5, 10, 15]\n    assert find_divisible_by_5_in_one_set({1, 2, 3}, {3, 4, 5}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_stack_empty(stack):\n    if len(stack) == 0:\n        return True\n    return False"}, {"role": "assistant", "content": "def test_is_stack_empty():\n    assert is_stack_empty([]) is True\n    assert is_stack_empty([1, 2, 3]) is False\n    assert is_stack_empty([0]) is False\n    assert is_stack_empty(['a', 'b']) is False\n    assert is_stack_empty([None]) is False\n    assert is_stack_empty([False]) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef fill_stack_until_limit(stack, limit):\n    while len(stack) < limit:\n        stack.append(len(stack) + 1)\n    return stack"}, {"role": "assistant", "content": "def test_fill_stack_until_limit():\n    assert fill_stack_until_limit([], 3) == [1, 2, 3]\n    assert fill_stack_until_limit([1, 2], 4) == [1, 2, 3, 4]\n    assert fill_stack_until_limit([1], 1) == [1]\n    assert fill_stack_until_limit([], 0) == []\n    assert fill_stack_until_limit([1, 2, 3], 2) == [1, 2, 3]\n    assert fill_stack_until_limit([], 5) == [1, 2, 3, 4, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef fill_stack_up_to_n(stack, n):\n    for i in range(1, n + 1):\n        stack.append(i)\n    return stack"}, {"role": "assistant", "content": "def test_fill_stack_up_to_n():\n    assert fill_stack_up_to_n([], 3) == [1, 2, 3]\n    assert fill_stack_up_to_n([1, 2], 4) == [1, 2, 1, 2, 3, 4]\n    assert fill_stack_up_to_n([1], 1) == [1, 1]\n    assert fill_stack_up_to_n([], 0) == []\n    assert fill_stack_up_to_n([1, 2, 3], 2) == [1, 2, 3, 1, 2]\n    assert fill_stack_up_to_n([], 5) == [1, 2, 3, 4, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_stack_palindrome(stack):\n    def reverse_stack(stack):\n        reversed_stack = []\n        while stack:\n            reversed_stack.append(stack.pop())\n        return reversed_stack\n    original = list(stack)\n    reversed_stack = reverse_stack(stack)\n    if original == reversed_stack:\n        return True\n    return False"}, {"role": "assistant", "content": "def test_is_stack_palindrome():\n    assert is_stack_palindrome([1, 2, 1]) is True\n    assert is_stack_palindrome([1, 2, 2, 1]) is True\n    assert is_stack_palindrome([1, 2, 3]) is False\n    assert is_stack_palindrome([1]) is True\n    assert is_stack_palindrome([]) is True\n    assert is_stack_palindrome([1, 2, 3, 2, 1]) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_until_greater_than_x(stack, x):\n    popped_elements = []\n    while stack:\n        elem = stack.pop()\n        if elem > x:\n            popped_elements.append(elem)\n            break\n        popped_elements.append(elem)\n    if not popped_elements:\n        return None\n    return popped_elements"}, {"role": "assistant", "content": "def test_pop_until_greater_than_x():\n    assert pop_until_greater_than_x([1, 2, 3, 4, 5], 3) == [5]\n    assert pop_until_greater_than_x([5, 4, 3, 2, 1], 3) == [1, 2, 3, 4]\n    assert pop_until_greater_than_x([1, 2, 3], 5) == [3, 2, 1]\n    assert pop_until_greater_than_x([], 3) is None\n    assert pop_until_greater_than_x([1, 2, 3], 0) == [3]\n    assert pop_until_greater_than_x([5, 6, 7], 4) == [7]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_less_than_y(stack, y):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem < y:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_less_than_y():\n    assert pop_elements_less_than_y([1, 2, 3, 4, 5], 3) == [2, 1]\n    assert pop_elements_less_than_y([5, 4, 3, 2, 1], 3) == [1, 2]\n    assert pop_elements_less_than_y([1, 2, 3], 5) == [3, 2, 1]\n    assert pop_elements_less_than_y([], 3) is None\n    assert pop_elements_less_than_y([1, 2, 3], 0) is None\n    assert pop_elements_less_than_y([5, 6, 7], 4) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_odds_from_stack(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_odds_from_stack():\n    assert remove_odds_from_stack([1, 2, 3, 4, 5]) == [4, 2]\n    assert remove_odds_from_stack([1, 3, 5]) is None\n    assert remove_odds_from_stack([2, 4, 6]) == [6, 4, 2]\n    assert remove_odds_from_stack([]) is None\n    assert remove_odds_from_stack([1, 2, 3]) == [2]\n    assert remove_odds_from_stack([5, 4, 3, 2, 1]) == [2, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_until_sum_exceeds_x(stack, x):\n    popped_elements = []\n    current_sum = 0\n    while stack and current_sum <= x:\n        elem = stack.pop()\n        popped_elements.append(elem)\n        current_sum += elem\n    if not popped_elements:\n        return None\n    return popped_elements"}, {"role": "assistant", "content": "def test_pop_until_sum_exceeds_x():\n    assert pop_until_sum_exceeds_x([1, 2, 3, 4, 5], 10) == [5, 4, 3]\n    assert pop_until_sum_exceeds_x([5, 4, 3, 2, 1], 7) == [1, 2, 3, 4]\n    assert pop_until_sum_exceeds_x([], 3) is None\n    assert pop_until_sum_exceeds_x([1, 2, 3], 1) == [3]\n    assert pop_until_sum_exceeds_x([5, 6, 7], 4) == [7]\n    assert pop_until_sum_exceeds_x([1, 2, 3], 5) == [3, 2, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_divisible_by_3(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_divisible_by_3():\n    assert pop_elements_divisible_by_3([1, 2, 3, 4, 5, 6, 9]) == [9, 6, 3]\n    assert pop_elements_divisible_by_3([1, 2, 4, 5]) is None\n    assert pop_elements_divisible_by_3([3, 6, 9]) == [9, 6, 3]\n    assert pop_elements_divisible_by_3([]) is None\n    assert pop_elements_divisible_by_3([3]) == [3]\n    assert pop_elements_divisible_by_3([1, 2, 3]) == [3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_min_element(stack):\n    if not stack:\n        return None\n    min_elem = min(stack)\n    stack.remove(min_elem)\n    return min_elem"}, {"role": "assistant", "content": "def test_pop_min_element():\n    assert pop_min_element([1, 2, 3, 4, 5]) == 1\n    assert pop_min_element([5, 4, 3, 2, 1]) == 1\n    assert pop_min_element([]) is None\n    assert pop_min_element([1]) == 1\n    assert pop_min_element([5, 3, 9, 7]) == 3\n    assert pop_min_element([2, 2, 2, 2]) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef double_stack_values(stack):\n    new_stack = []\n    while stack:\n        elem = stack.pop()\n        new_stack.append(elem * 2)\n    return new_stack"}, {"role": "assistant", "content": "def test_double_stack_values():\n    assert double_stack_values([1, 2, 3]) == [6, 4, 2]\n    assert double_stack_values([0, 1, 2]) == [4, 2, 0]\n    assert double_stack_values([]) == []\n    assert double_stack_values([2, 4, 6]) == [12, 8, 4]\n    assert double_stack_values([5, 5, 5]) == [10, 10, 10]\n    assert double_stack_values([-1, -2, -3]) == [-6, -4, -2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_until_even(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 == 0:\n            result.append(elem)\n            break\n        result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_until_even():\n    assert pop_until_even([1, 3, 5, 2, 7]) == [7, 2]\n    assert pop_until_even([2, 4, 6, 1]) == [1, 6]\n    assert pop_until_even([1, 1, 1, 1]) == [1, 1, 1, 1]\n    assert pop_until_even([]) is None\n    assert pop_until_even([2, 4, 6, 8]) == [8]\n    assert pop_until_even([3, 3, 3, 3]) == [3, 3, 3, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_prime_numbers(stack):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    while stack:\n        elem = stack.pop()\n        if is_prime(elem):\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_prime_numbers():\n    assert pop_prime_numbers([1, 2, 3, 4, 5, 6, 7]) == [7, 5, 3, 2]\n    assert pop_prime_numbers([1, 1, 1, 1]) is None\n    assert pop_prime_numbers([2, 3, 5, 7]) == [7, 5, 3, 2]\n    assert pop_prime_numbers([]) is None\n    assert pop_prime_numbers([4, 6, 8, 9]) is None\n    assert pop_prime_numbers([11, 13, 17]) == [17, 13, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_until_divisible_by_4(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 4 == 0:\n            result.append(elem)\n            break\n        result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_until_divisible_by_4():\n    assert pop_until_divisible_by_4([1, 2, 3, 4, 5]) == [5, 4]\n    assert pop_until_divisible_by_4([4, 3, 2, 1]) == [1, 2, 3, 4]\n    assert pop_until_divisible_by_4([1, 1, 1, 1]) == [1, 1, 1, 1]\n    assert pop_until_divisible_by_4([]) is None\n    assert pop_until_divisible_by_4([2, 2, 2, 4]) == [4]\n    assert pop_until_divisible_by_4([4]) == [4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_non_divisible_by_2(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_non_divisible_by_2():\n    assert remove_non_divisible_by_2([1, 2, 3, 4, 5]) == [4, 2]\n    assert remove_non_divisible_by_2([1, 3, 5]) is None\n    assert remove_non_divisible_by_2([2, 4, 6]) == [6, 4, 2]\n    assert remove_non_divisible_by_2([]) is None\n    assert remove_non_divisible_by_2([1, 2, 3]) == [2]\n    assert remove_non_divisible_by_2([5, 4, 3, 2, 1]) == [2, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_even_from_stack(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_even_from_stack():\n    assert remove_even_from_stack([1, 2, 3, 4, 5]) == [5, 3, 1]\n    assert remove_even_from_stack([2, 4, 6, 8]) is None\n    assert remove_even_from_stack([1, 3, 5, 7]) == [7, 5, 3, 1]\n    assert remove_even_from_stack([]) is None\n    assert remove_even_from_stack([1]) == [1]\n    assert remove_even_from_stack([4, 3, 2, 1]) == [1, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_greater_than_x(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem > x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_greater_than_x():\n    assert pop_elements_greater_than_x([1, 3, 5, 7, 9], 4) == [9, 7, 5]\n    assert pop_elements_greater_than_x([2, 4, 6, 8], 10) is None\n    assert pop_elements_greater_than_x([10, 20, 30], 15) == [30, 20]\n    assert pop_elements_greater_than_x([], 5) is None\n    assert pop_elements_greater_than_x([-5, -2, -1, 0], -3) == [0, -1, -2]\n    assert pop_elements_greater_than_x([5, 5, 5, 5, 5], 5) is None\n    assert pop_elements_greater_than_x([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]\n    assert pop_elements_greater_than_x([1, 2, 3, 4, 5], 5) is None\n    assert pop_elements_greater_than_x([100], 10) == [100]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_in_stack(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_in_stack():\n    assert find_even_in_stack([1, 2, 3, 4, 5, 6]) == [6, 4, 2]\n    assert find_even_in_stack([1, 3, 5, 7]) is None\n    assert find_even_in_stack([0, 2, 4, 6, 8]) == [8, 6, 4, 2, 0]\n    assert find_even_in_stack([-2, -4, -6, -8]) == [-8, -6, -4, -2]\n    assert find_even_in_stack([1]) is None\n    assert find_even_in_stack([2]) == [2]\n    assert find_even_in_stack([]) is None\n    assert find_even_in_stack([1, 3, 5, 7, 10]) == [10]\n    assert find_even_in_stack([2, 2, 2, 2]) == [2, 2, 2, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_divisible_by_5_from_stack(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 5 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_divisible_by_5_from_stack():\n    assert remove_divisible_by_5_from_stack([1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == [1]\n    assert remove_divisible_by_5_from_stack([5, 10, 15, 20, 25]) is None\n    assert remove_divisible_by_5_from_stack([1, 2, 3, 4]) == [4, 3, 2, 1]\n    assert remove_divisible_by_5_from_stack([0, 5, 10]) is None\n    assert remove_divisible_by_5_from_stack([1, 2, 3, 6, 7, 11]) == [11, 7, 6, 3, 2, 1]\n    assert remove_divisible_by_5_from_stack([]) is None\n    assert remove_divisible_by_5_from_stack([1, 2, 3, 4, 6]) == [6, 4, 3, 2, 1]\n    assert remove_divisible_by_5_from_stack([25]) is None\n    assert remove_divisible_by_5_from_stack([1, 10, 100]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_max_from_stack(stack):\n    if not stack:\n        return None\n    max_elem = max(stack)\n    stack.remove(max_elem)\n    return max_elem"}, {"role": "assistant", "content": "def test_remove_max_from_stack():\n    assert remove_max_from_stack([1, 2, 3, 4, 5]) == 5\n    assert remove_max_from_stack([5, 4, 3, 2, 1]) == 5\n    assert remove_max_from_stack([1]) == 1\n    assert remove_max_from_stack([-5, -10, -1, -3]) == -1\n    assert remove_max_from_stack([100, 200, 300, 400]) == 400\n    assert remove_max_from_stack([0]) == 0\n    assert remove_max_from_stack([3, 3, 3, 3]) == 3\n    assert remove_max_from_stack([10, 20, 30, 40, 50]) == 50\n    assert remove_max_from_stack([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_not_divisible_by_3(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 3 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_not_divisible_by_3():\n    assert pop_elements_not_divisible_by_3([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [8, 7, 5, 4, 2, 1]\n    assert pop_elements_not_divisible_by_3([3, 6, 9]) is None\n    assert pop_elements_not_divisible_by_3([1, 4, 7, 10]) == [10, 7, 4, 1]\n    assert pop_elements_not_divisible_by_3([3, 3, 3, 3]) is None\n    assert pop_elements_not_divisible_by_3([10, 11, 12, 13, 14, 15]) == [14, 13, 11, 10]\n    assert pop_elements_not_divisible_by_3([3]) is None\n    assert pop_elements_not_divisible_by_3([1]) == [1]\n    assert pop_elements_not_divisible_by_3([]) is None\n    assert pop_elements_not_divisible_by_3([9, 18, 27, 36, 45]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_until_sum_exceeds(stack, x):\n    result = []\n    total = 0\n    while stack:\n        elem = stack.pop()\n        result.append(elem)\n        total += elem\n        if total > x:\n            break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_until_sum_exceeds():\n    assert pop_until_sum_exceeds([1, 2, 3, 4, 5], 7) == [5, 4]\n    assert pop_until_sum_exceeds([5, 5, 5, 5, 5], 15) == [5, 5, 5, 5]\n    assert pop_until_sum_exceeds([10, 20, 30], 25) == [30]\n    assert pop_until_sum_exceeds([], 5) is None\n    assert pop_until_sum_exceeds([1, 1, 1, 1, 1], 0) == [1]\n    assert pop_until_sum_exceeds([3, 6, 9], 15) == [9, 6, 3]\n    assert pop_until_sum_exceeds([10, 10, 10], 5) == [10]\n    assert pop_until_sum_exceeds([5], 10) == [5]\n    assert pop_until_sum_exceeds([3, 3, 3], 7) == [3, 3, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_less_than_average(stack):\n    result = []\n    if not stack:\n        return None\n    average = sum(stack) / len(stack)\n    while stack:\n        elem = stack.pop()\n        if elem < average:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_less_than_average():\n    assert pop_elements_less_than_average([1, 2, 3, 4, 5]) == [2, 1]\n    assert pop_elements_less_than_average([5, 5, 5, 5]) is None\n    assert pop_elements_less_than_average([1, 3, 5, 7]) == [3, 1]\n    assert pop_elements_less_than_average([10, 20, 30, 40, 50]) == [20, 10]\n    assert pop_elements_less_than_average([]) is None\n    assert pop_elements_less_than_average([1]) is None\n    assert pop_elements_less_than_average([2, 4, 6, 8]) == [4, 2]\n    assert pop_elements_less_than_average([-10, -20, -30]) == [-30]\n    assert pop_elements_less_than_average([1, 2, 3, 4, 5, 5, 5, 5]) == [3, 2, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_unique_elements(stack):\n    result = []\n    element_count = {}\n    while stack:\n        elem = stack.pop()\n        element_count[elem] = element_count.get(elem, 0) + 1\n\n    for elem in element_count:\n        if element_count[elem] == 1:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_unique_elements():\n    assert pop_unique_elements([1, 1, 2, 2, 3]) == [3]\n    assert pop_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert pop_unique_elements([1, 1, 2, 2, 3, 3, 4, 4]) is None\n    assert pop_unique_elements([5]) == [5]\n    assert pop_unique_elements([]) is None\n    assert pop_unique_elements([2, 2, 2, 2]) is None\n    assert pop_unique_elements([3, 1, 4, 1, 5, 9]) == [9, 5, 4, 3]\n    assert pop_unique_elements([1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8]) == [8, 6, 3, 1]\n    assert pop_unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_divisible_by_5(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_divisible_by_5():\n    assert pop_elements_divisible_by_5([5, 10, 15, 20, 25]) == [25, 20, 15, 10, 5]\n    assert pop_elements_divisible_by_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 5]\n    assert pop_elements_divisible_by_5([1, 2, 3, 4, 6, 7, 8, 9]) is None\n    assert pop_elements_divisible_by_5([0, 5, 10, 15]) == [15, 10, 5, 0]\n    assert pop_elements_divisible_by_5([1, 2, 3, 4]) is None\n    assert pop_elements_divisible_by_5([5]) == [5]\n    assert pop_elements_divisible_by_5([25, 30, 35, 40, 45]) == [45, 40, 35, 30, 25]\n    assert pop_elements_divisible_by_5([10, 20, 30, 40, 50]) == [50, 40, 30, 20, 10]\n    assert pop_elements_divisible_by_5([12, 17, 22, 27]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_greater_than_x_reverse(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem > x:\n            result.append(elem)\n    if not result:\n        return None\n    return result[::-1]"}, {"role": "assistant", "content": "def test_pop_elements_greater_than_x_reverse():\n    assert pop_elements_greater_than_x_reverse([1, 2, 3, 4, 5], 3) == [4, 5]\n    assert pop_elements_greater_than_x_reverse([10, 20, 30, 40, 50], 25) == [30, 40, 50]\n    assert pop_elements_greater_than_x_reverse([5, 5, 5, 5], 5) is None\n    assert pop_elements_greater_than_x_reverse([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6]\n    assert pop_elements_greater_than_x_reverse([1], 0) == [1]\n    assert pop_elements_greater_than_x_reverse([2], 1) == [2]\n    assert pop_elements_greater_than_x_reverse([7, 8, 9, 10], 8) == [9, 10]\n    assert pop_elements_greater_than_x_reverse([11, 22, 33, 44], 15) == [22, 33, 44]\n    assert pop_elements_greater_than_x_reverse([1, 2, 3, 4, 5, 6, 7, 8, 9], 20) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_less_than_x(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem >= x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_less_than_x():\n    assert remove_less_than_x([1, 3, 5, 7, 9], 4) == [9, 7, 5]\n    assert remove_less_than_x([2, 4, 6, 8], 10) is None\n    assert remove_less_than_x([10, 20, 30], 15) == [30, 20]\n    assert remove_less_than_x([], 5) is None\n    assert remove_less_than_x([-5, -2, -1, 0], -3) == [0, -1, -2]\n    assert remove_less_than_x([5, 5, 5, 5, 5], 5) == [5, 5, 5, 5, 5]\n    assert remove_less_than_x([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]\n    assert remove_less_than_x([1, 2, 3, 4, 5], 5) == [5]\n    assert remove_less_than_x([100], 10) == [100]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_in_stack(stack):\n    if not stack:\n        return None\n    min_elem = min(stack)\n    return min_elem"}, {"role": "assistant", "content": "def test_find_min_in_stack():\n    assert find_min_in_stack([1, 2, 3, 4, 5]) == 1\n    assert find_min_in_stack([5, 4, 3, 2, 1]) == 1\n    assert find_min_in_stack([1]) == 1\n    assert find_min_in_stack([-5, -10, -1, -3]) == -10\n    assert find_min_in_stack([100, 200, 300, 400]) == 100\n    assert find_min_in_stack([0]) == 0\n    assert find_min_in_stack([3, 3, 3, 3]) == 3\n    assert find_min_in_stack([10, 20, 30, 40, 50]) == 10\n    assert find_min_in_stack([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_until_divisible_by_6(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 6 == 0:\n            result.append(elem)\n            break\n        result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_until_divisible_by_6():\n    assert pop_until_divisible_by_6([1, 2, 3, 4, 5, 6]) == [6]\n    assert pop_until_divisible_by_6([1, 2, 3, 4, 5, 12]) == [12]\n    assert pop_until_divisible_by_6([6, 7, 8, 9]) == [9, 8, 7, 6]\n    assert pop_until_divisible_by_6([12, 14, 15, 18]) == [18]\n    assert pop_until_divisible_by_6([7, 5, 11]) == [11, 5, 7]\n    assert pop_until_divisible_by_6([]) is None\n    assert pop_until_divisible_by_6([12, 24, 36, 48]) == [48]\n    assert pop_until_divisible_by_6([1, 3, 5, 7]) == [7, 5, 3, 1]\n    assert pop_until_divisible_by_6([2, 8, 10, 11]) == [11, 10, 8, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_divisible_by_4(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 == 0 and elem % 4 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_divisible_by_4():\n    assert find_even_divisible_by_4([1, 2, 3, 4, 5, 6, 8, 12, 16]) == [16, 12, 8, 4]\n    assert find_even_divisible_by_4([5, 7, 11, 13]) is None\n    assert find_even_divisible_by_4([4, 8, 12]) == [12, 8, 4]\n    assert find_even_divisible_by_4([0, 4, 8, 16, 32]) == [32, 16, 8, 4, 0]\n    assert find_even_divisible_by_4([1, 3, 5, 7]) is None\n    assert find_even_divisible_by_4([4]) == [4]\n    assert find_even_divisible_by_4([]) is None\n    assert find_even_divisible_by_4([4, 4, 4, 4]) == [4, 4, 4, 4]\n    assert find_even_divisible_by_4([6, 10, 14, 18]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_odd_elements(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 2 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_odd_elements():\n    assert pop_odd_elements([1, 2, 3, 4, 5, 6]) == [5, 3, 1]\n    assert pop_odd_elements([1, 3, 5, 7]) == [7, 5, 3, 1]\n    assert pop_odd_elements([2, 4, 6, 8]) is None\n    assert pop_odd_elements([0, 1, 2, 3]) == [3, 1]\n    assert pop_odd_elements([]) is None\n    assert pop_odd_elements([1]) == [1]\n    assert pop_odd_elements([2]) is None\n    assert pop_odd_elements([5, 5, 5]) == [5, 5, 5]\n    assert pop_odd_elements([1, 2, 3, 4, 5]) == [5, 3, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_less_than_x_v2(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem < x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_less_than_x_v2():\n    assert remove_less_than_x_v2([1, 3, 5, 7, 9], 4) == [3, 1]\n    assert remove_less_than_x_v2([2, 4, 6, 8], 10) == [8, 6, 4, 2]\n    assert remove_less_than_x_v2([10, 20, 30], 15) == [10]\n    assert remove_less_than_x_v2([], 5) is None\n    assert remove_less_than_x_v2([-5, -2, -1, 0], -3) == [-5]\n    assert remove_less_than_x_v2([5, 5, 5, 5, 5], 5) is None\n    assert remove_less_than_x_v2([1, 2, 3, 4, 5], 0) is None\n    assert remove_less_than_x_v2([1, 2, 3, 4, 5], 5) == [4, 3, 2, 1]\n    assert remove_less_than_x_v2([100], 10) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_square_numbers_in_stack(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if (elem ** 0.5).is_integer():\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_square_numbers_in_stack():\n    assert find_square_numbers_in_stack([1, 2, 3, 4, 9, 16]) == [16, 9, 4, 1]\n    assert find_square_numbers_in_stack([1, 3, 5, 7]) == [1]\n    assert find_square_numbers_in_stack([0, 4, 9, 16, 25]) == [25, 16, 9, 4, 0]\n    assert find_square_numbers_in_stack([10, 20, 30, 40]) is None\n    assert find_square_numbers_in_stack([1]) == [1]\n    assert find_square_numbers_in_stack([2]) is None\n    assert find_square_numbers_in_stack([4, 4, 4]) == [4, 4, 4]\n    assert find_square_numbers_in_stack([9, 16, 25]) == [25, 16, 9]\n    assert find_square_numbers_in_stack([2, 3, 5, 7]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_in_stack(stack):\n    if not stack:\n        return None\n    max_elem = max(stack)\n    return max_elem"}, {"role": "assistant", "content": "def test_find_max_in_stack():\n    assert find_max_in_stack([1, 2, 3, 4, 5]) == 5\n    assert find_max_in_stack([5, 4, 3, 2, 1]) == 5\n    assert find_max_in_stack([1]) == 1\n    assert find_max_in_stack([-5, -10, -1, -3]) == -1\n    assert find_max_in_stack([100, 200, 300, 400]) == 400\n    assert find_max_in_stack([0]) == 0\n    assert find_max_in_stack([3, 3, 3, 3]) == 3\n    assert find_max_in_stack([10, 20, 30, 40, 50]) == 50\n    assert find_max_in_stack([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_divisible_by_7(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 7 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_divisible_by_7():\n    assert pop_elements_divisible_by_7([7, 14, 21, 28, 35]) == [35, 28, 21, 14, 7]\n    assert pop_elements_divisible_by_7([1, 2, 3, 4, 5, 6, 7]) == [7]\n    assert pop_elements_divisible_by_7([1, 2, 3, 4, 5, 6, 8, 9]) is None\n    assert pop_elements_divisible_by_7([0, 7, 14, 21]) == [21, 14, 7, 0]\n    assert pop_elements_divisible_by_7([1, 3, 5, 11]) is None\n    assert pop_elements_divisible_by_7([7]) == [7]\n    assert pop_elements_divisible_by_7([14, 28, 42, 56]) == [56, 42, 28, 14]\n    assert pop_elements_divisible_by_7([21, 35, 49, 63, 77]) == [77, 63, 49, 35, 21]\n    assert pop_elements_divisible_by_7([5, 10, 20, 25]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_x_divisible_by_2(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem > x and elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_greater_than_x_divisible_by_2():\n    assert find_greater_than_x_divisible_by_2([1, 2, 3, 4, 5], 3) == [4]\n    assert find_greater_than_x_divisible_by_2([10, 20, 30, 40, 50], 25) == [50, 40, 30]\n    assert find_greater_than_x_divisible_by_2([5, 5, 5, 5], 5) is None\n    assert find_greater_than_x_divisible_by_2([1, 2, 3, 4, 5, 6], 3) == [6, 4]\n    assert find_greater_than_x_divisible_by_2([1], 0) is None\n    assert find_greater_than_x_divisible_by_2([2], 1) == [2]\n    assert find_greater_than_x_divisible_by_2([7, 8, 9, 10], 8) == [10]\n    assert find_greater_than_x_divisible_by_2([11, 22, 33, 44], 15) == [44, 22]\n    assert find_greater_than_x_divisible_by_2([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [8, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_not_divisible_by_4(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 4 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_not_divisible_by_4():\n    assert remove_not_divisible_by_4([8, 15, 3, 4]) == [3, 15]\n    assert remove_not_divisible_by_4([16, 2, 12]) == [2]\n    assert remove_not_divisible_by_4([4, 8, 16, 32]) is None\n    assert remove_not_divisible_by_4([]) is None\n    assert remove_not_divisible_by_4([5, 7, 11]) == [11, 7, 5]\n    assert remove_not_divisible_by_4([4, 15, 20, 8, 3, 12]) == [3, 15]\n    assert remove_not_divisible_by_4([-4, -8, 0]) is None\n    assert remove_not_divisible_by_4([9, 17, 21]) == [21, 17, 9]\n    assert remove_not_divisible_by_4([-1, -2, -5, -6]) == [-6, -5, -2, -1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_divisible_by_10(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 10 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_divisible_by_10():\n    assert pop_elements_divisible_by_10([20, 5, 30, 7, 10]) == [10, 30, 20]\n    assert pop_elements_divisible_by_10([4, 2, 12]) is None\n    assert pop_elements_divisible_by_10([40, 50, 60]) == [60, 50, 40]\n    assert pop_elements_divisible_by_10([]) is None\n    assert pop_elements_divisible_by_10([10, 20, 30, 5, 1]) == [30, 20, 10]\n    assert pop_elements_divisible_by_10([0, 100, 200]) == [200, 100, 0]\n    assert pop_elements_divisible_by_10([5, 7, 15]) is None\n    assert pop_elements_divisible_by_10([-10, -20, -5]) == [-20, -10]\n    assert pop_elements_divisible_by_10([9, 19, 29]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_and_5(stack):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem % 3 == 0 and elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_and_5():\n    assert find_divisible_by_3_and_5([30, 45, 60, 10, 15]) == [15, 60, 45, 30]\n    assert find_divisible_by_3_and_5([3, 5, 9, 10]) is None\n    assert find_divisible_by_3_and_5([75, 90, 105]) == [105, 90, 75]\n    assert find_divisible_by_3_and_5([]) is None\n    assert find_divisible_by_3_and_5([15, 30, 45, 5, 10]) == [45, 30, 15]\n    assert find_divisible_by_3_and_5([0, 60, 120]) == [120, 60, 0]\n    assert find_divisible_by_3_and_5([4, 2, 6]) is None\n    assert find_divisible_by_3_and_5([-15, -30, -5]) == [-30, -15]\n    assert find_divisible_by_3_and_5([9, 21, 27]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_greater_than_x(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem <= x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_remove_greater_than_x():\n    assert remove_greater_than_x([8, 12, 15, 4], 10) == [4, 8]\n    assert remove_greater_than_x([16, 2, 5, 12], 7) == [5, 2]\n    assert remove_greater_than_x([4, 8, 16, 3], 8) == [3, 8, 4]\n    assert remove_greater_than_x([], 10) is None\n    assert remove_greater_than_x([5, 7, 11], 15) == [11, 7, 5]\n    assert remove_greater_than_x([4, 15, 20, 8], 10) == [8, 4]\n    assert remove_greater_than_x([-4, -8, 0], -1) == [-8, -4]\n    assert remove_greater_than_x([9, 17, 21], 10) == [9]\n    assert remove_greater_than_x([-1, -2, -5, -6], -3) == [-6, -5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef pop_elements_greater_than_x_even(stack, x):\n    result = []\n    while stack:\n        elem = stack.pop()\n        if elem > x and elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_pop_elements_greater_than_x_even():\n    assert pop_elements_greater_than_x_even([8, 10, 12, 4], 9) == [12, 10]\n    assert pop_elements_greater_than_x_even([16, 3, 5, 14], 12) == [14, 16]\n    assert pop_elements_greater_than_x_even([4, 8, 16, 3], 6) == [16, 8]\n    assert pop_elements_greater_than_x_even([], 5) is None\n    assert pop_elements_greater_than_x_even([5, 7, 11], 10) is None\n    assert pop_elements_greater_than_x_even([4, 15, 20, 8], 15) == [20]\n    assert pop_elements_greater_than_x_even([-4, -8, 0], -3) == [0]\n    assert pop_elements_greater_than_x_even([9, 17, 21], 15) is None\n    assert pop_elements_greater_than_x_even([-1, -2, -5, -6], -4) == [-2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_until_sum_exceeds(queue, x):\n    result = []\n    total = 0\n    while queue:\n        elem = queue.pop(0)\n        result.append(elem)\n        total += elem\n        if total > x:\n            break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_until_sum_exceeds():\n    assert process_queue_until_sum_exceeds([3, 5, 2, 7], 8) == [3, 5, 2]\n    assert process_queue_until_sum_exceeds([16, 3, 5, 12], 14) == [16]\n    assert process_queue_until_sum_exceeds([4, 8, 1, 3], 7) == [4, 8]\n    assert process_queue_until_sum_exceeds([], 5) is None\n    assert process_queue_until_sum_exceeds([5, 7, 1], 10) == [5, 7]\n    assert process_queue_until_sum_exceeds([4, 2, 5, 8], 6) == [4, 2, 5]\n    assert process_queue_until_sum_exceeds([-4, -8, 10], -5) == [-4]\n    assert process_queue_until_sum_exceeds([9, 1, 2], 10) == [9, 1, 2]\n    assert process_queue_until_sum_exceeds([-1, -2, -3, -4], -1) == [-1, -2, -3, -4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_less_than_average(queue):\n    result = []\n    if not queue:\n        return None\n    average = sum(queue) / len(queue)\n    while queue:\n        elem = queue.pop(0)\n        if elem < average:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_less_than_average():\n    assert process_queue_less_than_average([3, 5, 2, 7]) == [3, 2]\n    assert process_queue_less_than_average([16, 3, 5, 12]) == [3, 5]\n    assert process_queue_less_than_average([4, 8, 1, 3]) == [1, 3]\n    assert process_queue_less_than_average([]) is None\n    assert process_queue_less_than_average([77, 77, 77]) is None\n    assert process_queue_less_than_average([4, 2, 5, 8]) == [4, 2]\n    assert process_queue_less_than_average([-4, -8, 0]) == [-8]\n    assert process_queue_less_than_average([9, 1, 2]) == [1, 2]\n    assert process_queue_less_than_average([-1, -2, -3, -4]) == [-3, -4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_unique_elements(queue):\n    result = []\n    element_count = {}\n    while queue:\n        elem = queue.pop(0)\n        element_count[elem] = element_count.get(elem, 0) + 1\n\n    for elem in element_count:\n        if element_count[elem] == 1:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_unique_elements():\n    assert process_queue_unique_elements([3, 5, 2, 7, 5, 3]) == [2, 7]\n    assert process_queue_unique_elements([16, 3, 5, 12, 16]) == [3, 5, 12]\n    assert process_queue_unique_elements([4, 8, 1, 4, 3, 8]) == [1, 3]\n    assert process_queue_unique_elements([]) is None\n    assert process_queue_unique_elements([5, 7, 1, 7, 5]) == [1]\n    assert process_queue_unique_elements([4, 8, 4, 8, 1]) == [1]\n    assert process_queue_unique_elements([10, 20, 30, 40, 20]) == [10, 30, 40]\n    assert process_queue_unique_elements([5, 10, 5, 15, 20]) == [10, 15, 20]\n    assert process_queue_unique_elements([9, 19, 9, 21, 21]) == [19]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_divisible_by_5(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_divisible_by_5():\n    assert process_queue_divisible_by_5([3, 5, 10, 7, 25]) == [5, 10, 25]\n    assert process_queue_divisible_by_5([1, 2, 3, 4]) is None\n    assert process_queue_divisible_by_5([50, 5, 10, 20]) == [50, 5, 10, 20]\n    assert process_queue_divisible_by_5([]) is None\n    assert process_queue_divisible_by_5([5, 10, 15]) == [5, 10, 15]\n    assert process_queue_divisible_by_5([0, 100, 200]) == [0, 100, 200]\n    assert process_queue_divisible_by_5([1, 3, 7]) is None\n    assert process_queue_divisible_by_5([-5, -10, -15]) == [-5, -10, -15]\n    assert process_queue_divisible_by_5([25, 30, 35, 40]) == [25, 30, 35, 40]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_greater_than_x(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem > x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_greater_than_x():\n    assert process_queue_greater_than_x([8, 12, 15, 4], 10) == [12, 15]\n    assert process_queue_greater_than_x([16, 2, 5, 12], 7) == [16, 12]\n    assert process_queue_greater_than_x([4, 8, 16, 3], 8) == [16]\n    assert process_queue_greater_than_x([], 10) is None\n    assert process_queue_greater_than_x([5, 7, 11], 5) == [7, 11]\n    assert process_queue_greater_than_x([4, 15, 20, 8], 10) == [15, 20]\n    assert process_queue_greater_than_x([-4, -8, 0], -1) == [0]\n    assert process_queue_greater_than_x([9, 17, 21], 10) == [17, 21]\n    assert process_queue_greater_than_x([-1, -2, -5, -6], -3) == [-1, -2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_divisible_by_2_not_4(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 2 == 0 and elem % 4 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_divisible_by_2_not_4():\n    assert process_queue_divisible_by_2_not_4([2, 4, 6, 8, 10, 12]) == [2, 6, 10]\n    assert process_queue_divisible_by_2_not_4([4, 8, 12, 16]) is None\n    assert process_queue_divisible_by_2_not_4([2, 6, 10]) == [2, 6, 10]\n    assert process_queue_divisible_by_2_not_4([]) is None\n    assert process_queue_divisible_by_2_not_4([1, 3, 5, 7]) is None\n    assert process_queue_divisible_by_2_not_4([14, 18, 20, 24]) == [14, 18]\n    assert process_queue_divisible_by_2_not_4([-2, -4, -6, -8]) == [-2, -6]\n    assert process_queue_divisible_by_2_not_4([9, 13, 17]) is None\n    assert process_queue_divisible_by_2_not_4([3, 6, 9, 12]) == [6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_divisible_by_7(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 7 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_divisible_by_7():\n    assert process_queue_divisible_by_7([7, 14, 21, 5, 10]) == [7, 14, 21]\n    assert process_queue_divisible_by_7([1, 2, 3, 4]) is None\n    assert process_queue_divisible_by_7([28, 35, 42, 49]) == [28, 35, 42, 49]\n    assert process_queue_divisible_by_7([]) is None\n    assert process_queue_divisible_by_7([7, 14, 21]) == [7, 14, 21]\n    assert process_queue_divisible_by_7([0, 70, 140]) == [0, 70, 140]\n    assert process_queue_divisible_by_7([1, 3, 7]) == [7]\n    assert process_queue_divisible_by_7([-7, -14, -21]) == [-7, -14, -21]\n    assert process_queue_divisible_by_7([35, 70, 105]) == [35, 70, 105]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_odd_elements(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 2 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_odd_elements():\n    assert process_queue_odd_elements([1, 2, 3, 4, 5]) == [1, 3, 5]\n    assert process_queue_odd_elements([2, 4, 6, 8]) is None\n    assert process_queue_odd_elements([1, 3, 5, 7]) == [1, 3, 5, 7]\n    assert process_queue_odd_elements([]) is None\n    assert process_queue_odd_elements([1, 3, 5]) == [1, 3, 5]\n    assert process_queue_odd_elements([2, 4, 6]) is None\n    assert process_queue_odd_elements([7, 14, 21]) == [7, 21]\n    assert process_queue_odd_elements([-1, -3, -5]) == [-1, -3, -5]\n    assert process_queue_odd_elements([5, 10, 15, 20]) == [5, 15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_square_numbers(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if (elem ** 0.5).is_integer():\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_square_numbers():\n    assert process_queue_square_numbers([1, 2, 3, 4, 5, 9, 16]) == [1, 4, 9, 16]\n    assert process_queue_square_numbers([2, 3, 5, 7]) is None\n    assert process_queue_square_numbers([4, 9, 16, 25, 36]) == [4, 9, 16, 25, 36]\n    assert process_queue_square_numbers([]) is None\n    assert process_queue_square_numbers([1, 4, 9]) == [1, 4, 9]\n    assert process_queue_square_numbers([2, 3, 6]) is None\n    assert process_queue_square_numbers([7, 14, 21]) is None\n    assert process_queue_square_numbers([1, 4, 9]) == [1, 4, 9]\n    assert process_queue_square_numbers([25, 49, 81]) == [25, 49, 81]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_divisible_by_3_or_5(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 3 == 0 or elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_divisible_by_3_or_5():\n    assert process_queue_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 9]) == [3, 5, 6, 9]\n    assert process_queue_divisible_by_3_or_5([1, 2, 4, 7, 8]) is None\n    assert process_queue_divisible_by_3_or_5([15, 30, 45, 60]) == [15, 30, 45, 60]\n    assert process_queue_divisible_by_3_or_5([]) is None\n    assert process_queue_divisible_by_3_or_5([3, 6, 9]) == [3, 6, 9]\n    assert process_queue_divisible_by_3_or_5([5, 10, 15]) == [5, 10, 15]\n    assert process_queue_divisible_by_3_or_5([7, 14, 21]) == [21]\n    assert process_queue_divisible_by_3_or_5([-3, -6, -9]) == [-3, -6, -9]\n    assert process_queue_divisible_by_3_or_5([12, 18, 24]) == [12, 18, 24]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_divisible_by_3_not_6(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 3 == 0 and elem % 6 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_divisible_by_3_not_6():\n    assert process_queue_divisible_by_3_not_6([3, 6, 9, 12, 15]) == [3, 9, 15]\n    assert process_queue_divisible_by_3_not_6([6, 12, 18]) is None\n    assert process_queue_divisible_by_3_not_6([3, 9, 15, 21]) == [3, 9, 15, 21]\n    assert process_queue_divisible_by_3_not_6([]) is None\n    assert process_queue_divisible_by_3_not_6([3, 6, 9]) == [3, 9]\n    assert process_queue_divisible_by_3_not_6([12, 15, 18]) == [15]\n    assert process_queue_divisible_by_3_not_6([4, 8, 14]) is None\n    assert process_queue_divisible_by_3_not_6([3, 27, 9]) == [3, 27, 9]\n    assert process_queue_divisible_by_3_not_6([12, 24, 36]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_remove_less_than_x(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem >= x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_remove_less_than_x():\n    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 3) == [3, 4, 5]\n    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\n    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 6) is None\n    assert process_queue_remove_less_than_x([], 3) is None\n    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 5) == [5]\n    assert process_queue_remove_less_than_x([5, 10, 15], 10) == [10, 15]\n    assert process_queue_remove_less_than_x([7, 14, 21], 15) == [21]\n    assert process_queue_remove_less_than_x([-1, -3, 5], 0) == [5]\n    assert process_queue_remove_less_than_x([3, 6, 9], 7) == [9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_less_than_x(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem < x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_less_than_x():\n    assert process_queue_less_than_x([1, 2, 3, 4, 5], 3) == [1, 2]\n    assert process_queue_less_than_x([1, 2, 3, 4, 5], 1) is None\n    assert process_queue_less_than_x([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    assert process_queue_less_than_x([], 3) is None\n    assert process_queue_less_than_x([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]\n    assert process_queue_less_than_x([5, 10, 15], 10) == [5]\n    assert process_queue_less_than_x([7, 14, 21], 15) == [7, 14]\n    assert process_queue_less_than_x([-1, -3, 5], 0) == [-1, -3]\n    assert process_queue_less_than_x([3, 6, 9], 7) == [3, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_min_element(queue):\n    if not queue:\n        return None\n    min_elem = min(queue)\n    queue.remove(min_elem)\n    return min_elem"}, {"role": "assistant", "content": "def test_process_queue_min_element():\n    assert process_queue_min_element([1, 2, 3, 4, 5]) == 1\n    assert process_queue_min_element([5, 4, 3, 2, 1]) == 1\n    assert process_queue_min_element([-1, -2, -3, -4, -5]) == -5\n    assert process_queue_min_element([0]) == 0\n    assert process_queue_min_element([]) is None\n    assert process_queue_min_element([10, 20, 5, 30]) == 5\n    assert process_queue_min_element([7, 14, 21, 2]) == 2\n    assert process_queue_min_element([3, 3, 3]) == 3\n    assert process_queue_min_element([-1, 1, -2, 2]) == -2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_remove_greater_than_x(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem <= x:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_remove_greater_than_x():\n    assert process_queue_remove_greater_than_x([1, 2, 3, 4, 5], 3) == [1, 2, 3]\n    assert process_queue_remove_greater_than_x([5, 10, 15], 10) == [5, 10]\n    assert process_queue_remove_greater_than_x([7, 14, 21], 15) == [7, 14]\n    assert process_queue_remove_greater_than_x([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    assert process_queue_remove_greater_than_x([], 3) is None\n    assert process_queue_remove_greater_than_x([-1, -3, 5], 0) == [-1, -3]\n    assert process_queue_remove_greater_than_x([3, 6, 9], 7) == [3, 6]\n    assert process_queue_remove_greater_than_x([10, 20, 30], 25) == [10, 20]\n    assert process_queue_remove_greater_than_x([8, 12, 15, 4], 10) == [8, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_max_element(queue):\n    if not queue:\n        return None\n    max_elem = max(queue)\n    queue.remove(max_elem)\n    return max_elem"}, {"role": "assistant", "content": "def test_process_queue_max_element():\n    assert process_queue_max_element([1, 2, 3, 4, 5]) == 5\n    assert process_queue_max_element([10, 9, 8, 7, 6]) == 10\n    assert process_queue_max_element([-1, -2, -3, -4, -5]) == -1\n    assert process_queue_max_element([]) is None\n    assert process_queue_max_element([1, 1, 1, 1, 1]) == 1\n    assert process_queue_max_element([4, 5, 6, 7, 4]) == 7"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_remove_divisible_by_4(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 4 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_remove_divisible_by_4():\n    assert process_queue_remove_divisible_by_4([4, 8, 12, 16]) is None\n    assert process_queue_remove_divisible_by_4([1, 2, 3, 5, 7]) == [1, 2, 3, 5, 7]\n    assert process_queue_remove_divisible_by_4([4, 5, 6, 8, 9]) == [5, 6, 9]\n    assert process_queue_remove_divisible_by_4([]) is None\n    assert process_queue_remove_divisible_by_4([0, 4, 8, 4, 16]) is None\n    assert process_queue_remove_divisible_by_4([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_greater_than_x_and_divisible_by_2(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem > x and elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_greater_than_x_and_divisible_by_2():\n    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 2) == [4]\n    assert process_queue_greater_than_x_and_divisible_by_2([10, 9, 8, 7, 6], 5) == [10, 8, 6]\n    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 6) is None\n    assert process_queue_greater_than_x_and_divisible_by_2([], 1) is None\n    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 0) == [2, 4]\n    assert process_queue_greater_than_x_and_divisible_by_2([1, 3, 5, 7, 9], 4) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_greater_than_x_and_divisible_by_3(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem > x and elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_greater_than_x_and_divisible_by_3():\n    assert process_queue_greater_than_x_and_divisible_by_3([1, 2, 3, 4, 5, 6], 2) == [3, 6]\n    assert process_queue_greater_than_x_and_divisible_by_3([9, 8, 7, 6, 5], 5) == [9, 6]\n    assert process_queue_greater_than_x_and_divisible_by_3([1, 2, 3, 4, 5], 3) is None\n    assert process_queue_greater_than_x_and_divisible_by_3([], 1) is None\n    assert process_queue_greater_than_x_and_divisible_by_3([1, 3, 6, 9], 0) == [3, 6, 9]\n    assert process_queue_greater_than_x_and_divisible_by_3([2, 4, 8], 4) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_less_than_x_not_divisible_by_5(queue, x):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem < x and elem % 5 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_less_than_x_not_divisible_by_5():\n    assert process_queue_less_than_x_not_divisible_by_5([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]\n    assert process_queue_less_than_x_not_divisible_by_5([10, 9, 8, 7, 6], 8) == [7, 6]\n    assert process_queue_less_than_x_not_divisible_by_5([15, 25, 35, 45], 50) is None\n    assert process_queue_less_than_x_not_divisible_by_5([], 10) is None\n    assert process_queue_less_than_x_not_divisible_by_5([0, 1, 2, 3], 4) == [1, 2, 3]\n    assert process_queue_less_than_x_not_divisible_by_5([5, 10, 15], 20) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_even_and_divisible_by_4(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 2 == 0 and elem % 4 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_even_and_divisible_by_4():\n    assert process_queue_even_and_divisible_by_4([4, 8, 12, 16, 20]) == [4, 8, 12, 16, 20]\n    assert process_queue_even_and_divisible_by_4([1, 2, 3, 4, 5]) == [4]\n    assert process_queue_even_and_divisible_by_4([5, 6, 7, 8, 9]) == [8]\n    assert process_queue_even_and_divisible_by_4([1, 3, 5, 7]) is None\n    assert process_queue_even_and_divisible_by_4([0, 4, 8, 12]) == [0, 4, 8, 12]\n    assert process_queue_even_and_divisible_by_4([2, 6, 10, 14]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef process_queue_not_divisible_by_3_and_5(queue):\n    result = []\n    while queue:\n        elem = queue.pop(0)\n        if elem % 3 != 0 and elem % 5 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_process_queue_not_divisible_by_3_and_5():\n    assert process_queue_not_divisible_by_3_and_5([1, 2, 3, 4, 5]) == [1, 2, 4]\n    assert process_queue_not_divisible_by_3_and_5([9, 8, 7, 6, 5]) == [8, 7]\n    assert process_queue_not_divisible_by_3_and_5([15, 25, 35, 45]) is None\n    assert process_queue_not_divisible_by_3_and_5([4, 8, 14, 22]) == [4, 8, 14, 22]\n    assert process_queue_not_divisible_by_3_and_5([3, 5, 9, 15]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_greater_than_x(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem > x:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_elements_greater_than_x():\n    assert find_elements_greater_than_x((1, 2, 3, 4, 5), 3) == (4, 5)\n    assert find_elements_greater_than_x((10, 9, 8, 7, 6), 8) == (10, 9)\n    assert find_elements_greater_than_x((-1, -2, -3, -4, -5), -3) == (-1, -2)\n    assert find_elements_greater_than_x((), 1) is None\n    assert find_elements_greater_than_x((1, 2, 3, 4, 5), 5) is None\n    assert find_elements_greater_than_x((4, 5, 6, 7, 4), 6) == (7,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_elements_in_tuple(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_even_elements_in_tuple():\n    assert find_even_elements_in_tuple((1, 2, 3, 4, 5)) == (2, 4)\n    assert find_even_elements_in_tuple((10, 9, 8, 7, 6)) == (10, 8, 6)\n    assert find_even_elements_in_tuple((-1, -2, -3, -4, -5)) == (-2, -4)\n    assert find_even_elements_in_tuple((1, 3, 5)) is None\n    assert find_even_elements_in_tuple((2, 4, 6, 8)) == (2, 4, 6, 8)\n    assert find_even_elements_in_tuple(()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_less_than_average(tpl):\n    result = []\n    if not tpl:\n        return None\n    average = sum(tpl) / len(tpl)\n    for elem in tpl:\n        if elem < average:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_elements_less_than_average():\n    assert find_elements_less_than_average((1, 2, 3, 4, 5)) == (1, 2)\n    assert find_elements_less_than_average((10, 9, 8, 7, 6)) == (7, 6)\n    assert find_elements_less_than_average((1, 1, 1, 1, 1)) is None\n    assert find_elements_less_than_average((2, 4, 6, 8, 10)) == (2, 4)\n    assert find_elements_less_than_average(()) is None\n    assert find_elements_less_than_average((-1, -2, -3, -4, -5)) == (-4, -5)\n    assert find_elements_less_than_average((5, 10, 15, 20, 25)) == (5, 10)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_greater_than_x_divisible_by_5(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem > x and elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_elements_greater_than_x_divisible_by_5():\n    assert find_elements_greater_than_x_divisible_by_5((1, 5, 10, 15, 20), 10) == (15, 20)\n    assert find_elements_greater_than_x_divisible_by_5((25, 30, 35, 40, 45), 20) == (25, 30, 35, 40, 45)\n    assert find_elements_greater_than_x_divisible_by_5((5, 10, 15), 20) is None\n    assert find_elements_greater_than_x_divisible_by_5((), 5) is None\n    assert find_elements_greater_than_x_divisible_by_5((5, 10, 15, 20, 25), 0) == (5, 10, 15, 20, 25)\n    assert find_elements_greater_than_x_divisible_by_5((1, 2, 3, 4), 3) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_elements_in_tuple(tpl):\n    result = []\n    element_count = {}\n    for elem in tpl:\n        element_count[elem] = element_count.get(elem, 0) + 1\n    for elem in element_count:\n        if element_count[elem] == 1:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_unique_elements_in_tuple():\n    assert find_unique_elements_in_tuple((1, 2, 2, 3, 4, 4)) == (1, 3)\n    assert find_unique_elements_in_tuple((5, 5, 5, 5, 5, 5)) is None\n    assert find_unique_elements_in_tuple((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    assert find_unique_elements_in_tuple(()) is None\n    assert find_unique_elements_in_tuple((6, 7, 8, 9, 10, 10, 11)) == (6, 7, 8, 9, 11)\n    assert find_unique_elements_in_tuple((2, 2, 2, 3, 3, 3, 4, 4)) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_and_4(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 3 == 0 and elem % 4 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_3_and_4():\n    assert find_divisible_by_3_and_4((12, 24, 36, 48)) == (12, 24, 36, 48)\n    assert find_divisible_by_3_and_4((6, 9, 12, 18, 24)) == (12, 24)\n    assert find_divisible_by_3_and_4((3, 6, 9, 15)) is None\n    assert find_divisible_by_3_and_4(()) is None\n    assert find_divisible_by_3_and_4((3, 4, 5, 6, 7)) is None\n    assert find_divisible_by_3_and_4((3, 12, 24, 36, 45)) == (12, 24, 36)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_elements_in_tuple(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 2 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_odd_elements_in_tuple():\n    assert find_odd_elements_in_tuple((1, 2, 3, 4, 5)) == (1, 3, 5)\n    assert find_odd_elements_in_tuple((10, 9, 8, 7, 6)) == (9, 7)\n    assert find_odd_elements_in_tuple((-1, -2, -3, -4, -5)) == (-1, -3, -5)\n    assert find_odd_elements_in_tuple((2, 4, 6)) is None\n    assert find_odd_elements_in_tuple((1, 3, 5, 7)) == (1, 3, 5, 7)\n    assert find_odd_elements_in_tuple(()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_in_tuple(tpl):\n    if not tpl:\n        return None\n    return min(tpl)"}, {"role": "assistant", "content": "def test_find_min_in_tuple():\n    assert find_min_in_tuple((1, 2, 3, 4, 5)) == 1\n    assert find_min_in_tuple((10, 9, 8, 7, 6)) == 6\n    assert find_min_in_tuple((-1, -2, -3, -4, -5)) == -5\n    assert find_min_in_tuple(()) is None\n    assert find_min_in_tuple((5, 5, 5, 5, 5)) == 5\n    assert find_min_in_tuple((3, 4, 2, 1, 5)) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_in_tuple(tpl):\n    if not tpl:\n        return None\n    return max(tpl)"}, {"role": "assistant", "content": "def test_find_max_in_tuple():\n    assert find_max_in_tuple((1, 2, 3, 4, 5)) == 5\n    assert find_max_in_tuple((10, 9, 8, 7, 6)) == 10\n    assert find_max_in_tuple((-1, -2, -3, -4, -5)) == -1\n    assert find_max_in_tuple(()) is None\n    assert find_max_in_tuple((5, 5, 5, 5, 5)) == 5\n    assert find_max_in_tuple((3, 4, 2, 1, 5)) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_or_5(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 2 == 0 or elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_or_5():\n    assert find_divisible_by_2_or_5((1, 2, 3, 4, 5)) == (2, 4, 5)\n    assert find_divisible_by_2_or_5((10, 9, 8, 7, 6)) == (10, 8, 6)\n    assert find_divisible_by_2_or_5((1, 3, 7, 11, 13)) is None\n    assert find_divisible_by_2_or_5(()) is None\n    assert find_divisible_by_2_or_5((20, 25, 30, 35, 40)) == (20, 25, 30, 35, 40)\n    assert find_divisible_by_2_or_5((1, 5, 10, 15, 20)) == (5, 10, 15, 20)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_57(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 57 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_57():\n    assert find_divisible_by_57((6, 12, 18, 24, 57)) == (57,)\n    assert find_divisible_by_57((5, 10, 15, 20, 25)) is None\n    assert find_divisible_by_57((1, 2, 3, 4, 5)) is None\n    assert find_divisible_by_57(()) is None\n    assert find_divisible_by_57((6, 114, 24)) == (114,)\n    assert find_divisible_by_57((12, 228, 456, 60)) == (228, 456)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_square_numbers_in_tuple(tpl):\n    result = []\n    for elem in tpl:\n        if (elem ** 0.5).is_integer():\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_square_numbers_in_tuple():\n    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5)) == (1, 4)\n    assert find_square_numbers_in_tuple((10, 9, 8, 7, 6)) == (9,)\n    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5)) == (1, 4)\n    assert find_square_numbers_in_tuple((4, 9, 16, 25, 36)) == (4, 9, 16, 25, 36)\n    assert find_square_numbers_in_tuple(()) is None\n    assert find_square_numbers_in_tuple((1, 4, 9, 16, 25, 36, 49)) == (1, 4, 9, 16, 25, 36, 49)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_x_not_divisible_by_3(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem > x and elem % 3 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_greater_than_x_not_divisible_by_3():\n    assert find_greater_than_x_not_divisible_by_3((1, 2, 3, 4, 5), 2) == (4, 5)\n    assert find_greater_than_x_not_divisible_by_3((10, 9, 8, 7, 6), 5) == (10, 8, 7)\n    assert find_greater_than_x_not_divisible_by_3((1, 2, 3, 4, 5), 6) is None\n    assert find_greater_than_x_not_divisible_by_3((), 1) is None\n    assert find_greater_than_x_not_divisible_by_3((4, 5, 6, 7, 8, 9), 3) == (4, 5, 7, 8)\n    assert find_greater_than_x_not_divisible_by_3((1, 1, 1, 1, 1), 1) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_x_divisible_by_3(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem > x and elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_greater_than_x_divisible_by_3():\n    assert find_greater_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 5) == (6, 9, 12)\n    assert find_greater_than_x_divisible_by_3((1, 2, 3, 4, 5), 2) == (3,)\n    assert find_greater_than_x_divisible_by_3((10, 11, 15, 18), 16) == (18,)\n    assert find_greater_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 12) is None\n    assert find_greater_than_x_divisible_by_3((1, 2, 3, 4, 5), 5) is None\n    assert find_greater_than_x_divisible_by_3((0, 3, 6, 9, 12), 10) == (12,)\n    assert find_greater_than_x_divisible_by_3((3,), 0) == (3,)\n    assert find_greater_than_x_divisible_by_3((), 0) is None\n    assert find_greater_than_x_divisible_by_3((3, 5, 7, 9), 8) == (9,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_4_and_5(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 4 != 0 and elem % 5 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_not_divisible_by_4_and_5():\n    assert find_not_divisible_by_4_and_5((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 6, 7, 9)\n    assert find_not_divisible_by_4_and_5((4, 5, 8, 10, 12, 15, 16, 20)) is None\n    assert find_not_divisible_by_4_and_5((4, 8, 12, 16, 20)) is None\n    assert find_not_divisible_by_4_and_5((5, 10, 15, 25)) is None\n    assert find_not_divisible_by_4_and_5((2, 3, 6, 7, 9)) == (2, 3, 6, 7, 9)\n    assert find_not_divisible_by_4_and_5((1, 4, 5, 8, 10)) == (1,)\n    assert find_not_divisible_by_4_and_5((),) is None\n    assert find_not_divisible_by_4_and_5((20, 25, 30, 35, 40)) is None\n    assert find_not_divisible_by_4_and_5((9, 14, 21, 33)) == (9, 14, 21, 33)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_less_than_x_divisible_by_3(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem < x and elem % 3 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_less_than_x_divisible_by_3():\n    assert find_less_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 10) == (3, 6, 9)\n    assert find_less_than_x_divisible_by_3((1, 2, 3, 4, 5), 6) == (3,)\n    assert find_less_than_x_divisible_by_3((10, 11, 15, 18), 20) == (15, 18)\n    assert find_less_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 2) is None\n    assert find_less_than_x_divisible_by_3((1, 2, 3, 4, 5), 1) is None\n    assert find_less_than_x_divisible_by_3((0, 3, 6, 9, 12), 9) == (0, 3, 6)\n    assert find_less_than_x_divisible_by_3((3,), 4) == (3,)\n    assert find_less_than_x_divisible_by_3((), 3) is None\n    assert find_less_than_x_divisible_by_3((3, 5, 7, 9), 10) == (3, 9)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_5(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 2 == 0 and elem % 5 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_5():\n    assert find_divisible_by_2_and_5((1, 2, 5, 10, 12, 15, 20)) == (10, 20)\n    assert find_divisible_by_2_and_5((10, 20, 30, 40, 50)) == (10, 20, 30, 40, 50)\n    assert find_divisible_by_2_and_5((5, 15, 25, 35)) is None\n    assert find_divisible_by_2_and_5((2, 4, 6, 8)) is None\n    assert find_divisible_by_2_and_5((0, 10, 20, 25)) == (0, 10, 20)\n    assert find_divisible_by_2_and_5((5, 10, 15)) == (10,)\n    assert find_divisible_by_2_and_5((),) is None\n    assert find_divisible_by_2_and_5((30, 35, 40, 50)) == (30, 40, 50)\n    assert find_divisible_by_2_and_5((25, 50, 75, 100)) == (50, 100)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_square_numbers_in_tuple(tpl):\n    result = []\n    for elem in tpl:\n        if not (elem ** 0.5).is_integer():\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_not_square_numbers_in_tuple():\n    assert find_not_square_numbers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (2, 3, 5, 6, 7, 8, 10)\n    assert find_not_square_numbers_in_tuple((4, 9, 16, 25, 36)) is None\n    assert find_not_square_numbers_in_tuple((2, 3, 5, 6, 7, 8, 10)) == (2, 3, 5, 6, 7, 8, 10)\n    assert find_not_square_numbers_in_tuple((4, 8, 12, 16, 20)) == (8, 12, 20)\n    assert find_not_square_numbers_in_tuple((4, 5, 6, 7, 9)) == (5, 6, 7)\n    assert find_not_square_numbers_in_tuple((),) is None\n    assert find_not_square_numbers_in_tuple((1, 3, 7, 11, 12)) == (3, 7, 11, 12)\n    assert find_not_square_numbers_in_tuple((4, 16, 25, 36)) is None\n    assert find_not_square_numbers_in_tuple((5, 10, 15, 20)) == (5, 10, 15, 20)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_7(tpl):\n    result = []\n    for elem in tpl:\n        if elem % 2 == 0 and elem % 7 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_7():\n    assert find_divisible_by_2_and_7((1, 2, 7, 14, 21, 28, 35, 42)) == (14, 28, 42)\n    assert find_divisible_by_2_and_7((14, 28, 42, 56, 70, 84)) == (14, 28, 42, 56, 70, 84)\n    assert find_divisible_by_2_and_7((1, 3, 5, 7, 9, 11)) is None\n    assert find_divisible_by_2_and_7((2, 4, 8, 16)) is None\n    assert find_divisible_by_2_and_7((0, 7, 14, 28)) == (0, 14, 28)\n    assert find_divisible_by_2_and_7((7, 14, 21)) == (14,)\n    assert find_divisible_by_2_and_7((),) is None\n    assert find_divisible_by_2_and_7((7, 14, 35, 42)) == (14, 42)\n    assert find_divisible_by_2_and_7((28, 56, 84, 112)) == (28, 56, 84, 112)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_less_than_x_odd(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem < x and elem % 2 != 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_less_than_x_odd():\n    assert find_less_than_x_odd((1, 2, 3, 6, 9, 12), 10) == (1, 3, 9)\n    assert find_less_than_x_odd((1, 2, 3, 4, 5), 6) == (1, 3, 5)\n    assert find_less_than_x_odd((10, 11, 15, 18), 16) == (11, 15)\n    assert find_less_than_x_odd((1, 2, 3, 6, 9, 12), 2) == (1,)\n    assert find_less_than_x_odd((1, 2, 3, 4, 5), 1) is None\n    assert find_less_than_x_odd((0, 3, 6, 9, 12), 9) == (3,)\n    assert find_less_than_x_odd((3,), 4) == (3,)\n    assert find_less_than_x_odd((), 3) is None\n    assert find_less_than_x_odd((3, 5, 7, 9), 8) == (3, 5, 7)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_x_even(tpl, x):\n    result = []\n    for elem in tpl:\n        if elem > x and elem % 2 == 0:\n            result.append(elem)\n    if not result:\n        return None\n    return tuple(result)"}, {"role": "assistant", "content": "def test_find_greater_than_x_even():\n    assert find_greater_than_x_even((1, 2, 3, 6, 9, 12), 5) == (6, 12)\n    assert find_greater_than_x_even((1, 2, 3, 4, 5), 2) == (4,)\n    assert find_greater_than_x_even((10, 11, 14, 18), 13) == (14, 18)\n    assert find_greater_than_x_even((1, 2, 3, 6, 9, 12), 12) is None\n    assert find_greater_than_x_even((1, 2, 3, 4, 5), 5) is None\n    assert find_greater_than_x_even((0, 3, 6, 8, 12), 7) == (8, 12)\n    assert find_greater_than_x_even((4,), 3) == (4,)\n    assert find_greater_than_x_even((), 3) is None\n    assert find_greater_than_x_even((3, 5, 7, 9), 8) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_elements_from_list(lst):\n    if not lst:\n        return None\n    unique_elements = set(lst)\n    return tuple(unique_elements)"}, {"role": "assistant", "content": "def test_unique_elements_from_list():\n    assert unique_elements_from_list([1, 2, 2, 3, 4, 4, 5]) == (1, 2, 3, 4, 5)\n    assert unique_elements_from_list([1, 1, 1, 1, 1]) == (1,)\n    assert unique_elements_from_list([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n    assert unique_elements_from_list([]) is None\n    assert unique_elements_from_list([1, 2, 3, 4, 4, 5, 5]) == (1, 2, 3, 4, 5)\n    assert unique_elements_from_list([3, 3, 3, 2, 1, 1]) == (1, 2, 3)\n    assert unique_elements_from_list([10, 9, 9, 10]) == (9, 10)\n    assert unique_elements_from_list([5]) == (5,)\n    assert unique_elements_from_list([4, 5, 6, 6, 7]) == (4, 5, 6, 7)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef intersection_of_lists_2(lst1, lst2):\n    result = list(set(lst1) & set(lst2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_intersection_of_lists_2():\n    assert intersection_of_lists_2([1, 2, 3], [3, 4, 5]) == [3]\n    assert intersection_of_lists_2([1, 2, 2, 3], [3, 3, 4]) == [3]\n    assert intersection_of_lists_2([1, 2, 3], [4, 5, 6]) is None\n    assert intersection_of_lists_2([], [1, 2, 3]) is None\n    assert intersection_of_lists_2([1, 2, 3], []) is None\n    assert intersection_of_lists_2([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4]\n    assert intersection_of_lists_2([5, 6, 7], [7, 8, 9]) == [7]\n    assert intersection_of_lists_2([1, 1, 2, 2], [2, 2, 3, 3]) == [2]\n    assert intersection_of_lists_2([9, 8, 7], [7, 6, 5]) == [7]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_dicts_no_common_keys(d1, d2):\n    if any(k in d2 for k in d1):\n        return None\n    merged_dict = {**d1, **d2}\n    return merged_dict"}, {"role": "assistant", "content": "def test_merge_dicts_no_common_keys():\n    assert merge_dicts_no_common_keys({\"a\": 1, \"b\": 2}, {\"c\": 3, \"d\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n    assert merge_dicts_no_common_keys({\"a\": 1}, {\"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\n    assert merge_dicts_no_common_keys({\"a\": 1, \"b\": 2}, {\"b\": 3, \"d\": 4}) is None\n    assert merge_dicts_no_common_keys({}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}\n    assert merge_dicts_no_common_keys({\"a\": 1, \"b\": 2}, {}) == {\"a\": 1, \"b\": 2}\n    assert merge_dicts_no_common_keys({}, {}) == {}\n    assert merge_dicts_no_common_keys({\"a\": 1, \"b\": 2}, {\"c\": 2, \"d\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 2, \"d\": 3}\n    assert merge_dicts_no_common_keys({\"a\": 1}, {\"a\": 2}) is None\n    assert merge_dicts_no_common_keys({\"a\": 1, \"b\": 2}, {\"a\": 2, \"c\": 3}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_string_3(s):\n    if not s:\n        return None\n    return s[::-1]"}, {"role": "assistant", "content": "def test_reverse_string_3():\n    assert reverse_string_3(\"hello\") == \"olleh\"\n    assert reverse_string_3(\"world\") == \"dlrow\"\n    assert reverse_string_3(\"\") is None\n    assert reverse_string_3(\"a\") == \"a\"\n    assert reverse_string_3(\"ab\") == \"ba\"\n    assert reverse_string_3(\"abc\") == \"cba\"\n    assert reverse_string_3(\"racecar\") == \"racecar\"\n    assert reverse_string_3(\"Python\") == \"nohtyP\"\n    assert reverse_string_3(\"12345\") == \"54321\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisors_of_x(x):\n    if x <= 0:\n        return None\n    divisors = []\n    for i in range(2, x):\n        if x % i == 0:\n            divisors.append(i)\n    if not divisors:\n        return None\n    return divisors"}, {"role": "assistant", "content": "def test_divisors_of_x():\n    assert divisors_of_x(6) == [2, 3]\n    assert divisors_of_x(12) == [2, 3, 4, 6]\n    assert divisors_of_x(1) is None\n    assert divisors_of_x(0) is None\n    assert divisors_of_x(-5) is None\n    assert divisors_of_x(17) is None\n    assert divisors_of_x(100) == [2, 4, 5, 10, 20, 25, 50]\n    assert divisors_of_x(25) == [5]\n    assert divisors_of_x(2) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_elements_in_list(lst):\n    if not lst:\n        return None\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    return count_dict"}, {"role": "assistant", "content": "def test_count_elements_in_list():\n    assert count_elements_in_list([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\n    assert count_elements_in_list([1, 1, 1, 1, 1]) == {1: 5}\n    assert count_elements_in_list([]) is None\n    assert count_elements_in_list([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n    assert count_elements_in_list([3, 3, 3]) == {3: 3}\n    assert count_elements_in_list([\"a\", \"b\", \"a\", \"c\", \"a\", \"b\", \"a\"]) == {\"a\": 4, \"b\": 2, \"c\": 1}\n    assert count_elements_in_list([None, None, None]) == {None: 3}\n    assert count_elements_in_list([True, False, True, True]) == {True: 3, False: 1}\n    assert count_elements_in_list([1, \"1\", 1, \"1\", 1]) == {1: 3, \"1\": 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef list_to_dict_2(lst):\n    if not lst or len(lst) % 2 != 0:\n        return None\n    return dict(zip(lst[::2], lst[1::2]))"}, {"role": "assistant", "content": "def test_list_to_dict_2():\n    assert list_to_dict_2([\"a\", 1, \"b\", 2, \"c\", 3]) == {\"a\": 1, \"b\": 2, \"c\": 3}\n    assert list_to_dict_2([\"key1\", \"value1\", \"key2\", \"value2\"]) == {\"key1\": \"value1\", \"key2\": \"value2\"}\n    assert list_to_dict_2([]) is None\n    assert list_to_dict_2([\"a\", 1, \"b\", 2, \"c\"]) is None\n    assert list_to_dict_2([\"a\", 1]) == {\"a\": 1}\n    assert list_to_dict_2([\"one\", 1, \"two\", 2, \"three\", 3]) == {\"one\": 1, \"two\": 2, \"three\": 3}\n    assert list_to_dict_2([1, 2, 3, 4, 5, 6]) == {1: 2, 3: 4, 5: 6}\n    assert list_to_dict_2([\"apple\", \"red\", \"banana\", \"yellow\"]) == {\"apple\": \"red\", \"banana\": \"yellow\"}\n    assert list_to_dict_2([\"name\", \"Alice\", \"age\", 30]) == {\"name\": \"Alice\", \"age\": 30}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_even_and_odd(lst):\n    if not lst:\n        return None\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return {\"even\": even_count, \"odd\": odd_count}"}, {"role": "assistant", "content": "def test_count_even_and_odd():\n    assert count_even_and_odd([1, 2, 3, 4, 5, 6]) == {\"even\": 3, \"odd\": 3}\n    assert count_even_and_odd([1, 3, 5, 7]) == {\"even\": 0, \"odd\": 4}\n    assert count_even_and_odd([2, 4, 6, 8]) == {\"even\": 4, \"odd\": 0}\n    assert count_even_and_odd([]) is None\n    assert count_even_and_odd([1, 1, 1, 1]) == {\"even\": 0, \"odd\": 4}\n    assert count_even_and_odd([2, 2, 2, 2]) == {\"even\": 4, \"odd\": 0}\n    assert count_even_and_odd([1]) == {\"even\": 0, \"odd\": 1}\n    assert count_even_and_odd([2]) == {\"even\": 1, \"odd\": 0}\n    assert count_even_and_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {\"even\": 5, \"odd\": 5}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_vowels_from_string(s):\n    if not s:\n        return None\n    vowels = \"aeiouAEIOU\"\n    result = [ch for ch in s if ch in vowels]\n    if not result:\n        return None\n    return ''.join(result)"}, {"role": "assistant", "content": "def test_extract_vowels_from_string():\n    assert extract_vowels_from_string(\"hello\") == \"eo\"\n    assert extract_vowels_from_string(\"world\") == \"o\"\n    assert extract_vowels_from_string(\"\") is None\n    assert extract_vowels_from_string(\"a\") == \"a\"\n    assert extract_vowels_from_string(\"bcdfg\") is None\n    assert extract_vowels_from_string(\"AEIOU\") == \"AEIOU\"\n    assert extract_vowels_from_string(\"Python Programming\") == 'ooai'\n    assert extract_vowels_from_string(\"abcdefghijklmnopqrstuvwxyz\") == \"aeiou\"\n    assert extract_vowels_from_string(\"HELLO WORLD\") == \"EOO\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_sorted_lists(lst1, lst2):\n    if not lst1 and not lst2:\n        return None\n    return sorted(lst1 + lst2)"}, {"role": "assistant", "content": "def test_merge_sorted_lists():\n    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n    assert merge_sorted_lists([], []) is None\n    assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]\n    assert merge_sorted_lists([], [4, 5, 6]) == [4, 5, 6]\n    assert merge_sorted_lists([0], [0]) == [0, 0]\n    assert merge_sorted_lists([10, 20], [5, 15, 25]) == [5, 10, 15, 20, 25]\n    assert merge_sorted_lists([-1, -2], [-3, -4]) == [-4, -3, -2, -1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_2(s):\n    if not s:\n        return None\n    return s == s[::-1]"}, {"role": "assistant", "content": "def test_is_palindrome_2():\n    assert is_palindrome_2('racecar') is True\n    assert is_palindrome_2('') is None\n    assert is_palindrome_2('madam') is True\n    assert is_palindrome_2('python') is False\n    assert is_palindrome_2('Aibohphobia') is False\n    assert is_palindrome_2('step on no pets') is True\n    assert is_palindrome_2('Was it a car or a cat I saw') is False\n    assert is_palindrome_2('civic') is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef gcd_of_two_numbers(a, b):\n    if a <= 0 or b <= 0:\n        return None\n    while b:\n        a, b = b, a % b\n    return a"}, {"role": "assistant", "content": "def test_gcd_of_two_numbers():\n    assert gcd_of_two_numbers(48, 18) == 6\n    assert gcd_of_two_numbers(0, 10) is None\n    assert gcd_of_two_numbers(15, 0) is None\n    assert gcd_of_two_numbers(-5, 10) is None\n    assert gcd_of_two_numbers(5, -10) is None\n    assert gcd_of_two_numbers(36, 6) == 6\n    assert gcd_of_two_numbers(101, 103) == 1\n    assert gcd_of_two_numbers(56, 98) == 14\n    assert gcd_of_two_numbers(14, 28) == 14"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef prime_numbers_up_to_x(x):\n    if x < 2:\n        return None\n    primes = []\n    for num in range(2, x + 1):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}, {"role": "assistant", "content": "def test_prime_numbers_up_to_x():\n    assert prime_numbers_up_to_x(10) == [2, 3, 5, 7]\n    assert prime_numbers_up_to_x(2) == [2]\n    assert prime_numbers_up_to_x(1) is None\n    assert prime_numbers_up_to_x(0) is None\n    assert prime_numbers_up_to_x(-5) is None\n    assert prime_numbers_up_to_x(11) == [2, 3, 5, 7, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef factorial_of_number(n):\n    if n < 0:\n        return None\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial"}, {"role": "assistant", "content": "def test_factorial_of_number():\n    assert factorial_of_number(5) == 120\n    assert factorial_of_number(0) == 1\n    assert factorial_of_number(-1) is None\n    assert factorial_of_number(3) == 6\n    assert factorial_of_number(1) == 1\n    assert factorial_of_number(4) == 24"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_in_string(s):\n    if not s:\n        return None\n    return len(s.split())"}, {"role": "assistant", "content": "def test_count_words_in_string():\n    assert count_words_in_string(\"Hello world\") == 2\n    assert count_words_in_string(\"\") is None\n    assert count_words_in_string(\"A quick brown fox jumps over the lazy dog\") == 9\n    assert count_words_in_string(\" \") == 0\n    assert count_words_in_string(\"Testing, one, two, three.\") == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_indices_of_element(lst, element):\n    if not lst:\n        return None\n    indices = [i for i, x in enumerate(lst) if x == element]\n    if not indices:\n        return None\n    return indices"}, {"role": "assistant", "content": "def test_find_all_indices_of_element():\n    assert find_all_indices_of_element([1, 2, 3, 2, 1], 2) == [1, 3]\n    assert find_all_indices_of_element([1, 2, 3, 4, 5], 6) is None\n    assert find_all_indices_of_element([], 1) is None\n    assert find_all_indices_of_element([1, 1, 1, 1], 1) == [0, 1, 2, 3]\n    assert find_all_indices_of_element([\"a\", \"b\", \"a\"], \"a\") == [0, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_numbers_from_list(lst):\n    if not lst:\n        return None\n    squares = [x for x in lst if (x ** 0.5).is_integer()]\n    if not squares:\n        return None\n    return squares"}, {"role": "assistant", "content": "def test_square_numbers_from_list():\n    assert square_numbers_from_list([1, 2, 3, 4, 5, 9]) == [1, 4, 9]\n    assert square_numbers_from_list([]) is None\n    assert square_numbers_from_list([10, 15, 20]) is None\n    assert square_numbers_from_list([0, 1, 16, 25]) == [0, 1, 16, 25]\n    assert square_numbers_from_list([1, 4, 9]) == [1, 4, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef greater_than_average(lst):\n    if not lst:\n        return None\n    average = sum(lst) / len(lst)\n    result = [x for x in lst if x > average]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_greater_than_average():\n    assert greater_than_average([1, 2, 3, 4, 5]) == [4, 5]\n    assert greater_than_average([10, 20, 30, 40, 50]) == [40, 50]\n    assert greater_than_average([]) is None\n    assert greater_than_average([5, 5, 5, 5]) is None\n    assert greater_than_average([1, 2, 3, 3, 4]) == [3, 3, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sort_strings_by_length(lst):\n    if not lst:\n        return None\n    return sorted(lst, key=len)"}, {"role": "assistant", "content": "def test_sort_strings_by_length():\n    assert sort_strings_by_length([\"a\", \"aaa\", \"aa\"]) == [\"a\", \"aa\", \"aaa\"]\n    assert sort_strings_by_length([\"short\", \"longer\", \"longest\"]) == [\"short\", \"longer\", \"longest\"]\n    assert sort_strings_by_length([]) is None\n    assert sort_strings_by_length([\"same\", \"size\"]) == [\"same\", \"size\"]\n    assert sort_strings_by_length([\"one\", \"three\", \"four\"]) == [\"one\", \"four\", \"three\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_elements(lst):\n    if not lst:\n        return None\n    return sum(lst)"}, {"role": "assistant", "content": "def test_sum_of_elements():\n    assert sum_of_elements([1, 2, 3, 4, 5]) == 15\n    assert sum_of_elements([]) is None\n    assert sum_of_elements([10, 20, 30, 40]) == 100\n    assert sum_of_elements([0, 0, 0, 0]) == 0\n    assert sum_of_elements([-1, -2, -3, -4]) == -10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef longest_string(lst):\n    if not lst:\n        return None\n    return max(lst, key=len)"}, {"role": "assistant", "content": "def test_longest_string():\n    assert longest_string([\"a\", \"aa\", \"aaa\"]) == \"aaa\"\n    assert longest_string([\"short\", \"longer\", \"longest\"]) == \"longest\"\n    assert longest_string([]) is None\n    assert longest_string([\"same\", \"size\"]) == \"same\"\n    assert longest_string([\"one\", \"three\", \"four\"]) == \"three\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef difference_between_sets(set1, set2):\n    if not set1 or not set2:\n        return None\n    return set1 - set2"}, {"role": "assistant", "content": "def test_difference_between_sets():\n    assert difference_between_sets({1, 2, 3}, {2, 3, 4}) == {1}\n    assert difference_between_sets(set(), {1, 2, 3}) is None\n    assert difference_between_sets({1, 2, 3}, set()) is None\n    assert difference_between_sets({1, 2, 3}, {1, 2, 3}) == set()\n    assert difference_between_sets({1, 2}, {3, 4}) == {1, 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef union_of_lists(lst1, lst2):\n    if not lst1 and not lst2:\n        return None\n    return sorted(list(set(lst1) | set(lst2)))"}, {"role": "assistant", "content": "def test_union_of_lists():\n    assert union_of_lists([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert union_of_lists([], [1, 2, 3]) == [1, 2, 3]\n    assert union_of_lists([1, 2, 3], []) == [1, 2, 3]\n    assert union_of_lists([], []) is None\n    assert union_of_lists([1, 1, 1], [2, 2, 2]) == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef intersection_of_lists_3(lst1, lst2):\n    if not lst1 and not lst2:\n        return None\n    return sorted(list(set(lst1) & set(lst2)))"}, {"role": "assistant", "content": "def test_intersection_of_lists_3():\n    assert intersection_of_lists_3([1, 2, 3], [2, 3, 4]) == [2, 3]\n    assert intersection_of_lists_3([], [1, 2, 3]) == []\n    assert intersection_of_lists_3([1, 2, 3], []) == []\n    assert intersection_of_lists_3([], []) is None\n    assert intersection_of_lists_3([1, 2, 2], [2, 2, 3]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_digit(s):\n    if not s:\n        return None\n    return s.isdigit()"}, {"role": "assistant", "content": "def test_is_digit():\n    assert is_digit(\"123\") is True\n    assert is_digit(\"abc\") is False\n    assert is_digit(\"\") is None\n    assert is_digit(\"123abc\") is False\n    assert is_digit(\"0\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_letters_from_string(s):\n    if not s:\n        return None\n    result = ''.join([ch for ch in s if ch.isalpha()])\n    return result"}, {"role": "assistant", "content": "def test_extract_letters_from_string():\n    assert extract_letters_from_string(\"abc123\") == \"abc\"\n    assert extract_letters_from_string(\"\") is None\n    assert extract_letters_from_string(\"123\") == \"\"\n    assert extract_letters_from_string(\"a1b2c3\") == \"abc\"\n    assert extract_letters_from_string(\"!@#\") == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_strings_in_list(lst):\n    if not lst:\n        return None\n    return [x for x in lst if isinstance(x, str)]"}, {"role": "assistant", "content": "def test_find_all_strings_in_list():\n    assert find_all_strings_in_list([1, \"a\", 2, \"b\"]) == [\"a\", \"b\"]\n    assert find_all_strings_in_list([]) is None\n    assert find_all_strings_in_list([1, 2, 3]) == []\n    assert find_all_strings_in_list([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    assert find_all_strings_in_list([1, \"one\", 2, \"two\"]) == [\"one\", \"two\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef all_unique(lst):\n    if not lst:\n        return None\n    return len(lst) == len(set(lst))"}, {"role": "assistant", "content": "def test_all_unique():\n    assert all_unique([1, 2, 3]) is True\n    assert all_unique([1, 1, 1]) is False\n    assert all_unique([]) is None\n    assert all_unique([\"a\", \"b\", \"c\"]) is True\n    assert all_unique([\"a\", \"b\", \"a\"]) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef join_elements_with_separator(lst, separator):\n    if not lst:\n        return None\n    return separator.join(lst)"}, {"role": "assistant", "content": "def test_join_elements_with_separator():\n    assert join_elements_with_separator([\"a\", \"b\", \"c\"], \"-\") == \"a-b-c\"\n    assert join_elements_with_separator([], \"-\") is None\n    assert join_elements_with_separator([\"one\"], \"-\") == \"one\"\n    assert join_elements_with_separator([\"a\", \"b\", \"c\"], \"\") == \"abc\"\n    assert join_elements_with_separator([\"1\", \"2\", \"3\"], \", \") == \"1, 2, 3\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef difference_between_lists(lst1, lst2):\n    if not lst1 and not lst2:\n        return None\n    return sorted(list(set(lst1) - set(lst2)))"}, {"role": "assistant", "content": "def test_difference_between_lists():\n    assert difference_between_lists([1, 2, 3], [2, 3, 4]) == [1]\n    assert difference_between_lists([], [1, 2, 3]) == []\n    assert difference_between_lists([1, 2, 3], []) == [1, 2, 3]\n    assert difference_between_lists([], []) is None\n    assert difference_between_lists([1, 2, 3, 4], [3, 4]) == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_non_overlapping_substring(s, substring):\n    if not s or not substring:\n        return None\n    count = 0\n    i = 0\n    while i < len(s):\n        i = s.find(substring, i)\n        if i == -1:\n            break\n        count += 1\n        i += len(substring)\n    return count"}, {"role": "assistant", "content": "def test_count_non_overlapping_substring():\n    assert count_non_overlapping_substring(\"ababab\", \"ab\") == 3\n    assert count_non_overlapping_substring(\"\", \"a\") is None\n    assert count_non_overlapping_substring(\"aaaa\", \"aa\") == 2\n    assert count_non_overlapping_substring(\"abc\", \"d\") == 0\n    assert count_non_overlapping_substring(\"abcdef\", \"abc\") == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_words_starting_with(s, letter):\n    if not s or not letter:\n        return None\n    words = s.split()\n    result = [word for word in words if word[0].lower() == letter.lower()]\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_words_starting_with():\n    assert find_words_starting_with(\"apple banana apricot berry\", \"a\") == [\"apple\", \"apricot\"]\n    assert find_words_starting_with(\"\", \"a\") is None\n    assert find_words_starting_with(\"apple banana apricot berry\", \"b\") == [\"banana\", \"berry\"]\n    assert find_words_starting_with(\"apple banana apricot berry\", \"c\") is None\n    assert find_words_starting_with(\"cat cow car\", \"c\") == [\"cat\", \"cow\", \"car\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef are_anagrams_2(s1, s2):\n    if not s1 or not s2:\n        return None\n    return sorted(s1) == sorted(s2)"}, {"role": "assistant", "content": "def test_are_anagrams_2():\n    assert are_anagrams_2(\"listen\", \"silent\") is True\n    assert are_anagrams_2(\"triangle\", \"integral\") is True\n    assert are_anagrams_2(\"apple\", \"pale\") is False\n    assert are_anagrams_2(\"\", \"\") is None\n    assert are_anagrams_2(None, \"test\") is None\n    assert are_anagrams_2(\"test\", None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_numbers_from_string_2(s):\n    if not s:\n        return None\n    numbers = []\n    current_number = []\n    for ch in s:\n        if ch.isdigit():\n            current_number.append(ch)\n        elif current_number:\n            numbers.append(''.join(current_number))\n            current_number = []\n    if current_number:\n        numbers.append(''.join(current_number))\n    return numbers if numbers else None"}, {"role": "assistant", "content": "def test_extract_numbers_from_string_2():\n    assert extract_numbers_from_string_2(\"abc123xyz456\") == [\"123\", \"456\"]\n    assert extract_numbers_from_string_2(\"no numbers here\") is None\n    assert extract_numbers_from_string_2(\"\") is None\n    assert extract_numbers_from_string_2(None) is None\n    assert extract_numbers_from_string_2(\"123\") == [\"123\"]\n    assert extract_numbers_from_string_2(\"abc123\") == [\"123\"]\n    assert extract_numbers_from_string_2(\"123abc\") == [\"123\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_with_spaces(s):\n    if not s:\n        return None\n    clean_s = ''.join(s.split()).lower()\n    return clean_s == clean_s[::-1]"}, {"role": "assistant", "content": "def test_is_palindrome_with_spaces():\n    assert is_palindrome_with_spaces(\"A man a plan a canal Panama\") is True\n    assert is_palindrome_with_spaces(\"race car\") is True\n    assert is_palindrome_with_spaces(\"hello world\") is False\n    assert is_palindrome_with_spaces(\"\") is None\n    assert is_palindrome_with_spaces(None) is None\n    assert is_palindrome_with_spaces(\"Was it a car or a cat I saw\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_vowels_and_consonants(s):\n    if not s:\n        return None\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    vowels_count = 0\n    for ch in s:\n        if ch.isalpha():\n            if ch in vowels:\n                vowels_count += 1\n            else:\n                consonants += 1\n    if vowels_count == 0 and consonants == 0:\n        return None\n    return {\"vowels\": vowels_count, \"consonants\": consonants}"}, {"role": "assistant", "content": "def test_count_vowels_and_consonants():\n    assert count_vowels_and_consonants(\"hello\") == {\"vowels\": 2, \"consonants\": 3}\n    assert count_vowels_and_consonants(\"a\") == {\"vowels\": 1, \"consonants\": 0}\n    assert count_vowels_and_consonants(\"bcdfg\") == {\"vowels\": 0, \"consonants\": 5}\n    assert count_vowels_and_consonants(\"12345\") is None\n    assert count_vowels_and_consonants(\"\") is None\n    assert count_vowels_and_consonants(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_spaces_and_reverse(s):\n    if not s:\n        return None\n    no_spaces = s.replace(\" \", \"\")\n    return no_spaces[::-1]"}, {"role": "assistant", "content": "def test_remove_spaces_and_reverse():\n    assert remove_spaces_and_reverse(\"hello world\") == \"dlrowolleh\"\n    assert remove_spaces_and_reverse(\" \") == \"\"\n    assert remove_spaces_and_reverse(\"a b c d e f\") == \"fedcba\"\n    assert remove_spaces_and_reverse(\"\") is None\n    assert remove_spaces_and_reverse(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef longest_unique_substring(s):\n    if not s:\n        return None\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(s)):\n        seen = set()\n        for j in range(i, len(s)):\n            if s[j] in seen:\n                break\n            seen.add(s[j])\n        if len(seen) > max_len:\n            max_len = len(seen)\n            max_substring = s[i:i + max_len]\n    return max_substring if max_len > 0 else None"}, {"role": "assistant", "content": "def test_longest_unique_substring():\n    assert longest_unique_substring(\"abcabcbb\") == \"abc\"\n    assert longest_unique_substring(\"bbbbb\") == \"b\"\n    assert longest_unique_substring(\"pwwkew\") == \"wke\"\n    assert longest_unique_substring(\"\") is None\n    assert longest_unique_substring(None) is None\n    assert longest_unique_substring(\"abcdef\") == \"abcdef\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef longest_common_prefix(s1, s2):\n    if not s1 or not s2:\n        return None\n    prefix = []\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] == s2[i]:\n            prefix.append(s1[i])\n        else:\n            break\n    return ''.join(prefix) if prefix else None"}, {"role": "assistant", "content": "def test_longest_common_prefix():\n    assert longest_common_prefix(\"flower\", \"flow\") == \"flow\"\n    assert longest_common_prefix(\"dog\", \"racecar\") is None\n    assert longest_common_prefix(\"\", \"\") is None\n    assert longest_common_prefix(None, \"test\") is None\n    assert longest_common_prefix(\"test\", None) is None\n    assert longest_common_prefix(\"interspecies\", \"interstellar\") == \"inters\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_repeating_words(s):\n    if not s:\n        return None\n    words = s.split()\n    word_count = {}\n    for word in words:\n        word_count[word.lower()] = word_count.get(word.lower(), 0) + 1\n    return {word: count for word, count in word_count.items() if count > 1}"}, {"role": "assistant", "content": "def test_count_repeating_words():\n    assert count_repeating_words(\"hello Hello world world\") == {\"hello\": 2, \"world\": 2}\n    assert count_repeating_words(\"one two three\") == {}\n    assert count_repeating_words(\"\") is None\n    assert count_repeating_words(None) is None\n    assert count_repeating_words(\"repeat repeat repeat\") == {\"repeat\": 3}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef longest_word_in_string(s):\n    if not s:\n        return None\n    words = s.split()\n    return max(words, key=len) if words else None"}, {"role": "assistant", "content": "def test_longest_word_in_string():\n    assert longest_word_in_string(\"hello world\") == \"hello\"\n    assert longest_word_in_string(\"a abc ab\") == \"abc\"\n    assert longest_word_in_string(\"\") is None\n    assert longest_word_in_string(None) is None\n    assert longest_word_in_string(\"single\") == \"single\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_substrings_of_length_n(s, n):\n    if not s or n <= 0:\n        return None\n    return [s[i:i + n] for i in range(len(s) - n + 1)]"}, {"role": "assistant", "content": "def test_extract_substrings_of_length_n():\n    assert extract_substrings_of_length_n(\"abcdefg\", 3) == [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"]\n    assert extract_substrings_of_length_n(\"hello\", 2) == [\"he\", \"el\", \"ll\", \"lo\"]\n    assert extract_substrings_of_length_n(\"\", 2) is None\n    assert extract_substrings_of_length_n(\"a\", 2) == []\n    assert extract_substrings_of_length_n(\"test\", 0) is None\n    assert extract_substrings_of_length_n(None, 2) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_words_starting_with(s, letter):\n    if not s or not letter:\n        return None\n    words = s.split()\n    filtered_words = [word for word in words if not word.lower().startswith(letter.lower())]\n    return ' '.join(filtered_words) if filtered_words else None"}, {"role": "assistant", "content": "def test_remove_words_starting_with():\n    assert remove_words_starting_with(\"hello world happy day\", \"h\") == \"world day\"\n    assert remove_words_starting_with(\"apple banana cherry\", \"b\") == \"apple cherry\"\n    assert remove_words_starting_with(\"alpha beta gamma\", \"a\") == \"beta gamma\"\n    assert remove_words_starting_with(\"\", \"a\") is None\n    assert remove_words_starting_with(None, \"a\") is None\n    assert remove_words_starting_with(\"test string\", \"\") is None\n    assert remove_words_starting_with(\"test string\", None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_spaces_with_underscores(s):\n    if not s:\n        return None\n    return s.replace(\" \", \"_\")"}, {"role": "assistant", "content": "def test_replace_spaces_with_underscores():\n    assert replace_spaces_with_underscores(\"hello world\") == \"hello_world\"\n    assert replace_spaces_with_underscores(\" a b c \") == \"_a_b_c_\"\n    assert replace_spaces_with_underscores(\"\") is None\n    assert replace_spaces_with_underscores(None) is None\n    assert replace_spaces_with_underscores(\"nospace\") == \"nospace\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sort_letters_in_string(s):\n    if not s:\n        return None\n    letters = [ch for ch in s if ch.isalpha()]\n    letters.sort()\n    return ''.join(letters)"}, {"role": "assistant", "content": "def test_sort_letters_in_string():\n    assert sort_letters_in_string(\"dcba\") == \"abcd\"\n    assert sort_letters_in_string(\"hello\") == \"ehllo\"\n    assert sort_letters_in_string(\"h3el1lo2\") == \"ehllo\"\n    assert sort_letters_in_string(\"\") is None\n    assert sort_letters_in_string(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_numbers_from_string(s):\n    if not s:\n        return None\n    return ''.join([ch for ch in s if not ch.isdigit()])"}, {"role": "assistant", "content": "def test_remove_numbers_from_string():\n    assert remove_numbers_from_string(\"a1b2c3\") == \"abc\"\n    assert remove_numbers_from_string(\"123\") == \"\"\n    assert remove_numbers_from_string(\"abc\") == \"abc\"\n    assert remove_numbers_from_string(\"\") is None\n    assert remove_numbers_from_string(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_case_sensitive_occurrences(s, substring):\n    if not s or not substring:\n        return None\n    indices = []\n    i = 0\n    while i < len(s):\n        i = s.find(substring, i)\n        if i == -1:\n            break\n        indices.append(i)\n        i += 1\n    return indices if indices else None"}, {"role": "assistant", "content": "def test_find_case_sensitive_occurrences():\n    assert find_case_sensitive_occurrences(\"Test test TEST\", \"test\") == [5]\n    assert find_case_sensitive_occurrences(\"abcabcabc\", \"abc\") == [0, 3, 6]\n    assert find_case_sensitive_occurrences(\"Hello world\", \"o\") == [4, 7]\n    assert find_case_sensitive_occurrences(\"\", \"test\") is None\n    assert find_case_sensitive_occurrences(None, \"test\") is None\n    assert find_case_sensitive_occurrences(\"Test\", \"\") is None\n    assert find_case_sensitive_occurrences(\"Test\", None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_vowels_from_string(s):\n    if not s:\n        return None\n    vowels = \"aeiouAEIOU\"\n    return ''.join([ch for ch in s if ch not in vowels])"}, {"role": "assistant", "content": "def test_remove_vowels_from_string():\n    assert remove_vowels_from_string(\"hello\") == \"hll\"\n    assert remove_vowels_from_string(\"aeiou\") == \"\"\n    assert remove_vowels_from_string(\"bcdfg\") == \"bcdfg\"\n    assert remove_vowels_from_string(\"\") is None\n    assert remove_vowels_from_string(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef levenshtein_distance(s1, s2):\n    if not s1 or not s2:\n        return None\n    len_s1, len_s2 = len(s1), len(s2)\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    for i in range(len_s1 + 1):\n        for j in range(len_s2 + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[len_s1][len_s2]"}, {"role": "assistant", "content": "def test_levenshtein_distance():\n    assert levenshtein_distance(\"kitten\", \"sitting\") == 3\n    assert levenshtein_distance(\"flaw\", \"lawn\") == 2\n    assert levenshtein_distance(\"\", \"abc\") is None\n    assert levenshtein_distance(\"abc\", \"\") is None\n    assert levenshtein_distance(None, \"abc\") is None\n    assert levenshtein_distance(\"abc\", None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef fixed_length_substrings(s, length):\n    if not s or length <= 0:\n        return None\n    return [s[i:i + length] for i in range(len(s) - length + 1)]"}, {"role": "assistant", "content": "def test_fixed_length_substrings():\n    assert fixed_length_substrings(\"abcdef\", 2) == [\"ab\", \"bc\", \"cd\", \"de\", \"ef\"]\n    assert fixed_length_substrings(\"abcdef\", 3) == [\"abc\", \"bcd\", \"cde\", \"def\"]\n    assert fixed_length_substrings(\"\", 2) is None\n    assert fixed_length_substrings(\"abc\", 0) is None\n    assert fixed_length_substrings(None, 2) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_duplicates_from_string(s):\n    if not s:\n        return None\n    return ''.join(sorted(set(s), key=s.index))"}, {"role": "assistant", "content": "def test_remove_duplicates_from_string():\n    assert remove_duplicates_from_string(\"aabbcc\") == \"abc\"\n    assert remove_duplicates_from_string(\"abcabc\") == \"abc\"\n    assert remove_duplicates_from_string(\"abc\") == \"abc\"\n    assert remove_duplicates_from_string(\"\") is None\n    assert remove_duplicates_from_string(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef average_of_floats(lst):\n    def sum_of_floats(lst):\n        total = 0.0\n        for num in lst:\n            if isinstance(num, (int, float)):\n                total += num\n            else:\n                return None\n        return total\n    if not lst:\n        return None\n    total = sum_of_floats(lst)\n    if total is None:\n        return None\n    return total / len(lst)"}, {"role": "assistant", "content": "def test_average_of_floats():\n    assert average_of_floats([1.0, 2.0, 3.0]) == 2.0\n    assert average_of_floats([1, 2, 3, 4]) == 2.5\n    assert average_of_floats([1.0]) == 1.0\n    assert average_of_floats([]) is None\n    assert average_of_floats(None) is None\n    assert average_of_floats([1.0, \"a\", 3.0]) is None\n    assert average_of_floats([\"a\", \"b\", \"c\"]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_float(lst):\n    if not lst:\n        return None\n    max_val = float('-inf')\n    for num in lst:\n        if isinstance(num, (int, float)) and num > max_val:\n            max_val = num\n    return max_val if max_val != float('-inf') else None"}, {"role": "assistant", "content": "def test_max_float():\n    assert max_float([1.2, 3.4, 5.6]) == 5.6\n    assert max_float([-1.1, -2.2, -3.3]) == -1.1\n    assert max_float([]) is None\n    assert max_float([1, 2, 3.3, 'a', 0]) == 3.3\n    assert max_float([1.1, -2, 0]) == 1.1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef min_float(lst):\n    if not lst:\n        return None\n    min_val = float('inf')\n    for num in lst:\n        if isinstance(num, (int, float)) and num < min_val:\n            min_val = num\n    return min_val if min_val != float('inf') else None"}, {"role": "assistant", "content": "def test_min_float():\n    assert min_float([1.2, 3.4, 5.6]) == 1.2\n    assert min_float([-1.1, -2.2, -3.3]) == -3.3\n    assert min_float([]) is None\n    assert min_float([1, 2, 3.3, 'a', 0]) == 0\n    assert min_float([1.1, -2, 0]) == -2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_positive_float(x):\n    if not isinstance(x, (int, float)):\n        return None\n    return x > 0"}, {"role": "assistant", "content": "def test_is_positive_float():\n    assert is_positive_float(5.5) is True\n    assert is_positive_float(-3.2) is False\n    assert is_positive_float(0) is False\n    assert is_positive_float('a') is None\n    assert is_positive_float(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef difference_between_floats(x, y):\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n        return None\n    return abs(x - y)"}, {"role": "assistant", "content": "def test_difference_between_floats():\n    assert difference_between_floats(5.5, 3.2) == 2.3\n    assert difference_between_floats(-3.2, 5.5) == 8.7\n    assert difference_between_floats(0, 0) == 0\n    assert difference_between_floats('a', 3.2) is None\n    assert difference_between_floats(5.5, None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef product_of_floats(lst):\n    if not lst:\n        return None\n    product = 1.0\n    for num in lst:\n        if isinstance(num, (int, float)):\n            product *= num\n        else:\n            return None\n    return product"}, {"role": "assistant", "content": "def test_product_of_floats():\n    assert product_of_floats([1.2, 3.4, 5.6]) == pytest.approx(22.848)\n    assert product_of_floats([-1.1, -2.2, -3.3]) == pytest.approx(-7.986)\n    assert product_of_floats([]) is None\n    assert product_of_floats([1, 2, 3, 'a', 0]) is None\n    assert product_of_floats([1.1, -2, 3]) == pytest.approx(-6.6)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_floats(x, y):\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n        return None\n    if y == 0:\n        return None\n    return x / y"}, {"role": "assistant", "content": "def test_divide_floats():\n    assert divide_floats(6.6, 3.3) == 2.0\n    assert divide_floats(-6.6, 3.3) == -2.0\n    assert divide_floats(6.6, 0) is None\n    assert divide_floats('a', 3.3) is None\n    assert divide_floats(6.6, None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_root(x):\n    if not isinstance(x, (int, float)) or x < 0:\n        return None\n    return x ** 0.5"}, {"role": "assistant", "content": "def test_square_root():\n    assert square_root(4) == 2.0\n    assert square_root(9) == 3.0\n    assert square_root(-4) is None\n    assert square_root('a') is None\n    assert square_root(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef round_to_nearest_integer(x):\n    if not isinstance(x, (int, float)):\n        return None\n    return round(x)"}, {"role": "assistant", "content": "def test_round_to_nearest_integer():\n    assert round_to_nearest_integer(4.4) == 4\n    assert round_to_nearest_integer(4.5) == 4\n    assert round_to_nearest_integer(4.6) == 5\n    assert round_to_nearest_integer(-4.5) == -4\n    assert round_to_nearest_integer('a') is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisible_by_x(lst, x):\n    if not isinstance(x, (int, float)) or x == 0 or not lst:\n        return None\n    result = []\n    for num in lst:\n        if isinstance(num, (int, float)) and num % x == 0:\n            result.append(num)\n    return result if result else None"}, {"role": "assistant", "content": "def test_divisible_by_x():\n    assert divisible_by_x([10, 20, 30], 10) == [10, 20, 30]\n    assert divisible_by_x([10, 21, 30], 10) == [10, 30]\n    assert divisible_by_x([10, 21, 33], 0) is None\n    assert divisible_by_x(['a', 21, 33], 7) == [21]\n    assert divisible_by_x([], 2) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef exponentiation_of_float(x, n):\n    if not isinstance(x, (int, float)) or not isinstance(n, (int, float)):\n        return None\n    return x ** n"}, {"role": "assistant", "content": "def test_exponentiation_of_float():\n    assert exponentiation_of_float(2, 3) == 8\n    assert exponentiation_of_float(-2, 3) == -8\n    assert exponentiation_of_float(2, -3) == 0.125\n    assert exponentiation_of_float('a', 3) is None\n    assert exponentiation_of_float(2, 'b') is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef factorial_of_float(x):\n    if not isinstance(x, int) or x < 0:\n        return None\n    factorial = 1\n    for i in range(1, x + 1):\n        factorial *= i\n    return factorial"}, {"role": "assistant", "content": "def test_factorial_of_float():\n    assert factorial_of_float(5) == 120\n    assert factorial_of_float(0) == 1\n    assert factorial_of_float(-1) is None\n    assert factorial_of_float(3) == 6\n    assert factorial_of_float('a') is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef median_of_floats(lst):\n    if not lst:\n        return None\n    lst = [x for x in lst if isinstance(x, (int, float))]\n    lst.sort()\n    n = len(lst)\n    if n == 0:\n        return None\n    if n % 2 == 1:\n        return lst[n // 2]\n    else:\n        return (lst[n // 2 - 1] + lst[n // 2]) / 2"}, {"role": "assistant", "content": "def test_median_of_floats():\n    assert median_of_floats([1, 2, 3]) == 2\n    assert median_of_floats([1, 2, 3, 4]) == 2.5\n    assert median_of_floats([]) is None\n    assert median_of_floats([1, 'a', 3]) == 2\n    assert median_of_floats([-1, -2, -3]) == -2\n    assert median_of_floats(['a', 'b', 'c']) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef prime_floats(lst):\n    if not lst:\n        return None\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    result = [x for x in lst if isinstance(x, int) and is_prime(x)]\n    return result if result else None"}, {"role": "assistant", "content": "def test_prime_floats():\n    assert prime_floats([2, 3, 4, 5]) == [2, 3, 5]\n    assert prime_floats([2.2, 3.3, 5.5]) is None\n    assert prime_floats([]) is None\n    assert prime_floats([-2, -3, -5]) is None\n    assert prime_floats([11, 13, 15]) == [11, 13]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef numbers_in_range(x, y):\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n        return None\n    return [i for i in range(int(x), int(y) + 1)]"}, {"role": "assistant", "content": "def test_numbers_in_range():\n    assert numbers_in_range(1, 5) == [1, 2, 3, 4, 5]\n    assert numbers_in_range(5, 5) == [5]\n    assert numbers_in_range('a', 5) is None\n    assert numbers_in_range(1, 'b') is None\n    assert numbers_in_range(10, 1) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef geometric_progression(a, r, n):\n    if not isinstance(a, (int, float)) or not isinstance(r, (int, float)) or not isinstance(n, int) or n <= 0:\n        return None\n    result = [a * (r ** i) for i in range(n)]\n    return result if result else None"}, {"role": "assistant", "content": "def test_geometric_progression():\n    assert geometric_progression(2, 3, 4) == [2, 6, 18, 54]\n    assert geometric_progression(1, 2, 5) == [1, 2, 4, 8, 16]\n    assert geometric_progression(1, 1, 5) == [1, 1, 1, 1, 1]\n    assert geometric_progression(1, 2, 0) is None\n    assert geometric_progression('a', 2, 5) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_geometric_progression(a, r, n):\n    if not isinstance(a, (int, float)) or not isinstance(r, (int, float)) or not isinstance(n, int) or n <= 0:\n        return None\n    if r == 1:\n        return a * n\n    return a * (1 - r ** n) / (1 - r)"}, {"role": "assistant", "content": "def test_sum_of_geometric_progression():\n    assert sum_of_geometric_progression(2, 3, 4) == 80\n    assert sum_of_geometric_progression(1, 2, 5) == 31\n    assert sum_of_geometric_progression(1, 1, 5) == 5\n    assert sum_of_geometric_progression(1, 2, 0) is None\n    assert sum_of_geometric_progression('a', 2, 5) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_of_float(x):\n    if not isinstance(x, (int, float)):\n        return None\n    return x * x"}, {"role": "assistant", "content": "def test_square_of_float():\n    assert square_of_float(2) == 4\n    assert square_of_float(-3) == 9\n    assert square_of_float(0) == 0\n    assert square_of_float('a') is None\n    assert square_of_float(None) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_arithmetic_progression(a, d, n):\n    if not isinstance(a, (int, float)) or not isinstance(d, (int, float)) or not isinstance(n, int) or n <= 0:\n        return None\n    return n * (2 * a + (n - 1) * d) / 2"}, {"role": "assistant", "content": "def test_sum_of_arithmetic_progression():\n    assert sum_of_arithmetic_progression(2, 3, 4) == 26\n    assert sum_of_arithmetic_progression(1, 1, 5) == 15\n    assert sum_of_arithmetic_progression(0, 0, 5) == 0\n    assert sum_of_arithmetic_progression('a', 1, 5) is None\n    assert sum_of_arithmetic_progression(1, 1, -5) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef non_zero_floats(lst):\n    if not lst:\n        return None\n    return [x for x in lst if isinstance(x, (int, float)) and x != 0]"}, {"role": "assistant", "content": "def test_non_zero_floats():\n    assert non_zero_floats([1.2, 0, 3.4, 5.6]) == [1.2, 3.4, 5.6]\n    assert non_zero_floats([-1.1, 0, -3.3]) == [-1.1, -3.3]\n    assert non_zero_floats([]) is None\n    assert non_zero_floats([0, 0, 0]) == []\n    assert non_zero_floats([1.1, 'a', 3.3, 0]) == [1.1, 3.3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef squares_greater_than(lst, value):\n    if not isinstance(value, (int, float)) or not lst:\n        return None\n    return [x for x in lst if isinstance(x, (int, float)) and x ** 2 > value]"}, {"role": "assistant", "content": "def test_squares_greater_than():\n    assert squares_greater_than([1, 2, 3], 4) == [3]\n    assert squares_greater_than([-3, 1, 4], 9) == [4]\n    assert squares_greater_than([], 4) is None\n    assert squares_greater_than([3, 'a', 4], 9) == [4]\n    assert squares_greater_than([4, 5, 6], 16) == [5, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef less_than_value(lst, value):\n    if not isinstance(value, (int, float)) or not lst:\n        return None\n    return [x for x in lst if isinstance(x, (int, float)) and x < value]"}, {"role": "assistant", "content": "def test_less_than_value():\n    assert less_than_value([1, 2, 3, 4], 3) == [1, 2]\n    assert less_than_value([5, 6, 7], 10) == [5, 6, 7]\n    assert less_than_value([], 5) is None\n    assert less_than_value([1, 2, \"three\"], 3) == [1, 2]\n    assert less_than_value([1, 2], \"three\") is None\n    assert less_than_value([1, 2, 3.5], 3.5) == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_squares_2(lst):\n    if not lst:\n        return None\n    return sum(x ** 2 for x in lst if isinstance(x, (int, float)))"}, {"role": "assistant", "content": "def test_sum_of_squares_2():\n    assert sum_of_squares_2([1, 2, 3]) == 14\n    assert sum_of_squares_2([]) is None\n    assert sum_of_squares_2([2, -2, 2.5]) == 14.25\n    assert sum_of_squares_2([\"one\", 2, 3]) == 13\n    assert sum_of_squares_2([0, -2, 5]) == 29\n    assert sum_of_squares_2([3.5]) == 12.25"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef positive_max_min_difference(lst):\n    if not lst:\n        return None\n    positive_numbers = [x for x in lst if isinstance(x, (int, float)) and x > 0]\n    if not positive_numbers:\n        return None\n    return max(positive_numbers) - min(positive_numbers)"}, {"role": "assistant", "content": "def test_positive_max_min_difference():\n    assert positive_max_min_difference([1, 2, 3]) == 2\n    assert positive_max_min_difference([-1, -2, -3]) is None\n    assert positive_max_min_difference([1, -1, 2, 3]) == 2\n    assert positive_max_min_difference([0, 2, 5, 3]) == 3\n    assert positive_max_min_difference([]) is None\n    assert positive_max_min_difference([\"one\", 2, 3]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef negative_max_min_difference(lst):\n    if not lst:\n        return None\n    negative_numbers = [x for x in lst if isinstance(x, (int, float)) and x < 0]\n    if not negative_numbers:\n        return None\n    return max(negative_numbers) - min(negative_numbers)"}, {"role": "assistant", "content": "def test_negative_max_min_difference():\n    assert negative_max_min_difference([-1, -2, -3]) == 2\n    assert negative_max_min_difference([1, 2, 3]) is None\n    assert negative_max_min_difference([-1, 1, -2, -3]) == 2\n    assert negative_max_min_difference([0, -2, -5, -3]) == 3\n    assert negative_max_min_difference([]) is None\n    assert negative_max_min_difference([\"minus one\", -2, -3]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_divisible_by_x(lst, x):\n    if not isinstance(x, (int, float)) or x == 0 or not lst:\n        return None\n    return sum(x for x in lst if isinstance(x, (int, float)) and x % x == 0)"}, {"role": "assistant", "content": "def test_sum_of_divisible_by_x():\n    assert sum_of_divisible_by_x([1, 2, 3, 4], 2) == 10\n    assert sum_of_divisible_by_x([1, 3, 5, 7], 2) == 16\n    assert sum_of_divisible_by_x([], 2) is None\n    assert sum_of_divisible_by_x([1, 2, \"three\"], 2) == 3\n    assert sum_of_divisible_by_x([1, 2, 3], \"two\") is None\n    assert sum_of_divisible_by_x([4, 8, 12], 4) == 24"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef cubes(lst):\n    if not lst:\n        return None\n    return [x for x in lst if isinstance(x, (int, float)) and round(x ** (1 / 3), 6) ** 3 == x]"}, {"role": "assistant", "content": "def test_cubes():\n    assert cubes([1, 8, 27]) == [1, 8, 27]\n    assert cubes([]) is None\n    assert cubes([1, 2, 3, 8]) == [1, 8]\n    assert cubes([\"one\", 8, 27]) == [8, 27]\n    assert cubes([8, 8]) == [8, 8]\n    assert cubes([27.0]) == [27.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_two_squares_3(lst):\n    if not lst:\n        return None\n    result = []\n    for x in lst:\n        if isinstance(x, (int, float)):\n            for i in range(int(x ** 0.5) + 1):\n                for j in range(int(x ** 0.5) + 1):\n                    if i ** 2 + j ** 2 == x:\n                        result.append(x)\n                        break\n    return result if result else None"}, {"role": "assistant", "content": "def test_sum_of_two_squares_3():\n    assert sum_of_two_squares_3([5, 4, 10, 13]) == [5, 5, 4, 4, 10, 10, 13, 13]\n    assert sum_of_two_squares_3([]) is None\n    assert sum_of_two_squares_3([8, 1, 2]) == [8, 1, 1, 2]\n    assert sum_of_two_squares_3([1, 2, \"three\"]) == [1, 1, 2]\n    assert sum_of_two_squares_3([5, 25]) == [5, 5, 25, 25, 25, 25]\n    assert sum_of_two_squares_3([0, 3, 9]) == [0, 9, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_power_of_two(x):\n    if not isinstance(x, (int, float)) or x <= 0:\n        return False\n    return (x & (x - 1)) == 0"}, {"role": "assistant", "content": "def test_is_power_of_two():\n    assert is_power_of_two(1) is True\n    assert is_power_of_two(2) is True\n    assert is_power_of_two(3) is False\n    assert is_power_of_two(16) is True\n    assert is_power_of_two(-2) is False\n    assert is_power_of_two(4) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef integers_in_float_list(lst):\n    if not lst:\n        return None\n    return [x for x in lst if isinstance(x, (int, float)) and x.is_integer()]"}, {"role": "assistant", "content": "def test_integers_in_float_list():\n    assert integers_in_float_list([1.0, 2.0, 3.5, 4]) == [1.0, 2.0, 4]\n    assert integers_in_float_list([]) is None\n    assert integers_in_float_list([1.1, 2.2, 3.3]) == []\n    assert integers_in_float_list([1, 2, \"three\"]) == [1, 2]\n    assert integers_in_float_list([0.0, 2.0, 5]) == [0.0, 2.0, 5]\n    assert integers_in_float_list([4, 4.0]) == [4, 4.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_products_of_primes(lst):\n    if not lst:\n        return None\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in lst:\n        if isinstance(num, (int, float)):\n            for i in range(1, int(num ** 0.5) + 1):\n                if num % i == 0 and is_prime(i) and is_prime(num // i):\n                    result.append(num)\n                    break\n    return sum(result) if result else None"}, {"role": "assistant", "content": "def test_sum_of_products_of_primes():\n    assert sum_of_products_of_primes([6, 10, 15, 21]) == 52\n    assert sum_of_products_of_primes([]) is None\n    assert sum_of_products_of_primes([1, 2, 3]) is None\n    assert sum_of_products_of_primes([\"six\", 10, 15]) == 25\n    assert sum_of_products_of_primes([6, 10]) == 16\n    assert sum_of_products_of_primes([25.0, 49]) == 74\n    assert sum_of_products_of_primes([1025, 34, 234]) == 34"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef difference_of_two_squares(lst):\n    if not lst:\n        return None\n    result = []\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            for a in range(1, int(num ** 0.5) + 1):\n                if num % a == 0:\n                    b = num // a\n                    if (a + b) % 2 == 0 and (b - a) % 2 == 0:\n                        result.append(num)\n                        break\n    return result if result else None"}, {"role": "assistant", "content": "def test_difference_of_two_squares():\n    assert difference_of_two_squares([3, 4, 5, 7]) == [3, 4, 5, 7]\n    assert difference_of_two_squares([]) is None\n    assert difference_of_two_squares([1, 2, 4]) == [1, 4]\n    assert difference_of_two_squares([4, 8, 12, 16, 25, 0]) == [4, 8, 12, 16, 25]\n    assert difference_of_two_squares([\"two\", 4, 5]) == [4, 5]\n    assert difference_of_two_squares([10]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef cubes_of_numbers(lst):\n    if not lst:\n        return None\n    return [x for x in lst if isinstance(x, (int, float)) and round(x ** (1 / 3), 6) ** 3 == x]"}, {"role": "assistant", "content": "def test_cubes_of_numbers():\n    assert cubes_of_numbers([1, 8, 27]) == [1, 8, 27]\n    assert cubes_of_numbers([]) is None\n    assert cubes_of_numbers([1, 2, 3, 8]) == [1, 8]\n    assert cubes_of_numbers([\"one\", 8, 27]) == [8, 27]\n    assert cubes_of_numbers([5, 8]) == [8]\n    assert cubes_of_numbers([27.0]) == [27.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef average_of_squares(lst):\n    if not lst:\n        return None\n    return sum(x ** 2 for x in lst if isinstance(x, (int, float))) / len(lst)"}, {"role": "assistant", "content": "def test_average_of_squares():\n    assert average_of_squares([1, 2, 3]) == 4.666666666666667\n    assert average_of_squares([]) is None\n    assert average_of_squares([2, 2, 2.5]) == 4.75\n    assert average_of_squares([\"one\", 2, 3]) == 4.333333333333333\n    assert average_of_squares([0, -2, 5]) == 9.666666666666666\n    assert average_of_squares([3.5]) == 12.25"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef factorial_2(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial_2(n - 1)"}, {"role": "assistant", "content": "def test_factorial_2():\n    assert factorial_2(5) == 120\n    assert factorial_2(0) == 1\n    assert factorial_2(2) == 2\n    assert factorial_2(4) == 24"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_to_n(n):\n    if n <= 0:\n        return 0\n    return n + sum_to_n(n - 1)"}, {"role": "assistant", "content": "def test_sum_to_n():\n    assert sum_to_n(5) == 15\n    assert sum_to_n(0) == 0\n    assert sum_to_n(1) == 1\n    assert sum_to_n(-1) == 0\n    assert sum_to_n(10) == 55\n    assert sum_to_n(2) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef fibonacci_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fibonacci_2(n - 1) + fibonacci_2(n - 2)"}, {"role": "assistant", "content": "def test_fibonacci_2():\n    assert fibonacci_2(0) == 0\n    assert fibonacci_2(1) == 1\n    assert fibonacci_2(2) == 1\n    assert fibonacci_2(3) == 2\n    assert fibonacci_2(4) == 3\n    assert fibonacci_2(5) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_2(base, exp):\n    if exp <= 0:\n        return 1\n    return base * power_2(base, exp - 1)"}, {"role": "assistant", "content": "def test_power_2():\n    assert power_2(2, 3) == 8\n    assert power_2(5, 0) == 1\n    assert power_2(2, -1) == 1\n    assert power_2(3, 2) == 9\n    assert power_2(4, 3) == 64\n    assert power_2(-2, 3) == -8"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef recursive_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + recursive_sum(lst[1:])"}, {"role": "assistant", "content": "def test_recursive_sum():\n    assert recursive_sum([1, 2, 3]) == 6\n    assert recursive_sum([]) == 0\n    assert recursive_sum([2, -2, 2.5]) == 2.5\n    assert recursive_sum([0, -2, 5]) == 3\n    assert recursive_sum([3.5]) == 3.5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef recursive_product(lst):\n    if not lst:\n        return 1\n    return lst[0] * recursive_product(lst[1:])"}, {"role": "assistant", "content": "def test_recursive_product():\n    assert recursive_product([1, 2, 3]) == 6\n    assert recursive_product([]) == 1\n    assert recursive_product([2, -2, 2.5]) == -10\n    assert recursive_product([\"one\", 2, 3]) == 'oneoneoneoneoneone'\n    assert recursive_product([0, -2, 5]) == 0\n    assert recursive_product([3.5]) == 3.5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef recursive_max(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        sub_max = recursive_max(lst[1:])\n        return lst[0] if lst[0] > sub_max else sub_max"}, {"role": "assistant", "content": "def test_recursive_max():\n    assert recursive_max([1, 2, 3]) == 3\n    assert recursive_max([3, 2, 1]) == 3\n    assert recursive_max([-1, -2, -3]) == -1\n    assert recursive_max([2, 0, 4, 3]) == 4\n    assert recursive_max([5]) == 5\n    assert recursive_max([3.5, 2.5, 1.5]) == 3.5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef recursive_min(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        sub_min = recursive_min(lst[1:])\n        return lst[0] if lst[0] < sub_min else sub_min"}, {"role": "assistant", "content": "def test_recursive_min():\n    assert recursive_min([5]) == 5\n    assert recursive_min([3, 1, 4, 1, 5, 9]) == 1\n    assert recursive_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\n    assert recursive_min([0, -1, -2, -3, -4]) == -4\n    assert recursive_min([-3, -1, -4, -2, -5]) == -5\n    assert recursive_min([1, 2, 3, 4, 5]) == 1\n    assert recursive_min([100, 99, 98, 97]) == 97\n    assert recursive_min([10, 20, 30, 40]) == 10\n    assert recursive_min([42, 23, 34, 45, 56]) == 23"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_string_2(s):\n    if len(s) == 0:\n        return s\n    return s[-1] + reverse_string_2(s[:-1])"}, {"role": "assistant", "content": "def test_reverse_string_2():\n    assert reverse_string_2('') == ''\n    assert reverse_string_2('hello') == 'olleh'\n    assert reverse_string_2('python') == 'nohtyp'\n    assert reverse_string_2('a') == 'a'\n    assert reverse_string_2('racecar') == 'racecar'\n    assert reverse_string_2('level') == 'level'\n    assert reverse_string_2('12345') == '54321'\n    assert reverse_string_2('abcdefg') == 'gfedcba'\n    assert reverse_string_2('!@#$%^&*()') == ')(*&^%$#@!'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_4(s):\n    if len(s) <= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome_4(s[1:-1])"}, {"role": "assistant", "content": "def test_is_palindrome_4():\n    assert is_palindrome_4('') is True\n    assert is_palindrome_4('a') is True\n    assert is_palindrome_4('racecar') is True\n    assert is_palindrome_4('level') is True\n    assert is_palindrome_4('hello') is False\n    assert is_palindrome_4('world') is False\n    assert is_palindrome_4('madam') is True\n    assert is_palindrome_4('noon') is True\n    assert is_palindrome_4('palindrome') is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef gsd_2(a, b):\n    if b == 0:\n        return a\n    return gsd_2(b, a % b)"}, {"role": "assistant", "content": "def test_gsd_2():\n    assert gsd_2(54, 24) == 6\n    assert gsd_2(48, 18) == 6\n    assert gsd_2(101, 10) == 1\n    assert gsd_2(0, 10) == 10\n    assert gsd_2(10, 0) == 10\n    assert gsd_2(10, 5) == 5\n    assert gsd_2(7, 3) == 1\n    assert gsd_2(50, 100) == 50\n    assert gsd_2(37, 600) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_occurrences_3(lst, x):\n    if not lst:\n        return 0\n    return (1 if lst[0] == x else 0) + count_occurrences_3(lst[1:], x)"}, {"role": "assistant", "content": "def test_count_occurrences_3():\n    assert count_occurrences_3([1, 2, 3, 4, 1, 2, 1], 1) == 3\n    assert count_occurrences_3([1, 2, 3, 4, 5], 6) == 0\n    assert count_occurrences_3([1, 1, 1, 1], 1) == 4\n    assert count_occurrences_3([], 1) == 0\n    assert count_occurrences_3([2, 3, 4, 5], 1) == 0\n    assert count_occurrences_3([5, 5, 5, 5, 5], 5) == 5\n    assert count_occurrences_3([0, 0, 0, 0], 0) == 4\n    assert count_occurrences_3([-1, -1, -1], -1) == 3\n    assert count_occurrences_3([1, 2, 3], 2) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_prime_4(n, divisor=None):\n    if n <= 1:\n        return False\n    if divisor is None:\n        divisor = n - 1\n    if divisor == 1:\n        return True\n    if n % divisor == 0:\n        return False\n    return is_prime_4(n, divisor - 1)"}, {"role": "assistant", "content": "def test_is_prime_4():\n    assert is_prime_4(2) is True\n    assert is_prime_4(3) is True\n    assert is_prime_4(4) is False\n    assert is_prime_4(17) is True\n    assert is_prime_4(20) is False\n    assert is_prime_4(1) is False\n    assert is_prime_4(0) is False\n    assert is_prime_4(-5) is False\n    assert is_prime_4(23) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_in_tree(tree):\n    if tree is None:\n        return float('-inf')\n    left_max = find_max_in_tree(tree.get('left'))\n    right_max = find_max_in_tree(tree.get('right'))\n    return max(tree.get('value', float('-inf')), left_max, right_max)"}, {"role": "assistant", "content": "def test_find_max_in_tree():\n    assert find_max_in_tree({'value': 5, 'left': {'value': 3}, 'right': {'value': 7}}) == 7\n    assert find_max_in_tree({'value': 10, 'left': None, 'right': {'value': 20}}) == 20\n    assert find_max_in_tree({'value': -1, 'left': {'value': -3}, 'right': {'value': -2}}) == -1\n    assert find_max_in_tree({'value': 42}) == 42\n    assert find_max_in_tree({'value': -100, 'left': None, 'right': None}) == -100\n    assert find_max_in_tree(None) == float('-inf')\n    assert find_max_in_tree({'value': 0, 'left': {'value': -5}, 'right': {'value': 5}}) == 5\n    assert find_max_in_tree({'value': 6, 'left': {'value': 6}, 'right': {'value': 6}}) == 6\n    assert find_max_in_tree({'value': -50, 'left': {'value': -60}, 'right': {'value': -70}}) == -50"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_even_2(n):\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    return is_even_2(n - 2)"}, {"role": "assistant", "content": "def test_is_even_2():\n    assert is_even_2(0) is True\n    assert is_even_2(1) is False\n    assert is_even_2(2) is True\n    assert is_even_2(3) is False\n    assert is_even_2(4) is True\n    assert is_even_2(5) is False\n    assert is_even_2(-2) is True\n    assert is_even_2(-3) is False\n    assert is_even_2(100) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_less_than_x(lst, x):\n    if not lst:\n        return 0\n    return (lst[0] if lst[0] < x else 0) + sum_less_than_x(lst[1:], x)"}, {"role": "assistant", "content": "def test_sum_less_than_x():\n    assert sum_less_than_x([1, 2, 3, 4, 5], 3) == 3\n    assert sum_less_than_x([10, 20, 30, 40, 50], 25) == 30\n    assert sum_less_than_x([5, 5, 5, 5, 5], 10) == 25\n    assert sum_less_than_x([], 5) == 0\n    assert sum_less_than_x([1, 2, 3, 4, 5], 0) == 0\n    assert sum_less_than_x([-1, -2, -3, 4, 5], 0) == -6\n    assert sum_less_than_x([100, 200, 300], 150) == 100\n    assert sum_less_than_x([1, 1, 1, 1, 1], 2) == 5\n    assert sum_less_than_x([6, 7, 8, 9, 10], 5) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef factorial_tail(n, acc=1):\n    if n == 0 or n == 1:\n        return acc\n    return factorial_tail(n - 1, acc * n)"}, {"role": "assistant", "content": "def test_factorial_tail():\n    assert factorial_tail(5) == 120\n    assert factorial_tail(0) == 1\n    assert factorial_tail(1) == 1\n    assert factorial_tail(3) == 6\n    assert factorial_tail(4) == 24\n    assert factorial_tail(6) == 720\n    assert factorial_tail(2) == 2\n    assert factorial_tail(7) == 5040\n    assert factorial_tail(8) == 40320"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_with_step(n):\n    if n <= 0:\n        return 0\n    return n + sum_with_step(n - 2)"}, {"role": "assistant", "content": "def test_sum_with_step():\n    assert sum_with_step(10) == 30\n    assert sum_with_step(1) == 1\n    assert sum_with_step(0) == 0\n    assert sum_with_step(2) == 2\n    assert sum_with_step(3) == 4\n    assert sum_with_step(4) == 6\n    assert sum_with_step(5) == 9\n    assert sum_with_step(6) == 12\n    assert sum_with_step(7) == 16"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef fibonacci_up_to_n(n, a=0, b=1):\n    if a > n:\n        return []\n    return [a] + fibonacci_up_to_n(n, b, a + b)"}, {"role": "assistant", "content": "def test_fibonacci_up_to_n():\n    assert fibonacci_up_to_n(0) == [0]\n    assert fibonacci_up_to_n(1) == [0, 1, 1]\n    assert fibonacci_up_to_n(2) == [0, 1, 1, 2]\n    assert fibonacci_up_to_n(5) == [0, 1, 1, 2, 3, 5]\n    assert fibonacci_up_to_n(10) == [0, 1, 1, 2, 3, 5, 8]\n    assert fibonacci_up_to_n(15) == [0, 1, 1, 2, 3, 5, 8, 13]\n    assert fibonacci_up_to_n(20) == [0, 1, 1, 2, 3, 5, 8, 13]\n    assert fibonacci_up_to_n(25) == [0, 1, 1, 2, 3, 5, 8, 13, 21]\n    assert fibonacci_up_to_n(30) == [0, 1, 1, 2, 3, 5, 8, 13, 21]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible(lst, x):\n    if not lst:\n        return []\n    return ([lst[0]] if lst[0] % x == 0 else []) + find_divisible(lst[1:], x)"}, {"role": "assistant", "content": "def test_find_divisible():\n    assert find_divisible([1, 2, 3, 4, 5], 2) == [2, 4]\n    assert find_divisible([10, 20, 30, 40, 50], 10) == [10, 20, 30, 40, 50]\n    assert find_divisible([5, 7, 11], 2) == []\n    assert find_divisible([], 5) == []\n    assert find_divisible([1, 2, 3, 4, 5], 3) == [3]\n    assert find_divisible([9, 12, 15, 18, 21], 3) == [9, 12, 15, 18, 21]\n    assert find_divisible([100, 200, 300], 100) == [100, 200, 300]\n    assert find_divisible([1, 1, 1, 1], 1) == [1, 1, 1, 1]\n    assert find_divisible([6, 7, 8, 9, 10], 2) == [6, 8, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_even(lst):\n    if not lst:\n        return 0\n    return (1 if lst[0] % 2 == 0 else 0) + count_even(lst[1:])"}, {"role": "assistant", "content": "def test_count_even():\n    assert count_even([1, 2, 3, 4, 5]) == 2\n    assert count_even([10, 20, 30, 40, 50]) == 5\n    assert count_even([5, 7, 11]) == 0\n    assert count_even([5]) == 0\n    assert count_even([1, 3, 5, 7, 9]) == 0\n    assert count_even([2, 4, 6, 8, 10]) == 5\n    assert count_even([100, 200, 300]) == 3\n    assert count_even([0, 0, 0, 0]) == 4\n    assert count_even([-2, -4, -6]) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_negatives(lst):\n    if not lst:\n        return 0\n    return (1 if lst[0] < 0 else 0) + count_negatives(lst[1:])"}, {"role": "assistant", "content": "def test_count_negatives():\n    assert count_negatives([-1, -2, -3, 4, 5]) == 3\n    assert count_negatives([-10, -20, -30, -40, -50]) == 5\n    assert count_negatives([5, 7, 11]) == 0\n    assert count_negatives([]) == 0\n    assert count_negatives([1, 2, 3, 4, 5]) == 0\n    assert count_negatives([-1, -2, -3, -4, -5]) == 5\n    assert count_negatives([-100, -200, -300]) == 3\n    assert count_negatives([0, 0, 0, 0]) == 0\n    assert count_negatives([-2, -4, 6, 8, 10]) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef greater_than_average_3(lst, avg=None):\n    if not lst:\n        return []\n    if avg is None:\n        avg = sum(lst) / len(lst)\n    return ([lst[0]] if lst[0] > avg else []) + greater_than_average_3(lst[1:], avg)"}, {"role": "assistant", "content": "def test_greater_than_average_3():\n    assert greater_than_average_3([1, 2, 3, 4, 5]) == [4, 5]\n    assert greater_than_average_3([10, 20, 30, 40, 50]) == [40, 50]\n    assert greater_than_average_3([5, 7, 11, 13, 15]) == [11, 13, 15]\n    assert greater_than_average_3([]) == []\n    assert greater_than_average_3([1, 2, 3, 4]) == [3, 4]\n    assert greater_than_average_3([10, 20, 30]) == [30]\n    assert greater_than_average_3([0, 1, 2, 3]) == [2, 3]\n    assert greater_than_average_3([-1, -2, -3, 0]) == [-1, 0]\n    assert greater_than_average_3([6, 7, 8, 9, 10]) == [9, 10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_greater_than_x(lst, x):\n    if not lst:\n        return 0\n    return (lst[0] if lst[0] > x else 0) + sum_greater_than_x(lst[1:], x)"}, {"role": "assistant", "content": "def test_sum_greater_than_x():\n    assert sum_greater_than_x([1, 2, 3, 4, 5], 3) == 9\n    assert sum_greater_than_x([10, 20, 30, 40, 50], 25) == 120\n    assert sum_greater_than_x([5, 5, 5, 5, 5], 10) == 0\n    assert sum_greater_than_x([], 5) == 0\n    assert sum_greater_than_x([1, 2, 3, 4, 5], 5) == 0\n    assert sum_greater_than_x([-1, -2, -3, 4, 5], 0) == 9\n    assert sum_greater_than_x([100, 200, 300], 150) == 500\n    assert sum_greater_than_x([1, 1, 1, 1, 1], 2) == 0\n    assert sum_greater_than_x([6, 7, 8, 9, 10], 5) == 40"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef string_length(s):\n    if s == \"\":\n        return 0\n    return 1 + string_length(s[1:])"}, {"role": "assistant", "content": "def test_string_length():\n    assert string_length(\"\") == 0\n    assert string_length(\"hello\") == 5\n    assert string_length(\"a\") == 1\n    assert string_length(\"Python\") == 6\n    assert string_length(\"length\") == 6\n    assert string_length(\"test\") == 4\n    assert string_length(\"pytest\") == 6\n    assert string_length(\"recursion\") == 9\n    assert string_length(\"1234567890\") == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_evens_in_range(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1 + count_evens_in_range(n - 1)\n    return count_evens_in_range(n - 1)"}, {"role": "assistant", "content": "def test_count_evens_in_range():\n    assert count_evens_in_range(0) == 0\n    assert count_evens_in_range(1) == 0\n    assert count_evens_in_range(2) == 1\n    assert count_evens_in_range(3) == 1\n    assert count_evens_in_range(4) == 2\n    assert count_evens_in_range(5) == 2\n    assert count_evens_in_range(6) == 3\n    assert count_evens_in_range(10) == 5\n    assert count_evens_in_range(15) == 7"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_in_range(lst, low, high):\n    if not lst:\n        return 0\n    return (lst[0] if low <= lst[0] <= high else 0) + sum_in_range(lst[1:], low, high)"}, {"role": "assistant", "content": "def test_sum_in_range():\n    assert sum_in_range([1, 2, 3, 4, 5], 2, 4) == 9\n    assert sum_in_range([10, 20, 30, 40, 50], 15, 35) == 50\n    assert sum_in_range([5, 5, 5, 5, 5], 5, 5) == 25\n    assert sum_in_range([], 5, 10) == 0\n    assert sum_in_range([1, 2, 3, 4, 5], 0, 2) == 3\n    assert sum_in_range([1, 2, 3, 4, 5], 4, 6) == 9\n    assert sum_in_range([1, 2, 3, 4, 5], 10, 20) == 0\n    assert sum_in_range([1, 5, 9, 13, 17], 5, 15) == 27\n    assert sum_in_range([-1, -2, -3, 4, 5], -3, 3) == -6"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef product_less_than_x(lst, x):\n    if not lst:\n        return 1\n    return (lst[0] if lst[0] < x else 1) * product_less_than_x(lst[1:], x)"}, {"role": "assistant", "content": "def test_product_less_than_x():\n    assert product_less_than_x([2, 3, 4], 3) == 2\n    assert product_less_than_x([1, 2, 3, 4], 5) == 24\n    assert product_less_than_x([], 5) == 1\n    assert product_less_than_x([5, 6, 7], 5) == 1\n    assert product_less_than_x([1, 2, 0, 4], 5) == 0\n    assert product_less_than_x([2, 3, 4], 2) == 1\n    assert product_less_than_x([4, 5, 6, 1], 4) == 1\n    assert product_less_than_x([-1, -2, -3], 0) == -6\n    assert product_less_than_x([4, 0, 3], 1) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_numbers_in_string(s, current_num=None):\n    if s == \"\":\n        return 0\n    if current_num is None:\n        current_num = \"\"\n    if s[0].isdigit():\n        current_num += s[0]\n    elif current_num:\n        return int(current_num) + sum_of_numbers_in_string(s[1:], current_num)\n    return sum_of_numbers_in_string(s[1:], current_num)"}, {"role": "assistant", "content": "def test_sum_of_numbers_in_string():\n    assert sum_of_numbers_in_string(\"123abc\") == 369\n    assert sum_of_numbers_in_string(\"abc123\") == 0\n    assert sum_of_numbers_in_string(\"abc123def\") == 369\n    assert sum_of_numbers_in_string(\"123abc456\") == 369\n    assert sum_of_numbers_in_string(\"\") == 0\n    assert sum_of_numbers_in_string(\"abc\") == 0\n    assert sum_of_numbers_in_string(\"12a34b56\") == 1246\n    assert sum_of_numbers_in_string(\"0\") == 0\n    assert sum_of_numbers_in_string(\"1a1b1c\") == 123"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef even_numbers_in_string(s, current_num=None):\n    if s == \"\":\n        return []\n    if current_num is None:\n        current_num = \"\"\n    if s[0].isdigit():\n        current_num += s[0]\n    elif current_num:\n        num = int(current_num)\n        if num % 2 == 0:\n            return [num] + even_numbers_in_string(s[1:], current_num)\n        return even_numbers_in_string(s[1:], current_num)\n    return even_numbers_in_string(s[1:], current_num)"}, {"role": "assistant", "content": "def test_even_numbers_in_string():\n    assert even_numbers_in_string(\"1234\") == []\n    assert even_numbers_in_string(\"abc\") == []\n    assert even_numbers_in_string(\"2468\") == []\n    assert even_numbers_in_string(\"1357\") == []\n    assert even_numbers_in_string(\"1a2b3c4d\") == [12, 1234]\n    assert even_numbers_in_string(\"abcdefg\") == []\n    assert even_numbers_in_string(\"0\") == []\n    assert even_numbers_in_string(\"a1b2c3d4\") == [12]\n    assert even_numbers_in_string(\"123456\") == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef append_to_ring(arr, element, max_size=10):\n    if len(arr) >= max_size:\n        arr.pop(0)\n    arr.append(element)\n    if len(arr) > max_size:\n        arr = arr[1:]\n    return arr"}, {"role": "assistant", "content": "def test_append_to_ring():\n    assert append_to_ring([1, 2, 3], 4) == [1, 2, 3, 4]\n    assert append_to_ring([1, 2, 3, 4, 5], 6, 5) == [2, 3, 4, 5, 6]\n    assert append_to_ring([], 1, 3) == [1]\n    assert append_to_ring([1, 2, 3, 4], 5, 3) == [3, 4, 5]\n    assert append_to_ring([1, 2], 3) == [1, 2, 3]\n    assert append_to_ring([1, 2, 3], 4, 3) == [2, 3, 4]\n    assert append_to_ring([1], 2, 1) == [2]\n    assert append_to_ring([1, 2], 3, 1) == [3]\n    assert append_to_ring([1, 2], 3, 2) == [2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_ring(arr, element):\n    if not arr:\n        return None\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return None"}, {"role": "assistant", "content": "def test_find_in_ring():\n    assert find_in_ring([1, 2, 3], 2) == 1\n    assert find_in_ring([1, 2, 3], 4) is None\n    assert find_in_ring([], 1) is None\n    assert find_in_ring([1, 2, 3, 1], 1) == 0\n    assert find_in_ring([1, 2, 3, 4, 5], 5) == 4\n    assert find_in_ring([1, 2, 3, 4, 5], 6) is None\n    assert find_in_ring([1, 1, 1, 1], 1) == 0\n    assert find_in_ring([1, 2, 3], 1) == 0\n    assert find_in_ring([1, 2, 3], 3) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_in_ring(arr, element):\n    if not arr:\n        return []\n    indices = []\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == element:\n            indices.append(i)\n    return indices"}, {"role": "assistant", "content": "def test_find_all_in_ring():\n    assert find_all_in_ring([1, 2, 3, 1], 1) == [0, 3]\n    assert find_all_in_ring([1, 2, 3], 4) == []\n    assert find_all_in_ring([], 1) == []\n    assert find_all_in_ring([1, 2, 3, 1, 2, 3], 2) == [1, 4]\n    assert find_all_in_ring([1, 1, 1, 1], 1) == [0, 1, 2, 3]\n    assert find_all_in_ring([1, 2, 3, 4, 5], 5) == [4]\n    assert find_all_in_ring([1, 2, 3, 4, 5], 6) == []\n    assert find_all_in_ring([1, 2, 3, 3], 3) == [2, 3]\n    assert find_all_in_ring([1, 2, 3, 3], 1) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef rotate_with_negativity(arr, steps):\n    if not arr:\n        return arr\n    n = len(arr)\n    if steps == 0:\n        return arr\n    if steps < 0:\n        steps = steps % n\n        rotated = arr[steps:] + arr[:steps]\n    else:\n        steps = steps % n\n        rotated = arr[-steps:] + arr[:-steps]\n    return rotated"}, {"role": "assistant", "content": "def test_rotate_with_negativity():\n    assert rotate_with_negativity([1, 2, 3], 1) == [3, 1, 2]\n    assert rotate_with_negativity([1, 2, 3], -1) == [3, 1, 2]\n    assert rotate_with_negativity([], 1) == []\n    assert rotate_with_negativity([1, 2, 3, 4], 2) == [3, 4, 1, 2]\n    assert rotate_with_negativity([1, 2, 3], 3) == [1, 2, 3]\n    assert rotate_with_negativity([1, 2, 3], 0) == [1, 2, 3]\n    assert rotate_with_negativity([1, 2, 3], -3) == [1, 2, 3]\n    assert rotate_with_negativity([1, 2, 3], -2) == [2, 3, 1]\n    assert rotate_with_negativity([1, 2, 3, 4], -1) == [4, 1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef increase_ring_elements(arr, value):\n    if not arr:\n        return arr\n    return [x + value for x in arr]"}, {"role": "assistant", "content": "def test_increase_ring_elements():\n    assert increase_ring_elements([1, 2, 3], 1) == [2, 3, 4]\n    assert increase_ring_elements([], 1) == []\n    assert increase_ring_elements([0], 1) == [1]\n    assert increase_ring_elements([1, 2, 3], -1) == [0, 1, 2]\n    assert increase_ring_elements([1, 2, 3], 0) == [1, 2, 3]\n    assert increase_ring_elements([1, 2, 3], 2) == [3, 4, 5]\n    assert increase_ring_elements([1, -2, 3], 1) == [2, -1, 4]\n    assert increase_ring_elements([-1, -2, -3], 1) == [0, -1, -2]\n    assert increase_ring_elements([1, 1, 1], 1) == [2, 2, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef decrease_ring_elements(arr, value):\n    if not arr:\n        return arr\n    return [x - value for x in arr]"}, {"role": "assistant", "content": "def test_decrease_ring_elements():\n    assert decrease_ring_elements([1, 2, 3], 1) == [0, 1, 2]\n    assert decrease_ring_elements([], 1) == []\n    assert decrease_ring_elements([0], 1) == [-1]\n    assert decrease_ring_elements([1, 2, 3], -1) == [2, 3, 4]\n    assert decrease_ring_elements([1, 2, 3], 0) == [1, 2, 3]\n    assert decrease_ring_elements([1, 2, 3], 2) == [-1, 0, 1]\n    assert decrease_ring_elements([1, -2, 3], 1) == [0, -3, 2]\n    assert decrease_ring_elements([-1, -2, -3], 1) == [-2, -3, -4]\n    assert decrease_ring_elements([1, 1, 1], 1) == [0, 0, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_ring_elements(arr, value):\n    if not arr:\n        return arr\n    return [x * value for x in arr]"}, {"role": "assistant", "content": "def test_multiply_ring_elements():\n    assert multiply_ring_elements([1, 2, 3], 2) == [2, 4, 6]\n    assert multiply_ring_elements([], 2) == []\n    assert multiply_ring_elements([0], 2) == [0]\n    assert multiply_ring_elements([1, 2, 3], 0) == [0, 0, 0]\n    assert multiply_ring_elements([1, 2, 3], -1) == [-1, -2, -3]\n    assert multiply_ring_elements([1, -2, 3], 2) == [2, -4, 6]\n    assert multiply_ring_elements([-1, -2, -3], 2) == [-2, -4, -6]\n    assert multiply_ring_elements([1, 1, 1], 2) == [2, 2, 2]\n    assert multiply_ring_elements([1, 2, 3], 1) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_ring(arr):\n    if not arr:\n        return 0\n    return sum(arr)"}, {"role": "assistant", "content": "def test_sum_ring():\n    assert sum_ring([1, 2, 3]) == 6\n    assert sum_ring([]) == 0\n    assert sum_ring([0]) == 0\n    assert sum_ring([-1, -2, -3]) == -6\n    assert sum_ring([1, -1, 2, -2]) == 0\n    assert sum_ring([5, 5, 5, 5]) == 20\n    assert sum_ring([10]) == 10\n    assert sum_ring([-1, -1, 1, 1]) == 0\n    assert sum_ring([1, 2, 3, 4, 5]) == 15"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef average_ring(arr):\n    if not arr:\n        return None\n    return sum(arr) / len(arr)"}, {"role": "assistant", "content": "def test_average_ring():\n    assert average_ring([1, 2, 3]) == 2\n    assert average_ring([]) is None\n    assert average_ring([0]) == 0\n    assert average_ring([-1, -2, -3]) == -2\n    assert average_ring([1, -1, 2, -2]) == 0\n    assert average_ring([5, 5, 5, 5]) == 5\n    assert average_ring([10]) == 10\n    assert average_ring([-1, -1, 1, 1]) == 0\n    assert average_ring([1, 2, 3, 4, 5]) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_ring(arr):\n    if not arr:\n        return None\n    return max(arr)"}, {"role": "assistant", "content": "def test_max_ring():\n    assert max_ring([1, 2, 3]) == 3\n    assert max_ring([]) is None\n    assert max_ring([0]) == 0\n    assert max_ring([-1, -2, -3]) == -1\n    assert max_ring([1, -1, 2, -2]) == 2\n    assert max_ring([5, 5, 5, 5]) == 5\n    assert max_ring([10]) == 10\n    assert max_ring([-1, -1, 1, 1]) == 1\n    assert max_ring([1, 2, 3, 4, 5]) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef min_ring(arr):\n    if not arr:\n        return None\n    return min(arr)"}, {"role": "assistant", "content": "def test_min_ring():\n    assert min_ring([1, 2, 3]) == 1\n    assert min_ring([]) is None\n    assert min_ring([0]) == 0\n    assert min_ring([-1, -2, -3]) == -3\n    assert min_ring([1, -1, 2, -2]) == -2\n    assert min_ring([5, 5, 5, 5]) == 5\n    assert min_ring([10]) == 10\n    assert min_ring([-1, -1, 1, 1]) == -1\n    assert min_ring([1, 2, 3, 4, 5]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef has_positive_ring(arr):\n    if not arr:\n        return False\n    for x in arr:\n        if x > 0:\n            return True\n    return False"}, {"role": "assistant", "content": "def test_has_positive_ring():\n    assert has_positive_ring([1, 2, 3]) is True\n    assert has_positive_ring([]) is False\n    assert has_positive_ring([0]) is False\n    assert has_positive_ring([-1, -2, -3]) is False\n    assert has_positive_ring([1, -1, 2, -2]) is True\n    assert has_positive_ring([5, 5, 5, 5]) is True\n    assert has_positive_ring([10]) is True\n    assert has_positive_ring([-1, -1, -1, -1]) is False\n    assert has_positive_ring([1, 2, 3, 4, 5]) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef has_negative_ring(arr):\n    if not arr:\n        return False\n    for x in arr:\n        if x < 0:\n            return True\n    return False"}, {"role": "assistant", "content": "def test_has_negative_ring():\n    assert has_negative_ring([1, 2, 3]) is False\n    assert has_negative_ring([]) is False\n    assert has_negative_ring([0]) is False\n    assert has_negative_ring([-1, -2, -3]) is True\n    assert has_negative_ring([1, -1, 2, -2]) is True\n    assert has_negative_ring([5, 5, 5, 5]) is False\n    assert has_negative_ring([10]) is False\n    assert has_negative_ring([-1, -1, -1, -1]) is True\n    assert has_negative_ring([1, 2, 3, 4, 5]) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_even_index_elements(arr):\n    if not arr:\n        return arr\n    n = len(arr)\n    result = arr[:]\n    for i in range(0, n, 2):\n        result[i] = arr[n - 1 - i]\n    return result"}, {"role": "assistant", "content": "def test_reverse_even_index_elements():\n    assert reverse_even_index_elements([1, 2, 3, 4]) == [4, 2, 2, 4]\n    assert reverse_even_index_elements([]) == []\n    assert reverse_even_index_elements([0]) == [0]\n    assert reverse_even_index_elements([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\n    assert reverse_even_index_elements([1, -1, 2, -2]) == [-2, -1, -1, -2]\n    assert reverse_even_index_elements([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert reverse_even_index_elements([10]) == [10]\n    assert reverse_even_index_elements([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\n    assert reverse_even_index_elements([1, 2, 3, 4, 5, 6]) == [6, 2, 4, 4, 2, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_ring(arr):\n    if not arr:\n        return []\n    return [x for x in arr if x % 2 == 0]"}, {"role": "assistant", "content": "def test_find_even_ring():\n    assert find_even_ring([1, 2, 3, 4]) == [2, 4]\n    assert find_even_ring([]) == []\n    assert find_even_ring([0]) == [0]\n    assert find_even_ring([1, 3, 5]) == []\n    assert find_even_ring([2, 4, 6]) == [2, 4, 6]\n    assert find_even_ring([-2, -4, -6]) == [-2, -4, -6]\n    assert find_even_ring([-1, -3, -5]) == []\n    assert find_even_ring([1, 2, 3, 4, 5]) == [2, 4]\n    assert find_even_ring([2, 2, 2, 2]) == [2, 2, 2, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_ring(arr):\n    if not arr:\n        return []\n    return [x for x in arr if x % 2 != 0]"}, {"role": "assistant", "content": "def test_find_odd_ring():\n    assert find_odd_ring([1, 2, 3, 4]) == [1, 3]\n    assert find_odd_ring([]) == []\n    assert find_odd_ring([0]) == []\n    assert find_odd_ring([1, 3, 5]) == [1, 3, 5]\n    assert find_odd_ring([2, 4, 6]) == []\n    assert find_odd_ring([-2, -4, -6]) == []\n    assert find_odd_ring([-1, -3, -5]) == [-1, -3, -5]\n    assert find_odd_ring([1, 2, 3, 4, 5]) == [1, 3, 5]\n    assert find_odd_ring([2, 2, 2, 2]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_even_ring(arr):\n    if not arr:\n        return 0\n    return sum(1 for x in arr if x % 2 == 0)"}, {"role": "assistant", "content": "def test_count_even_ring():\n    assert count_even_ring([1, 2, 3, 4]) == 2\n    assert count_even_ring([]) == 0\n    assert count_even_ring([0]) == 1\n    assert count_even_ring([1, 3, 5]) == 0\n    assert count_even_ring([2, 4, 6]) == 3\n    assert count_even_ring([-2, -4, -6]) == 3\n    assert count_even_ring([-1, -3, -5]) == 0\n    assert count_even_ring([1, 2, 3, 4, 5]) == 2\n    assert count_even_ring([2, 2, 2, 2]) == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_odd_ring(arr):\n    if not arr:\n        return 0\n    return sum(1 for x in arr if x % 2 != 0)"}, {"role": "assistant", "content": "def test_count_odd_ring():\n    assert count_odd_ring([]) == 0\n    assert count_odd_ring([1, 2, 3, 4, 5]) == 3\n    assert count_odd_ring([2, 4, 6, 8]) == 0\n    assert count_odd_ring([1, 3, 5, 7]) == 4\n    assert count_odd_ring([0, 1, -1, -2]) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef append_unique_ring(arr, element):\n    if element not in arr:\n        arr.append(element)\n    return arr"}, {"role": "assistant", "content": "def test_append_unique_ring():\n    assert append_unique_ring([], 1) == [1]\n    assert append_unique_ring([1, 2, 3], 2) == [1, 2, 3]\n    assert append_unique_ring([1, 2, 3], 4) == [1, 2, 3, 4]\n    assert append_unique_ring(['a', 'b'], 'a') == ['a', 'b']\n    assert append_unique_ring(['a', 'b'], 'c') == ['a', 'b', 'c']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_ring(arr, x):\n    if not arr:\n        return []\n    return [el for el in arr if el % x == 0]"}, {"role": "assistant", "content": "def test_find_divisible_ring():\n    assert find_divisible_ring([], 2) == []\n    assert find_divisible_ring([1, 2, 3, 4, 5, 6], 2) == [2, 4, 6]\n    assert find_divisible_ring([1, 3, 5], 2) == []\n    assert find_divisible_ring([10, 20, 30], 10) == [10, 20, 30]\n    assert find_divisible_ring([10, 25, 35], 5) == [10, 25, 35]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_less_than_ring(arr, threshold):\n    if not arr:\n        return arr\n    return [x for x in arr if x >= threshold]"}, {"role": "assistant", "content": "def test_remove_less_than_ring():\n    assert remove_less_than_ring([], 10) == []\n    assert remove_less_than_ring([1, 5, 10, 15], 10) == [10, 15]\n    assert remove_less_than_ring([20, 25, 30], 20) == [20, 25, 30]\n    assert remove_less_than_ring([1, 2, 3], 5) == []\n    assert remove_less_than_ring([5, 5, 5], 5) == [5, 5, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_greater_than_ring(arr, threshold):\n    if not arr:\n        return arr\n    return [x for x in arr if x <= threshold]"}, {"role": "assistant", "content": "def test_remove_greater_than_ring():\n    assert remove_greater_than_ring([], 10) == []\n    assert remove_greater_than_ring([1, 5, 10, 15], 10) == [1, 5, 10]\n    assert remove_greater_than_ring([20, 25, 30], 20) == [20]\n    assert remove_greater_than_ring([1, 2, 3], 5) == [1, 2, 3]\n    assert remove_greater_than_ring([5, 5, 5], 5) == [5, 5, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef string_to_list(s):\n    if s == \"\":\n        return []\n    return list(s)"}, {"role": "assistant", "content": "def test_string_to_list():\n    assert string_to_list(\"\") == []\n    assert string_to_list(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n    assert string_to_list(\"12345\") == ['1', '2', '3', '4', '5']\n    assert string_to_list(\" \") == [' ']\n    assert string_to_list(\"!@#\") == ['!', '@', '#']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_unique_lists(list1, list2):\n    return sorted(list(set(list1 + list2)))"}, {"role": "assistant", "content": "def test_merge_unique_lists():\n    assert merge_unique_lists([], []) == []\n    assert merge_unique_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert merge_unique_lists([1, 1, 2], [2, 3, 3]) == [1, 2, 3]\n    assert merge_unique_lists(['a', 'b'], ['b', 'c']) == ['a', 'b', 'c']\n    assert merge_unique_lists([1, 2, 3], []) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef set_from_strings_ignore_case(strings):\n    return sorted({s.lower() for s in strings})"}, {"role": "assistant", "content": "def test_set_from_strings_ignore_case():\n    assert set_from_strings_ignore_case([]) == []\n    assert set_from_strings_ignore_case([\"a\", \"A\", \"b\", \"B\"]) == ['a', 'b']\n    assert set_from_strings_ignore_case([\"abc\", \"ABC\"]) == ['abc']\n    assert set_from_strings_ignore_case([\"hello\", \"HELLO\", \"Hello\"]) == ['hello']\n    assert set_from_strings_ignore_case([\"a\"]) == ['a']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count"}, {"role": "assistant", "content": "def test_count_characters():\n    assert count_characters(\"\") == {}\n    assert count_characters(\"aabbcc\") == {'a': 2, 'b': 2, 'c': 2}\n    assert count_characters(\"aabbc\") == {'a': 2, 'b': 2, 'c': 1}\n    assert count_characters(\"abc\") == {'a': 1, 'b': 1, 'c': 1}\n    assert count_characters(\"aaa\") == {'a': 3}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_5(s):\n    cleaned = ''.join(e for e in s if e.isalnum()).lower()\n    return cleaned == cleaned[::-1]"}, {"role": "assistant", "content": "def test_is_palindrome_5():\n    assert is_palindrome_5(\"racecar\") is True\n    assert is_palindrome_5(\"RaceCar\") is True\n    assert is_palindrome_5(\"hello\") is False\n    assert is_palindrome_5(\"A man, a plan, a canal, Panama\") is True\n    assert is_palindrome_5(\"\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef factorial_4(n):\n    if n == 0:\n        return 1\n    return n * factorial_4(n - 1)"}, {"role": "assistant", "content": "def test_factorial_4():\n    assert factorial_4(0) == 1\n    assert factorial_4(1) == 1\n    assert factorial_4(2) == 2\n    assert factorial_4(3) == 6\n    assert factorial_4(5) == 120\n    assert factorial_4(10) == 3628800\n    assert factorial_4(4) == 24"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_word_occurrences(text, word):\n    words = text.split()\n    count = 0\n    for w in words:\n        if w == word:\n            count += 1\n    return count"}, {"role": "assistant", "content": "def test_count_word_occurrences():\n    assert count_word_occurrences(\"\", \"word\") == 0\n    assert count_word_occurrences(\"word\", \"word\") == 1\n    assert count_word_occurrences(\"word word\", \"word\") == 2\n    assert count_word_occurrences(\"word word notword\", \"word\") == 2\n    assert count_word_occurrences(\"notword\", \"word\") == 0\n    assert count_word_occurrences(\"a b c d\", \"a\") == 1\n    assert count_word_occurrences(\"a a a a\", \"a\") == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_numeric_strings(strings):\n    return [s for s in strings if s.isdigit()]"}, {"role": "assistant", "content": "def test_filter_numeric_strings():\n    assert filter_numeric_strings([]) == []\n    assert filter_numeric_strings([\"123\", \"abc\", \"456\", \"78a\"]) == [\"123\", \"456\"]\n    assert filter_numeric_strings([\"12\", \"12b\", \"c34\", \"56\"]) == [\"12\", \"56\"]\n    assert filter_numeric_strings([\"one\", \"two\", \"three\"]) == []\n    assert filter_numeric_strings([\"0\", \"1\", \"2\"]) == [\"0\", \"1\", \"2\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef closest_number(arr, num):\n    if not arr:\n        return None\n    closest = arr[0]\n    for x in arr:\n        if abs(x - num) < abs(closest - num):\n            closest = x\n    return closest"}, {"role": "assistant", "content": "def test_closest_number():\n    assert closest_number([], 10) is None\n    assert closest_number([10, 20, 30], 25) == 20\n    assert closest_number([1, 2, 3, 4, 5], 3) == 3\n    assert closest_number([1, 2, 3, 4, 5], 6) == 5\n    assert closest_number([-1, -2, -3, -4, -5], -3) == -3\n    assert closest_number([7, 14, 21], 18) == 21"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sort_dicts_by_key(lst, key):\n    return sorted(lst, key=lambda x: x.get(key, 0))"}, {"role": "assistant", "content": "def test_sort_dicts_by_key():\n    assert sort_dicts_by_key([], 'key') == []\n    assert sort_dicts_by_key([{'key': 2}, {'key': 1}], 'key') == [{'key': 1}, {'key': 2}]\n    assert sort_dicts_by_key([{'key': 3}, {'key': 2}, {'key': 1}], 'key') == [{'key': 1}, {'key': 2}, {'key': 3}]\n    assert sort_dicts_by_key([{'a': 3}, {'a': 2}, {'a': 1}], 'a') == [{'a': 1}, {'a': 2}, {'a': 3}]\n    assert sort_dicts_by_key([{'b': 1}, {'a': 2}], 'a') == [{'b': 1}, {'a': 2}]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef gcd_5(a, b):\n    while b:\n        a, b = b, a % b\n    return a"}, {"role": "assistant", "content": "def test_gcd_5():\n    assert gcd_5(10, 5) == 5\n    assert gcd_5(20, 8) == 4\n    assert gcd_5(100, 10) == 10\n    assert gcd_5(42, 56) == 14\n    assert gcd_5(9, 3) == 3\n    assert gcd_5(17, 13) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef average_6(numbers):\n    if not numbers:\n        return None\n    return sum(numbers) / len(numbers)"}, {"role": "assistant", "content": "def test_average_6():\n    assert average_6([]) is None\n    assert average_6([1, 2, 3]) == 2\n    assert average_6([10, 20, 30]) == 20\n    assert average_6([5, 15, 25, 35]) == 20\n    assert average_6([-1, -2, -3]) == -2\n    assert average_6([0]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef alternate_case(s):\n    return ''.join([c.upper() if i % 2 == 0 else c.lower() for i, c in enumerate(s)])"}, {"role": "assistant", "content": "def test_alternate_case():\n    assert alternate_case(\"\") == \"\"\n    assert alternate_case(\"hello\") == \"HeLlO\"\n    assert alternate_case(\"HELLO\") == \"HeLlO\"\n    assert alternate_case(\"12345\") == \"12345\"\n    assert alternate_case(\"hElLo WoRlD\") == 'HeLlO WoRlD'\n    assert alternate_case(\"abc\") == \"AbC\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_elements(arr):\n    counts = {}\n    for el in arr:\n        counts[el] = counts.get(el, 0) + 1\n    return counts"}, {"role": "assistant", "content": "def test_count_elements():\n    assert count_elements([]) == {}\n    assert count_elements([1, 1, 2, 2, 2, 3]) == {1: 2, 2: 3, 3: 1}\n    assert count_elements(['a', 'b', 'a', 'a', 'c']) == {'a': 3, 'b': 1, 'c': 1}\n    assert count_elements([0, 1, 0, 1, 0, 1]) == {0: 3, 1: 3}\n    assert count_elements(['apple', 'banana', 'apple']) == {'apple': 2, 'banana': 1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef list_to_string(lst, separator=\",\"):\n    return separator.join(map(str, lst))"}, {"role": "assistant", "content": "def test_list_to_string():\n    assert list_to_string([], \",\") == \"\"\n    assert list_to_string([1, 2, 3], \",\") == \"1,2,3\"\n    assert list_to_string([\"a\", \"b\", \"c\"], \"-\") == \"a-b-c\"\n    assert list_to_string([1, 2, 3], \" \") == \"1 2 3\"\n    assert list_to_string([\"apple\", \"banana\"], \" and \") == \"apple and banana\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_elements_6(arr):\n    seen = set()\n    result = []\n    for el in arr:\n        if el not in seen:\n            result.append(el)\n            seen.add(el)\n    return result"}, {"role": "assistant", "content": "def test_unique_elements_6():\n    assert unique_elements_6([1, 2, 2, 3, 1, 4]) == [1, 2, 3, 4]\n    assert unique_elements_6([1, 1, 1, 1]) == [1]\n    assert unique_elements_6([]) == []\n    assert unique_elements_6([5, 5, 6, 6, 7]) == [5, 6, 7]\n    assert unique_elements_6([10, 20, 10, 30, 20]) == [10, 20, 30]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_word_in_text(text, word):\n    index = text.find(word)\n    if index != -1:\n        return f\"Word found at index {index}\"\n    return \"Word not found\""}, {"role": "assistant", "content": "def test_find_word_in_text():\n    assert find_word_in_text(\"Hello world\", \"world\") == \"Word found at index 6\"\n    assert find_word_in_text(\"Hello world\", \"hi\") == \"Word not found\"\n    assert find_word_in_text(\"\", \"anything\") == \"Word not found\"\n    assert find_word_in_text(\"Testing the function\", \"function\") == 'Word found at index 12'\n    assert find_word_in_text(\"Multiple words here\", \"words\") == \"Word found at index 9\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_number_5(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"}, {"role": "assistant", "content": "def test_is_number_5():\n    assert is_number_5(\"123\") is True\n    assert is_number_5(\"123.45\") is True\n    assert is_number_5(\"abc\") is False\n    assert is_number_5(\"\") is False\n    assert is_number_5(\"123abc\") is False\n    assert is_number_5(\"-123.45\") is True\n    assert is_number_5(\"0\") is True\n    assert is_number_5(\".5\") is True\n    assert is_number_5(\"-.5\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_dicts_6(dict1, dict2):\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result"}, {"role": "assistant", "content": "def test_merge_dicts_6():\n    assert merge_dicts_6({1: 10, 2: 20}, {2: 30, 3: 40}) == {1: 10, 2: 50, 3: 40}\n    assert merge_dicts_6({}, {2: 20}) == {2: 20}\n    assert merge_dicts_6({1: 10}, {}) == {1: 10}\n    assert merge_dicts_6({1: 10}, {1: 5}) == {1: 15}\n    assert merge_dicts_6({1: 10, 4: 40}, {4: 10, 5: 50}) == {1: 10, 4: 50, 5: 50}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef even_index_elements(arr):\n    return [arr[i] for i in range(0, len(arr), 2)]"}, {"role": "assistant", "content": "def test_even_index_elements():\n    assert even_index_elements([1, 2, 3, 4, 5]) == [1, 3, 5]\n    assert even_index_elements([0, 2, 4, 6, 8]) == [0, 4, 8]\n    assert even_index_elements([\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"c\"]\n    assert even_index_elements([]) == []\n    assert even_index_elements([7]) == [7]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef invert_dict(d):\n    return {v: k for k, v in d.items()}"}, {"role": "assistant", "content": "def test_invert_dict():\n    assert invert_dict({1: \"a\", 2: \"b\", 3: \"c\"}) == {\"a\": 1, \"b\": 2, \"c\": 3}\n    assert invert_dict({\"x\": 10, \"y\": 20}) == {10: \"x\", 20: \"y\"}\n    assert invert_dict({}) == {}\n    assert invert_dict({1: 1, 2: 2}) == {1: 1, 2: 2}\n    assert invert_dict({\"key\": \"value\"}) == {\"value\": \"key\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_sorted_lists_5(list1, list2):\n    merged = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    merged.extend(list1[i:])\n    merged.extend(list2[j:])\n    return merged"}, {"role": "assistant", "content": "def test_merge_sorted_lists_5():\n    assert merge_sorted_lists_5([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n    assert merge_sorted_lists_5([], [2, 4, 6]) == [2, 4, 6]\n    assert merge_sorted_lists_5([1, 3, 5], []) == [1, 3, 5]\n    assert merge_sorted_lists_5([1], [2]) == [1, 2]\n    assert merge_sorted_lists_5([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_second_char(s):\n    return ''.join([c if i % 2 == 0 else '*' for i, c in enumerate(s)])"}, {"role": "assistant", "content": "def test_replace_second_char():\n    assert replace_second_char(\"abcdef\") == \"a*c*e*\"\n    assert replace_second_char(\"123456\") == \"1*3*5*\"\n    assert replace_second_char(\"a\") == \"a\"\n    assert replace_second_char(\"\") == \"\"\n    assert replace_second_char(\"!\") == \"!\"\n    assert replace_second_char(\"hello world\") == \"h*l*o*w*r*d\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef unique_numbers_and_sum(lst):\n    seen = set()\n    unique_numbers = []\n    for num in lst:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n    total = sum(unique_numbers)\n    return unique_numbers, total"}, {"role": "assistant", "content": "def test_unique_numbers_and_sum():\n    assert unique_numbers_and_sum([1, 2, 2, 3, 1, 4]) == ([1, 2, 3, 4], 10)\n    assert unique_numbers_and_sum([1, 1, 1, 1]) == ([1], 1)\n    assert unique_numbers_and_sum([]) == ([], 0)\n    assert unique_numbers_and_sum([5, 5, 6, 6, 7]) == ([5, 6, 7], 18)\n    assert unique_numbers_and_sum([10, 20, 10, 30, 20]) == ([10, 20, 30], 60)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_valid_email_2(email):\n    if \"@\" not in email or \".\" not in email:\n        return False\n    username, domain = email.split(\"@\", 1)\n    if not username or not domain:\n        return False\n    return True"}, {"role": "assistant", "content": "def test_is_valid_email_2():\n    assert is_valid_email_2(\"example@example.com\") is True\n    assert is_valid_email_2(\"example.com\") is False\n    assert is_valid_email_2(\"example@com\") is False\n    assert is_valid_email_2(\"@example.com\") is False\n    assert is_valid_email_2(\"example@.com\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_in_string_2(s):\n    words = s.split()\n    return len(words)"}, {"role": "assistant", "content": "def test_count_words_in_string_2():\n    assert count_words_in_string_2(\"Hello world!\") == 2\n    assert count_words_in_string_2(\"A quick brown fox.\") == 4\n    assert count_words_in_string_2(\"\") == 0\n    assert count_words_in_string_2(\"One two three\") == 3\n    assert count_words_in_string_2(\"  Leading and trailing spaces  \") == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_in_list(lst):\n    if not lst:\n        return None\n    return max(lst)"}, {"role": "assistant", "content": "def test_max_in_list():\n    assert max_in_list([1, 2, 3, 4, 5]) == 5\n    assert max_in_list([-1, -2, -3, -4, -5]) == -1\n    assert max_in_list([]) is None\n    assert max_in_list([0]) == 0\n    assert max_in_list([5, 5, 5]) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef string_to_numbers_2(s):\n    return [int(x) for x in s.split(\",\") if x.strip().isdigit()]"}, {"role": "assistant", "content": "def test_string_to_numbers_2():\n    assert string_to_numbers_2(\"1,2,3\") == [1, 2, 3]\n    assert string_to_numbers_2(\"4, 5, 6\") == [4, 5, 6]\n    assert string_to_numbers_2(\"7,,8,,9\") == [7, 8, 9]\n    assert string_to_numbers_2(\"10, 11, 12\") == [10, 11, 12]\n    assert string_to_numbers_2(\"\") == []\n    assert string_to_numbers_2(\"a,b,c\") == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_5(base, exponent):\n    try:\n        return base ** exponent\n    except TypeError:\n        return \"Invalid input\""}, {"role": "assistant", "content": "def test_power_5():\n    assert power_5(2, 3) == 8\n    assert power_5(5, 0) == 1\n    assert power_5(1, 100) == 1\n    assert power_5(\"a\", 2) == \"Invalid input\"\n    assert power_5(3, \"b\") == \"Invalid input\"\n    assert power_5(2, -3) == 0.125\n    assert power_5(-2, 3) == -8\n    assert power_5(0, 0) == 1\n    assert power_5(0, 5) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divisible_by_x_5(n, x):\n    return [i for i in range(1, n + 1) if i % x == 0]"}, {"role": "assistant", "content": "def test_divisible_by_x_5():\n    assert divisible_by_x_5(10, 2) == [2, 4, 6, 8, 10]\n    assert divisible_by_x_5(15, 3) == [3, 6, 9, 12, 15]\n    assert divisible_by_x_5(5, 1) == [1, 2, 3, 4, 5]\n    assert divisible_by_x_5(20, 5) == [5, 10, 15, 20]\n    assert divisible_by_x_5(7, 7) == [7]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef length_without_spaces(s):\n    return len(s.replace(\" \", \"\"))"}, {"role": "assistant", "content": "def test_length_without_spaces():\n    assert length_without_spaces(\"hello world\") == 10\n    assert length_without_spaces(\" a b c \") == 3\n    assert length_without_spaces(\"\") == 0\n    assert length_without_spaces(\"leading spaces\") == 13\n    assert length_without_spaces(\"no_spaces\") == 9"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_decimal(s):\n    try:\n        float(s)\n        return '.' in s\n    except ValueError:\n        return False"}, {"role": "assistant", "content": "def test_is_decimal():\n    assert is_decimal(\"123.45\") is True\n    assert is_decimal(\"123\") is False\n    assert is_decimal(\"abc\") is False\n    assert is_decimal(\"\") is False\n    assert is_decimal(\"123.\") is True\n    assert is_decimal(\".45\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef change_case_and_strip(s):\n    return s.strip().upper() if s.startswith(\" \") else s.lower()"}, {"role": "assistant", "content": "def test_change_case_and_strip():\n    assert change_case_and_strip(\" hello\") == \"HELLO\"\n    assert change_case_and_strip(\"hello\") == \"hello\"\n    assert change_case_and_strip(\" HELLO\") == \"HELLO\"\n    assert change_case_and_strip(\"Hello World\") == \"hello world\"\n    assert change_case_and_strip(\"HELLO WORLD\") == \"hello world\"\n    assert change_case_and_strip(\"\") == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_negative(arr):\n    if not arr:\n        return None\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return i\n    return None"}, {"role": "assistant", "content": "def test_find_first_negative():\n    assert find_first_negative([1, 2, 3, -4, 5]) == 3\n    assert find_first_negative([1, -2, 3, -4, 5]) == 1\n    assert find_first_negative([1, 2, 3, 4, 5]) is None\n    assert find_first_negative([]) is None\n    assert find_first_negative([-1, -2, -3]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_duplicates_5(arr):\n    if not arr:\n        return arr\n    seen = set()\n    result = []\n    for el in arr:\n        if el not in seen:\n            result.append(el)\n            seen.add(el)\n    return result"}, {"role": "assistant", "content": "def test_remove_duplicates_5():\n    assert remove_duplicates_5([1, 2, 2, 3, 1, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates_5([1, 1, 1, 1]) == [1]\n    assert remove_duplicates_5([]) == []\n    assert remove_duplicates_5([5, 5, 6, 6, 7]) == [5, 6, 7]\n    assert remove_duplicates_5([10, 20, 10, 30, 20]) == [10, 20, 30]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_float_5(s):\n    try:\n        float(s)\n        return \".\" in s\n    except ValueError:\n        return False"}, {"role": "assistant", "content": "def test_is_float_5():\n    assert is_float_5(\"3.14\") is True\n    assert is_float_5(\"0.001\") is True\n    assert is_float_5(\"-3.14\") is True\n    assert is_float_5(\"3\") is False\n    assert is_float_5(\"abc\") is False\n    assert is_float_5(\"3.\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_words_with_numbers(s):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if any(char.isdigit() for char in word):\n            result.append(word)\n    return result"}, {"role": "assistant", "content": "def test_extract_words_with_numbers():\n    assert extract_words_with_numbers(\"abc123 def456\") == [\"abc123\", \"def456\"]\n    assert extract_words_with_numbers(\"123\") == [\"123\"]\n    assert extract_words_with_numbers(\"abc def\") == []\n    assert extract_words_with_numbers(\"\") == []\n    assert extract_words_with_numbers(\"a1b2 c3\") == [\"a1b2\", \"c3\"]\n    assert extract_words_with_numbers(\"word1 word2 word3\") == [\"word1\", \"word2\", \"word3\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef lcm_4(a, b):\n    if a == 0 or b == 0:\n        return 0\n    greater = max(a, b)\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            return greater\n        greater += 1"}, {"role": "assistant", "content": "def test_lcm_4():\n    assert lcm_4(4, 5) == 20\n    assert lcm_4(0, 5) == 0\n    assert lcm_4(6, 8) == 24\n    assert lcm_4(7, 3) == 21\n    assert lcm_4(21, 6) == 42\n    assert lcm_4(1, 1) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_unique_lists_2(arr1, arr2):\n    result = arr1.copy()\n    for el in arr2:\n        if el not in result:\n            result.append(el)\n    return result"}, {"role": "assistant", "content": "def test_merge_unique_lists_2():\n    assert merge_unique_lists_2([1, 2], [2, 3]) == [1, 2, 3]\n    assert merge_unique_lists_2([], [1, 2]) == [1, 2]\n    assert merge_unique_lists_2([1, 2], []) == [1, 2]\n    assert merge_unique_lists_2([1, 2], [3, 4]) == [1, 2, 3, 4]\n    assert merge_unique_lists_2([], []) == []\n    assert merge_unique_lists_2([1, 3, 5], [2, 4, 6]) == [1, 3, 5, 2, 4, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_index_of_element(arr, element):\n    if not arr:\n        return None\n    for i, el in enumerate(arr):\n        if el == element:\n            return i\n    return None"}, {"role": "assistant", "content": "def test_find_index_of_element():\n    assert find_index_of_element([1, 2, 3], 2) == 1\n    assert find_index_of_element([1, 2, 3], 4) is None\n    assert find_index_of_element([], 2) is None\n    assert find_index_of_element([1, 2, 3, 2], 2) == 1\n    assert find_index_of_element([1], 1) == 0\n    assert find_index_of_element([2], 1) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_in_string_with_delimiters(s, delimiters=\" \"):\n    if not s:\n        return 0\n    for delimiter in delimiters:\n        s = s.replace(delimiter, \" \")\n    return len(s.split())"}, {"role": "assistant", "content": "def test_count_words_in_string_with_delimiters():\n    assert count_words_in_string_with_delimiters(\"Hello world\") == 2\n    assert count_words_in_string_with_delimiters(\"word,word2\", \",\") == 2\n    assert count_words_in_string_with_delimiters(\"\") == 0\n    assert count_words_in_string_with_delimiters(\"a, b; c\", \",; \") == 3\n    assert count_words_in_string_with_delimiters(\" one  two   three \") == 3\n    assert count_words_in_string_with_delimiters(\"singleword\") == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef greater_than_average_6(arr):\n    if not arr:\n        return []\n    avg = sum(arr) / len(arr)\n    return [x for x in arr if x > avg]"}, {"role": "assistant", "content": "def test_greater_than_average_6():\n    assert greater_than_average_6([1, 2, 3, 4, 5]) == [4, 5]\n    assert greater_than_average_6([5, 10, 15]) == [15]\n    assert greater_than_average_6([2, 4, 6, 8]) == [6, 8]\n    assert greater_than_average_6([1, 1, 1, 1]) == []\n    assert greater_than_average_6([]) == []\n    assert greater_than_average_6([3, 3, 3, 3, 4]) == [4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef merge_dict_and_tuple(lst, d):\n    if not lst:\n        return d\n    for key, value in lst:\n        d[key] = value\n    return d"}, {"role": "assistant", "content": "def test_merge_dict_and_tuple():\n    assert merge_dict_and_tuple([(\"key1\", \"value1\"), (\"key2\", \"value2\")], {\"key3\": \"value3\"}) == {\"key3\": \"value3\", \"key1\": \"value1\", \"key2\": \"value2\"}\n    assert merge_dict_and_tuple([], {\"key1\": \"value1\"}) == {\"key1\": \"value1\"}\n    assert merge_dict_and_tuple([(\"key1\", \"value1\")], {}) == {\"key1\": \"value1\"}\n    assert merge_dict_and_tuple([], {}) == {}\n    assert merge_dict_and_tuple([(\"key1\", \"value1\"), (\"key2\", \"value2\")], {\"key1\": \"old_value\"}) == {\"key1\": \"value1\", \"key2\": \"value2\"}\n    assert merge_dict_and_tuple([(\"key1\", \"value1\"), (\"key2\", \"value2\")], {\"key3\": \"value3\"}) == {\"key3\": \"value3\", \"key1\": \"value1\", \"key2\": \"value2\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_numbers_in_string_2(s):\n    if not s:\n        return 0\n    total = 0\n    temp = \"\"\n    for char in s:\n        if char.isdigit():\n            temp += char\n        elif temp:\n            total += int(temp)\n            temp = \"\"\n    if temp:\n        total += int(temp)\n    return total"}, {"role": "assistant", "content": "def test_sum_numbers_in_string_2():\n    assert sum_numbers_in_string_2(\"abc123def456\") == 579\n    assert sum_numbers_in_string_2(\"123\") == 123\n    assert sum_numbers_in_string_2(\"\") == 0\n    assert sum_numbers_in_string_2(\"abc\") == 0\n    assert sum_numbers_in_string_2(\"1a2b3c\") == 6\n    assert sum_numbers_in_string_2(\"10, 20, 30\") == 60"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_missing_number(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    missing = set1 - set2\n    if missing:\n        return sorted(missing, reverse=True)[0]\n    return None"}, {"role": "assistant", "content": "def test_find_missing_number():\n    assert find_missing_number([1, 2, 3], [2, 3]) == 1\n    assert find_missing_number([1, 2, 3], [1, 2, 3]) is None\n    assert find_missing_number([], [1, 2, 3]) is None\n    assert find_missing_number([1, 2, 3], []) == 3\n    assert find_missing_number([1, 1, 2, 2], [1, 2]) is None\n    assert find_missing_number([4, 5, 6], [4, 6]) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef alternate_merge(s1, s2):\n    if not s1:\n        return s2\n    if not s2:\n        return s1\n    result = []\n    for c1, c2 in zip(s1, s2):\n        result.append(c1)\n        result.append(c2)\n    result.extend(s1[len(s2):])\n    result.extend(s2[len(s1):])\n    return ''.join(result)"}, {"role": "assistant", "content": "def test_alternate_merge():\n    assert alternate_merge(\"abc\", \"def\") == \"adbecf\"\n    assert alternate_merge(\"\", \"def\") == \"def\"\n    assert alternate_merge(\"abc\", \"\") == \"abc\"\n    assert alternate_merge(\"a\", \"b\") == \"ab\"\n    assert alternate_merge(\"abc\", \"defgh\") == \"adbecfgh\"\n    assert alternate_merge(\"abcd\", \"ef\") == 'aebfcd'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef are_all_greater_than(arr, number):\n    if not arr:\n        return False\n    return all(x > number for x in arr)"}, {"role": "assistant", "content": "def test_are_all_greater_than():\n    assert are_all_greater_than([5, 6, 7], 4) is True\n    assert are_all_greater_than([3, 4, 5], 5) is False\n    assert are_all_greater_than([], 1) is False\n    assert are_all_greater_than([10, 20], 15) is False\n    assert are_all_greater_than([1, 1, 1], 1) is False\n    assert are_all_greater_than([2, 3, 4], 1) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_first_occurrence(s, old, new):\n    if old not in s:\n        return s\n    index = s.find(old)\n    return s[:index] + new + s[index + len(old):]"}, {"role": "assistant", "content": "def test_replace_first_occurrence():\n    assert replace_first_occurrence(\"hello world\", \"world\", \"there\") == \"hello there\"\n    assert replace_first_occurrence(\"hello hello\", \"hello\", \"hi\") == \"hi hello\"\n    assert replace_first_occurrence(\"abc\", \"d\", \"e\") == \"abc\"\n    assert replace_first_occurrence(\"\", \"a\", \"b\") == \"\"\n    assert replace_first_occurrence(\"a a a\", \"a\", \"b\") == \"b a a\"\n    assert replace_first_occurrence(\"test\", \"test\", \"best\") == \"best\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_unique_elements(arr):\n    if not arr:\n        return []\n    count = {}\n    for el in arr:\n        count[el] = count.get(el, 0) + 1\n    return [key for key, value in count.items() if value == 1]"}, {"role": "assistant", "content": "def test_get_unique_elements():\n    assert get_unique_elements([1, 2, 2, 3, 4, 4]) == [1, 3]\n    assert get_unique_elements([]) == []\n    assert get_unique_elements([1, 1, 1]) == []\n    assert get_unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert get_unique_elements([1, 1, 2, 3, 3, 4, 5, 5]) == [2, 4]\n    assert get_unique_elements([2, 2, 2, 3, 3]) == []"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef min_even_number(arr):\n    if not arr:\n        return None\n    even_numbers = [x for x in arr if x % 2 == 0]\n    if even_numbers:\n        return min(even_numbers)\n    return None"}, {"role": "assistant", "content": "def test_min_even_number():\n    assert min_even_number([1, 2, 3, 4]) == 2\n    assert min_even_number([5, 7, 9]) is None\n    assert min_even_number([]) is None\n    assert min_even_number([2, 4, 6, 8]) == 2\n    assert min_even_number([1, 3, 5, 7, 2]) == 2\n    assert min_even_number([10, 20, 30]) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef number_to_string_with_leading_zeros(n, width):\n    return str(n).zfill(width)"}, {"role": "assistant", "content": "def test_number_to_string_with_leading_zeros():\n    assert number_to_string_with_leading_zeros(5, 3) == \"005\"\n    assert number_to_string_with_leading_zeros(123, 5) == \"00123\"\n    assert number_to_string_with_leading_zeros(0, 4) == \"0000\"\n    assert number_to_string_with_leading_zeros(456, 2) == \"456\"\n    assert number_to_string_with_leading_zeros(12, 4) == \"0012\"\n    assert number_to_string_with_leading_zeros(789, 6) == \"000789\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef list_to_comma_separated_string(arr):\n    if not arr:\n        return \"\"\n    return \", \".join(map(str, arr))"}, {"role": "assistant", "content": "def test_list_to_comma_separated_string():\n    assert list_to_comma_separated_string([1, 2, 3]) == \"1, 2, 3\"\n    assert list_to_comma_separated_string([]) == \"\"\n    assert list_to_comma_separated_string([1]) == \"1\"\n    assert list_to_comma_separated_string([1, 2, 3, 4, 5]) == \"1, 2, 3, 4, 5\"\n    assert list_to_comma_separated_string([10, 20, 30]) == \"10, 20, 30\"\n    assert list_to_comma_separated_string([100, 200]) == \"100, 200\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_valid_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"}, {"role": "assistant", "content": "def test_is_valid_number():\n    assert is_valid_number(\"3.14\") is True\n    assert is_valid_number(\"123\") is True\n    assert is_valid_number(\"-0.001\") is True\n    assert is_valid_number(\"abc\") is False\n    assert is_valid_number(\"\") is False\n    assert is_valid_number(\"3.14.15\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_vowels_2(s):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}, {"role": "assistant", "content": "def test_count_vowels_2():\n    assert count_vowels_2(\"hello\") == 2\n    assert count_vowels_2(\"world\") == 1\n    assert count_vowels_2(\"AEIOUaeiou\") == 10\n    assert count_vowels_2(\"bcdfg\") == 0\n    assert count_vowels_2(\"\") == 0\n    assert count_vowels_2(\"aEiOu\") == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef product_of_numbers_in_string(s):\n    if not s:\n        return 1\n    total = 1\n    temp = \"\"\n    for char in s:\n        if char.isdigit():\n            temp += char\n        elif temp:\n            total *= int(temp)\n            temp = \"\"\n    if temp:\n        total *= int(temp)\n    return total"}, {"role": "assistant", "content": "def test_product_of_numbers_in_string():\n    assert product_of_numbers_in_string(\"1234\") == 1234\n    assert product_of_numbers_in_string(\"56a78\") == 4368\n    assert product_of_numbers_in_string(\"1a2b3c4\") == 24\n    assert product_of_numbers_in_string(\"abc\") == 1\n    assert product_of_numbers_in_string(\"\") == 1\n    assert product_of_numbers_in_string(\"10, 20, 30\") == 6000"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_strings_with_digits(arr):\n    return [s for s in arr if any(char.isdigit() for char in s)]"}, {"role": "assistant", "content": "def test_find_strings_with_digits():\n    assert find_strings_with_digits([\"abc\", \"a1c\", \"123\", \"\"]) == [\"a1c\", \"123\"]\n    assert find_strings_with_digits([\"no_digits\", \"still_no\", \"3digits\"]) == [\"3digits\"]\n    assert find_strings_with_digits([\"\", \"1\"]) == [\"1\"]\n    assert find_strings_with_digits([\"all_numbers1\", \"2gether\", \"\"]) == [\"all_numbers1\", \"2gether\"]\n    assert find_strings_with_digits([\"none_here\", \"and_here\", \"\"]) == []\n    assert find_strings_with_digits([\"12three\", \"fou4r\", \"\"]) == [\"12three\", \"fou4r\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_digits_in_string(s):\n    return sum(1 for char in s if char.isdigit())"}, {"role": "assistant", "content": "def test_count_digits_in_string():\n    assert count_digits_in_string(\"abc123\") == 3\n    assert count_digits_in_string(\"\") == 0\n    assert count_digits_in_string(\"no_digits\") == 0\n    assert count_digits_in_string(\"5abc67\") == 3\n    assert count_digits_in_string(\"123456\") == 6\n    assert count_digits_in_string(\"only1digit\") == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_every_second_char(s):\n    return s[::2]"}, {"role": "assistant", "content": "def test_get_every_second_char():\n    assert get_every_second_char(\"abcdef\") == \"ace\"\n    assert get_every_second_char(\"a\") == \"a\"\n    assert get_every_second_char(\"\") == \"\"\n    assert get_every_second_char(\"123456\") == \"135\"\n    assert get_every_second_char(\"a1b2c3d4\") == \"abcd\"\n    assert get_every_second_char(\"even\") == 'ee'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_strings_with_uppercase(arr):\n    return [s for s in arr if any(char.isupper() for char in s)]"}, {"role": "assistant", "content": "def test_filter_strings_with_uppercase():\n    assert filter_strings_with_uppercase([\"abc\", \"ABC\", \"aBc\"]) == [\"ABC\", \"aBc\"]\n    assert filter_strings_with_uppercase([\"no_upper\", \"STILL_NONE\", \"\"]) == [\"STILL_NONE\"]\n    assert filter_strings_with_uppercase([\"lower\", \"Case\", \"UPPER\"]) == [\"Case\", \"UPPER\"]\n    assert filter_strings_with_uppercase([\"\", \"noupper\", \"\"]) == []\n    assert filter_strings_with_uppercase([\"Empty\", \"Spaces\", \"OnlyUpper\"]) == [\"Empty\", \"Spaces\", \"OnlyUpper\"]\n    assert filter_strings_with_uppercase([\"upperCASE\", \"MiXeD\", \"\"]) == [\"upperCASE\", \"MiXeD\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_non_space_characters(s):\n    count = {}\n    for char in s:\n        if char != \" \":\n            count[char] = count.get(char, 0) + 1\n    return count"}, {"role": "assistant", "content": "def test_count_non_space_characters():\n    assert count_non_space_characters(\"abc abc\") == {\"a\": 2, \"b\": 2, \"c\": 2}\n    assert count_non_space_characters(\"\") == {}\n    assert count_non_space_characters(\"no spaces\") == {'n': 1, 'o': 1, 's': 2, 'p': 1, 'a': 1, 'c': 1, 'e': 1}\n    assert count_non_space_characters(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    assert count_non_space_characters(\"repeated repeated\") == {\"r\": 2, \"e\": 6, \"p\": 2, \"a\": 2, \"t\": 2, \"d\": 2}\n    assert count_non_space_characters(\"spaces only\") == {\"s\": 2, \"p\": 1, \"a\": 1, \"c\": 1, \"e\": 1, \"o\": 1, \"n\": 1, \"l\": 1, \"y\": 1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_longest_string(arr):\n    if not arr:\n        return None\n    max_length = len(arr[0])\n    longest_string = arr[0]\n    for string in arr[1:]:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    return longest_string"}, {"role": "assistant", "content": "def test_find_longest_string():\n    assert find_longest_string([\"short\", \"longer\", \"longest\"]) == \"longest\"\n    assert find_longest_string([\"one\", \"three\"]) == \"three\"\n    assert find_longest_string([\"same\", \"size\"]) == \"same\"\n    assert find_longest_string([\"\"]) == \"\"\n    assert find_longest_string([\"two\", \"letters\", \"word\"]) == \"letters\"\n    assert find_longest_string([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_even(arr):\n    if not arr:\n        return None\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            return i\n    return None"}, {"role": "assistant", "content": "def test_find_first_even():\n    assert find_first_even([1, 3, 5, 6]) == 3\n    assert find_first_even([2, 4, 6, 8]) == 0\n    assert find_first_even([1, 3, 5, 7]) is None\n    assert find_first_even([1, 2, 3, 4, 5]) == 1\n    assert find_first_even([]) is None\n    assert find_first_even([1, 2, 4, 8, 16]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_numbers_in_string_v3(s):\n    total = 0\n    temp = \"\"\n    for char in s:\n        if char.isdigit():\n            temp += char\n        elif temp:\n            total += int(temp)\n            temp = \"\"\n    if temp:\n        total += int(temp)\n    if total == 0:\n        return None\n    return total"}, {"role": "assistant", "content": "def test_sum_numbers_in_string_v3():\n    assert sum_numbers_in_string_v3(\"abc123\") == 123\n    assert sum_numbers_in_string_v3(\"\") is None\n    assert sum_numbers_in_string_v3(\"123abc45\") == 168\n    assert sum_numbers_in_string_v3(\"no digits here\") is None\n    assert sum_numbers_in_string_v3(\"12 and 34\") == 46\n    assert sum_numbers_in_string_v3(\"100\") == 100"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef string_to_number_list(s):\n    if not s:\n        return []\n    num_list = s.split()\n    try:\n        return [int(num) for num in num_list]\n    except ValueError:\n        return None"}, {"role": "assistant", "content": "def test_string_to_number_list():\n    assert string_to_number_list(\"1 2 3\") == [1, 2, 3]\n    assert string_to_number_list(\"\") == []\n    assert string_to_number_list(\"one two three\") is None\n    assert string_to_number_list(\"1 2 3 four\") is None\n    assert string_to_number_list(\"10 20 30\") == [10, 20, 30]\n    assert string_to_number_list(\"10 20\") == [10, 20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_min(arr):\n    if not arr:\n        return None, None\n    max_val = arr[0]\n    min_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val, min_val"}, {"role": "assistant", "content": "def test_find_max_min():\n    assert find_max_min([1, 2, 3, 4, 5]) == (5, 1)\n    assert find_max_min([5, 1, 5, 5]) == (5, 1)\n    assert find_max_min([3, -3, 5, 7]) == (7, -3)\n    assert find_max_min([10]) == (10, 10)\n    assert find_max_min([]) == (None, None)\n    assert find_max_min([-5, -4, -3, -2, -1]) == (-1, -5)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_spaces_with_underscores_5(s):\n    if not s:\n        return None\n    result = \"\"\n    for char in s:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result"}, {"role": "assistant", "content": "def test_replace_spaces_with_underscores_5():\n    assert replace_spaces_with_underscores_5(\"a b c\") == \"a_b_c\"\n    assert replace_spaces_with_underscores_5(\"\") is None\n    assert replace_spaces_with_underscores_5(\"no spaces\") == \"no_spaces\"\n    assert replace_spaces_with_underscores_5(\"only one\") == \"only_one\"\n    assert replace_spaces_with_underscores_5(\"leading space \") == \"leading_space_\"\n    assert replace_spaces_with_underscores_5(\" trailing space\") == \"_trailing_space\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_duplicates_maintain_order(arr):\n    if not arr:\n        return []\n    seen = set()\n    result = []\n    for el in arr:\n        if el not in seen:\n            result.append(el)\n            seen.add(el)\n    return result"}, {"role": "assistant", "content": "def test_remove_duplicates_maintain_order():\n    assert remove_duplicates_maintain_order([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates_maintain_order([]) == []\n    assert remove_duplicates_maintain_order([1, 1, 1, 1]) == [1]\n    assert remove_duplicates_maintain_order([\"a\", \"b\", \"a\", \"c\", \"b\"]) == [\"a\", \"b\", \"c\"]\n    assert remove_duplicates_maintain_order([1, 2, 3]) == [1, 2, 3]\n    assert remove_duplicates_maintain_order([4, 4, 4, 4, 4, 4]) == [4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_multiple(arr, divisor):\n    if not arr or divisor == 0:\n        return None\n    for num in arr:\n        if num % divisor == 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_find_first_multiple():\n    assert find_first_multiple([10, 20, 30], 10) == 10\n    assert find_first_multiple([1, 3, 5], 2) is None\n    assert find_first_multiple([], 2) is None\n    assert find_first_multiple([5, 10, 15], 5) == 5\n    assert find_first_multiple([2, 4, 6], 3) == 6\n    assert find_first_multiple([4, 8, 12, 16], 4) == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_v2(s):\n    if not s:\n        return False\n    cleaned = ''.join(c.lower() for c in s if c.isalnum())\n    return cleaned == cleaned[::-1]"}, {"role": "assistant", "content": "def test_is_palindrome_v2():\n    assert is_palindrome_v2(\"A man a plan a canal Panama\") is True\n    assert is_palindrome_v2(\"\") is False\n    assert is_palindrome_v2(\"racecar\") is True\n    assert is_palindrome_v2(\"hello\") is False\n    assert is_palindrome_v2(\"Never odd or even\") is True\n    assert is_palindrome_v2(\"not a palindrome\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_even_numbers(arr):\n    if not arr:\n        return []\n    even_numbers = []\n    for num in arr:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"}, {"role": "assistant", "content": "def test_get_even_numbers():\n    assert get_even_numbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n    assert get_even_numbers([]) == []\n    assert get_even_numbers([1, 3, 5]) == []\n    assert get_even_numbers([0, 2, 4, 6, 8]) == [0, 2, 4, 6, 8]\n    assert get_even_numbers([1, 2, 3, 4, 5]) == [2, 4]\n    assert get_even_numbers([10, 11, 12, 13]) == [10, 12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_number_v2(s):\n    if not s:\n        return False\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"}, {"role": "assistant", "content": "def test_is_number_v2():\n    assert is_number_v2(\"123\") is True\n    assert is_number_v2(\"abc\") is False\n    assert is_number_v2(\"\") is False\n    assert is_number_v2(\"123.45\") is True\n    assert is_number_v2(\"12e4\") is True\n    assert is_number_v2(\"one\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_repeating_elements(arr):\n    if not arr:\n        return {}\n    counts = {}\n    for el in arr:\n        counts[el] = counts.get(el, 0) + 1\n    return {key: value for key, value in counts.items() if value > 1}"}, {"role": "assistant", "content": "def test_count_repeating_elements():\n    assert count_repeating_elements([1, 2, 2, 3, 3, 3]) == {2: 2, 3: 3}\n    assert count_repeating_elements([]) == {}\n    assert count_repeating_elements([1, 1, 1, 1]) == {1: 4}\n    assert count_repeating_elements([\"a\", \"b\", \"a\", \"c\", \"b\"]) == {\"a\": 2, \"b\": 2}\n    assert count_repeating_elements([1, 2, 3]) == {}\n    assert count_repeating_elements([4, 4, 4, 4, 4, 4]) == {4: 6}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_unique_words(s):\n    if not s:\n        return []\n    words = s.split()\n    unique_words = set(words)\n    return sorted(list(unique_words))"}, {"role": "assistant", "content": "def test_extract_unique_words():\n    assert extract_unique_words(\"one two two three three three\") == ['one', 'three', 'two']\n    assert extract_unique_words(\"\") == []\n    assert extract_unique_words(\"word\") == [\"word\"]\n    assert extract_unique_words(\"a b c a b c\") == [\"a\", \"b\", \"c\"]\n    assert extract_unique_words(\"unique words in this string\") == ['in', 'string', 'this', 'unique', 'words']\n    assert extract_unique_words(\"repeat repeat\") == [\"repeat\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_largest_prime(arr):\n    if not arr:\n        return None\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in arr if is_prime(x)]\n    if primes:\n        return max(primes)\n    return None"}, {"role": "assistant", "content": "def test_find_largest_prime():\n    assert find_largest_prime([2, 3, 5, 7, 11, 13]) == 13\n    assert find_largest_prime([]) is None\n    assert find_largest_prime([4, 6, 8, 10]) is None\n    assert find_largest_prime([11, 1024, 23, 19]) == 23\n    assert find_largest_prime([10, 13, 17, 18, 19]) == 19\n    assert find_largest_prime([1, 2, 3]) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_digits(s):\n    if not s:\n        return []\n    digits = [int(c) for c in s if c.isdigit()]\n    return digits"}, {"role": "assistant", "content": "def test_extract_digits():\n    assert extract_digits(\"a1b2c3\") == [1, 2, 3]\n    assert extract_digits(\"\") == []\n    assert extract_digits(\"no digits here\") == []\n    assert extract_digits(\"123abc456\") == [1, 2, 3, 4, 5, 6]\n    assert extract_digits(\"0\") == [0]\n    assert extract_digits(\"one1two2\") == [1, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_long_words(s):\n    if not s:\n        return []\n    words = s.split()\n    long_words = [word for word in words if len(word) > 3]\n    return long_words"}, {"role": "assistant", "content": "def test_find_long_words():\n    assert find_long_words(\"Hello world from AI\") == [\"Hello\", \"world\", \"from\"]\n    assert find_long_words(\"AI is fun\") == []\n    assert find_long_words(\"\") == []\n    assert find_long_words(\"Test the function find long words\") == [\"Test\", \"function\", \"find\", \"long\", \"words\"]\n    assert find_long_words(\"Short and sweet\") == [\"Short\", \"sweet\"]\n    assert find_long_words(\"A sequence of longwordsisrequired\") == [\"sequence\", \"longwordsisrequired\"]\n    assert find_long_words(\"Edge case with wordsss\") == [\"Edge\", \"case\", \"with\", \"wordsss\"]\n    assert find_long_words(\"Another edge case with word\") == [\"Another\", \"edge\", \"case\", \"with\", \"word\"]\n    assert find_long_words(\"1234567890 more than 10\") == [\"1234567890\", \"more\", \"than\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_numbers_from_string(s):\n    if not s:\n        return []\n    numbers = []\n    temp = \"\"\n    for char in s:\n        if char.isdigit():\n            temp += char\n        elif temp:\n            numbers.append(int(temp))\n            temp = \"\"\n    if temp:\n        numbers.append(int(temp))\n    return numbers"}, {"role": "assistant", "content": "def test_get_numbers_from_string():\n    assert get_numbers_from_string(\"123,456,789\") == [123, 456, 789]\n    assert get_numbers_from_string(\"100,200,300\") == [100, 200, 300]\n    assert get_numbers_from_string(\"\") == []\n    assert get_numbers_from_string(\"0,1,2,3\") == [0, 1, 2, 3]\n    assert get_numbers_from_string(\"11,22,33\") == [11, 22, 33]\n    assert get_numbers_from_string(\"text without numbers\") == []\n    assert get_numbers_from_string(\"400number,500text,600number\") == [400, 500, 600]\n    assert get_numbers_from_string(\"999text999\") == [999, 999]\n    assert get_numbers_from_string(\"1.2.3\") == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_greater_than(arr, n):\n    if not arr:\n        return []\n    greater_numbers = []\n    for num in arr:\n        if num > n:\n            greater_numbers.append(num)\n    return greater_numbers"}, {"role": "assistant", "content": "def test_find_numbers_greater_than():\n    assert find_numbers_greater_than([1, 2, 3, 4, 5], 3) == [4, 5]\n    assert find_numbers_greater_than([], 3) == []\n    assert find_numbers_greater_than([3, 3, 3], 3) == []\n    assert find_numbers_greater_than([10, 20, 30, 40, 50], 25) == [30, 40, 50]\n    assert find_numbers_greater_than([-1, -2, -3, -4], -3) == [-1, -2]\n    assert find_numbers_greater_than([100, 101, 102], 100) == [101, 102]\n    assert find_numbers_greater_than([2, 4, 6, 8], 1) == [2, 4, 6, 8]\n    assert find_numbers_greater_than([5, 3, 1], 4) == [5]\n    assert find_numbers_greater_than([5, 4, 3, 2, 1], 2) == [5, 4, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef join_strings_with_separator(arr, separator):\n    if not arr:\n        return \"\"\n    result = arr[0]\n    for string in arr[1:]:\n        result += separator + string\n    return result"}, {"role": "assistant", "content": "def test_join_strings_with_separator():\n    assert join_strings_with_separator([\"a\", \"b\", \"c\"], \",\") == \"a,b,c\"\n    assert join_strings_with_separator([], \",\") == \"\"\n    assert join_strings_with_separator([\"onlyone\"], \",\") == \"onlyone\"\n    assert join_strings_with_separator([\"this\", \"is\", \"a\", \"test\"], \" \") == \"this is a test\"\n    assert join_strings_with_separator([\"test\", \"function\"], \"-\") == \"test-function\"\n    assert join_strings_with_separator([\"join\", \"with\", \"different\", \"separators\"], \"|\") == \"join|with|different|separators\"\n    assert join_strings_with_separator([\"first\", \"second\"], \".\") == \"first.second\"\n    assert join_strings_with_separator([\"combine\", \"all\", \"words\"], \"\") == \"combineallwords\"\n    assert join_strings_with_separator([\"1\", \"2\", \"3\"], \" \") == \"1 2 3\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_even_numbers(arr):\n    if not arr:\n        return 0\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total"}, {"role": "assistant", "content": "def test_sum_even_numbers():\n    assert sum_even_numbers([1, 2, 3, 4, 5, 6]) == 12\n    assert sum_even_numbers([]) == 0\n    assert sum_even_numbers([1, 3, 5, 7]) == 0\n    assert sum_even_numbers([2, 4, 6, 8, 10]) == 30\n    assert sum_even_numbers([-2, -4, -6]) == -12\n    assert sum_even_numbers([0, 2, 4]) == 6\n    assert sum_even_numbers([1, 2, 3, 4]) == 6\n    assert sum_even_numbers([10, 20, 30, 40]) == 100\n    assert sum_even_numbers([2, 2, 2, 2]) == 8"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_string_with_word(arr, word):\n    if not arr or not word:\n        return None\n    for s in arr:\n        if word in s:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_find_string_with_word():\n    assert find_string_with_word([\"hello world\", \"foo bar\"], \"hello\") == \"hello world\"\n    assert find_string_with_word([\"one two\", \"three four\"], \"five\") is None\n    assert find_string_with_word([], \"word\") is None\n    assert find_string_with_word([\"find this string\", \"or this one\"], \"this\") == \"find this string\"\n    assert find_string_with_word([\"no match here\"], \"hello\") is None\n    assert find_string_with_word([\"searching\", \"for\", \"word\"], \"for\") == \"for\"\n    assert find_string_with_word([\"multiple\", \"matches\", \"here\"], \"matches\") == \"matches\"\n    assert find_string_with_word([\"first\", \"last\"], \"last\") == \"last\"\n    assert find_string_with_word([\"edge case\"], \"edge\") == \"edge case\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_odd(arr):\n    if not arr:\n        return None\n    odd_numbers = [x for x in arr if x % 2 != 0]\n    if odd_numbers:\n        return min(odd_numbers)\n    return None"}, {"role": "assistant", "content": "def test_find_smallest_odd():\n    assert find_smallest_odd([1, 3, 5, 7, 9]) == 1\n    assert find_smallest_odd([2, 4, 6, 8, 10]) is None\n    assert find_smallest_odd([]) is None\n    assert find_smallest_odd([10, 15, 20, 25]) == 15\n    assert find_smallest_odd([11, 13, 15, 17]) == 11\n    assert find_smallest_odd([-1, -3, -5, 0]) == -5\n    assert find_smallest_odd([100, 101, 102, 103]) == 101\n    assert find_smallest_odd([5, 4, 3, 2, 1]) == 1\n    assert find_smallest_odd([12, 14, 16, 19]) == 19"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_substring(s, old_sub, new_sub):\n    if not s or not old_sub:\n        return s\n    count = 0\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i:i + len(old_sub)] == old_sub:\n            result += new_sub\n            i += len(old_sub)\n            count += 1\n        else:\n            result += s[i]\n            i += 1\n    if count == 0:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_replace_substring():\n    assert replace_substring(\"hello world\", \"world\", \"there\") == \"hello there\"\n    assert replace_substring(\"ababab\", \"ab\", \"cd\") == \"cdcdcd\"\n    assert replace_substring(\"\", \"a\", \"b\") == \"\"\n    assert replace_substring(\"nothing to replace\", \"xyz\", \"abc\") is None\n    assert replace_substring(\"12345\", \"123\", \"678\") == \"67845\"\n    assert replace_substring(\"replace me if you can\", \"can\", \"will\") == \"replace me if you will\"\n    assert replace_substring(\"edgecase\", \"edge\", \"case\") == \"casecase\"\n    assert replace_substring(\"simple test\", \"simple\", \"complex\") == \"complex test\"\n    assert replace_substring(\"aaaa\", \"aa\", \"bb\") == \"bbbb\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_and_5_5(arr):\n    if not arr:\n        return None\n    for num in arr:\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_find_divisible_by_3_and_5_5():\n    assert find_divisible_by_3_and_5_5([15, 30, 45, 60]) == 15\n    assert find_divisible_by_3_and_5_5([1, 2, 3, 4, 5]) is None\n    assert find_divisible_by_3_and_5_5([]) is None\n    assert find_divisible_by_3_and_5_5([0, 3, 5, 15]) == 0\n    assert find_divisible_by_3_and_5_5([9, 18, 27, 45]) == 45\n    assert find_divisible_by_3_and_5_5([100, 101, 102, 103]) is None\n    assert find_divisible_by_3_and_5_5([30, 60, 90, 120]) == 30\n    assert find_divisible_by_3_and_5_5([-15, -30, -45]) == -15\n    assert find_divisible_by_3_and_5_5([3, 6, 9, 12, 15]) == 15"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef calculate_average(arr):\n    if not arr:\n        return None\n    total = sum(arr)\n    count = len(arr)\n    return total / count"}, {"role": "assistant", "content": "def test_calculate_average():\n    assert calculate_average([1, 2, 3, 4, 5]) == 3\n    assert calculate_average([]) is None\n    assert calculate_average([10, 20, 30]) == 20\n    assert calculate_average([-1, -2, -3]) == -2\n    assert calculate_average([5, 10, 15, 20]) == 12.5\n    assert calculate_average([100]) == 100\n    assert calculate_average([0, 0, 0]) == 0\n    assert calculate_average([0, 5, 10]) == 5\n    assert calculate_average([-10, 10, -10, 10]) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef combine_and_unique(arr1, arr2):\n    if not arr1 and not arr2:\n        return []\n    combined = arr1 + arr2\n    unique = []\n    for el in combined:\n        if el not in unique:\n            unique.append(el)\n    return unique"}, {"role": "assistant", "content": "def test_combine_and_unique():\n    assert combine_and_unique([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert combine_and_unique([], [1, 2, 3]) == [1, 2, 3]\n    assert combine_and_unique([1, 2, 3], []) == [1, 2, 3]\n    assert combine_and_unique([], []) == []\n    assert combine_and_unique([1, 1, 1], [1, 1, 1]) == [1]\n    assert combine_and_unique([1, 2, 2], [2, 3, 3]) == [1, 2, 3]\n    assert combine_and_unique([-1, -2, -3], [-3, -4, -5]) == [-1, -2, -3, -4, -5]\n    assert combine_and_unique([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert combine_and_unique([\"a\", \"b\"], [\"b\", \"c\"]) == [\"a\", \"b\", \"c\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest(a, b, c):\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    if a == b and a > c:\n        return a\n    if b == c and b > a:\n        return b\n    return a"}, {"role": "assistant", "content": "def test_choose_largest():\n    assert choose_largest(1, 2, 3) == 3\n    assert choose_largest(3, 2, 1) == 3\n    assert choose_largest(1, 3, 2) == 3\n    assert choose_largest(3, 3, 2) == 3\n    assert choose_largest(2, 3, 3) == 3\n    assert choose_largest(3, 3, 3) == 3\n    assert choose_largest(-1, -2, -3) == -1\n    assert choose_largest(0, 0, 0) == 0\n    assert choose_largest(100, 50, 25) == 100"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longest_string(*strings):\n    longest = \"\"\n    for s in strings:\n        if len(s) > len(longest):\n            longest = s\n        elif len(s) == len(longest):\n            if s > longest:\n                longest = s\n    return longest"}, {"role": "assistant", "content": "def test_choose_longest_string():\n    assert choose_longest_string(\"one\", \"three\", \"five\") == \"three\"\n    assert choose_longest_string(\"a\", \"bc\", \"def\") == \"def\"\n    assert choose_longest_string(\"apple\", \"banana\", \"cherry\") == \"cherry\"\n    assert choose_longest_string(\"\") == \"\"\n    assert choose_longest_string(\"short\", \"longer\", \"longest\") == \"longest\"\n    assert choose_longest_string(\"a\", \"ab\", \"abc\") == \"abc\"\n    assert choose_longest_string(\"equal\", \"equal\") == \"equal\"\n    assert choose_longest_string(\"A\", \"BB\", \"CCC\") == \"CCC\"\n    assert choose_longest_string(\"one\", \"two\", \"three\") == \"three\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_most_frequent(arr):\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    max_count = 0\n    most_frequent = None\n    for key, value in freq.items():\n        if value > max_count:\n            most_frequent = key\n            max_count = value\n        elif value == max_count:\n            if key > most_frequent:\n                most_frequent = key\n    return most_frequent"}, {"role": "assistant", "content": "def test_choose_most_frequent():\n    assert choose_most_frequent([1, 2, 2, 3, 3, 3]) == 3\n    assert choose_most_frequent([\"a\", \"b\", \"b\", \"c\", \"c\", \"c\"]) == \"c\"\n    assert choose_most_frequent([1, 1, 1, 2, 2, 3, 3, 3, 3]) == 3\n    assert choose_most_frequent([]) is None\n    assert choose_most_frequent([1, 1, 2, 2, 3, 3]) == 3\n    assert choose_most_frequent([\"equal\", \"equal\", \"equal\", \"equal\"]) == \"equal\"\n    assert choose_most_frequent([\"x\", \"x\", \"y\", \"y\", \"z\"]) == \"y\"\n    assert choose_most_frequent([1, 2, 3, 4, 5, 1, 2, 3, 1]) == 1\n    assert choose_most_frequent([\"apple\", \"banana\", \"apple\"]) == \"apple\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest(*nums):\n    smallest = None\n    for num in nums:\n        if smallest is None or num < smallest:\n            smallest = num\n    return smallest"}, {"role": "assistant", "content": "def test_choose_smallest():\n    assert choose_smallest(3, 2, 1) == 1\n    assert choose_smallest(1, 2, 3) == 1\n    assert choose_smallest(2, 2, 2) == 2\n    assert choose_smallest(-1, -2, -3) == -3\n    assert choose_smallest(0, -1, 1) == -1\n    assert choose_smallest(100, 50, 25) == 25\n    assert choose_smallest(1) == 1\n    assert choose_smallest(-10, -20, -30) == -30\n    assert choose_smallest(1, 1, 1, 1) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_with_most_vowels(*strings):\n    vowels = 'aeiouAEIOU'\n    max_vowels = 0\n    chosen_string = \"\"\n    for s in strings:\n        count_vowels = sum(1 for char in s if char in vowels)\n        if count_vowels > max_vowels:\n            max_vowels = count_vowels\n            chosen_string = s\n        elif count_vowels == max_vowels and s > chosen_string:\n            chosen_string = s\n    return chosen_string"}, {"role": "assistant", "content": "def test_choose_string_with_most_vowels():\n    assert choose_string_with_most_vowels(\"hello\", \"world\", \"ai\") == \"hello\"\n    assert choose_string_with_most_vowels(\"a\", \"e\", \"i\", \"o\", \"u\") == \"u\"\n    assert choose_string_with_most_vowels(\"rhythm\", \"glyph\", \"fly\") == \"rhythm\"\n    assert choose_string_with_most_vowels(\"vowel\", \"consonant\") == \"consonant\"\n    assert choose_string_with_most_vowels(\"aaa\", \"bbb\", \"ccc\") == \"aaa\"\n    assert choose_string_with_most_vowels(\"aeiou\", \"bcdfg\", \"xyz\") == \"aeiou\"\n    assert choose_string_with_most_vowels(\"a\", \"aaa\", \"aa\") == \"aaa\"\n    assert choose_string_with_most_vowels(\"equal\", \"longer\", \"longest\") == \"equal\"\n    assert choose_string_with_most_vowels(\"a\", \"ab\", \"abc\") == \"abc\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_even(*nums):\n    smallest_even = None\n    for num in nums:\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n    if smallest_even is None:\n        return \"No even numbers\"\n    return smallest_even"}, {"role": "assistant", "content": "def test_choose_smallest_even():\n    assert choose_smallest_even(1, 2, 3, 4) == 2\n    assert choose_smallest_even(2, 2, 2, 2) == 2\n    assert choose_smallest_even(1, 1, 1, 1) == \"No even numbers\"\n    assert choose_smallest_even(0) == 0\n    assert choose_smallest_even(-2, -4, -6) == -6\n    assert choose_smallest_even(10, 20, 30) == 10\n    assert choose_smallest_even(1, 3, 5, 7) == \"No even numbers\"\n    assert choose_smallest_even(2) == 2\n    assert choose_smallest_even(-10, -20, -30) == -30"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_number_with_max_diff(*nums):\n    max_diff = 0\n    chosen_num = None\n    for num in nums:\n        diff = sum(abs(num - x) for x in nums)\n        if diff > max_diff:\n            max_diff = diff\n            chosen_num = num\n    return chosen_num"}, {"role": "assistant", "content": "def test_choose_number_with_max_diff():\n    assert choose_number_with_max_diff(1, 2, 3) == 1\n    assert choose_number_with_max_diff(-1, -2, -3) == -1\n    assert choose_number_with_max_diff(10, 20, 30) == 10\n    assert choose_number_with_max_diff(1, 1, 1) is None\n    assert choose_number_with_max_diff(5, 5, 5, 10) == 10\n    assert choose_number_with_max_diff(0, 0, 0) is None\n    assert choose_number_with_max_diff(-10, -20, -30) == -10\n    assert choose_number_with_max_diff(3, 6, 9, 12) == 3\n    assert choose_number_with_max_diff(-1, 0, 1) == -1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_starting_with_vowel(*strings):\n    vowels = 'aeiouAEIOU'\n    for s in strings:\n        if s[0] in vowels:\n            return s\n    return \"No string starts with a vowel\""}, {"role": "assistant", "content": "def test_choose_string_starting_with_vowel():\n    assert choose_string_starting_with_vowel(\"apple\", \"banana\", \"orange\") == \"apple\"\n    assert choose_string_starting_with_vowel(\"test\", \"test\", \"test\") == \"No string starts with a vowel\"\n    assert choose_string_starting_with_vowel(\"egg\", \"emphasis\") == \"egg\"\n    assert choose_string_starting_with_vowel(\"quick\", \"brown\", \"fox\") == \"No string starts with a vowel\"\n    assert choose_string_starting_with_vowel(\"upper\", \"lower\") == \"upper\"\n    assert choose_string_starting_with_vowel(\"a\", \"e\", \"i\") == \"a\"\n    assert choose_string_starting_with_vowel(\"AI\", \"rules\") == \"AI\"\n    assert choose_string_starting_with_vowel(\"buzz\", \"quiz\") == \"No string starts with a vowel\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_second_largest(*nums):\n    unique_nums = list(set(nums))\n    unique_nums.sort(reverse=True)\n    if len(unique_nums) < 2:\n        return \"Not enough distinct numbers\"\n    return unique_nums[1]"}, {"role": "assistant", "content": "def test_choose_second_largest():\n    assert choose_second_largest(1, 2, 3) == 2\n    assert choose_second_largest(3, 2, 1) == 2\n    assert choose_second_largest(1, 3, 2) == 2\n    assert choose_second_largest(10, 20, 30) == 20\n    assert choose_second_largest(30, 20, 10) == 20\n    assert choose_second_largest(20, 10, 30) == 20\n    assert choose_second_largest(1, 1, 1) == \"Not enough distinct numbers\"\n    assert choose_second_largest(1, 2) == 1\n    assert choose_second_largest(3, 3, 5, 5, 5) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_even_from_list(arr):\n    smallest_even = None\n    for num in arr:\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n    if smallest_even is None:\n        return \"No even numbers found\"\n    return smallest_even"}, {"role": "assistant", "content": "def test_choose_smallest_even_from_list():\n    assert choose_smallest_even_from_list([1, 3, 5, 7]) == \"No even numbers found\"\n    assert choose_smallest_even_from_list([2, 4, 6, 8]) == 2\n    assert choose_smallest_even_from_list([1, 2, 3, 4, 5]) == 2\n    assert choose_smallest_even_from_list([-2, 3, -4, 5, -6]) == -6\n    assert choose_smallest_even_from_list([10, 15, 7, 3]) == 10\n    assert choose_smallest_even_from_list([]) == \"No even numbers found\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longest_non_vowel_word(*words):\n    vowels = 'aeiouAEIOU'\n    longest = \"\"\n    for word in words:\n        if word[0] not in vowels:\n            if len(word) > len(longest):\n                longest = word\n    if not longest:\n        return \"No word found\"\n    return longest"}, {"role": "assistant", "content": "def test_choose_longest_non_vowel_word():\n    assert choose_longest_non_vowel_word(\"apple\", \"banana\", \"cherry\") == \"banana\"\n    assert choose_longest_non_vowel_word(\"Apple\", \"Orange\", \"Grape\") == \"Grape\"\n    assert choose_longest_non_vowel_word(\"egg\", \"ibex\", \"owl\") == \"No word found\"\n    assert choose_longest_non_vowel_word(\"cat\", \"dog\", \"fish\") == \"fish\"\n    assert choose_longest_non_vowel_word(\"bird\", \"fly\", \"ant\") == \"bird\"\n    assert choose_longest_non_vowel_word(\"enter\", \"exit\", \"island\") == 'No word found'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_negative(*nums):\n    smallest_negative = None\n    for num in nums:\n        if num < 0:\n            if smallest_negative is None or num > smallest_negative:\n                smallest_negative = num\n    if smallest_negative is None:\n        return \"No negative numbers\"\n    return smallest_negative"}, {"role": "assistant", "content": "def test_choose_smallest_negative():\n    assert choose_smallest_negative(1, 2, 3, 4) == \"No negative numbers\"\n    assert choose_smallest_negative(-1, -2, -3, -4) == -1\n    assert choose_smallest_negative(1, -2, 3, -4) == -2\n    assert choose_smallest_negative(-10, -20, -30, -40) == -10\n    assert choose_smallest_negative(-5, 0, -10) == -5\n    assert choose_smallest_negative(5, 10, 15) == \"No negative numbers\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_with_most_digits(*strings):\n    max_digits = 0\n    chosen_string = \"\"\n    for s in strings:\n        count_digits = sum(1 for char in s if char.isdigit())\n        if count_digits > max_digits:\n            max_digits = count_digits\n            chosen_string = s\n        elif count_digits == max_digits and s > chosen_string:\n            chosen_string = s\n    return chosen_string"}, {"role": "assistant", "content": "def test_choose_string_with_most_digits():\n    assert choose_string_with_most_digits(\"abc123\", \"def45\", \"gh6789\") == \"gh6789\"\n    assert choose_string_with_most_digits(\"123\", \"456\", \"789\") == \"789\"\n    assert choose_string_with_most_digits(\"abc\", \"def\", \"ghi\") == 'ghi'\n    assert choose_string_with_most_digits(\"ab123cd\", \"ef45gh\", \"ij678kl\") == \"ij678kl\"\n    assert choose_string_with_most_digits(\"abc1\", \"def2\", \"ghi3\") == \"ghi3\"\n    assert choose_string_with_most_digits(\"123abc\", \"456def\", \"789ghi\") == \"789ghi\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest_in_range(low, high, *nums):\n    largest_in_range = None\n    for num in nums:\n        if low <= num <= high:\n            if largest_in_range is None or num > largest_in_range:\n                largest_in_range = num\n    if largest_in_range is None:\n        return f\"No numbers in the range ({low}, {high})\"\n    return largest_in_range"}, {"role": "assistant", "content": "def test_choose_largest_in_range():\n    assert choose_largest_in_range(1, 10, 5, 3, 8, 15) == 8\n    assert choose_largest_in_range(0, 100, 50, 60, 70) == 70\n    assert choose_largest_in_range(-10, 10, -5, 0, 5) == 5\n    assert choose_largest_in_range(10, 20, 5, 25, 30) == \"No numbers in the range (10, 20)\"\n    assert choose_largest_in_range(1, 5, 2, 3, 4) == 4\n    assert choose_largest_in_range(100, 200, 150, 175, 190) == 190"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_even_number(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return num\n    return \"No even numbers\""}, {"role": "assistant", "content": "def test_choose_first_even_number():\n    assert choose_first_even_number([1, 3, 5, 7]) == \"No even numbers\"\n    assert choose_first_even_number([2, 4, 6, 8]) == 2\n    assert choose_first_even_number([1, 2, 3, 4]) == 2\n    assert choose_first_even_number([5, 7, 8, 10]) == 8\n    assert choose_first_even_number([10, 20, 30]) == 10\n    assert choose_first_even_number([1, 3, 7]) == \"No even numbers\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_shortest_no_space_string(*strings):\n    shortest = None\n    for s in strings:\n        if ' ' not in s:\n            if shortest is None or len(s) < len(shortest):\n                shortest = s\n    if shortest is None:\n        return \"No string without spaces\"\n    return shortest"}, {"role": "assistant", "content": "def test_choose_shortest_no_space_string():\n    assert choose_shortest_no_space_string(\"hello\", \"world\", \"hi\") == \"hi\"\n    assert choose_shortest_no_space_string(\"a b c\", \"de bf\", \"g h\") == 'No string without spaces'\n    assert choose_shortest_no_space_string(\"one\", \"two\", \"three\") == \"one\"\n    assert choose_shortest_no_space_string(\"no spaces\", \"he re\", \"or here\") == 'No string without spaces'\n    assert choose_shortest_no_space_string(\"apple\", \"banana\", \"cherry\") == \"apple\"\n    assert choose_shortest_no_space_string(\"ab\", \"abc\", \"abcd\") == \"ab\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_youngest_age(*ages):\n    youngest = None\n    for age in ages:\n        if youngest is None or age < youngest:\n            youngest = age\n    return youngest"}, {"role": "assistant", "content": "def test_choose_youngest_age():\n    assert choose_youngest_age(25, 30, 20, 35) == 20\n    assert choose_youngest_age(40, 50, 30, 20) == 20\n    assert choose_youngest_age(15, 20, 25, 10) == 10\n    assert choose_youngest_age(60, 55, 45, 35) == 35\n    assert choose_youngest_age(5, 10, 15, 20) == 5\n    assert choose_youngest_age(100, 90, 80, 70) == 70"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_with_most_unique_chars(*strings):\n    max_unique = 0\n    chosen_string = \"\"\n    for s in strings:\n        unique_chars = len(set(s))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            chosen_string = s\n    return chosen_string"}, {"role": "assistant", "content": "def test_choose_string_with_most_unique_chars():\n    assert choose_string_with_most_unique_chars(\"apple\", \"banana\", \"cherry\") == 'cherry'\n    assert choose_string_with_most_unique_chars(\"cat\", \"dog\", \"elephant\") == \"elephant\"\n    assert choose_string_with_most_unique_chars(\"abcd\", \"efgh\", \"ijkl\") == \"abcd\"\n    assert choose_string_with_most_unique_chars(\"unique\", \"characters\", \"test\") == \"characters\"\n    assert choose_string_with_most_unique_chars(\"simple\", \"complex\", \"word\") == \"complex\"\n    assert choose_string_with_most_unique_chars(\"first\", \"second\", \"third\") == \"second\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_even_divisible_by_three(arr):\n    for num in arr:\n        if num % 2 == 0 and num % 3 == 0:\n            return num\n    return \"No even number divisible by 3\""}, {"role": "assistant", "content": "def test_choose_first_even_divisible_by_three():\n    assert choose_first_even_divisible_by_three([1, 3, 5, 7]) == \"No even number divisible by 3\"\n    assert choose_first_even_divisible_by_three([2, 4, 6, 8]) == 6\n    assert choose_first_even_divisible_by_three([12, 18, 24]) == 12\n    assert choose_first_even_divisible_by_three([7, 14, 21, 28]) == 'No even number divisible by 3'\n    assert choose_first_even_divisible_by_three([3, 6, 9, 12]) == 6\n    assert choose_first_even_divisible_by_three([2, 5, 8, 11]) == \"No even number divisible by 3\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest_less_than(value, *nums):\n    largest = None\n    for num in nums:\n        if num < value:\n            if largest is None or num > largest:\n                largest = num\n    if largest is None:\n        return f\"No numbers less than {value}\"\n    return largest"}, {"role": "assistant", "content": "def test_choose_largest_less_than():\n    assert choose_largest_less_than(10, 1, 2, 3, 4) == 4\n    assert choose_largest_less_than(-20, 1, 2, 3) == 'No numbers less than -20'\n    assert choose_largest_less_than(0, -1, -2, -3) == -1\n    assert choose_largest_less_than(1, 5, 6, 8) == 'No numbers less than 1'\n    assert choose_largest_less_than(15, 10, 12, 14) == 14\n    assert choose_largest_less_than(2, 1, 3, 5) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_greater_than(value, *nums):\n    for num in nums:\n        if num > value:\n            return num\n    return f\"No numbers greater than {value}\""}, {"role": "assistant", "content": "def test_choose_first_greater_than():\n    assert choose_first_greater_than(10, 5, 15, 20) == 15\n    assert choose_first_greater_than(0, 1, 2, 3) == 1\n    assert choose_first_greater_than(-5, -1, 0, 5) == -1\n    assert choose_first_greater_than(100, 150, 200, 250) == 150\n    assert choose_first_greater_than(3, 2, 4, 5) == 4\n    assert choose_first_greater_than(10, 5, 6, 7) == f\"No numbers greater than 10\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_with_length_divisible_by_three(*strings):\n    for s in strings:\n        if len(s) % 3 == 0:\n            return s\n    return \"No string with length divisible by 3\""}, {"role": "assistant", "content": "def test_choose_string_with_length_divisible_by_three():\n    assert choose_string_with_length_divisible_by_three(\"abcd\", \"defg\", \"hijklmn\") == \"No string with length divisible by 3\"\n    assert choose_string_with_length_divisible_by_three(\"abcdefgh\", \"ijklmnopqrs\", \"tuv\") == \"tuv\"\n    assert choose_string_with_length_divisible_by_three(\"123456\", \"789\", \"0123\") == \"123456\"\n    assert choose_string_with_length_divisible_by_three(\"aaaaaa\", \"bbbbbbb\", \"ccccccccc\") == \"aaaaaa\"\n    assert choose_string_with_length_divisible_by_three(\"hello\", \"world\", \"test\") == \"No string with length divisible by 3\"\n    assert choose_string_with_length_divisible_by_three(\"one\", \"two\", \"three\") == 'one'"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_most_expensive_item(*items):\n    max_price = 0\n    most_expensive = None\n    for item in items:\n        price = item['price']\n        if price > max_price:\n            max_price = price\n            most_expensive = item\n    return most_expensive if most_expensive else \"No items found\""}, {"role": "assistant", "content": "def test_choose_most_expensive_item():\n    assert choose_most_expensive_item({\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 30}) == {\"name\": \"item3\", \"price\": 30}\n    assert choose_most_expensive_item({\"name\": \"item4\", \"price\": 5}, {\"name\": \"item5\", \"price\": 15}, {\"name\": \"item6\", \"price\": 25}) == {\"name\": \"item6\", \"price\": 25}\n    assert choose_most_expensive_item({\"name\": \"item7\", \"price\": 100}, {\"name\": \"item8\", \"price\": 200}, {\"name\": \"item9\", \"price\": 300}) == {\"name\": \"item9\", \"price\": 300}\n    assert choose_most_expensive_item({\"name\": \"item10\", \"price\": 50}, {\"name\": \"item11\", \"price\": 75}, {\"name\": \"item12\", \"price\": 100}) == {\"name\": \"item12\", \"price\": 100}\n    assert choose_most_expensive_item({\"name\": \"item13\", \"price\": 60}, {\"name\": \"item14\", \"price\": 80}, {\"name\": \"item15\", \"price\": 120}) == {\"name\": \"item15\", \"price\": 120}\n    assert choose_most_expensive_item({\"name\": \"item16\", \"price\": 10}, {\"name\": \"item17\", \"price\": 5}) == {\"name\": \"item16\", \"price\": 10}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_shorter_than(length, *strings):\n    for s in strings:\n        if len(s) < length:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_string_shorter_than():\n    assert choose_string_shorter_than(5, \"apple\", \"cat\", \"banana\") == \"cat\"\n    assert choose_string_shorter_than(4, \"dog\", \"fish\", \"whale\") == \"dog\"\n    assert choose_string_shorter_than(7, \"elephant\", \"snake\", \"shark\") == \"snake\"\n    assert choose_string_shorter_than(3, \"sun\", \"moon\", \"star\") is None\n    assert choose_string_shorter_than(6, \"planet\", \"comet\", \"asteroid\") == \"comet\"\n    assert choose_string_shorter_than(8, \"galaxy\", \"universe\", \"cosmos\") == \"galaxy\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_not_divisible_by_2_and_3(arr):\n    for num in arr:\n        if num % 2 != 0 and num % 3 != 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_not_divisible_by_2_and_3():\n    assert choose_first_not_divisible_by_2_and_3([1, 2, 3, 4, 5]) == 1\n    assert choose_first_not_divisible_by_2_and_3([6, 9, 12, 15]) is None\n    assert choose_first_not_divisible_by_2_and_3([7, 14, 21, 28]) == 7\n    assert choose_first_not_divisible_by_2_and_3([8, 11, 13, 16]) == 11\n    assert choose_first_not_divisible_by_2_and_3([10, 25, 30, 45]) == 25\n    assert choose_first_not_divisible_by_2_and_3([17, 34, 51, 68]) == 17"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_word_with_only_vowels(*words):\n    vowels = 'aeiouAEIOU'\n    for word in words:\n        if all(char in vowels for char in word):\n            return word\n    return None"}, {"role": "assistant", "content": "def test_choose_word_with_only_vowels():\n    assert choose_word_with_only_vowels(\"aeiou\", \"io\", \"u\") == \"aeiou\"\n    assert choose_word_with_only_vowels(\"aaaa\", \"eieio\", \"iiiii\") == \"aaaa\"\n    assert choose_word_with_only_vowels(\"oo\", \"u\", \"eeee\") == \"oo\"\n    assert choose_word_with_only_vowels(\"ui\", \"oe\", \"aa\") == \"ui\"\n    assert choose_word_with_only_vowels(\"o\", \"e\", \"i\") == \"o\"\n    assert choose_word_with_only_vowels(\"apple\", \"banana\", \"cherry\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest_less_than_or_equal_to(value, *nums):\n    largest = None\n    for num in nums:\n        if num <= value:\n            if largest is None or num > largest:\n                largest = num\n    return largest if largest is not None else None"}, {"role": "assistant", "content": "def test_choose_largest_less_than_or_equal_to():\n    assert choose_largest_less_than_or_equal_to(10, 1, 2, 3, 4) == 4\n    assert choose_largest_less_than_or_equal_to(5, 1, 2, 3) == 3\n    assert choose_largest_less_than_or_equal_to(0, -1, -2, -3) == -1\n    assert choose_largest_less_than_or_equal_to(7, 5, 6, 8) == 6\n    assert choose_largest_less_than_or_equal_to(15, 10, 12, 14) == 14\n    assert choose_largest_less_than_or_equal_to(2, 1, 3, 5) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longest_digit_string(*strings):\n    longest = None\n    for s in strings:\n        if s.isdigit():\n            if longest is None or len(s) > len(longest):\n                longest = s\n    return longest if longest is not None else None"}, {"role": "assistant", "content": "def test_choose_longest_digit_string():\n    assert choose_longest_digit_string(\"123\", \"45678\", \"90\") == \"45678\"\n    assert choose_longest_digit_string(\"112233\", \"44556677\", \"889900\") == \"44556677\"\n    assert choose_longest_digit_string(\"abc123\", \"def456\", \"ghi789\") is None\n    assert choose_longest_digit_string(\"111\", \"2222\", \"333\") == \"2222\"\n    assert choose_longest_digit_string(\"99999\", \"8888\", \"7777\") == \"99999\"\n    assert choose_longest_digit_string(\"1234567890\", \"0987654321\", \"1112131415\") == \"1234567890\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_shortest_string_without_vowels(*strings):\n    vowels = 'aeiouAEIOU'\n    shortest = None\n    for s in strings:\n        if all(char not in vowels for char in s):\n            if shortest is None or len(s) < len(shortest):\n                shortest = s\n    return shortest if shortest is not None else None"}, {"role": "assistant", "content": "def test_choose_shortest_string_without_vowels():\n    assert choose_shortest_string_without_vowels(\"bcdf\", \"ghjkl\", \"mnpqr\") == \"bcdf\"\n    assert choose_shortest_string_without_vowels(\"bcdfg\", \"hjklm\", \"npqr\") == \"npqr\"\n    assert choose_shortest_string_without_vowels(\"b\", \"c\", \"d\") == \"b\"\n    assert choose_shortest_string_without_vowels(\"xyz\", \"wxy\", \"uvw\") == 'xyz'\n    assert choose_shortest_string_without_vowels(\"apple\", \"banana\", \"cherry\") is None\n    assert choose_shortest_string_without_vowels(\"bcd\", \"ghj\", \"mn\") == \"mn\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest_even_less_than(value, *nums):\n    largest = None\n    for num in nums:\n        if num % 2 == 0 and num < value:\n            if largest is None or num > largest:\n                largest = num\n    return largest if largest is not None else None"}, {"role": "assistant", "content": "def test_choose_largest_even_less_than():\n    assert choose_largest_even_less_than(10, 1, 2, 3, 4, 5, 6, 7, 8, 9) == 8\n    assert choose_largest_even_less_than(5, 1, 3, 5) is None\n    assert choose_largest_even_less_than(20, 10, 15, 20, 25) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_second_smallest(*nums):\n    unique_nums = list(set(nums))\n    unique_nums.sort()\n    if len(unique_nums) < 2:\n        return None\n    return unique_nums[1]"}, {"role": "assistant", "content": "def test_choose_second_smallest():\n    assert choose_second_smallest(5, 3, 8, 6, 7, 2) == 3\n    assert choose_second_smallest(4, 4, 4) is None\n    assert choose_second_smallest(8, 1, 4, 5, 7) == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_start_and_end_same(*strings):\n    for s in strings:\n        if s[0] == s[-1]:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_string_start_and_end_same():\n    assert choose_string_start_and_end_same(\"level\", \"racecar\", \"deified\") == \"level\"\n    assert choose_string_start_and_end_same(\"hello\", \"world\") is None\n    assert choose_string_start_and_end_same(\"anna\", \"noon\") == \"anna\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_divisible_by_5_and_7(arr):\n    for num in arr:\n        if num % 5 == 0 and num % 7 == 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_divisible_by_5_and_7():\n    assert choose_first_divisible_by_5_and_7([35, 70, 10, 14, 21]) == 35\n    assert choose_first_divisible_by_5_and_7([2, 4, 7, 8, 10]) is None\n    assert choose_first_divisible_by_5_and_7([105, 140, 28, 49]) == 105"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_shortest_string_with_digit(*strings):\n    for s in strings:\n        if any(char.isdigit() for char in s):\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_shortest_string_with_digit():\n    assert choose_shortest_string_with_digit(\"abc1\", \"a2b\", \"abcd3\") == 'abc1'\n    assert choose_shortest_string_with_digit(\"abc\", \"def\") is None\n    assert choose_shortest_string_with_digit(\"12345\", \"67890\") == \"12345\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_most_expensive_below_price(limit, *items):\n    max_price = None\n    most_expensive = None\n    for item in items:\n        if item['price'] <= limit:\n            if max_price is None or item['price'] > max_price:\n                most_expensive = item\n                max_price = item['price']\n    return most_expensive if most_expensive else None"}, {"role": "assistant", "content": "def test_choose_most_expensive_below_price():\n    assert choose_most_expensive_below_price(120, *[{'name': 'item1', 'price': 50}, {'name': 'item2', 'price': 100}, {'name': 'item3', 'price': 150}]) == {'name': 'item2', 'price': 100}\n    assert choose_most_expensive_below_price(40, *[{'name': 'item1', 'price': 50}, {'name': 'item2', 'price': 100}, {'name': 'item3', 'price': 150}]) is None\n    assert choose_most_expensive_below_price(60, *[{'name': 'item1', 'price': 50}, {'name': 'item2', 'price': 100}, {'name': 'item3', 'price': 150}]) == {'name': 'item1', 'price': 50}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_square_number(arr):\n    for num in arr:\n        if int(num ** 0.5) ** 2 == num:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_square_number():\n    assert choose_first_square_number([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert choose_first_square_number([10, 15, 20, 25, 30]) == 25\n    assert choose_first_square_number([2, 3, 5, 6, 7]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_oldest_age(*ages):\n    oldest = None\n    for age in ages:\n        if oldest is None or age > oldest:\n            oldest = age\n    return oldest if oldest is not None else None"}, {"role": "assistant", "content": "def test_choose_oldest_age():\n    assert choose_oldest_age(20, 35, 50, 40) == 50\n    assert choose_oldest_age(18, 12, 15) == 18\n    assert choose_oldest_age(70, 85, 90, 95) == 95"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_divisible_by_2_not_3(arr):\n    for num in arr:\n        if num % 2 == 0 and num % 3 != 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_divisible_by_2_not_3():\n    assert choose_first_divisible_by_2_not_3([4, 6, 8, 9, 12]) == 4\n    assert choose_first_divisible_by_2_not_3([9, 15, 21, 33]) is None\n    assert choose_first_divisible_by_2_not_3([10, 14, 20, 22]) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longest_all_digits_string(*strings):\n    longest = None\n    for s in strings:\n        if s.isdigit():\n            if longest is None or len(s) > len(longest):\n                longest = s\n    return longest if longest is not None else None"}, {"role": "assistant", "content": "def test_choose_longest_all_digits_string():\n    assert choose_longest_all_digits_string(\"123\", \"12345\", \"678\") == \"12345\"\n    assert choose_longest_all_digits_string(\"abc\", \"def\") is None\n    assert choose_longest_all_digits_string(\"12\", \"3456\", \"7890\") == \"3456\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_even_greater_than(value, *nums):\n    for num in nums:\n        if num % 2 == 0 and num > value:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_even_greater_than():\n    assert choose_first_even_greater_than(10, 11, 12, 13, 14) == 12\n    assert choose_first_even_greater_than(15, 20, 22, 24, 26) == 20\n    assert choose_first_even_greater_than(30, 25, 35) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_non_numeric_string(*strings):\n    for s in strings:\n        if not s.isdigit():\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_first_non_numeric_string():\n    assert choose_first_non_numeric_string(\"123\", \"abc\", \"456\", \"789\") == \"abc\"\n    assert choose_first_non_numeric_string(\"001\", \"010\") is None\n    assert choose_first_non_numeric_string(\"apple\", \"banana\", \"cherry\") == \"apple\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_palindrome(*strings):\n    for s in strings:\n        if s == s[::-1]:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_palindrome():\n    assert choose_palindrome(\"level\", \"world\", \"racecar\") == \"level\"\n    assert choose_palindrome(\"hello\", \"world\") is None\n    assert choose_palindrome(\"noon\", \"deified\", \"civic\") == \"noon\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_most_expensive_under_100(*items):\n    max_price = None\n    most_expensive = None\n    for item in items:\n        if item['price'] <= 100:\n            if max_price is None or item['price'] > max_price:\n                most_expensive = item\n                max_price = item['price']\n    return most_expensive if most_expensive else None"}, {"role": "assistant", "content": "def test_choose_most_expensive_under_100():\n    assert choose_most_expensive_under_100(*[{'name': 'item1', 'price': 60}, {'name': 'item2', 'price': 80}, {'name': 'item3', 'price': 100}]) == {'name': 'item3', 'price': 100}\n    assert choose_most_expensive_under_100({'name': 'item4', 'price': 110}) is None\n    assert choose_most_expensive_under_100({'name': 'item5', 'price': 90}) == {'name': 'item5', 'price': 90}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_even_greater_than_10(arr):\n    for num in arr:\n        if num % 2 == 0 and num > 10:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_even_greater_than_10():\n    assert choose_first_even_greater_than_10([9, 11, 13, 14, 16]) == 14\n    assert choose_first_even_greater_than_10([5, 7, 8, 10]) is None\n    assert choose_first_even_greater_than_10([12, 15, 18, 20]) == 12"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_divisible_by_5(*nums):\n    smallest = None\n    for num in nums:\n        if num % 5 == 0:\n            if smallest is None or num < smallest:\n                smallest = num\n    return smallest if smallest is not None else None"}, {"role": "assistant", "content": "def test_choose_smallest_divisible_by_5():\n    assert choose_smallest_divisible_by_5(10, 25, 30, 15) == 10\n    assert choose_smallest_divisible_by_5(4, 8, 16, 32) is None\n    assert choose_smallest_divisible_by_5(45, 50, 55) == 45"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_long_word_starting_with_consonant(*words):\n    vowels = 'aeiouAEIOU'\n    for word in words:\n        if len(word) > 5 and word[0] not in vowels:\n            return word\n    return None"}, {"role": "assistant", "content": "def test_choose_first_long_word_starting_with_consonant():\n    assert choose_first_long_word_starting_with_consonant(\"banana\", \"strawberry\", \"apple\", \"grape\") == 'banana'\n    assert choose_first_long_word_starting_with_consonant(\"orange\", \"apricot\", \"kiwi\") is None\n    assert choose_first_long_word_starting_with_consonant(\"blackberry\", \"blueberry\", \"raspberry\") == \"blackberry\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest_less_than_20(*nums):\n    largest = None\n    for num in nums:\n        if num < 20:\n            if largest is None or num > largest:\n                largest = num\n    return largest if largest is not None else None"}, {"role": "assistant", "content": "def test_choose_largest_less_than_20():\n    assert choose_largest_less_than_20(5, 10, 15, 18) == 18\n    assert choose_largest_less_than_20(20, 21, 22) is None\n    assert choose_largest_less_than_20(19, 1, 3, 6, 14) == 19"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_starting_with_uppercase(*strings):\n    for s in strings:\n        if s[0].isupper():\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_string_starting_with_uppercase():\n    assert choose_string_starting_with_uppercase(\"Apple\", \"banana\", \"Cherry\", \"date\") == \"Apple\"\n    assert choose_string_starting_with_uppercase(\"eggplant\", \"fig\", \"grape\") is None\n    assert choose_string_starting_with_uppercase(\"Honeydew\", \"Ice\", \"Juice\") == \"Honeydew\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_non_even_non_prime(arr):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for num in arr:\n        if num % 2 != 0 and not is_prime(num):\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_non_even_non_prime():\n    assert choose_first_non_even_non_prime([2, 4, 6, 9, 12, 15]) == 9\n    assert choose_first_non_even_non_prime([2, 3, 5, 7, 11]) is None\n    assert choose_first_non_even_non_prime([1, 22, 25, 28]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_shortest_string_starting_with_digit(*strings):\n    for s in strings:\n        if s[0].isdigit():\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_shortest_string_starting_with_digit():\n    assert choose_shortest_string_starting_with_digit(\"abc\", \"1abc\", \"2a\") == \"1abc\"\n    assert choose_shortest_string_starting_with_digit(\"abc\", \"abc1\", \"2a\") == \"2a\"\n    assert choose_shortest_string_starting_with_digit(\"abc\", \"a1bc\", \"abc\") is None\n    assert choose_shortest_string_starting_with_digit(\"1abc\", \"2abc\", \"3abc\") == \"1abc\"\n    assert choose_shortest_string_starting_with_digit(\"123\", \"456\", \"789\") == \"123\"\n    assert choose_shortest_string_starting_with_digit(\"abc\", \"def\", \"ghi\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_anagram_of(string, *strings):\n    sorted_string = sorted(string)\n    for s in strings:\n        if sorted(s) == sorted_string:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_anagram_of():\n    assert choose_anagram_of(\"listen\", \"enlist\", \"google\", \"inlets\") == \"enlist\"\n    assert choose_anagram_of(\"listen\", \"google\", \"facebook\", \"silent\") == \"silent\"\n    assert choose_anagram_of(\"abc\", \"def\", \"ghi\", \"jkl\") is None\n    assert choose_anagram_of(\"cat\", \"tac\", \"act\") == \"tac\"\n    assert choose_anagram_of(\"cat\", \"dog\", \"god\") is None\n    assert choose_anagram_of(\"abc\", \"bca\", \"cab\", \"bac\") == \"bca\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_greater_than(value, *nums):\n    smallest = None\n    for num in nums:\n        if num > value:\n            if smallest is None or num < smallest:\n                smallest = num\n    return smallest if smallest is not None else None"}, {"role": "assistant", "content": "def test_choose_smallest_greater_than():\n    assert choose_smallest_greater_than(5, 1, 2, 6, 8, 7) == 6\n    assert choose_smallest_greater_than(3, 4, 5, 1, 2, 6) == 4\n    assert choose_smallest_greater_than(10, 11, 12, 13, 14) == 11\n    assert choose_smallest_greater_than(0, -1, -2, 1, 2, 3) == 1\n    assert choose_smallest_greater_than(50, 100, 200, 300) == 100\n    assert choose_smallest_greater_than(100, 50, 60, 70, 80) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_even_length_word(*words):\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None"}, {"role": "assistant", "content": "def test_choose_first_even_length_word():\n    assert choose_first_even_length_word(\"one\", \"two\", \"three\", \"four\") == \"four\"\n    assert choose_first_even_length_word(\"hello\", \"world\", \"Python\") == 'Python'\n    assert choose_first_even_length_word(\"apple\", \"banana\", \"cherry\", \"dates\") == \"banana\"\n    assert choose_first_even_length_word(\"apple\", \"b\", \"c\", \"dd\") == \"dd\"\n    assert choose_first_even_length_word(\"a\", \"bb\", \"ccc\", \"dddd\") == \"bb\"\n    assert choose_first_even_length_word(\"a\", \"b\", \"c\", \"d\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longer_than_average(*strings):\n    avg_length = sum(len(s) for s in strings) / len(strings) if strings else 0\n    for s in strings:\n        if len(s) > avg_length:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_longer_than_average():\n    assert choose_longer_than_average(\"a\", \"bb\", \"ccc\", \"dddd\") == 'ccc'\n    assert choose_longer_than_average(\"short\", \"longer\", \"longest\") == 'longest'\n    assert choose_longer_than_average(\"aa\", \"bbb\", \"cccc\") == 'cccc'\n    assert choose_longer_than_average(\"one\", \"one\", \"one\", \"one\") is None\n    assert choose_longer_than_average(\"one\", \"two\", \"three\") == \"three\"\n    assert choose_longer_than_average(\"a\", \"a\", \"a\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_with_only_letters(*strings):\n    for s in strings:\n        if s.isalpha():\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_string_with_only_letters():\n    assert choose_string_with_only_letters(\"abc123\", \"def456\", \"ghi789\") is None\n    assert choose_string_with_only_letters(\"abc\", \"def\", \"ghi\") == \"abc\"\n    assert choose_string_with_only_letters(\"123\", \"456\", \"789\") is None\n    assert choose_string_with_only_letters(\"abc\", \"def\", \"123\") == \"abc\"\n    assert choose_string_with_only_letters(\"abc123\", \"def\", \"ghi\") == \"def\"\n    assert choose_string_with_only_letters(\"abc\", \"123\", \"def456\") == \"abc\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_oldest_under_30(*ages):\n    oldest = None\n    for age in ages:\n        if age < 30:\n            if oldest is None or age > oldest:\n                oldest = age\n    return oldest if oldest is not None else None"}, {"role": "assistant", "content": "def test_choose_oldest_under_30():\n    assert choose_oldest_under_30(25, 20, 18, 22) == 25\n    assert choose_oldest_under_30(10, 15, 30, 35) == 15\n    assert choose_oldest_under_30(30, 40, 50) is None\n    assert choose_oldest_under_30(29, 28, 27, 26) == 29\n    assert choose_oldest_under_30(25, 29, 21, 28) == 29\n    assert choose_oldest_under_30(20, 19, 18, 25) == 25"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_multiple_of_4_not_5(arr):\n    for num in arr:\n        if num % 4 == 0 and num % 5 != 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_multiple_of_4_not_5():\n    assert choose_multiple_of_4_not_5([4, 8, 12, 16, 20]) == 4\n    assert choose_multiple_of_4_not_5([5, 10, 15, 20, 25]) is None\n    assert choose_multiple_of_4_not_5([7, 14, 21, 28, 35]) == 28\n    assert choose_multiple_of_4_not_5([8, 16, 24, 32, 40]) == 8\n    assert choose_multiple_of_4_not_5([6, 12, 18, 24, 30]) == 12\n    assert choose_multiple_of_4_not_5([3, 6, 9, 12, 15]) == 12"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_length_divisible_by_3(*strings):\n    for s in strings:\n        if len(s) % 3 == 0:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_string_length_divisible_by_3():\n    assert choose_string_length_divisible_by_3(\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\") == \"ccc\"\n    assert choose_string_length_divisible_by_3(\"abcdef\", \"ghijk\", \"lmnopqr\") == \"abcdef\"\n    assert choose_string_length_divisible_by_3(\"a\", \"b\", \"c\") is None\n    assert choose_string_length_divisible_by_3(\"123\", \"456\", \"789\") == \"123\"\n    assert choose_string_length_divisible_by_3(\"111\", \"222\", \"333\") == \"111\"\n    assert choose_string_length_divisible_by_3(\"a\", \"bbb\", \"cc\", \"ddd\") == \"bbb\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_even_greater_than_10(*nums):\n    smallest = None\n    for num in nums:\n        if num % 2 == 0 and num > 10:\n            if smallest is None or num < smallest:\n                smallest = num\n    return smallest if smallest is not None else None"}, {"role": "assistant", "content": "def test_choose_smallest_even_greater_than_10():\n    assert choose_smallest_even_greater_than_10(12, 14, 16, 18, 20) == 12\n    assert choose_smallest_even_greater_than_10(21, 22, 23, 24, 25) == 22\n    assert choose_smallest_even_greater_than_10(10, 11, 12, 13, 14) == 12\n    assert choose_smallest_even_greater_than_10(30, 32, 34, 36) == 30\n    assert choose_smallest_even_greater_than_10(8, 9, 10, 11, 12) == 12\n    assert choose_smallest_even_greater_than_10(50, 60, 70) == 50"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_divisible_by_2_and_5(arr):\n    for num in arr:\n        if num % 2 == 0 and num % 5 == 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_divisible_by_2_and_5():\n    assert choose_first_divisible_by_2_and_5([10, 20, 30, 40, 50]) == 10\n    assert choose_first_divisible_by_2_and_5([5, 10, 15, 20, 25]) == 10\n    assert choose_first_divisible_by_2_and_5([1, 3, 5, 7, 9]) is None\n    assert choose_first_divisible_by_2_and_5([2, 4, 6, 8, 10]) == 10\n    assert choose_first_divisible_by_2_and_5([12, 14, 16, 18, 20]) == 20\n    assert choose_first_divisible_by_2_and_5([15, 25, 35, 45, 50]) == 50"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longest_non_digit_starting_string(*strings):\n    for s in strings:\n        if not s[0].isdigit():\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_longest_non_digit_starting_string():\n    assert choose_longest_non_digit_starting_string(\"abc1\", \"def2\", \"ghi3\") == \"abc1\"\n    assert choose_longest_non_digit_starting_string(\"1abc\", \"2def\", \"3ghi\") is None\n    assert choose_longest_non_digit_starting_string(\"abcd\", \"efgh\", \"ijkl\") == \"abcd\"\n    assert choose_longest_non_digit_starting_string(\"1abcd\", \"2efgh\", \"3ijkl\") is None\n    assert choose_longest_non_digit_starting_string(\"abcd\", \"1efgh\", \"ijkl\") == \"abcd\"\n    assert choose_longest_non_digit_starting_string(\"1abcd\", \"efgh\", \"ijkl\") == \"efgh\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_all_uppercase_word(*words):\n    for word in words:\n        if word.isupper():\n            return word\n    return None"}, {"role": "assistant", "content": "def test_choose_first_all_uppercase_word():\n    assert choose_first_all_uppercase_word(\"HELLO\", \"WORLD\", \"PYTHON\") == \"HELLO\"\n    assert choose_first_all_uppercase_word(\"hello\", \"WORLD\", \"python\") == \"WORLD\"\n    assert choose_first_all_uppercase_word(\"hello\", \"world\", \"python\") is None\n    assert choose_first_all_uppercase_word(\"HELLO\", \"WORLD\", \"PYTHON\") == \"HELLO\"\n    assert choose_first_all_uppercase_word(\"hello\", \"WORLD\", \"PYTHON\") == \"WORLD\"\n    assert choose_first_all_uppercase_word(\"hello\", \"world\", \"PYTHON\") == \"PYTHON\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_youngest_over_50(*ages):\n    youngest = None\n    for age in ages:\n        if age > 50:\n            if youngest is None or age < youngest:\n                youngest = age\n    return youngest if youngest is not None else None"}, {"role": "assistant", "content": "def test_choose_youngest_over_50():\n    assert choose_youngest_over_50(55, 60, 65, 70) == 55\n    assert choose_youngest_over_50(50, 55, 60, 65) == 55\n    assert choose_youngest_over_50(40, 45, 50, 55) == 55\n    assert choose_youngest_over_50(45, 50, 55, 60) == 55\n    assert choose_youngest_over_50(35, 40, 45, 50) is None\n    assert choose_youngest_over_50(25, 30, 35, 40) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_largest_multiple_of_3_not_2(arr):\n    largest = None\n    for num in arr:\n        if num % 3 == 0 and num % 2 != 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest if largest is not None else None"}, {"role": "assistant", "content": "def test_choose_largest_multiple_of_3_not_2():\n    assert choose_largest_multiple_of_3_not_2([3, 6, 9, 12, 15]) == 15\n    assert choose_largest_multiple_of_3_not_2([1, 2, 3, 4, 5]) == 3\n    assert choose_largest_multiple_of_3_not_2([5, 10, 15, 20, 25]) == 15\n    assert choose_largest_multiple_of_3_not_2([9, 18, 27, 36, 45]) == 45\n    assert choose_largest_multiple_of_3_not_2([12, 24, 36, 48, 60]) is None\n    assert choose_largest_multiple_of_3_not_2([11, 22, 33, 44, 55]) == 33"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_string_with_uppercase_and_digit(*strings):\n    for s in strings:\n        if any(char.isdigit() for char in s) and any(char.isupper() for char in s):\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_string_with_uppercase_and_digit():\n    assert choose_string_with_uppercase_and_digit(\"Abc1\", \"def2\", \"ghi3\") == \"Abc1\"\n    assert choose_string_with_uppercase_and_digit(\"1abc\", \"2def\", \"3ghi\") is None\n    assert choose_string_with_uppercase_and_digit(\"Abc\", \"def\", \"Ghi\") is None\n    assert choose_string_with_uppercase_and_digit(\"Abc1\", \"Def2\", \"Ghi3\") == \"Abc1\"\n    assert choose_string_with_uppercase_and_digit(\"1Abc\", \"2Def\", \"3Ghi\") == \"1Abc\"\n    assert choose_string_with_uppercase_and_digit(\"abc1\", \"def2\", \"ghi3\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_even_less_than_50(arr):\n    for num in arr:\n        if num % 2 == 0 and num < 50:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_even_less_than_50():\n    assert choose_first_even_less_than_50([10, 20, 30, 40, 50]) == 10\n    assert choose_first_even_less_than_50([5, 10, 15, 20, 25]) == 10\n    assert choose_first_even_less_than_50([1, 3, 5, 7, 9]) is None\n    assert choose_first_even_less_than_50([2, 4, 6, 8, 10]) == 2\n    assert choose_first_even_less_than_50([12, 14, 16, 18, 20]) == 12\n    assert choose_first_even_less_than_50([15, 25, 35, 45, 50]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_shortest_no_space_string_3(*strings):\n    for s in strings:\n        if \" \" not in s:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_choose_shortest_no_space_string_3():\n    assert choose_shortest_no_space_string_3(\"hello\", \"world\", \"python\") == \"hello\"\n    assert choose_shortest_no_space_string_3(\"this is a test\", \"no spaces here\", \"short\") == \"short\"\n    assert choose_shortest_no_space_string_3(\"a\", \"ab\", \"abc\") == \"a\"\n    assert choose_shortest_no_space_string_3(\"abc\", \"abcd\", \"abcdef\") == \"abc\"\n    assert choose_shortest_no_space_string_3(\"hello world\", \"python programming\", \"short text\") is None\n    assert choose_shortest_no_space_string_3(\"no space\", \"shortest\", \"longest text\") == \"shortest\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_repeated_string(*strings):\n    for s in strings:\n        if len(s) % 2 == 0:\n            half = len(s) // 2\n            if s[:half] == s[half:]:\n                return s\n    return None"}, {"role": "assistant", "content": "def test_choose_repeated_string():\n    assert choose_repeated_string(\"abcabc\", \"defdef\", \"ghighi\") == \"abcabc\"\n    assert choose_repeated_string(\"hello\", \"world\", \"python\") is None\n    assert choose_repeated_string(\"aabbcc\", \"ddeeff\", \"gghhii\") is None\n    assert choose_repeated_string(\"abcabc\", \"abc\", \"def\") == \"abcabc\"\n    assert choose_repeated_string(\"xyzxyz\", \"xyz\", \"xyxxyx\") == \"xyzxyz\"\n    assert choose_repeated_string(\"repeatrepeat\", \"repe\", \"repeated\") == \"repeatrepeat\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_number_in_range_0_100(*nums):\n    for num in nums:\n        if 0 < num <= 100:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_number_in_range_0_100():\n    assert choose_number_in_range_0_100(0, 10, 20, 30, 40) == 10\n    assert choose_number_in_range_0_100(50, 60, 70, 80, 90) == 50\n    assert choose_number_in_range_0_100(100, 110, 120, 130, 140) == 100\n    assert choose_number_in_range_0_100(-10, -20, -30) is None\n    assert choose_number_in_range_0_100(-15, -25, -35, -45, -55) is None\n    assert choose_number_in_range_0_100(1, 2, 3, 4, 5) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_smallest_odd_number(*nums):\n    smallest_odd = None\n    for num in nums:\n        if num % 2 != 0:\n            if smallest_odd is None or num < smallest_odd:\n                smallest_odd = num\n    return smallest_odd if smallest_odd is not None else None"}, {"role": "assistant", "content": "def test_choose_smallest_odd_number():\n    assert choose_smallest_odd_number(5, 3, 9) == 3\n    assert choose_smallest_odd_number(2, 4, 6) is None\n    assert choose_smallest_odd_number(7, 3, -1, -5) == -5\n    assert choose_smallest_odd_number(1, 1, 1) == 1\n    assert choose_smallest_odd_number() is None\n    assert choose_smallest_odd_number(4, 9, 11) == 9"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_first_greater_than_100_even(arr):\n    for num in arr:\n        if num > 100 and num % 2 == 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_choose_first_greater_than_100_even():\n    assert choose_first_greater_than_100_even([101, 102, 103]) == 102\n    assert choose_first_greater_than_100_even([100, 99, 98]) is None\n    assert choose_first_greater_than_100_even([150, 101, 200]) == 150\n    assert choose_first_greater_than_100_even([]) is None\n    assert choose_first_greater_than_100_even([200, 150, 180]) == 200\n    assert choose_first_greater_than_100_even([123, 245, 132]) == 132"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef choose_longest_digit_word(*words):\n    longest = None\n    for word in words:\n        if word.isdigit():\n            if longest is None or len(word) > len(longest):\n                longest = word\n    return longest if longest is not None else None"}, {"role": "assistant", "content": "def test_choose_longest_digit_word():\n    assert choose_longest_digit_word(\"123\", \"4567\", \"89\") == \"4567\"\n    assert choose_longest_digit_word(\"abc\", \"def\", \"ghi\") is None\n    assert choose_longest_digit_word(\"1\", \"22\", \"333\", \"4444\", \"55555\") == \"55555\"\n    assert choose_longest_digit_word() is None\n    assert choose_longest_digit_word(\"789\", \"12\", \"234\") == \"789\"\n    assert choose_longest_digit_word(\"10\", \"20\", \"30\", \"40\") == \"10\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_prime_using_set(n):\n    if n < 2:\n        return False\n    factors = set()\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.add(i)\n    return len(factors) == 2"}, {"role": "assistant", "content": "def test_is_prime_using_set():\n    assert is_prime_using_set(2) is True\n    assert is_prime_using_set(3) is True\n    assert is_prime_using_set(4) is False\n    assert is_prime_using_set(-1) is False\n    assert is_prime_using_set(11) is True\n    assert is_prime_using_set(1) is False\n    assert is_prime_using_set(0) is False\n    assert is_prime_using_set(5) is True\n    assert is_prime_using_set(9) is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_multiples_of(num, arr):\n    count = 0\n    for val in arr:\n        if val % num == 0:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_multiples_of():\n    assert count_multiples_of(3, [3, 6, 9, 12]) == 4\n    assert count_multiples_of(5, [1, 2, 3, 4]) is None\n    assert count_multiples_of(2, [4, 6, 8, 10]) == 4\n    assert count_multiples_of(7, [14, 21, 28, 35]) == 4\n    assert count_multiples_of(1, [1, 2, 3, 4, 5]) == 5\n    assert count_multiples_of(10, [10, 20, 30, 40]) == 4"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_all_in_set(num_set, num):\n    for divisor in num_set:\n        if num % divisor != 0:\n            return None\n    return num"}, {"role": "assistant", "content": "def test_find_divisible_by_all_in_set():\n    assert find_divisible_by_all_in_set({1, 2, 3}, 6) == 6\n    assert find_divisible_by_all_in_set({2, 3}, 5) is None\n    assert find_divisible_by_all_in_set({5, 10, 15}, 30) == 30\n    assert find_divisible_by_all_in_set({3, 9, 27}, 81) == 81\n    assert find_divisible_by_all_in_set({2, 4, 8}, 16) == 16\n    assert find_divisible_by_all_in_set({3, 6, 12}, 12) == 12"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_number_not_in_dict(d, num):\n    for key in d:\n        if key == num:\n            return None\n    return num"}, {"role": "assistant", "content": "def test_find_number_not_in_dict():\n    assert find_number_not_in_dict({1: 'a', 2: 'b', 3: 'c'}, 4) == 4\n    assert find_number_not_in_dict({1: 'a', 2: 'b', 3: 'c'}, 2) is None\n    assert find_number_not_in_dict({}, 1) == 1\n    assert find_number_not_in_dict({5: 'x', 6: 'y', 7: 'z'}, 8) == 8\n    assert find_number_not_in_dict({9: 'a', 10: 'b'}, 10) is None\n    assert find_number_not_in_dict({100: 'a', 200: 'b'}, 150) == 150"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_divisible(arr, divisor):\n    max_val = None\n    for num in arr:\n        if num % divisor == 0:\n            if max_val is None or num > max_val:\n                max_val = num\n    return max_val if max_val is not None else None"}, {"role": "assistant", "content": "def test_find_max_divisible():\n    assert find_max_divisible([12, 15, 20, 30], 5) == 30\n    assert find_max_divisible([7, 14, 21, 28], 3) == 21\n    assert find_max_divisible([8, 16, 24], 4) == 24\n    assert find_max_divisible([1, 2, 3, 4], 5) is None\n    assert find_max_divisible([9, 18, 27, 36], 9) == 36\n    assert find_max_divisible([], 5) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_2_3_5(arr):\n    result = []\n    for num in arr:\n        if num % 2 != 0 and num % 3 != 0 and num % 5 != 0:\n            result.append(num)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_not_divisible_by_2_3_5():\n    assert find_not_divisible_by_2_3_5([7, 11, 13, 17]) == [7, 11, 13, 17]\n    assert find_not_divisible_by_2_3_5([6, 10, 15, 20]) is None\n    assert find_not_divisible_by_2_3_5([1, 2, 3, 5, 7]) == [1, 7]\n    assert find_not_divisible_by_2_3_5([9, 18, 27, 35]) is None\n    assert find_not_divisible_by_2_3_5([8, 16, 24, 30]) is None\n    assert find_not_divisible_by_2_3_5([19, 23, 29, 31]) == [19, 23, 29, 31]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_elements_greater_than(n, num_set):\n    total = 0\n    for num in num_set:\n        if num > n:\n            total += num\n    return total if total > 0 else None"}, {"role": "assistant", "content": "def test_sum_of_elements_greater_than():\n    assert sum_of_elements_greater_than(10, {12, 15, 20}) == 47\n    assert sum_of_elements_greater_than(25, {5, 10, 15, 20}) is None\n    assert sum_of_elements_greater_than(0, {1, 2, 3, 4}) == 10\n    assert sum_of_elements_greater_than(5, {10, 20, 30}) == 60\n    assert sum_of_elements_greater_than(100, {50, 75, 125}) == 125\n    assert sum_of_elements_greater_than(-5, {1, 2, 3, 4}) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_difference_in_dict(d):\n    if len(d) < 2:\n        return None\n    values = list(d.values())\n    max_val = max(values)\n    min_val = min(values)\n    return max_val - min_val"}, {"role": "assistant", "content": "def test_max_difference_in_dict():\n    assert max_difference_in_dict({1: 10, 2: 20, 3: 30}) == 20\n    assert max_difference_in_dict({}) is None\n    assert max_difference_in_dict({4: 50}) is None\n    assert max_difference_in_dict({5: 5, 6: 10, 7: 15}) == 10\n    assert max_difference_in_dict({10: 100, 20: 200}) == 100\n    assert max_difference_in_dict({8: 8, 9: 18, 10: 28}) == 20"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef average_of_set(num_set):\n    if not num_set:\n        return None\n    total = 0\n    for num in num_set:\n        total += num\n    return total / len(num_set)"}, {"role": "assistant", "content": "def test_average_of_set():\n    assert average_of_set({1, 2, 3, 4}) == 2.5\n    assert average_of_set({10, 20, 30}) == 20.0\n    assert average_of_set(set()) is None\n    assert average_of_set({5, 15, 25, 35}) == 20.0\n    assert average_of_set({100}) == 100.0\n    assert average_of_set({1, 3, 5, 7, 9}) == 5.0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_and_not_divisible_by_2(arr, num):\n    result = []\n    for value in arr:\n        if value > num and value % 2 != 0:\n            result.append(value)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_greater_than_and_not_divisible_by_2():\n    assert find_greater_than_and_not_divisible_by_2([1, 3, 5, 7, 9], 4) == [5, 7, 9]\n    assert find_greater_than_and_not_divisible_by_2([2, 4, 6, 8], 3) is None\n    assert find_greater_than_and_not_divisible_by_2([11, 13, 17, 19], 10) == [11, 13, 17, 19]\n    assert find_greater_than_and_not_divisible_by_2([], 5) is None\n    assert find_greater_than_and_not_divisible_by_2([5, 15, 25, 35], 10) == [15, 25, 35]\n    assert find_greater_than_and_not_divisible_by_2([21, 23, 25, 27], 22) == [23, 25, 27]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_divisible_by_all(arr):\n    min_val = None\n    for num in arr:\n        if all(num % val == 0 for val in arr):\n            if min_val is None or num < min_val:\n                min_val = num\n    return min_val if min_val is not None else None"}, {"role": "assistant", "content": "def test_find_min_divisible_by_all():\n    assert find_min_divisible_by_all([1, 2, 3]) is None\n    assert find_min_divisible_by_all([5, 10, 15]) is None\n    assert find_min_divisible_by_all([4, 8, 16]) == 16\n    assert find_min_divisible_by_all([7, 14, 28]) == 28\n    assert find_min_divisible_by_all([2, 3, 5]) is None\n    assert find_min_divisible_by_all([3, 5, 7, 11]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_key_greater_than(d, value):\n    smallest_key = None\n    for key, val in d.items():\n        if val > value:\n            if smallest_key is None or key < smallest_key:\n                smallest_key = key\n    return smallest_key if smallest_key is not None else None"}, {"role": "assistant", "content": "def test_find_smallest_key_greater_than():\n    assert find_smallest_key_greater_than({1: 10, 2: 20, 3: 30}, 15) == 2\n    assert find_smallest_key_greater_than({4: 40, 5: 50}, 60) is None\n    assert find_smallest_key_greater_than({6: 60, 7: 70, 8: 80}, 65) == 7\n    assert find_smallest_key_greater_than({}, 10) is None\n    assert find_smallest_key_greater_than({9: 90, 10: 100}, 95) == 10\n    assert find_smallest_key_greater_than({11: 110, 12: 120}, 105) == 11"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_square_greater_than(arr, num):\n    for val in arr:\n        if num < val == int(val ** 0.5) ** 2:\n            return val\n    return None"}, {"role": "assistant", "content": "def test_find_first_square_greater_than():\n    assert find_first_square_greater_than([1, 4, 9, 16], 5) == 9\n    assert find_first_square_greater_than([25, 36, 49], 30) == 36\n    assert find_first_square_greater_than([2, 3, 5], 6) is None\n    assert find_first_square_greater_than([81, 64, 49], 50) == 81\n    assert find_first_square_greater_than([], 10) is None\n    assert find_first_square_greater_than([100, 121, 144], 110) == 121"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_divisible_by_2_and_3(num_set):\n    for num in num_set:\n        if num % 2 == 0 and num % 3 == 0:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_find_first_divisible_by_2_and_3():\n    assert find_first_divisible_by_2_and_3({6, 12, 18}) == 18\n    assert find_first_divisible_by_2_and_3({1, 3, 5}) is None\n    assert find_first_divisible_by_2_and_3({24, 30, 36}) == 24\n    assert find_first_divisible_by_2_and_3(set()) is None\n    assert find_first_divisible_by_2_and_3({7, 14, 21}) is None\n    assert find_first_divisible_by_2_and_3({9, 15, 21, 27}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_lists(arr1, arr2):\n    for val in arr1:\n        if val in arr2:\n            return val\n    return None"}, {"role": "assistant", "content": "def test_find_common_in_lists():\n    assert find_common_in_lists([1, 2, 3], [3, 4, 5]) == 3\n    assert find_common_in_lists([6, 7, 8], [9, 10, 11]) is None\n    assert find_common_in_lists([12, 13, 14], [14, 15, 16]) == 14\n    assert find_common_in_lists([17, 18, 19], [20, 21, 22]) is None\n    assert find_common_in_lists([23, 24, 25], [25, 26, 27]) == 25\n    assert find_common_in_lists([], [28, 29, 30]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_even_greater_than(arr, num):\n    smallest = None\n    for val in arr:\n        if val > num and val % 2 == 0:\n            if smallest is None or val < smallest:\n                smallest = val\n    return smallest if smallest is not None else None"}, {"role": "assistant", "content": "def test_find_smallest_even_greater_than():\n    assert find_smallest_even_greater_than([2, 4, 6, 8], 5) == 6\n    assert find_smallest_even_greater_than([10, 12, 14], 15) is None\n    assert find_smallest_even_greater_than([16, 18, 20], 17) == 18\n    assert find_smallest_even_greater_than([], 3) is None\n    assert find_smallest_even_greater_than([22, 24, 26], 21) == 22\n    assert find_smallest_even_greater_than([28, 30, 32], 29) == 30"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_element_greater_than_in_set(num_set, value):\n    for num in num_set:\n        if num > value:\n            return num\n    return None"}, {"role": "assistant", "content": "def test_find_element_greater_than_in_set():\n    assert find_element_greater_than_in_set({1, 2, 3, 4}, 3) == 4\n    assert find_element_greater_than_in_set({5, 6, 7, 8}, 10) is None\n    assert find_element_greater_than_in_set({11, 12, 13, 14}, 12) == 13\n    assert find_element_greater_than_in_set(set(), 0) is None\n    assert find_element_greater_than_in_set({15, 16, 17, 18}, 16) == 17\n    assert find_element_greater_than_in_set({19, 20, 21, 22}, 18) == 19"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_divisible_by_3_or_5(arr):\n    total = 0\n    for val in arr:\n        if val % 3 == 0 or val % 5 == 0:\n            total += val\n    return total if total > 0 else None"}, {"role": "assistant", "content": "def test_sum_divisible_by_3_or_5():\n    assert sum_divisible_by_3_or_5([3, 5, 6, 10]) == 24\n    assert sum_divisible_by_3_or_5([1, 2, 4, 7]) is None\n    assert sum_divisible_by_3_or_5([-3, -5, -6, -10]) is None\n    assert sum_divisible_by_3_or_5([0, 0, 0]) is None\n    assert sum_divisible_by_3_or_5([15, 30, 45]) == 90\n    assert sum_divisible_by_3_or_5([1, 2, 3, 4, 5]) == 8\n    assert sum_divisible_by_3_or_5([]) is None\n    assert sum_divisible_by_3_or_5([5, 5, 5, 5]) == 20\n    assert sum_divisible_by_3_or_5([3, 6, 9]) == 18"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_value_in_dict(d):\n    if not d:\n        return None\n    max_val = None\n    for key, val in d.items():\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"}, {"role": "assistant", "content": "def test_find_max_value_in_dict():\n    assert find_max_value_in_dict({'a': 1, 'b': 2, 'c': 3}) == 3\n    assert find_max_value_in_dict({}) is None\n    assert find_max_value_in_dict({'a': -1, 'b': -2, 'c': -3}) == -1\n    assert find_max_value_in_dict({'a': 10, 'b': 10}) == 10\n    assert find_max_value_in_dict({'a': 1}) == 1\n    assert find_max_value_in_dict({'a': 1, 'b': 2}) == 2\n    assert find_max_value_in_dict({'a': -1, 'b': -2, 'c': 0}) == 0\n    assert find_max_value_in_dict({'a': 5, 'b': 3, 'c': 8, 'd': 6}) == 8\n    assert find_max_value_in_dict({'a': 0}) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"}, {"role": "assistant", "content": "def test_find_duplicate():\n    assert find_duplicate([1, 2, 3, 2, 5]) == 2\n    assert find_duplicate([1, 1, 1, 1]) == 1\n    assert find_duplicate([1, 2, 3, 4]) is None\n    assert find_duplicate([]) is None\n    assert find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1\n    assert find_duplicate([5, 5, 5, 5, 5]) == 5\n    assert find_duplicate([5, 4, 3, 2, 1, 2]) == 2\n    assert find_duplicate([0, 0, 0, 0]) == 0\n    assert find_duplicate([1, 2, 3, 4, 2, 5, 6, 7, 8]) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_not_divisible_by_4(arr):\n    min_val = None\n    for val in arr:\n        if val % 4 != 0:\n            if min_val is None or val < min_val:\n                min_val = val\n    return min_val if min_val is not None else None"}, {"role": "assistant", "content": "def test_find_min_not_divisible_by_4():\n    assert find_min_not_divisible_by_4([1, 2, 3, 5, 6, 7]) == 1\n    assert find_min_not_divisible_by_4([4, 8, 16, 20]) is None\n    assert find_min_not_divisible_by_4([10, 12, 15, 17]) == 10\n    assert find_min_not_divisible_by_4([4, 8, 3, 12]) == 3\n    assert find_min_not_divisible_by_4([0, 1, 2, 3, 4, 5]) == 1\n    assert find_min_not_divisible_by_4([2, 4, 6, 8]) == 2\n    assert find_min_not_divisible_by_4([-1, -2, -3, -4]) == -3\n    assert find_min_not_divisible_by_4([4, 6, 8, 10, 12]) == 6\n    assert find_min_not_divisible_by_4([16, 18, 20, 22]) == 18"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_divisible_by_7_and_11(arr):\n    min_val = None\n    for val in arr:\n        if val % 7 == 0 and val % 11 == 0:\n            if min_val is None or val < min_val:\n                min_val = val\n    return min_val if min_val is not None else None"}, {"role": "assistant", "content": "def test_find_smallest_divisible_by_7_and_11():\n    assert find_smallest_divisible_by_7_and_11([77, 154, 231, 308]) == 77\n    assert find_smallest_divisible_by_7_and_11([1, 2, 3, 4]) is None\n    assert find_smallest_divisible_by_7_and_11([14, 22, 35, 77]) == 77\n    assert find_smallest_divisible_by_7_and_11([154, 308, 462]) == 154\n    assert find_smallest_divisible_by_7_and_11([7, 11, 77, 121]) == 77\n    assert find_smallest_divisible_by_7_and_11([49, 99, 143, 154]) == 154\n    assert find_smallest_divisible_by_7_and_11([21, 33, 55, 77]) == 77\n    assert find_smallest_divisible_by_7_and_11([210, 330, 462, 770]) == 462\n    assert find_smallest_divisible_by_7_and_11([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_divisible_by_3_not_5(arr):\n    for val in arr:\n        if val % 3 == 0 and val % 5 != 0:\n            return val\n    return None"}, {"role": "assistant", "content": "def test_find_first_divisible_by_3_not_5():\n    assert find_first_divisible_by_3_not_5([6, 12, 9, 15]) == 6\n    assert find_first_divisible_by_3_not_5([1, 2, 4, 5]) is None\n    assert find_first_divisible_by_3_not_5([3, 6, 9, 12]) == 3\n    assert find_first_divisible_by_3_not_5([15, 30, 45, 60]) is None\n    assert find_first_divisible_by_3_not_5([3, 5, 6, 9]) == 3\n    assert find_first_divisible_by_3_not_5([6, 15, 30, 45]) == 6\n    assert find_first_divisible_by_3_not_5([1, 3, 5, 9]) == 3\n    assert find_first_divisible_by_3_not_5([9, 15, 18, 21]) == 9\n    assert find_first_divisible_by_3_not_5([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_values_greater_than_10_in_dict(d):\n    total = 0\n    for key, val in d.items():\n        if val > 10:\n            total += val\n    return total if total > 0 else None"}, {"role": "assistant", "content": "def test_sum_values_greater_than_10_in_dict():\n    assert sum_values_greater_than_10_in_dict({'a': 5, 'b': 15, 'c': 20}) == 35\n    assert sum_values_greater_than_10_in_dict({'a': 1, 'b': 2, 'c': 3}) is None\n    assert sum_values_greater_than_10_in_dict({'a': 11, 'b': 12, 'c': 13}) == 36\n    assert sum_values_greater_than_10_in_dict({'a': 0, 'b': 10, 'c': 20}) == 20\n    assert sum_values_greater_than_10_in_dict({'a': 9, 'b': 10, 'c': 11}) == 11\n    assert sum_values_greater_than_10_in_dict({'a': 15, 'b': 15, 'c': 15}) == 45\n    assert sum_values_greater_than_10_in_dict({}) is None\n    assert sum_values_greater_than_10_in_dict({'a': 7, 'b': 14, 'c': 21}) == 35\n    assert sum_values_greater_than_10_in_dict({'a': -5, 'b': -10, 'c': -20}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_string_longer_than(length, *strings):\n    for s in strings:\n        if len(s) > length:\n            return s\n    return None"}, {"role": "assistant", "content": "def test_find_string_longer_than():\n    assert find_string_longer_than(3, \"apple\", \"bat\", \"cat\") == \"apple\"\n    assert find_string_longer_than(5, \"apple\", \"banana\", \"cherry\") == \"banana\"\n    assert find_string_longer_than(6, \"apple\", \"banana\", \"cherry\") is None\n    assert find_string_longer_than(10, \"apple\", \"banana\", \"cherry\") is None\n    assert find_string_longer_than(4, \"kiwi\", \"pear\", \"peach\") == \"peach\"\n    assert find_string_longer_than(2, \"a\", \"b\", \"c\", \"d\") is None\n    assert find_string_longer_than(0, \"apple\", \"banana\", \"cherry\", \"date\") == \"apple\"\n    assert find_string_longer_than(7, \"elephant\", \"giraffe\", \"hippopotamus\") == \"elephant\"\n    assert find_string_longer_than(1, \"x\", \"y\", \"z\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_palindrome_6(s):\n    if not s:\n        return None\n    reversed_s = ''\n    for i in range(len(s) - 1, -1, -1):\n        reversed_s += s[i]\n    if s == reversed_s:\n        return True\n    return False"}, {"role": "assistant", "content": "def test_is_palindrome_6():\n    assert is_palindrome_6(\"racecar\") is True\n    assert is_palindrome_6(\"hello\") is False\n    assert is_palindrome_6(\"madam\") is True\n    assert is_palindrome_6(\"a\") is True\n    assert is_palindrome_6(\"\") is None\n    assert is_palindrome_6(\"noon\") is True\n    assert is_palindrome_6(\"world\") is False\n    assert is_palindrome_6(\"level\") is True\n    assert is_palindrome_6(\"python\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_vowels_in_string(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_vowels_in_string():\n    assert count_vowels_in_string(\"hello\") == 2\n    assert count_vowels_in_string(\"world\") == 1\n    assert count_vowels_in_string(\"aeiou\") == 5\n    assert count_vowels_in_string(\"bcdfgh\") is None\n    assert count_vowels_in_string(\"rhythm\") is None\n    assert count_vowels_in_string(\"AEIOU\") == 5\n    assert count_vowels_in_string(\"xyz\") is None\n    assert count_vowels_in_string(\"supercalifragilisticexpialidocious\") == 16\n    assert count_vowels_in_string(\"\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_occurrence_of_substring(s, substring):\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            return i\n    return None"}, {"role": "assistant", "content": "def test_find_first_occurrence_of_substring():\n    assert find_first_occurrence_of_substring(\"hello world\", \"world\") == 6\n    assert find_first_occurrence_of_substring(\"hello world\", \"hello\") == 0\n    assert find_first_occurrence_of_substring(\"abcdef\", \"def\") == 3\n    assert find_first_occurrence_of_substring(\"abcdef\", \"xyz\") is None\n    assert find_first_occurrence_of_substring(\"abcdabcd\", \"abcd\") == 0\n    assert find_first_occurrence_of_substring(\"mississippi\", \"iss\") == 1\n    assert find_first_occurrence_of_substring(\"banana\", \"na\") == 2\n    assert find_first_occurrence_of_substring(\"abababab\", \"ab\") == 0\n    assert find_first_occurrence_of_substring(\"\", \"a\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_spaces_from_string(s):\n    result = ''\n    for char in s:\n        if char != ' ':\n            result += char\n    return result if result != s else None"}, {"role": "assistant", "content": "def test_remove_spaces_from_string():\n    assert remove_spaces_from_string(\"hello world\") == \"helloworld\"\n    assert remove_spaces_from_string(\"a b c d e f\") == \"abcdef\"\n    assert remove_spaces_from_string(\" no spaces \") == \"nospaces\"\n    assert remove_spaces_from_string(\"helloworld\") is None\n    assert remove_spaces_from_string(\" \") == \"\"\n    assert remove_spaces_from_string(\"   multiple   spaces   \") == \"multiplespaces\"\n    assert remove_spaces_from_string(\"\") is None\n    assert remove_spaces_from_string(\"single\") is None\n    assert remove_spaces_from_string(\"a b c\") == \"abc\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_unique_characters(s):\n    unique_chars = set()\n    for char in s:\n        unique_chars.add(char)\n    return ''.join(sorted(unique_chars))"}, {"role": "assistant", "content": "def test_get_unique_characters():\n    assert get_unique_characters(\"hello\") == \"ehlo\"\n    assert get_unique_characters(\"world\") == \"dlorw\"\n    assert get_unique_characters(\"abcabc\") == \"abc\"\n    assert get_unique_characters(\"\") == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_string_5(s):\n    reversed_str = ''\n    for i in range(len(s) - 1, -1, -1):\n        reversed_str += s[i]\n    return reversed_str"}, {"role": "assistant", "content": "def test_reverse_string_5():\n    assert reverse_string_5(\"hello\") == \"olleh\"\n    assert reverse_string_5(\"world\") == \"dlrow\"\n    assert reverse_string_5(\"a\") == \"a\"\n    assert reverse_string_5(\"\") == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_in_string_5(s):\n    if not s:\n        return None\n    words = s.split()\n    return len(words) if len(words) > 0 else None"}, {"role": "assistant", "content": "def test_count_words_in_string_5():\n    assert count_words_in_string_5(\"hello world\") == 2\n    assert count_words_in_string_5(\"one two three\") == 3\n    assert count_words_in_string_5(\"\") is None\n    assert count_words_in_string_5(\"single\") == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_punctuation_from_string(s):\n    punctuation = '!\"#$%&()*+,-./:;<=>?@[]^_`{|}~'\n    result = ''\n    for char in s:\n        if char not in punctuation:\n            result += char\n    return result"}, {"role": "assistant", "content": "def test_remove_punctuation_from_string():\n    assert remove_punctuation_from_string(\"hello, world!\") == \"hello world\"\n    assert remove_punctuation_from_string(\"a.b.c!\") == \"abc\"\n    assert remove_punctuation_from_string(\"\") == \"\"\n    assert remove_punctuation_from_string(\"no_punctuation\") == \"nopunctuation\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_string_only_digits(s):\n    for char in s:\n        if not char.isdigit():\n            return False\n    return True"}, {"role": "assistant", "content": "def test_is_string_only_digits():\n    assert is_string_only_digits(\"12345\") is True\n    assert is_string_only_digits(\"123a45\") is False\n    assert is_string_only_digits(\"\") is True\n    assert is_string_only_digits(\"0\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_occurrences_of_substring(s, substring):\n    indices = []\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            indices.append(i)\n    return indices if indices else None"}, {"role": "assistant", "content": "def test_find_all_occurrences_of_substring():\n    assert find_all_occurrences_of_substring(\"hello hello\", \"lo\") == [3, 9]\n    assert find_all_occurrences_of_substring(\"abcdabcd\", \"ab\") == [0, 4]\n    assert find_all_occurrences_of_substring(\"mississippi\", \"iss\") == [1, 4]\n    assert find_all_occurrences_of_substring(\"no match\", \"z\") is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef repeat_string(s, n):\n    return s * n if n > 0 else None"}, {"role": "assistant", "content": "def test_repeat_string():\n    assert repeat_string(\"ab\", 3) == \"ababab\"\n    assert repeat_string(\"hello\", 0) is None\n    assert repeat_string(\"x\", 5) == \"xxxxx\"\n    assert repeat_string(\"\", 3) == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_first_word(s):\n    if not s:\n        return None\n    return s.split()[0]"}, {"role": "assistant", "content": "def test_get_first_word():\n    assert get_first_word(\"hello world\") == \"hello\"\n    assert get_first_word(\"first second third\") == \"first\"\n    assert get_first_word(\"\") is None\n    assert get_first_word(\"singleword\") == \"singleword\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef extract_numbers_from_string_4(s):\n    numbers = []\n    temp = ''\n    for char in s:\n        if char.isdigit():\n            temp += char\n        elif temp:\n            numbers.append(int(temp))\n            temp = ''\n    if temp:\n        numbers.append(int(temp))\n    return numbers if numbers else None"}, {"role": "assistant", "content": "def test_extract_numbers_from_string_4():\n    assert extract_numbers_from_string_4(\"123 abc 456 def 789\") == [123, 456, 789]\n    assert extract_numbers_from_string_4(\"no numbers here\") is None\n    assert extract_numbers_from_string_4(\"0\") == [0]\n    assert extract_numbers_from_string_4(\"12abc34de56\") == [12, 34, 56]\n    assert extract_numbers_from_string_4(\"1a2b3c\") == [1, 2, 3]\n    assert extract_numbers_from_string_4(\"\") is None\n    assert extract_numbers_from_string_4(\"9999\") == [9999]\n    assert extract_numbers_from_string_4(\"abc123def456ghi789\") == [123, 456, 789]\n    assert extract_numbers_from_string_4(\"10 20 30 40\") == [10, 20, 30, 40]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_string_single_letter(s):\n    return len(s) == 1 and s.isalpha()"}, {"role": "assistant", "content": "def test_is_string_single_letter():\n    assert is_string_single_letter(\"A\") is True\n    assert is_string_single_letter(\"ab\") is False\n    assert is_string_single_letter(\"1\") is False\n    assert is_string_single_letter(\"\") is False\n    assert is_string_single_letter(\"C\") is True\n    assert is_string_single_letter(\"Z\") is True\n    assert is_string_single_letter(\"abc\") is False\n    assert is_string_single_letter(\"7\") is False\n    assert is_string_single_letter(\"K\") is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef get_uppercase_letters(s):\n    uppercase = ''\n    for char in s:\n        if char.isupper():\n            uppercase += char\n    return uppercase if uppercase else None"}, {"role": "assistant", "content": "def test_get_uppercase_letters():\n    assert get_uppercase_letters(\"Hello World!\") == \"HW\"\n    assert get_uppercase_letters(\"no uppercase\") is None\n    assert get_uppercase_letters(\"MIXED Case\") == \"MIXEDC\"\n    assert get_uppercase_letters(\"\") is None\n    assert get_uppercase_letters(\"lowercase\") is None\n    assert get_uppercase_letters(\"UPPERCASE\") == \"UPPERCASE\"\n    assert get_uppercase_letters(\"uPPERCASE\") == \"PPERCASE\"\n    assert get_uppercase_letters(\"hElLo\") == \"EL\"\n    assert get_uppercase_letters(\"123ABC\") == \"ABC\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_duplicates_from_string_2(s):\n    result = ''\n    seen = set()\n    for char in s:\n        if char not in seen and s.count(char) == 1:\n            seen.add(char)\n            result += char\n    return result"}, {"role": "assistant", "content": "def test_remove_duplicates_from_string_2():\n    assert remove_duplicates_from_string_2(\"aabbcc\") == \"\"\n    assert remove_duplicates_from_string_2(\"abcdef\") == \"abcdef\"\n    assert remove_duplicates_from_string_2(\"hello world\") == \"he wrd\"\n    assert remove_duplicates_from_string_2(\"mississippi\") == \"m\"\n    assert remove_duplicates_from_string_2(\"\") == \"\"\n    assert remove_duplicates_from_string_2(\"apple\") == \"ale\"\n    assert remove_duplicates_from_string_2(\"unique\") == \"niqe\"\n    assert remove_duplicates_from_string_2(\"numbers 123123\") == \"numbers \"\n    assert remove_duplicates_from_string_2(\"aaa bbb ccc\") == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_substrings_of_length(s, length):\n    substrings = []\n    for i in range(len(s) - length + 1):\n        substrings.append(s[i:i + length])\n    return substrings if substrings else None"}, {"role": "assistant", "content": "def test_find_substrings_of_length():\n    assert find_substrings_of_length(\"abcdef\", 2) == [\"ab\", \"bc\", \"cd\", \"de\", \"ef\"]\n    assert find_substrings_of_length(\"hello\", 3) == [\"hel\", \"ell\", \"llo\"]\n    assert find_substrings_of_length(\"hi\", 1) == [\"h\", \"i\"]\n    assert find_substrings_of_length(\"abcdef\", 0) == ['', '', '', '', '', '', '']\n    assert find_substrings_of_length(\"abcd\", 5) is None\n    assert find_substrings_of_length(\"\", 1) is None\n    assert find_substrings_of_length(\"abc\", 1) == [\"a\", \"b\", \"c\"]\n    assert find_substrings_of_length(\"python\", 6) == [\"python\"]\n    assert find_substrings_of_length(\"data\", 2) == [\"da\", \"at\", \"ta\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_longest_alphabetic_char(s):\n    longest = ''\n    for char in s:\n        if char.isalpha() and len(char) > len(longest):\n            longest = char\n    return longest if longest else None"}, {"role": "assistant", "content": "def test_find_longest_alphabetic_char():\n    assert find_longest_alphabetic_char(\"abcdef\") == \"a\"\n    assert find_longest_alphabetic_char(\"hello123\") == \"h\"\n    assert find_longest_alphabetic_char(\"a1b2c3\") == \"a\"\n    assert find_longest_alphabetic_char(\"123456\") is None\n    assert find_longest_alphabetic_char(\"\") is None\n    assert find_longest_alphabetic_char(\"abcdefg\") == \"a\"\n    assert find_longest_alphabetic_char(\"xyz\") == \"x\"\n    assert find_longest_alphabetic_char(\"jkl\") == \"j\"\n    assert find_longest_alphabetic_char(\"hello!\") == \"h\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_most_frequent_char(s):\n    frequency = {}\n    for char in s:\n        if char.isalpha():\n            frequency[char] = frequency.get(char, 0) + 1\n    most_frequent = max(frequency, key=frequency.get, default=None)\n    return most_frequent"}, {"role": "assistant", "content": "def test_find_most_frequent_char():\n    assert find_most_frequent_char(\"hello\") == \"l\"\n    assert find_most_frequent_char(\"abcdef\") == \"a\"\n    assert find_most_frequent_char(\"mississippi\") == \"i\"\n    assert find_most_frequent_char(\"banana\") == \"a\"\n    assert find_most_frequent_char(\"\") is None\n    assert find_most_frequent_char(\"aaa\") == \"a\"\n    assert find_most_frequent_char(\"hello world\") == \"l\"\n    assert find_most_frequent_char(\"data science\") == \"a\"\n    assert find_most_frequent_char(\"analytics\") == \"a\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef split_string_by_char(s, char):\n    parts = []\n    temp = ''\n    for c in s:\n        if c == char:\n            if temp:\n                parts.append(temp)\n                temp = ''\n        else:\n            temp += c\n    if temp:\n        parts.append(temp)\n    return parts if parts else None"}, {"role": "assistant", "content": "def test_split_string_by_char():\n    assert split_string_by_char(\"a,b,c,d\", \",\") == [\"a\", \"b\", \"c\", \"d\"]\n    assert split_string_by_char(\"hello world\", \" \") == [\"hello\", \"world\"]\n    assert split_string_by_char(\"abcdef\", \",\") == [\"abcdef\"]\n    assert split_string_by_char(\"\", \",\") is None\n    assert split_string_by_char(\"a|b|c\", \"|\") == [\"a\", \"b\", \"c\"]\n    assert split_string_by_char(\"one/two/three\", \"/\") == [\"one\", \"two\", \"three\"]\n    assert split_string_by_char(\"apple|orange|banana\", \"|\") == [\"apple\", \"orange\", \"banana\"]\n    assert split_string_by_char(\"123-456-789\", \"-\") == [\"123\", \"456\", \"789\"]\n    assert split_string_by_char(\"hello\", \"x\") == [\"hello\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_digits_with_asterisks(s):\n    result = ''\n    for char in s:\n        if char.isdigit():\n            result += '*'\n        else:\n            result += char\n    return result"}, {"role": "assistant", "content": "def test_replace_digits_with_asterisks():\n    assert replace_digits_with_asterisks(\"abc123\") == \"abc***\"\n    assert replace_digits_with_asterisks(\"hello\") == \"hello\"\n    assert replace_digits_with_asterisks(\"12345\") == \"*****\"\n    assert replace_digits_with_asterisks(\"\") == \"\"\n    assert replace_digits_with_asterisks(\"0\") == \"*\"\n    assert replace_digits_with_asterisks(\"abc1def2\") == \"abc*def*\"\n    assert replace_digits_with_asterisks(\"12three34\") == \"**three**\"\n    assert replace_digits_with_asterisks(\"no digits\") == \"no digits\"\n    assert replace_digits_with_asterisks(\"4you\") == \"*you\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_substrings_starting_with_uppercase(s):\n    substrings = []\n    temp = ''\n    for char in s:\n        if char.isupper() and temp:\n            substrings.append(temp)\n            temp = ''\n        temp += char\n    if temp:\n        substrings.append(temp)\n    return substrings if substrings else None"}, {"role": "assistant", "content": "def test_find_substrings_starting_with_uppercase():\n    assert find_substrings_starting_with_uppercase(\"HelloWorld\") == [\"Hello\", \"World\"]\n    assert find_substrings_starting_with_uppercase(\"noUppercase\") == ['no', 'Uppercase']\n    assert find_substrings_starting_with_uppercase(\"StartWithUpperCase\") == [\"Start\", \"With\", \"Upper\", \"Case\"]\n    assert find_substrings_starting_with_uppercase(\"\") is None\n    assert find_substrings_starting_with_uppercase(\"PythonRocks\") == [\"Python\", \"Rocks\"]\n    assert find_substrings_starting_with_uppercase(\"OneTwoThree\") == [\"One\", \"Two\", \"Three\"]\n    assert find_substrings_starting_with_uppercase(\"UPPERlower\") == ['U', 'P', 'P', 'E', 'Rlower']\n    assert find_substrings_starting_with_uppercase(\"MixEdCaSe\") == [\"Mix\", \"Ed\", \"Ca\", \"Se\"]\n    assert find_substrings_starting_with_uppercase(\"A\") == [\"A\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef string_to_list_of_chars(s):\n    return list(s) if s else None"}, {"role": "assistant", "content": "def test_string_to_list_of_chars():\n    assert string_to_list_of_chars(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]\n    assert string_to_list_of_chars(\"\") is None\n    assert string_to_list_of_chars(\"12345\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    assert string_to_list_of_chars(\"a\") == [\"a\"]\n    assert string_to_list_of_chars(\"!@#$%\") == [\"!\", \"@\", \"#\", \"$\", \"%\"]\n    assert string_to_list_of_chars(\"Python\") == [\"P\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n    assert string_to_list_of_chars(\" \") == [\" \"]\n    assert string_to_list_of_chars(\"Hello World\") == [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\"]\n    assert string_to_list_of_chars(\"MixedCase\") == [\"M\", \"i\", \"x\", \"e\", \"d\", \"C\", \"a\", \"s\", \"e\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_longest_word(s):\n    words = s.split()\n    if not words:\n        return None\n    return max(words, key=len)"}, {"role": "assistant", "content": "def test_find_longest_word():\n    assert find_longest_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\n    assert find_longest_word(\"\") is None\n    assert find_longest_word(\"Hello world\") == \"Hello\"\n    assert find_longest_word(\"Python programming is fun\") == \"programming\"\n    assert find_longest_word(\"a ab abc abcd abcde\") == \"abcde\"\n    assert find_longest_word(\"short longer longest\") == \"longest\"\n    assert find_longest_word(\"one two three four\") == \"three\"\n    assert find_longest_word(\"apple banana orange\") == \"banana\"\n    assert find_longest_word(\"a abcde abc\") == \"abcde\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_combination_of_two(s, s1, s2):\n    return s == s1 + s2"}, {"role": "assistant", "content": "def test_is_combination_of_two():\n    assert is_combination_of_two(\"hello world\", \"hello \", \"world\") is True\n    assert is_combination_of_two(\"hello world\", \"world\", \"hello \") is False\n    assert is_combination_of_two(\"abcdef\", \"abc\", \"def\") is True\n    assert is_combination_of_two(\"abcdef\", \"ab\", \"cdef\") is True\n    assert is_combination_of_two(\"abcdef\", \"abcd\", \"ef\") is True\n    assert is_combination_of_two(\"abcdef\", \"abc\", \"defg\") is False\n    assert is_combination_of_two(\"abcdef\", \"\", \"abcdef\") is True\n    assert is_combination_of_two(\"abcdef\", \"abcdef\", \"\") is True\n    assert is_combination_of_two(\"abcdef\", \"\", \"\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_numeric_string(s):\n    return s.isdigit() if s else False"}, {"role": "assistant", "content": "def test_is_numeric_string():\n    assert is_numeric_string(\"12345\") is True\n    assert is_numeric_string(\"hello123\") is False\n    assert is_numeric_string(\"\") is False\n    assert is_numeric_string(\"000\") is True\n    assert is_numeric_string(\"1a2b3c\") is False\n    assert is_numeric_string(\"42\") is True\n    assert is_numeric_string(\"9999\") is True\n    assert is_numeric_string(\"123 456\") is False\n    assert is_numeric_string(\"123.456\") is False"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_words_starting_with_vowel(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for word in s.split():\n        if word[0] in vowels:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_words_starting_with_vowel():\n    assert count_words_starting_with_vowel(\"apple orange banana\") == 2\n    assert count_words_starting_with_vowel(\"umbrella elephant iguana octopus\") == 4\n    assert count_words_starting_with_vowel(\"dog cat bird\") is None\n    assert count_words_starting_with_vowel(\"\") is None\n    assert count_words_starting_with_vowel(\"A E I O U\") == 5\n    assert count_words_starting_with_vowel(\"alphabet universe\") == 2\n    assert count_words_starting_with_vowel(\"one two three four\") == 1\n    assert count_words_starting_with_vowel(\"xylophone apple\") == 1\n    assert count_words_starting_with_vowel(\"Owl eagle urchin\") == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_words_longer_than_3(s):\n    words = s.split()\n    result = [word for word in words if len(word) > 3]\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_words_longer_than_3():\n    assert find_words_longer_than_3(\"The quick brown fox\") == [\"quick\", \"brown\"]\n    assert find_words_longer_than_3(\"a ab abc abcd\") == [\"abcd\"]\n    assert find_words_longer_than_3(\"I love programming in Python\") == [\"love\", \"programming\", \"Python\"]\n    assert find_words_longer_than_3(\"\") is None\n    assert find_words_longer_than_3(\"this is a test\") == [\"this\", \"test\"]\n    assert find_words_longer_than_3(\"hello world\") == [\"hello\", \"world\"]\n    assert find_words_longer_than_3(\"abcde\") == [\"abcde\"]\n    assert find_words_longer_than_3(\"shorter longer longest\") == [\"shorter\", \"longer\", \"longest\"]\n    assert find_words_longer_than_3(\"one two three four five\") == [\"three\", \"four\", \"five\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_vowels_from_string_2(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char not in vowels:\n            result += char\n    return result if result != s else None"}, {"role": "assistant", "content": "def test_remove_vowels_from_string_2():\n    assert remove_vowels_from_string_2(\"hello world\") == \"hll wrld\"\n    assert remove_vowels_from_string_2(\"aeiou\") == \"\"\n    assert remove_vowels_from_string_2(\"rhythm\") is None\n    assert remove_vowels_from_string_2(\"quick brown fox\") == \"qck brwn fx\"\n    assert remove_vowels_from_string_2(\"PYTHON\") == \"PYTHN\"\n    assert remove_vowels_from_string_2(\"\") is None\n    assert remove_vowels_from_string_2(\"aeiouAEIOU\") == \"\"\n    assert remove_vowels_from_string_2(\"xyz\") is None\n    assert remove_vowels_from_string_2(\"this is a test\") == \"ths s  tst\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_spaces_with_underscores_6(s):\n    return s.replace(' ', '_') if s else None"}, {"role": "assistant", "content": "def test_replace_spaces_with_underscores_6():\n    assert replace_spaces_with_underscores_6(\"hello world\") == \"hello_world\"\n    assert replace_spaces_with_underscores_6(\"\") is None\n    assert replace_spaces_with_underscores_6(\"a b c d\") == \"a_b_c_d\"\n    assert replace_spaces_with_underscores_6(\"no spaces\") == \"no_spaces\"\n    assert replace_spaces_with_underscores_6(\"   \") == \"___\"\n    assert replace_spaces_with_underscores_6(\"Python programming\") == \"Python_programming\"\n    assert replace_spaces_with_underscores_6(\"underscore_test\") == \"underscore_test\"\n    assert replace_spaces_with_underscores_6(\"another example\") == \"another_example\"\n    assert replace_spaces_with_underscores_6(\"Spaces in between\") == \"Spaces_in_between\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_digits_in_string(s):\n    digits = ''\n    for char in s:\n        if char.isdigit():\n            digits += char\n    return digits if digits else None"}, {"role": "assistant", "content": "def test_find_digits_in_string():\n    assert find_digits_in_string(\"hello123\") == \"123\"\n    assert find_digits_in_string(\"no digits\") is None\n    assert find_digits_in_string(\"abc123def456\") == \"123456\"\n    assert find_digits_in_string(\"1a2b3c\") == \"123\"\n    assert find_digits_in_string(\"\") is None\n    assert find_digits_in_string(\"42 is the answer\") == \"42\"\n    assert find_digits_in_string(\"0\") == \"0\"\n    assert find_digits_in_string(\"123 456 789\") == \"123456789\"\n    assert find_digits_in_string(\"number 2021\") == \"2021\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_letters_in_string(s):\n    count = 0\n    for char in s:\n        if char.isalpha():\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_letters_in_string():\n    assert count_letters_in_string(\"hello world\") == 10\n    assert count_letters_in_string(\"123456\") is None\n    assert count_letters_in_string(\"\") is None\n    assert count_letters_in_string(\"Python 3.9\") == 6\n    assert count_letters_in_string(\"abc123def\") == 6\n    assert count_letters_in_string(\"!@#$%\") is None\n    assert count_letters_in_string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26\n    assert count_letters_in_string(\"the quick brown fox\") == 16\n    assert count_letters_in_string(\"numbers 12345\") == 7"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_first_uppercase_letter(s):\n    for char in s:\n        if char.isupper():\n            return char\n    return None"}, {"role": "assistant", "content": "def test_find_first_uppercase_letter():\n    assert find_first_uppercase_letter(\"helloWorld\") == \"W\"\n    assert find_first_uppercase_letter(\"helloworld\") is None\n    assert find_first_uppercase_letter(\"HelloWorld\") == \"H\"\n    assert find_first_uppercase_letter(\"HELLOWORLD\") == \"H\"\n    assert find_first_uppercase_letter(\"\") is None\n    assert find_first_uppercase_letter(\"abcDEF\") == \"D\"\n    assert find_first_uppercase_letter(\"abcDEFGHI\") == \"D\"\n    assert find_first_uppercase_letter(\"123ABCabc\") == \"A\"\n    assert find_first_uppercase_letter(\"aBcDeF\") == \"B\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef reverse_string_in_place(s):\n    result = ''\n    for char in reversed(s):\n        result += char\n    return result"}, {"role": "assistant", "content": "def test_reverse_string_in_place():\n    assert reverse_string_in_place(\"hello\") == \"olleh\"\n    assert reverse_string_in_place(\"12345\") == \"54321\"\n    assert reverse_string_in_place(\"a\") == \"a\"\n    assert reverse_string_in_place(\"\") == \"\"\n    assert reverse_string_in_place(\"abcd\") == \"dcba\"\n    assert reverse_string_in_place(\"racecar\") == \"racecar\"\n    assert reverse_string_in_place(\"Python\") == \"nohtyP\"\n    assert reverse_string_in_place(\"123abc\") == \"cba321\"\n    assert reverse_string_in_place(\"!@#$\") == \"$#@!\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef convert_upper_to_lower(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}, {"role": "assistant", "content": "def test_convert_upper_to_lower():\n    assert convert_upper_to_lower(\"HelloWorld\") == \"helloworld\"\n    assert convert_upper_to_lower(\"HELLOWORLD\") == \"helloworld\"\n    assert convert_upper_to_lower(\"helloworld\") == \"helloworld\"\n    assert convert_upper_to_lower(\"\") == \"\"\n    assert convert_upper_to_lower(\"1234\") == \"1234\"\n    assert convert_upper_to_lower(\"abcd\") == \"abcd\"\n    assert convert_upper_to_lower(\"ABCD\") == \"abcd\"\n    assert convert_upper_to_lower(\"aBcDeF\") == \"abcdef\"\n    assert convert_upper_to_lower(\"a1B2c3\") == \"a1b2c3\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_repeated_chars(s):\n    count = {}\n    repeated = ''\n    for char in s:\n        if char.isalpha():\n            count[char] = count.get(char, 0) + 1\n    for char, cnt in count.items():\n        if cnt > 1:\n            repeated += char\n    return repeated if repeated else None"}, {"role": "assistant", "content": "def test_find_repeated_chars():\n    assert find_repeated_chars(\"hello\") == \"l\"\n    assert find_repeated_chars(\"abcde\") is None\n    assert find_repeated_chars(\"abccba\") == \"abc\"\n    assert find_repeated_chars(\"aabbcc\") == \"abc\"\n    assert find_repeated_chars(\"\") is None\n    assert find_repeated_chars(\"111\") is None\n    assert find_repeated_chars(\"aaa\") == \"a\"\n    assert find_repeated_chars(\"abababa\") == \"ab\"\n    assert find_repeated_chars(\"xyzzyx\") == \"xyz\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_non_alphabetic_chars(s):\n    result = ''\n    for char in s:\n        if not char.isalpha():\n            result += char\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_non_alphabetic_chars():\n    assert find_non_alphabetic_chars(\"hello123\") == \"123\"\n    assert find_non_alphabetic_chars(\"hello!\") == \"!\"\n    assert find_non_alphabetic_chars(\"1234\") == \"1234\"\n    assert find_non_alphabetic_chars(\"abcd\") is None\n    assert find_non_alphabetic_chars(\"a1b2c3\") == \"123\"\n    assert find_non_alphabetic_chars(\"hello world!\") == \" !\"\n    assert find_non_alphabetic_chars(\"\") is None\n    assert find_non_alphabetic_chars(\"HELLO123\") == \"123\"\n    assert find_non_alphabetic_chars(\"a@b#c$d\") == \"@#$\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef concatenate_strings_from_list(lst):\n    result = ''\n    for s in lst:\n        result += s\n    return result"}, {"role": "assistant", "content": "def test_concatenate_strings_from_list():\n    assert concatenate_strings_from_list([\"hello\", \"world\"]) == \"helloworld\"\n    assert concatenate_strings_from_list([\"a\", \"b\", \"c\"]) == \"abc\"\n    assert concatenate_strings_from_list([\"\"]) == \"\"\n    assert concatenate_strings_from_list([]) == \"\"\n    assert concatenate_strings_from_list([\" \", \" \"]) == \"  \"\n    assert concatenate_strings_from_list([\"hello\"]) == \"hello\"\n    assert concatenate_strings_from_list([\"1\", \"2\", \"3\"]) == \"123\"\n    assert concatenate_strings_from_list([\"!@#\", \"$%^\"]) == \"!@#$%^\"\n    assert concatenate_strings_from_list([\"abc\", \"def\"]) == \"abcdef\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_length_string(lst):\n    if not lst:\n        return None\n    min_string = lst[0]\n    for s in lst:\n        if len(s) < len(min_string):\n            min_string = s\n    return min_string"}, {"role": "assistant", "content": "def test_find_min_length_string():\n    assert find_min_length_string([\"hello\", \"world\", \"a\", \"ab\"]) == \"a\"\n    assert find_min_length_string([\"abcd\", \"ef\", \"ghij\"]) == \"ef\"\n    assert find_min_length_string([\"a\", \"ab\", \"abc\"]) == \"a\"\n    assert find_min_length_string([]) is None\n    assert find_min_length_string([\"12345\", \"12\", \"1234\"]) == \"12\"\n    assert find_min_length_string([\"x\", \"yz\", \"wxyz\"]) == \"x\"\n    assert find_min_length_string([\"apple\", \"banana\", \"cherry\"]) == \"apple\"\n    assert find_min_length_string([\"racecar\", \"civic\", \"deified\"]) == \"civic\"\n    assert find_min_length_string([\"abcd\", \"\"]) == \"\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef replace_with_alphabet_position(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += str(ord(char.lower()) - 96)\n        else:\n            result += char\n    return result"}, {"role": "assistant", "content": "def test_replace_with_alphabet_position():\n    assert replace_with_alphabet_position(\"abc\") == \"123\"\n    assert replace_with_alphabet_position(\"xyz\") == \"242526\"\n    assert replace_with_alphabet_position(\"Hello\") == \"85121215\"\n    assert replace_with_alphabet_position(\"WORLD\") == \"231518124\"\n    assert replace_with_alphabet_position(\"123\") == \"123\"\n    assert replace_with_alphabet_position(\"a1b2c3\") == \"112233\"\n    assert replace_with_alphabet_position(\"!@#\") == \"!@#\"\n    assert replace_with_alphabet_position(\"\") == \"\"\n    assert replace_with_alphabet_position(\"Alphabet\") == \"11216812520\""}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors(n):\n    if n == 0:\n        return None\n    divisors = []\n    for i in range(1, abs(n) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors if divisors else None"}, {"role": "assistant", "content": "def test_find_divisors():\n    assert find_divisors(6) == [1, 2, 3, 6]\n    assert find_divisors(28) == [1, 2, 4, 7, 14, 28]\n    assert find_divisors(0) is None\n    assert find_divisors(-6) == [1, 2, 3, 6]\n    assert find_divisors(1) == [1]\n    assert find_divisors(-1) == [1]\n    assert find_divisors(100) == [1, 2, 4, 5, 10, 20, 25, 50, 100]\n    assert find_divisors(17) == [1, 17]\n    assert find_divisors(12) == [1, 2, 3, 4, 6, 12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef is_prime_66(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}, {"role": "assistant", "content": "def test_is_prime_66():\n    assert is_prime_66(2) is True\n    assert is_prime_66(3) is True\n    assert is_prime_66(4) is False\n    assert is_prime_66(17) is True\n    assert is_prime_66(20) is False\n    assert is_prime_66(-1) is False\n    assert is_prime_66(1) is False\n    assert is_prime_66(0) is False\n    assert is_prime_66(23) is True"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_digits(n):\n    n = abs(n)\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"}, {"role": "assistant", "content": "def test_sum_of_digits():\n    assert sum_of_digits(123) == 6\n    assert sum_of_digits(-456) == 15\n    assert sum_of_digits(0) == 0\n    assert sum_of_digits(7890) == 24\n    assert sum_of_digits(-7890) == 24\n    assert sum_of_digits(1) == 1\n    assert sum_of_digits(-1) == 1\n    assert sum_of_digits(1111111) == 7\n    assert sum_of_digits(999) == 27"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_digits(n):\n    n = abs(n)\n    result = 1\n    while n > 0:\n        digit = n % 10\n        if digit != 0:\n            result *= digit\n        n //= 10\n    return result if result != 1 else None"}, {"role": "assistant", "content": "def test_multiply_by_digits():\n    assert multiply_by_digits(123) == 6\n    assert multiply_by_digits(456) == 120\n    assert multiply_by_digits(-789) == 504\n    assert multiply_by_digits(0) is None\n    assert multiply_by_digits(101) is None\n    assert multiply_by_digits(909) == 81\n    assert multiply_by_digits(111) is None\n    assert multiply_by_digits(-202) == 4\n    assert multiply_by_digits(1001) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef max_digit_in_number(n):\n    n = abs(n)\n    max_digit = -1\n    while n > 0:\n        digit = n % 10\n        if digit > max_digit:\n            max_digit = digit\n        n //= 10\n    return max_digit if max_digit != -1 else None"}, {"role": "assistant", "content": "def test_max_digit_in_number():\n    assert max_digit_in_number(123) == 3\n    assert max_digit_in_number(-456) == 6\n    assert max_digit_in_number(7890) == 9\n    assert max_digit_in_number(1) == 1\n    assert max_digit_in_number(0) is None\n    assert max_digit_in_number(-1) == 1\n    assert max_digit_in_number(999) == 9\n    assert max_digit_in_number(-987) == 9\n    assert max_digit_in_number(111111) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_largest_divisible_by_3(lst):\n    largest = None\n    for n in lst:\n        if n % 3 == 0 and (largest is None or n > largest):\n            largest = n\n    return largest"}, {"role": "assistant", "content": "def test_find_largest_divisible_by_3():\n    assert find_largest_divisible_by_3([3, 6, 9, 12]) == 12\n    assert find_largest_divisible_by_3([4, 5, 7]) is None\n    assert find_largest_divisible_by_3([3, 3, 3]) == 3\n    assert find_largest_divisible_by_3([1, 2, 3]) == 3\n    assert find_largest_divisible_by_3([]) is None\n    assert find_largest_divisible_by_3([0, 3, 6]) == 6\n    assert find_largest_divisible_by_3([15, 30, 45]) == 45\n    assert find_largest_divisible_by_3([1, 4, 7, 10]) is None\n    assert find_largest_divisible_by_3([3, 33, 333]) == 333"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_divisible_by_5(lst):\n    smallest = None\n    for n in lst:\n        if n % 5 == 0 and (smallest is None or n < smallest):\n            smallest = n\n    return smallest"}, {"role": "assistant", "content": "def test_find_smallest_divisible_by_5():\n    assert find_smallest_divisible_by_5([5, 10, 15, 20]) == 5\n    assert find_smallest_divisible_by_5([6, 7, 8]) is None\n    assert find_smallest_divisible_by_5([5, 5, 5]) == 5\n    assert find_smallest_divisible_by_5([1, 2, 5]) == 5\n    assert find_smallest_divisible_by_5([]) is None\n    assert find_smallest_divisible_by_5([0, 5, 10]) == 0\n    assert find_smallest_divisible_by_5([20, 25, 30]) == 20\n    assert find_smallest_divisible_by_5([1, 4, 7, 10]) == 10\n    assert find_smallest_divisible_by_5([5, 50, 500]) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_all_numbers(lst):\n    if not lst:\n        return None\n    result = 1\n    for n in lst:\n        result *= n\n    return result"}, {"role": "assistant", "content": "def test_multiply_all_numbers():\n    assert multiply_all_numbers([1, 2, 3, 4]) == 24\n    assert multiply_all_numbers([0, 2, 4, 6]) == 0\n    assert multiply_all_numbers([-1, 2, -3]) == 6\n    assert multiply_all_numbers([]) is None\n    assert multiply_all_numbers([1, 1, 1, 1]) == 1\n    assert multiply_all_numbers([5]) == 5\n    assert multiply_all_numbers([-2, 2, -2]) == 8\n    assert multiply_all_numbers([7, 7, 7]) == 343\n    assert multiply_all_numbers([2, 4, 8]) == 64"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_numbers_greater_than(lst, threshold):\n    count = 0\n    for n in lst:\n        if n > threshold:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_numbers_greater_than():\n    assert count_numbers_greater_than([1, 2, 3, 4, 5], 2) == 3\n    assert count_numbers_greater_than([10, 20, 30, 40], 25) == 2\n    assert count_numbers_greater_than([5, 6, 7, 8], 10) is None\n    assert count_numbers_greater_than([], 5) is None\n    assert count_numbers_greater_than([1, 1, 1, 1], 0) == 4\n    assert count_numbers_greater_than([100, 200, 300], 150) == 2\n    assert count_numbers_greater_than([-1, -2, -3], -4) == 3\n    assert count_numbers_greater_than([1, 2, 3], 3) is None\n    assert count_numbers_greater_than([100, 200, 300], 50) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_not_divisible_by_2_3_5(lst):\n    result = []\n    for n in lst:\n        if n % 2 != 0 and n % 3 != 0 and n % 5 != 0:\n            result.append(n)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_numbers_not_divisible_by_2_3_5():\n    assert find_numbers_not_divisible_by_2_3_5([1, 2, 3, 4, 5]) == [1]\n    assert find_numbers_not_divisible_by_2_3_5([10, 11, 13, 17]) == [11, 13, 17]\n    assert find_numbers_not_divisible_by_2_3_5([5, 6, 10, 15]) is None\n    assert find_numbers_not_divisible_by_2_3_5([7, 11, 13]) == [7, 11, 13]\n    assert find_numbers_not_divisible_by_2_3_5([]) is None\n    assert find_numbers_not_divisible_by_2_3_5([1, 4, 7, 8]) == [1, 7]\n    assert find_numbers_not_divisible_by_2_3_5([10, 20, 25]) is None\n    assert find_numbers_not_divisible_by_2_3_5([14, 22, 29]) == [29]\n    assert find_numbers_not_divisible_by_2_3_5([8, 14, 22]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_divisible_by_7(lst):\n    count = 0\n    for n in lst:\n        if n % 7 == 0:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_divisible_by_7():\n    assert count_divisible_by_7([7, 14, 21, 28]) == 4\n    assert count_divisible_by_7([6, 8, 10]) is None\n    assert count_divisible_by_7([7, 7, 7]) == 3\n    assert count_divisible_by_7([1, 2, 3]) is None\n    assert count_divisible_by_7([]) is None\n    assert count_divisible_by_7([0, 7, 14]) == 3\n    assert count_divisible_by_7([21, 28, 35]) == 3\n    assert count_divisible_by_7([1, 4, 7, 10]) == 1\n    assert count_divisible_by_7([7, 70, 700]) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_largest_square_number(lst):\n    largest = None\n    for n in lst:\n        if (n ** 0.5).is_integer() and (largest is None or n > largest):\n            largest = n\n    return largest"}, {"role": "assistant", "content": "def test_find_largest_square_number():\n    assert find_largest_square_number([1, 4, 9, 16]) == 16\n    assert find_largest_square_number([2, 3, 5]) is None\n    assert find_largest_square_number([1, 2, 3, 4]) == 4\n    assert find_largest_square_number([]) is None\n    assert find_largest_square_number([10, 20, 30]) is None\n    assert find_largest_square_number([25, 36, 49]) == 49\n    assert find_largest_square_number([1, 100, 400]) == 400\n    assert find_largest_square_number([9, 16, 25]) == 25\n    assert find_largest_square_number([1, 4, 8, 16]) == 16"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_cube_number(lst):\n    smallest = None\n    for n in lst:\n        if (n ** (1 / 3)).is_integer() and (smallest is None or n < smallest):\n            smallest = n\n    return smallest"}, {"role": "assistant", "content": "def test_find_smallest_cube_number():\n    assert find_smallest_cube_number([1, 8, 27, 64]) == 1\n    assert find_smallest_cube_number([27, 8, 343, 64]) == 8\n    assert find_smallest_cube_number([1000, 729]) is None\n    assert find_smallest_cube_number([10, 20, 30]) is None\n    assert find_smallest_cube_number([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_square_and_cube(lst):\n    result = []\n    for n in lst:\n        if (n ** 0.5).is_integer() and (n ** (1 / 3)).is_integer():\n            result.append(n)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_square_and_cube():\n    assert find_square_and_cube([64, 729, 4096]) is None\n    assert find_square_and_cube([1, 8, 27, 64]) == [1]\n    assert find_square_and_cube([2, 3, 5]) is None\n    assert find_square_and_cube([]) is None\n    assert find_square_and_cube([729, 144, 10000, 15625]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_largest_power_of_two(lst):\n    largest = None\n    for n in lst:\n        if (n & (n - 1)) == 0 and (largest is None or n > largest):\n            largest = n\n    return largest"}, {"role": "assistant", "content": "def test_find_largest_power_of_two():\n    assert find_largest_power_of_two([1, 2, 4, 16, 64]) == 64\n    assert find_largest_power_of_two([3, 5, 7]) is None\n    assert find_largest_power_of_two([16, 8, 2]) == 16\n    assert find_largest_power_of_two([0]) == 0\n    assert find_largest_power_of_two([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_power_of_two(lst):\n    smallest = None\n    for n in lst:\n        if (n & (n - 1)) == 0 and (smallest is None or n < smallest):\n            smallest = n\n    return smallest"}, {"role": "assistant", "content": "def test_find_smallest_power_of_two():\n    assert find_smallest_power_of_two([1, 2, 4, 16, 64]) == 1\n    assert find_smallest_power_of_two([3, 5, 7]) is None\n    assert find_smallest_power_of_two([16, 8, 2]) == 2\n    assert find_smallest_power_of_two([0]) == 0\n    assert find_smallest_power_of_two([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_powers_of_two(lst):\n    powers_of_two = []\n    for n in lst:\n        if (n & (n - 1)) == 0:\n            powers_of_two.append(n)\n    return powers_of_two if powers_of_two else None"}, {"role": "assistant", "content": "def test_find_all_powers_of_two():\n    assert find_all_powers_of_two([1, 2, 4, 16, 64]) == [1, 2, 4, 16, 64]\n    assert find_all_powers_of_two([3, 5, 7]) is None\n    assert find_all_powers_of_two([16, 8, 2]) == [16, 8, 2]\n    assert find_all_powers_of_two([0]) == [0]\n    assert find_all_powers_of_two([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_negative_numbers(lst):\n    negative_numbers = []\n    for n in lst:\n        if n < 0:\n            negative_numbers.append(n)\n    return negative_numbers if negative_numbers else None"}, {"role": "assistant", "content": "def test_find_all_negative_numbers():\n    assert find_all_negative_numbers([-1, -2, -4, -16, -64]) == [-1, -2, -4, -16, -64]\n    assert find_all_negative_numbers([3, 5, 7]) is None\n    assert find_all_negative_numbers([16, -8, 2]) == [-8]\n    assert find_all_negative_numbers([0]) is None\n    assert find_all_negative_numbers([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_positive_numbers(lst):\n    positive_numbers = []\n    for n in lst:\n        if n > 0:\n            positive_numbers.append(n)\n    return positive_numbers if positive_numbers else None"}, {"role": "assistant", "content": "def test_find_all_positive_numbers():\n    assert find_all_positive_numbers([1, 2, 4, 16, 64]) == [1, 2, 4, 16, 64]\n    assert find_all_positive_numbers([-3, -5, -7]) is None\n    assert find_all_positive_numbers([16, -8, 2]) == [16, 2]\n    assert find_all_positive_numbers([0]) is None\n    assert find_all_positive_numbers([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_all_zeros(lst):\n    zeros = []\n    for n in lst:\n        if n == 0:\n            zeros.append(n)\n    return zeros if zeros else None"}, {"role": "assistant", "content": "def test_find_all_zeros():\n    assert find_all_zeros([0, 0, 0]) == [0, 0, 0]\n    assert find_all_zeros([-3, -5, -7]) is None\n    assert find_all_zeros([16, 0, 2]) == [0]\n    assert find_all_zeros([0]) == [0]\n    assert find_all_zeros([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_numbers_greater_than(lst, threshold):\n    total = 0\n    for n in lst:\n        if n > threshold:\n            total += n\n    return total if total > 0 else None"}, {"role": "assistant", "content": "def test_sum_numbers_greater_than():\n    assert sum_numbers_greater_than([1, 2, 4, 16, 64], 10) == 80\n    assert sum_numbers_greater_than([-3, -5, -7], -4) is None\n    assert sum_numbers_greater_than([16, -8, 2], 1) == 18\n    assert sum_numbers_greater_than([0], -1) is None\n    assert sum_numbers_greater_than([], 0) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_divisible_by_4(lst):\n    max_divisible_by_4 = None\n    for n in lst:\n        if n % 4 == 0:\n            if max_divisible_by_4 is None or n > max_divisible_by_4:\n                max_divisible_by_4 = n\n    return max_divisible_by_4"}, {"role": "assistant", "content": "def test_find_max_divisible_by_4():\n    assert find_max_divisible_by_4([4, 8, 12, 16, 20]) == 20\n    assert find_max_divisible_by_4([3, 5, 7]) is None\n    assert find_max_divisible_by_4([16, 8, 2]) == 16\n    assert find_max_divisible_by_4([0]) == 0\n    assert find_max_divisible_by_4([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_divisible_by_6(lst):\n    min_divisible_by_6 = None\n    for n in lst:\n        if n % 6 == 0:\n            if min_divisible_by_6 is None or n < min_divisible_by_6:\n                min_divisible_by_6 = n\n    return min_divisible_by_6"}, {"role": "assistant", "content": "def test_find_min_divisible_by_6():\n    assert find_min_divisible_by_6([6, 12, 18]) == 6\n    assert find_min_divisible_by_6([7, 14, 21]) is None\n    assert find_min_divisible_by_6([24, 36, 6]) == 6\n    assert find_min_divisible_by_6([0]) == 0\n    assert find_min_divisible_by_6([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_and_11(lst):\n    result = []\n    for n in lst:\n        if n % 7 == 0 and n % 11 == 0:\n            result.append(n)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_7_and_11():\n    assert find_divisible_by_7_and_11([77, 154, 231]) == [77, 154, 231]\n    assert find_divisible_by_7_and_11([21, 33, 49]) is None\n    assert find_divisible_by_7_and_11([77, 88, 99]) == [77]\n    assert find_divisible_by_7_and_11([0]) == [0]\n    assert find_divisible_by_7_and_11([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_largest_divisible_by_9(lst):\n    largest = None\n    for n in lst:\n        if n % 9 == 0 and (largest is None or n > largest):\n            largest = n\n    return largest"}, {"role": "assistant", "content": "def test_find_largest_divisible_by_9():\n    assert find_largest_divisible_by_9([9, 18, 27, 36]) == 36\n    assert find_largest_divisible_by_9([10, 20, 30]) is None\n    assert find_largest_divisible_by_9([27, 18, 9]) == 27\n    assert find_largest_divisible_by_9([0]) == 0\n    assert find_largest_divisible_by_9([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_smallest_divisible_by_12(lst):\n    smallest = None\n    for n in lst:\n        if n % 12 == 0 and (smallest is None or n < smallest):\n            smallest = n\n    return smallest"}, {"role": "assistant", "content": "def test_find_smallest_divisible_by_12():\n    assert find_smallest_divisible_by_12([12, 24, 36, 48]) == 12\n    assert find_smallest_divisible_by_12([14, 28, 42]) is None\n    assert find_smallest_divisible_by_12([48, 36, 24]) == 24\n    assert find_smallest_divisible_by_12([0]) == 0\n    assert find_smallest_divisible_by_12([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_15_and_20(lst):\n    result = []\n    for n in lst:\n        if n % 15 == 0 and n % 20 == 0:\n            result.append(n)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_15_and_20():\n    assert find_divisible_by_15_and_20([60, 120, 180]) == [60, 120, 180]\n    assert find_divisible_by_15_and_20([15, 30, 45]) is None\n    assert find_divisible_by_15_and_20([60, 75, 100]) == [60]\n    assert find_divisible_by_15_and_20([0]) == [0]\n    assert find_divisible_by_15_and_20([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_tuple_from_list(lst):\n    if not lst:\n        return None\n    result = tuple(lst)\n    return result"}, {"role": "assistant", "content": "def test_create_tuple_from_list():\n    assert create_tuple_from_list([1, 2, 3, 4]) == (1, 2, 3, 4)\n    assert create_tuple_from_list([]) is None\n    assert create_tuple_from_list([True, False, None]) == (True, False, None)\n    assert create_tuple_from_list(['a', 'b', 'c']) == ('a', 'b', 'c')\n    assert create_tuple_from_list([1]) == (1,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_max_from_list(lst):\n    if not lst:\n        return None\n    min_val = min(lst)\n    max_val = max(lst)\n    return min_val, max_val"}, {"role": "assistant", "content": "def test_find_min_max_from_list():\n    assert find_min_max_from_list([1, 2, 3, 4]) == (1, 4)\n    assert find_min_max_from_list([4, 1, 2, 3]) == (1, 4)\n    assert find_min_max_from_list([]) is None\n    assert find_min_max_from_list([10]) == (10, 10)\n    assert find_min_max_from_list([-5, 0, 5]) == (-5, 5)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_tuple_of_unique_elements(lst):\n    unique_elements = sorted(set(lst))\n    return tuple(unique_elements) if unique_elements else None"}, {"role": "assistant", "content": "def test_create_tuple_of_unique_elements():\n    assert create_tuple_of_unique_elements([1, 2, 3, 1, 2, 3]) == (1, 2, 3)\n    assert create_tuple_of_unique_elements([]) is None\n    assert create_tuple_of_unique_elements(['a', 'b', 'a', 'b']) == ('a', 'b')\n    assert create_tuple_of_unique_elements([True, False, True]) == (False, True)\n    assert create_tuple_of_unique_elements([None, None]) == (None,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3(lst):\n    result = []\n    for n in lst:\n        if n % 3 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_3():\n    assert find_divisible_by_3([3, 6, 9, 12]) == (3, 6, 9, 12)\n    assert find_divisible_by_3([2, 4, 5]) is None\n    assert find_divisible_by_3([3, 5, 6, 9]) == (3, 6, 9)\n    assert find_divisible_by_3([0]) == (0,)\n    assert find_divisible_by_3([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_numbers(lst):\n    result = []\n    for n in lst:\n        if n % 2 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_even_numbers():\n    assert find_even_numbers([2, 4, 6, 8]) == (2, 4, 6, 8)\n    assert find_even_numbers([1, 3, 5]) is None\n    assert find_even_numbers([2, 4, 5, 6]) == (2, 4, 6)\n    assert find_even_numbers([0]) == (0,)\n    assert find_even_numbers([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_long_strings(lst):\n    result = []\n    for s in lst:\n        if len(s) > 3:\n            result.append(s)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_long_strings():\n    assert find_long_strings([\"abcd\", \"efg\", \"hijk\", \"lmn\"]) == (\"abcd\", \"hijk\")\n    assert find_long_strings([\"a\", \"ab\", \"abc\", \"abcd\"]) == (\"abcd\",)\n    assert find_long_strings([\"a\", \"ab\", \"abc\"]) is None\n    assert find_long_strings([]) is None\n    assert find_long_strings([\"abcd\", \"efghi\", \"jklmnop\"]) == (\"abcd\", \"efghi\", \"jklmnop\")"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_strings_with_digits_2(lst):\n    result = []\n    for s in lst:\n        if any(char.isdigit() for char in s):\n            result.append(s)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_strings_with_digits_2():\n    assert find_strings_with_digits_2([\"a1\", \"b2\", \"c\", \"4d\"]) == (\"a1\", \"b2\", \"4d\")\n    assert find_strings_with_digits_2([\"123\", \"abc\", \"456\"]) == (\"123\", \"456\")\n    assert find_strings_with_digits_2([\"abcd\", \"efgh\"]) is None\n    assert find_strings_with_digits_2([]) is None\n    assert find_strings_with_digits_2([\"1a2b3c\", \"4d5e\", \"6f7g\"]) == (\"1a2b3c\", \"4d5e\", \"6f7g\")"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_square_numbers(lst):\n    result = []\n    for n in lst:\n        if (n ** 0.5).is_integer():\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_square_numbers():\n    assert find_square_numbers([1, 2, 3, 4, 5, 16]) == (1, 4, 16)\n    assert find_square_numbers([7, 9, 10, 12]) == (9,)\n    assert find_square_numbers([2, 3, 5, 6]) is None\n    assert find_square_numbers([]) is None\n    assert find_square_numbers([25, 36, 49]) == (25, 36, 49)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5(lst):\n    result = []\n    for n in lst:\n        if n % 5 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_5():\n    assert find_divisible_by_5([5, 10, 15, 20]) == (5, 10, 15, 20)\n    assert find_divisible_by_5([3, 6, 9]) is None\n    assert find_divisible_by_5([25, 35, 45, 55]) == (25, 35, 45, 55)\n    assert find_divisible_by_5([]) is None\n    assert find_divisible_by_5([50, 60, 70]) == (50, 60, 70)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_short_strings(lst):\n    result = []\n    for s in lst:\n        if len(s) <= 5:\n            result.append(s)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_short_strings():\n    assert find_short_strings([\"abc\", \"abcd\", \"efg\", \"hij\"]) == ('abc', 'abcd', 'efg', 'hij')\n    assert find_short_strings([\"a\", \"ab\", \"abc\"]) == (\"a\", \"ab\", \"abc\")\n    assert find_short_strings([\"abcdef\", \"ghijkl\"]) is None\n    assert find_short_strings([]) is None\n    assert find_short_strings([\"abcde\", \"fghi\"]) == (\"abcde\", \"fghi\")"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than(lst, threshold):\n    result = []\n    for n in lst:\n        if n > threshold:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_greater_than():\n    assert find_greater_than([1, 2, 3, 4, 5], 3) == (4, 5)\n    assert find_greater_than([10, 20, 30], 15) == (20, 30)\n    assert find_greater_than([5, 10, 15], 20) is None\n    assert find_greater_than([], 5) is None\n    assert find_greater_than([50, 60, 70], 55) == (60, 70)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_indexes(lst):\n    if not lst:\n        return None\n    max_val = max(lst)\n    indexes = [i for i, x in enumerate(lst) if x == max_val]\n    return tuple(indexes) if indexes else None"}, {"role": "assistant", "content": "def test_find_max_indexes():\n    assert find_max_indexes([1, 3, 7, 3, 7]) == (2, 4)\n    assert find_max_indexes([3, 3, 3]) == (0, 1, 2)\n    assert find_max_indexes([1, 2, 3]) == (2,)\n    assert find_max_indexes([]) is None\n    assert find_max_indexes([7, 8, 8, 7]) == (1, 2)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_and_greater_than_ten(lst):\n    result = []\n    for n in lst:\n        if n % 2 == 0 and n > 10:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_even_and_greater_than_ten():\n    assert find_even_and_greater_than_ten([12, 14, 16, 18]) == (12, 14, 16, 18)\n    assert find_even_and_greater_than_ten([8, 9, 10]) is None\n    assert find_even_and_greater_than_ten([20, 21, 22]) == (20, 22)\n    assert find_even_and_greater_than_ten([]) is None\n    assert find_even_and_greater_than_ten([11, 13, 15, 17]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_strings_with_uppercase(lst):\n    result = []\n    for s in lst:\n        if any(char.isupper() for char in s):\n            result.append(s)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_strings_with_uppercase():\n    assert find_strings_with_uppercase([\"aA\", \"Bb\", \"cc\", \"Dd\"]) == (\"aA\", \"Bb\", \"Dd\")\n    assert find_strings_with_uppercase([\"abcd\", \"efGh\"]) == (\"efGh\",)\n    assert find_strings_with_uppercase([\"abcd\", \"efg\"]) is None\n    assert find_strings_with_uppercase([]) is None\n    assert find_strings_with_uppercase([\"aBcD\", \"EfGh\", \"IjK\"]) == (\"aBcD\", \"EfGh\", \"IjK\")"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_divisible_by_4_not_2(lst):\n    result = []\n    for n in lst:\n        if n % 2 == 0 and n % 16 != 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_divisible_by_4_not_2():\n    assert find_numbers_divisible_by_4_not_2([4, 8, 12, 16]) == (4, 8, 12)\n    assert find_numbers_divisible_by_4_not_2([2, 3, 6]) == (2, 6)\n    assert find_numbers_divisible_by_4_not_2([20, 24, 28]) == (20, 24, 28)\n    assert find_numbers_divisible_by_4_not_2([]) is None\n    assert find_numbers_divisible_by_4_not_2([32, 36, 40]) == (36, 40)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_longer_than_average(lst):\n    average_length = sum(len(s) for s in lst) / len(lst) if lst else 0\n    result = []\n    for s in lst:\n        if len(s) > average_length:\n            result.append(s)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_longer_than_average():\n    assert find_longer_than_average([\"abcd\", \"efghij\", \"klm\", \"nopqrs\"]) == (\"efghij\", \"nopqrs\")\n    assert find_longer_than_average([\"a\", \"ab\", \"abc\"]) == (\"abc\",)\n    assert find_longer_than_average([\"abcdef\", \"ghijkl\"]) is None\n    assert find_longer_than_average([]) is None\n    assert find_longer_than_average([\"ab\", \"cd\", \"ef\", \"gh\", \"ijkl\", \"mnopqr\"]) == (\"ijkl\", \"mnopqr\")"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_equal_to_digit_sum(lst):\n    result = []\n    for n in lst:\n        if n == sum(int(digit) for digit in str(abs(n))):\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_equal_to_digit_sum():\n    assert find_numbers_equal_to_digit_sum([1, 2, 3, 4, 5, 6, 12, 21]) == (1, 2, 3, 4, 5, 6)\n    assert find_numbers_equal_to_digit_sum([10, 11, 19]) is None\n    assert find_numbers_equal_to_digit_sum([123, 321]) is None\n    assert find_numbers_equal_to_digit_sum([]) is None\n    assert find_numbers_equal_to_digit_sum([-1, -2, 3, 9]) == (3, 9)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_100(lst):\n    result = []\n    for n in lst:\n        if 100 % n == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_divisors_of_100():\n    assert find_divisors_of_100([1, 2, 4, 5, 10, 20, 25, 50, 100]) == (1, 2, 4, 5, 10, 20, 25, 50, 100)\n    assert find_divisors_of_100([3, 6, 7]) is None\n    assert find_divisors_of_100([10, 5, 20, 25]) == (10, 5, 20, 25)\n    assert find_divisors_of_100([]) is None\n    assert find_divisors_of_100([50, 100, 200]) == (50, 100)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_and_5(lst):\n    result = []\n    for n in lst:\n        if n % 3 == 0 and n % 5 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_multiples_of_3_and_5():\n    assert find_multiples_of_3_and_5([15, 30, 45, 60]) == (15, 30, 45, 60)\n    assert find_multiples_of_3_and_5([10, 20, 25]) is None\n    assert find_multiples_of_3_and_5([90, 105, 150]) == (90, 105, 150)\n    assert find_multiples_of_3_and_5([]) is None\n    assert find_multiples_of_3_and_5([9, 18, 27]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_list(lst, n):\n    result = []\n    for num in lst:\n        if num % n == 0:\n            result.append(num)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_multiples_of_list():\n    assert find_multiples_of_list([2, 3, 4, 5, 6, 10, 15], 5) == (5, 10, 15)\n    assert find_multiples_of_list([2, 3, 4, 6], 7) is None\n    assert find_multiples_of_list([1, 2, 3, 4, 5], 1) == (1, 2, 3, 4, 5)\n    assert find_multiples_of_list([], 5) is None\n    assert find_multiples_of_list([10, 20, 30], 10) == (10, 20, 30)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squared_numbers(lst):\n    result = []\n    for n in lst:\n        if (n ** 0.5).is_integer():\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_squared_numbers():\n    assert find_squared_numbers([1, 4, 9, 16, 25]) == (1, 4, 9, 16, 25)\n    assert find_squared_numbers([2, 3, 5, 7]) is None\n    assert find_squared_numbers([36, 49, 64, 81]) == (36, 49, 64, 81)\n    assert find_squared_numbers([]) is None\n    assert find_squared_numbers([1, 2, 3, 9, 16]) == (1, 9, 16)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_2(lst):\n    result = []\n    for n in lst:\n        if n % 6 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_6_2():\n    assert find_divisible_by_6_2([6, 12, 18, 24]) == (6, 12, 18, 24)\n    assert find_divisible_by_6_2([4, 8, 10]) is None\n    assert find_divisible_by_6_2([30, 36, 42]) == (30, 36, 42)\n    assert find_divisible_by_6_2([]) is None\n    assert find_divisible_by_6_2([2, 3, 6, 18]) == (6, 18)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_3_2(lst):\n    result = []\n    for n in lst:\n        if n % 2 == 0 and n % 3 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_3_2():\n    assert find_divisible_by_2_and_3_2([6, 12, 18, 24]) == (6, 12, 18, 24)\n    assert find_divisible_by_2_and_3_2([5, 10, 15]) is None\n    assert find_divisible_by_2_and_3_2([30, 36, 42, 48]) == (30, 36, 42, 48)\n    assert find_divisible_by_2_and_3_2([]) is None\n    assert find_divisible_by_2_and_3_2([4, 8, 12]) == (12,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_2_3_5(lst):\n    result = []\n    for n in lst:\n        if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_multiples_of_2_3_5():\n    assert find_multiples_of_2_3_5([30, 60, 90, 120]) == (30, 60, 90, 120)\n    assert find_multiples_of_2_3_5([5, 10, 15]) is None\n    assert find_multiples_of_2_3_5([2, 4, 6, 8]) is None\n    assert find_multiples_of_2_3_5([]) is None\n    assert find_multiples_of_2_3_5([3, 9, 18]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_palindromes_4(lst):\n    result = []\n    for n in lst:\n        if str(n) == str(n)[::-1]:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_palindromes_4():\n    assert find_palindromes_4([121, 131, 141, 151]) == (121, 131, 141, 151)\n    assert find_palindromes_4([10, 20, 30]) is None\n    assert find_palindromes_4([212, 232, 252]) == (212, 232, 252)\n    assert find_palindromes_4([]) is None\n    assert find_palindromes_4([123, 456, 789]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_less_than_digit_sum(lst):\n    result = []\n    for n in lst:\n        if n < sum(int(digit) for digit in str(abs(n))):\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_less_than_digit_sum():\n    assert find_numbers_less_than_digit_sum([1, 2, 3, 5]) is None\n    assert find_numbers_less_than_digit_sum([10, 21, 99, 12]) is None\n    assert find_numbers_less_than_digit_sum([-1, -10, -22, 30]) == (-1, -10, -22)\n    assert find_numbers_less_than_digit_sum([0, -100, 101]) == (-100,)\n    assert find_numbers_less_than_digit_sum([-123, -456, 789]) == (-123, -456)\n    assert find_numbers_less_than_digit_sum([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_equal_to_sum_of_divisors(lst):\n    result = []\n    for n in lst:\n        divisors = [i for i in range(1, n) if n % i == 0]\n        if n == sum(divisors):\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_equal_to_sum_of_divisors():\n    assert find_numbers_equal_to_sum_of_divisors([6, 28, 496]) == (6, 28, 496)\n    assert find_numbers_equal_to_sum_of_divisors([12, 18, 20]) is None\n    assert find_numbers_equal_to_sum_of_divisors([6, 1, 5]) == (6,)\n    assert find_numbers_equal_to_sum_of_divisors([]) is None\n    assert find_numbers_equal_to_sum_of_divisors([0, -1, -6]) == (0,)\n    assert find_numbers_equal_to_sum_of_divisors([8128]) == (8128,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_multiples_of_3_not_21(lst):\n    result = []\n    for n in lst:\n        if n % 3 == 0 and n % 21 != 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_multiples_of_3_not_21():\n    assert find_multiples_of_3_not_21([3, 6, 9, 12]) == (3, 6, 9, 12)\n    assert find_multiples_of_3_not_21([21, 42, 63]) is None\n    assert find_multiples_of_3_not_21([3, 21, 42, 6]) == (3, 6)\n    assert find_multiples_of_3_not_21([]) is None\n    assert find_multiples_of_3_not_21([0, 1, 2, 3]) == (3,)\n    assert find_multiples_of_3_not_21([3, 6, 12]) == (3, 6, 12)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_11_and_13(lst):\n    result = []\n    for n in lst:\n        if n % 11 == 0 and n % 13 == 0:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_divisible_by_11_and_13():\n    assert find_divisible_by_11_and_13([143, 286]) == (143, 286)\n    assert find_divisible_by_11_and_13([11, 13, 22, 26]) is None\n    assert find_divisible_by_11_and_13([143, 13, 11]) == (143,)\n    assert find_divisible_by_11_and_13([]) is None\n    assert find_divisible_by_11_and_13([0, 143]) == (0, 143)\n    assert find_divisible_by_11_and_13([143, 286, 429]) == (143, 286, 429)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_square_dict(lst):\n    if not lst:\n        return None\n    square_dict = {}\n    for item in lst:\n        square_dict[item] = item ** 2\n    return square_dict if square_dict else None"}, {"role": "assistant", "content": "def test_create_square_dict():\n    assert create_square_dict([1, 2, 3]) == {1: 1, 2: 4, 3: 9}\n    assert create_square_dict([]) is None\n    assert create_square_dict([-1, -2, -3]) == {-1: 1, -2: 4, -3: 9}\n    assert create_square_dict([0, 1, 2]) == {0: 0, 1: 1, 2: 4}\n    assert create_square_dict([2, 2, 2]) == {2: 4}\n    assert create_square_dict([1]) == {1: 1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_max_in_dict(d):\n    if not d:\n        return None\n    min_key = min(d, key=d.get)\n    max_key = max(d, key=d.get)\n    return (min_key, d[min_key]), (max_key, d[max_key])"}, {"role": "assistant", "content": "def test_find_min_max_in_dict():\n    assert find_min_max_in_dict({'a': 1, 'b': 2, 'c': 3}) == (('a', 1), ('c', 3))\n    assert find_min_max_in_dict({}) is None\n    assert find_min_max_in_dict({'a': -1, 'b': -2, 'c': -3}) == (('c', -3), ('a', -1))\n    assert find_min_max_in_dict({'a': 0}) == (('a', 0), ('a', 0))\n    assert find_min_max_in_dict({'a': 3, 'b': 3, 'c': 3}) == (('a', 3), ('a', 3))\n    assert find_min_max_in_dict({'a': 5, 'b': 5, 'c': 5}) == (('a', 5), ('a', 5))"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_dict_with_strings(d):\n    if not d:\n        return None\n    filtered_dict = {}\n    for key, value in d.items():\n        if isinstance(key, str):\n            filtered_dict[key] = value\n    return filtered_dict if filtered_dict else None"}, {"role": "assistant", "content": "def test_filter_dict_with_strings():\n    assert filter_dict_with_strings({'a': 1, 'b': 2, 3: 'c'}) == {'a': 1, 'b': 2}\n    assert filter_dict_with_strings({}) is None\n    assert filter_dict_with_strings({1: 'a', 2: 'b', 'c': 'd'}) == {'c': 'd'}\n    assert filter_dict_with_strings({'a': 'x', 'b': 'y', 'c': 'z'}) == {'a': 'x', 'b': 'y', 'c': 'z'}\n    assert filter_dict_with_strings({True: 1, 'b': 2, 3: 3.0}) == {'b': 2}\n    assert filter_dict_with_strings({'x': 0, 'y': 1}) == {'x': 0, 'y': 1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_numeric_keys(d):\n    if not d:\n        return None\n    total = 0\n    for key, value in d.items():\n        if isinstance(key, (int, float)):\n            total += value\n    return total if total else None"}, {"role": "assistant", "content": "def test_sum_of_numeric_keys():\n    assert sum_of_numeric_keys({1: 10, 2: 20, 3: 30}) == 60\n    assert sum_of_numeric_keys({}) is None\n    assert sum_of_numeric_keys({1: 10, 2.5: 20.5, 3: 30}) == 60.5\n    assert sum_of_numeric_keys({'a': 10, 'b': 20}) is None\n    assert sum_of_numeric_keys({1: 0, 2: 0}) is None\n    assert sum_of_numeric_keys({'a': 0, 2: 2}) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_dict_from_string_lengths(lst):\n    if not lst:\n        return None\n    length_dict = {}\n    for s in sorted(lst, key=len):\n        length_dict[len(s)] = s\n    return length_dict if length_dict else None"}, {"role": "assistant", "content": "def test_create_dict_from_string_lengths():\n    assert create_dict_from_string_lengths(['a', 'bc', 'def']) == {1: 'a', 2: 'bc', 3: 'def'}\n    assert create_dict_from_string_lengths([]) is None\n    assert create_dict_from_string_lengths(['a', 'a', 'a']) == {1: 'a'}\n    assert create_dict_from_string_lengths(['abc', 'de', 'f']) == {1: 'f', 2: 'de', 3: 'abc'}\n    assert create_dict_from_string_lengths(['', 'a', 'abc']) == {0: '', 1: 'a', 3: 'abc'}\n    assert create_dict_from_string_lengths(['x', 'xy', 'xyz']) == {1: 'x', 2: 'xy', 3: 'xyz'}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_negative_values(d):\n    if not d:\n        return None\n    clean_dict = {}\n    for key, value in d.items():\n        if value >= 0:\n            clean_dict[key] = value\n    return clean_dict if clean_dict else None"}, {"role": "assistant", "content": "def test_remove_negative_values():\n    assert remove_negative_values({'a': 1, 'b': -2, 'c': 3}) == {'a': 1, 'c': 3}\n    assert remove_negative_values({}) is None\n    assert remove_negative_values({'a': -1, 'b': -2, 'c': -3}) is None\n    assert remove_negative_values({'a': 0, 'b': 2, 'c': 3}) == {'a': 0, 'b': 2, 'c': 3}\n    assert remove_negative_values({'a': 5, 'b': -5, 'c': 10}) == {'a': 5, 'c': 10}\n    assert remove_negative_values({'a': 1}) == {'a': 1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_dict_from_lists(keys, values):\n    if not keys or not values or len(keys) != len(values):\n        return None\n    result_dict = {}\n    for i in range(len(keys)):\n        result_dict[keys[i]] = values[i]\n    return result_dict if result_dict else None"}, {"role": "assistant", "content": "def test_create_dict_from_lists():\n    assert create_dict_from_lists([1, 2, 3], ['a', 'b', 'c']) == {1: 'a', 2: 'b', 3: 'c'}\n    assert create_dict_from_lists([], []) is None\n    assert create_dict_from_lists([1, 2], ['a']) is None\n    assert create_dict_from_lists(['a', 'b'], [1, 2]) == {'a': 1, 'b': 2}\n    assert create_dict_from_lists(['a', 'b', 'c'], [1, 2, 3]) == {'a': 1, 'b': 2, 'c': 3}\n    assert create_dict_from_lists([1], ['a']) == {1: 'a'}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_strings_by_length(lst):\n    if not lst:\n        return None\n    length_count = {}\n    for s in lst:\n        length_count[len(s)] = length_count.get(len(s), 0) + 1\n    return length_count if length_count else None"}, {"role": "assistant", "content": "def test_count_strings_by_length():\n    assert count_strings_by_length(['a', 'bb', 'ccc']) == {1: 1, 2: 1, 3: 1}\n    assert count_strings_by_length([]) is None\n    assert count_strings_by_length(['a', 'b', 'c']) == {1: 3}\n    assert count_strings_by_length(['abc', 'def', 'gh']) == {3: 2, 2: 1}\n    assert count_strings_by_length(['a', 'aa', 'aaa']) == {1: 1, 2: 1, 3: 1}\n    assert count_strings_by_length(['aaa', 'bbb', 'ccc']) == {3: 3}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_min_value_in_dict(d):\n    if not d:\n        return None\n    min_value = min(d.values())\n    return min_value if min_value else None"}, {"role": "assistant", "content": "def test_find_min_value_in_dict():\n    assert find_min_value_in_dict({'a': 1, 'b': 2, 'c': 3}) == 1\n    assert find_min_value_in_dict({}) is None\n    assert find_min_value_in_dict({'a': -1, 'b': -2, 'c': -3}) == -3\n    assert find_min_value_in_dict({'a': 0}) is None\n    assert find_min_value_in_dict({'a': 5, 'b': 5, 'c': 5}) == 5\n    assert find_min_value_in_dict({'a': 5, 'b': -5, 'c': 10}) == -5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_dict_from_list(lst):\n    if not lst:\n        return None\n    index_dict = {}\n    for i, value in enumerate(lst):\n        index_dict[i] = value\n    return index_dict if index_dict else None"}, {"role": "assistant", "content": "def test_create_dict_from_list():\n    assert create_dict_from_list(['a', 'b', 'c']) == {0: 'a', 1: 'b', 2: 'c'}\n    assert create_dict_from_list([]) is None\n    assert create_dict_from_list([1, 2, 3]) == {0: 1, 1: 2, 2: 3}\n    assert create_dict_from_list(['x', 'y']) == {0: 'x', 1: 'y'}\n    assert create_dict_from_list(['abc', 'def']) == {0: 'abc', 1: 'def'}\n    assert create_dict_from_list(['a']) == {0: 'a'}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_duplicates_in_dict(d):\n    if not d:\n        return None\n    reverse_dict = {}\n    for key, value in d.items():\n        if value not in reverse_dict:\n            reverse_dict[value] = [key]\n        else:\n            reverse_dict[value].append(key)\n    duplicates = {value: keys for value, keys in reverse_dict.items() if len(keys) > 1}\n    return duplicates if duplicates else None"}, {"role": "assistant", "content": "def test_find_duplicates_in_dict():\n    assert find_duplicates_in_dict({'a': 1, 'b': 2, 'c': 1}) == {1: ['a', 'c']}\n    assert find_duplicates_in_dict({}) is None\n    assert find_duplicates_in_dict({'a': 1, 'b': 1, 'c': 1}) == {1: ['a', 'b', 'c']}\n    assert find_duplicates_in_dict({'a': 1, 'b': 2, 'c': 3}) is None\n    assert find_duplicates_in_dict({'a': -1, 'b': -1, 'c': 0}) == {-1: ['a', 'b']}\n    assert find_duplicates_in_dict({'a': 0, 'b': 0, 'c': 0}) == {0: ['a', 'b', 'c']}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_values_by_key(d, key):\n    if not d or key not in d:\n        return None\n    count = 0\n    for value in d.values():\n        if value == d[key]:\n            count += 1\n    return count if count else None"}, {"role": "assistant", "content": "def test_count_values_by_key():\n    assert count_values_by_key({'a': 1, 'b': 2, 'c': 1}, 'a') == 2\n    assert count_values_by_key({'a': 1, 'b': 2, 'c': 1}, 'b') == 1\n    assert count_values_by_key({'a': 1, 'b': 2, 'c': 1}, 'c') == 2\n    assert count_values_by_key({}, 'a') is None\n    assert count_values_by_key({'a': 1, 'b': 2, 'c': 1}, 'd') is None\n    assert count_values_by_key({'a': 0, 'b': 0}, 'a') == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_values_greater_than(d, threshold):\n    if not d:\n        return None\n    result = []\n    for key, value in d.items():\n        if value > threshold:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_values_greater_than():\n    assert find_values_greater_than({'a': 1, 'b': 2, 'c': 3}, 1) == [('b', 2), ('c', 3)]\n    assert find_values_greater_than({}, 1) is None\n    assert find_values_greater_than({'a': -1, 'b': -2, 'c': 3}, -2) == [('a', -1), ('c', 3)]\n    assert find_values_greater_than({'a': 0}, -1) == [('a', 0)]\n    assert find_values_greater_than({'a': 0, 'b': 1, 'c': 2}, 0) == [('b', 1), ('c', 2)]\n    assert find_values_greater_than({'a': 5, 'b': 10}, 6) == [('b', 10)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_remainders_dict(lst):\n    if not lst:\n        return None\n    remainder_dict = {}\n    for n in lst:\n        remainder_dict[n] = n % 5\n    return remainder_dict if remainder_dict else None"}, {"role": "assistant", "content": "def test_create_remainders_dict():\n    assert create_remainders_dict([5, 10, 15]) == {5: 0, 10: 0, 15: 0}\n    assert create_remainders_dict([]) is None\n    assert create_remainders_dict([1, 2, 3]) == {1: 1, 2: 2, 3: 3}\n    assert create_remainders_dict([4, 9, 14]) == {4: 4, 9: 4, 14: 4}\n    assert create_remainders_dict([5, 11, 20]) == {5: 0, 11: 1, 20: 0}\n    assert create_remainders_dict([5]) == {5: 0}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_dict_values(d):\n    if not d:\n        return None\n    total = 0\n    for value in d.values():\n        total += value\n    return total if total else None"}, {"role": "assistant", "content": "def test_sum_of_dict_values():\n    assert sum_of_dict_values({'a': 1, 'b': 2, 'c': 3}) == 6\n    assert sum_of_dict_values({}) is None\n    assert sum_of_dict_values({'a': -1, 'b': -2, 'c': -3}) == -6\n    assert sum_of_dict_values({'a': 0}) is None\n    assert sum_of_dict_values({'a': 0, 'b': 0}) is None\n    assert sum_of_dict_values({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_length_dict(lst):\n    if not lst:\n        return None\n    length_dict = {}\n    for s in lst:\n        length_dict[s] = len(s)\n    return length_dict if length_dict else None"}, {"role": "assistant", "content": "def test_create_length_dict():\n    assert create_length_dict(['a', 'bb', 'ccc']) == {'a': 1, 'bb': 2, 'ccc': 3}\n    assert create_length_dict([]) is None\n    assert create_length_dict(['a', 'a', 'a']) == {'a': 1}\n    assert create_length_dict(['abc', 'de', 'f']) == {'abc': 3, 'de': 2, 'f': 1}\n    assert create_length_dict(['', 'a', 'abc']) == {'': 0, 'a': 1, 'abc': 3}\n    assert create_length_dict(['x', 'xy', 'xyz']) == {'x': 1, 'xy': 2, 'xyz': 3}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_prime_numbers_2(d):\n    if not d:\n        return None\n    prime_numbers = {}\n    for key, value in d.items():\n        if value > 1 and all(value % i != 0 for i in range(2, int(value ** 0.5) + 1)):\n            prime_numbers[key] = value\n    return prime_numbers if prime_numbers else None"}, {"role": "assistant", "content": "def test_find_prime_numbers_2():\n    assert find_prime_numbers_2({}) is None\n    assert find_prime_numbers_2({1: 4, 2: 5}) == {2: 5}\n    assert find_prime_numbers_2({1: 4, 2: 6, 3: 9}) is None\n    assert find_prime_numbers_2({1: 4, 2: 2}) == {2: 2}\n    assert find_prime_numbers_2({1: 4, 2: 11, 3: 7, 4: 9}) == {2: 11, 3: 7}\n    assert find_prime_numbers_2({1: 4, 2: 9}) is None\n    assert find_prime_numbers_2({1: 7, 2: 10, 3: 13}) == {1: 7, 3: 13}\n    assert find_prime_numbers_2({1: 10}) is None\n    assert find_prime_numbers_2({1: 2, 2: 3, 3: 5}) == {1: 2, 2: 3, 3: 5}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_even_values(d):\n    if not d:\n        return None\n    filtered_dict = {}\n    for key, value in d.items():\n        if isinstance(value, int) and value % 2 == 0:\n            filtered_dict[key] = value\n    return filtered_dict if filtered_dict else None"}, {"role": "assistant", "content": "def test_filter_even_values():\n    assert filter_even_values({}) is None\n    assert filter_even_values({1: 4, 2: 5}) == {1: 4}\n    assert filter_even_values({1: 4, 2: 6, 3: 9}) == {1: 4, 2: 6}\n    assert filter_even_values({1: 4, 2: 2}) == {1: 4, 2: 2}\n    assert filter_even_values({1: 4, 2: 11, 3: 7, 4: 9}) == {1: 4}\n    assert filter_even_values({1: 4, 2: 9}) == {1: 4}\n    assert filter_even_values({1: 7, 2: 10, 3: 13}) == {2: 10}\n    assert filter_even_values({1: 11}) is None\n    assert filter_even_values({1: 2, 2: 3, 3: 5}) == {1: 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_double_value_dict(lst):\n    if not lst:\n        return None\n    double_dict = {}\n    for item in lst:\n        double_dict[item] = item * 2\n    return double_dict if double_dict else None"}, {"role": "assistant", "content": "def test_create_double_value_dict():\n    assert create_double_value_dict([]) is None\n    assert create_double_value_dict([1, 2, 3]) == {1: 2, 2: 4, 3: 6}\n    assert create_double_value_dict([0]) == {0: 0}\n    assert create_double_value_dict([5, 10, 15]) == {5: 10, 10: 20, 15: 30}\n    assert create_double_value_dict([-1, -2]) == {-1: -2, -2: -4}\n    assert create_double_value_dict([100]) == {100: 200}\n    assert create_double_value_dict([3, 6, 9]) == {3: 6, 6: 12, 9: 18}\n    assert create_double_value_dict([7]) == {7: 14}\n    assert create_double_value_dict([1, 3, 5, 7]) == {1: 2, 3: 6, 5: 10, 7: 14}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_sevens_dict(lst):\n    if not lst:\n        return None\n    sevens_dict = {}\n    for item in lst:\n        if item % 7 == 0:\n            sevens_dict[item] = item\n    return sevens_dict if sevens_dict else None"}, {"role": "assistant", "content": "def test_create_sevens_dict():\n    assert create_sevens_dict([]) is None\n    assert create_sevens_dict([7, 14, 21]) == {7: 7, 14: 14, 21: 21}\n    assert create_sevens_dict([0]) == {0: 0}\n    assert create_sevens_dict([5, 10, 15]) is None\n    assert create_sevens_dict([49]) == {49: 49}\n    assert create_sevens_dict([-7, 14, -21]) == {-7: -7, 14: 14, -21: -21}\n    assert create_sevens_dict([1, 2, 3]) is None\n    assert create_sevens_dict([3, 6, 9, 12, 15, 18]) is None\n    assert create_sevens_dict([7, 14, 21, 28, 35, 42, 49]) == {7: 7, 14: 14, 21: 21, 28: 28, 35: 35, 42: 42, 49: 49}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_equal_key_value_pairs(d):\n    if not d:\n        return None\n    result = []\n    for key, value in d.items():\n        if key == value:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_equal_key_value_pairs():\n    assert find_equal_key_value_pairs({}) is None\n    assert find_equal_key_value_pairs({1: 4, 2: 5}) is None\n    assert find_equal_key_value_pairs({1: 1, 2: 2, 3: 3}) == [(1, 1), (2, 2), (3, 3)]\n    assert find_equal_key_value_pairs({4: 4}) == [(4, 4)]\n    assert find_equal_key_value_pairs({1: 1, 2: 3}) == [(1, 1)]\n    assert find_equal_key_value_pairs({3: 2, 2: 3}) is None\n    assert find_equal_key_value_pairs({}) is None\n    assert find_equal_key_value_pairs({5: 5, 6: 6, 7: 7}) == [(5, 5), (6, 6), (7, 7)]\n    assert find_equal_key_value_pairs({8: 8, 9: 0}) == [(8, 8)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_value_in_dict_4(d):\n    if not d:\n        return None\n    max_value = max(d.values())\n    return max_value if max_value else None"}, {"role": "assistant", "content": "def test_find_max_value_in_dict_4():\n    assert find_max_value_in_dict_4({}) is None\n    assert find_max_value_in_dict_4({1: 4, 2: 5}) == 5\n    assert find_max_value_in_dict_4({1: 4, 2: 6, 3: 9}) == 9\n    assert find_max_value_in_dict_4({1: 4, 2: 2}) == 4\n    assert find_max_value_in_dict_4({1: 4, 2: 11, 3: 7, 4: 9}) == 11\n    assert find_max_value_in_dict_4({1: 4, 2: 9}) == 9\n    assert find_max_value_in_dict_4({1: 7, 2: 10, 3: 13}) == 13\n    assert find_max_value_in_dict_4({1: 10}) == 10\n    assert find_max_value_in_dict_4({1: 2, 2: 3, 3: 5}) == 5"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_cube_dict(lst):\n    if not lst:\n        return None\n    cube_dict = {}\n    for item in lst:\n        cube_dict[item] = item ** 3\n    return cube_dict if cube_dict else None"}, {"role": "assistant", "content": "def test_create_cube_dict():\n    assert create_cube_dict([]) is None\n    assert create_cube_dict([1, 2, 3]) == {1: 1, 2: 8, 3: 27}\n    assert create_cube_dict([0]) == {0: 0}\n    assert create_cube_dict([5, 10, 15]) == {5: 125, 10: 1000, 15: 3375}\n    assert create_cube_dict([-1, -2]) == {-1: -1, -2: -8}\n    assert create_cube_dict([100]) == {100: 1000000}\n    assert create_cube_dict([3, 6, 9]) == {3: 27, 6: 216, 9: 729}\n    assert create_cube_dict([7]) == {7: 343}\n    assert create_cube_dict([1, 3, 5, 7]) == {1: 1, 3: 27, 5: 125, 7: 343}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_long_strings_3(d, length):\n    if not d:\n        return None\n    result = []\n    for key, value in d.items():\n        if isinstance(value, str) and len(value) > length:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_long_strings_3():\n    assert find_long_strings_3({\"a\": \"short\", \"b\": \"longstring\"}, 5) == [(\"b\", \"longstring\")]\n    assert find_long_strings_3({\"a\": \"short\", \"b\": \"tiny\"}, 5) is None\n    assert find_long_strings_3({}, 5) is None\n    assert find_long_strings_3({\"a\": \"superlong\"}, 5) == [(\"a\", \"superlong\")]\n    assert find_long_strings_3({\"a\": \"short\", \"b\": \"loooooooooong\"}, 10) == [(\"b\", \"loooooooooong\")]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_values(d):\n    if not d:\n        return None\n    result = []\n    for key, value in d.items():\n        if isinstance(value, int) and value % 2 != 0:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_odd_values():\n    assert find_odd_values({\"a\": 1, \"b\": 2, \"c\": 3}) == [(\"a\", 1), (\"c\", 3)]\n    assert find_odd_values({\"a\": 2, \"b\": 4}) is None\n    assert find_odd_values({}) is None\n    assert find_odd_values({\"a\": 5, \"b\": 7}) == [(\"a\", 5), (\"b\", 7)]\n    assert find_odd_values({\"a\": -1, \"b\": 0, \"c\": 2}) == [(\"a\", -1)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_values_greater_than_average(d):\n    if not d:\n        return None\n    avg_value = sum(d.values()) / len(d)\n    result = []\n    for key, value in d.items():\n        if value > avg_value:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_values_greater_than_average():\n    assert find_values_greater_than_average({\"a\": 1, \"b\": 2, \"c\": 3}) == [(\"c\", 3)]\n    assert find_values_greater_than_average({\"a\": 4, \"b\": 5, \"c\": 6}) == [('c', 6)]\n    assert find_values_greater_than_average({}) is None\n    assert find_values_greater_than_average({\"a\": 2}) is None\n    assert find_values_greater_than_average({\"a\": 1, \"b\": 1, \"c\": 1}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_string_dict(lst):\n    if not lst:\n        return None\n    string_dict = {}\n    for i, s in enumerate(lst):\n        string_dict[i] = s\n    return string_dict if string_dict else None"}, {"role": "assistant", "content": "def test_create_string_dict():\n    assert create_string_dict([\"a\", \"b\", \"c\"]) == {0: \"a\", 1: \"b\", 2: \"c\"}\n    assert create_string_dict([]) is None\n    assert create_string_dict([\"single\"]) == {0: \"single\"}\n    assert create_string_dict([\"one\", \"two\", \"three\"]) == {0: \"one\", 1: \"two\", 2: \"three\"}\n    assert create_string_dict([\"\", \"\", \"\"]) == {0: \"\", 1: \"\", 2: \"\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_values_greater_than_threshold(d, threshold):\n    if not d:\n        return None\n    result = []\n    for key, value in d.items():\n        if value > threshold:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_values_greater_than_threshold():\n    assert find_values_greater_than_threshold({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == [(\"c\", 3)]\n    assert find_values_greater_than_threshold({\"a\": 4, \"b\": 5, \"c\": 6}, 5) == [(\"c\", 6)]\n    assert find_values_greater_than_threshold({}, 5) is None\n    assert find_values_greater_than_threshold({\"a\": 5}, 5) is None\n    assert find_values_greater_than_threshold({\"a\": 10, \"b\": 20, \"c\": 30}, 15) == [(\"b\", 20), (\"c\", 30)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_unique_values(d):\n    if not d:\n        return None\n    unique_values = set(d.values())\n    return len(unique_values) if unique_values else None"}, {"role": "assistant", "content": "def test_count_unique_values():\n    assert count_unique_values({\"a\": 1, \"b\": 2, \"c\": 3}) == 3\n    assert count_unique_values({\"a\": 1, \"b\": 1, \"c\": 1}) == 1\n    assert count_unique_values({}) is None\n    assert count_unique_values({\"a\": 5, \"b\": 7, \"c\": 5}) == 2\n    assert count_unique_values({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3}) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef filter_dict_with_string_keys(d):\n    if not d:\n        return None\n    filtered_dict = {}\n    for key, value in d.items():\n        if isinstance(key, str):\n            filtered_dict[key] = value\n    return filtered_dict if filtered_dict else None"}, {"role": "assistant", "content": "def test_filter_dict_with_string_keys():\n    assert filter_dict_with_string_keys({1: \"a\", \"b\": 2, 3: \"c\"}) == {\"b\": 2}\n    assert filter_dict_with_string_keys({\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}\n    assert filter_dict_with_string_keys({}) is None\n    assert filter_dict_with_string_keys({\"a\": 1, 2: \"b\", \"c\": 3}) == {\"a\": 1, \"c\": 3}\n    assert filter_dict_with_string_keys({1: \"a\", 2: \"b\"}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_in_values(d):\n    if not d:\n        return None\n    max_value = max(d.values())\n    return max_value if max_value else None"}, {"role": "assistant", "content": "def test_find_max_in_values():\n    assert find_max_in_values({\"a\": 1, \"b\": 2, \"c\": 3}) == 3\n    assert find_max_in_values({\"a\": -5, \"b\": -2}) == -2\n    assert find_max_in_values({\"a\": 0}) is None\n    assert find_max_in_values({}) is None\n    assert find_max_in_values({\"a\": 1, \"b\": -30}) == 1\n    assert find_max_in_values({\"a\": 1, \"b\": -1, \"c\": 0}) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef remove_empty_values(d):\n    if not d:\n        return None\n    clean_dict = {}\n    for key, value in d.items():\n        if value != \"\":\n            clean_dict[key] = value\n    return clean_dict if clean_dict else None"}, {"role": "assistant", "content": "def test_remove_empty_values():\n    assert remove_empty_values({\"a\": \"apple\", \"b\": \"\"}) == {\"a\": \"apple\"}\n    assert remove_empty_values({\"a\": \"\", \"b\": \"\", \"c\": \"\"}) is None\n    assert remove_empty_values({\"a\": \"banana\", \"b\": \"berry\"}) == {\"a\": \"banana\", \"b\": \"berry\"}\n    assert remove_empty_values({}) is None\n    assert remove_empty_values({\"a\": \"\", \"b\": \" \", \"c\": None}) == {\"b\": \" \", \"c\": None}\n    assert remove_empty_values({\"a\": \"grape\"}) == {\"a\": \"grape\"}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_elements_5(lst, s):\n    if not lst or not s:\n        return None\n    common = sorted(set(lst).intersection(s))\n    if not common:\n        return None\n    result = [(item, lst.index(item)) for item in common]\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_common_elements_5():\n    assert find_common_elements_5([1, 2, 3], {1, 3, 5}) == ((1, 0), (3, 2))\n    assert find_common_elements_5([1, 2, 3, 4], {5, 6, 7}) is None\n    assert find_common_elements_5([10, 20, 30], {30, 40}) == ((30, 2),)\n    assert find_common_elements_5([], {1, 2, 3}) is None\n    assert find_common_elements_5([1, 2, 3], set()) is None\n    assert find_common_elements_5([1, 2, 2, 3], {2, 3}) == ((2, 1), (3, 3))"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_of_multiples_of_3(t):\n    if not t:\n        return None\n    total = 0\n    for n in t:\n        if n % 3 == 0:\n            total += n\n    return total if total else None"}, {"role": "assistant", "content": "def test_sum_of_multiples_of_3():\n    assert sum_of_multiples_of_3((1, 3, 6, 9)) == 18\n    assert sum_of_multiples_of_3((1, 2, 4)) is None\n    assert sum_of_multiples_of_3((0, -3, 6, 9)) == 12\n    assert sum_of_multiples_of_3((3, 3, 3)) == 9\n    assert sum_of_multiples_of_3(()) is None\n    assert sum_of_multiples_of_3((2, 5, 7)) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_in_list_and_dict(lst, d):\n    if not lst or not d:\n        return None\n    common_elements = []\n    for item in lst:\n        if item in d:\n            common_elements.append(item)\n    return tuple(common_elements) if common_elements else None"}, {"role": "assistant", "content": "def test_find_elements_in_list_and_dict():\n    assert find_elements_in_list_and_dict([1, 2, 3], {1: \"a\", 3: \"b\"}) == (1, 3)\n    assert find_elements_in_list_and_dict([1, 2, 4], {1: \"a\", 3: \"b\"}) == (1,)\n    assert find_elements_in_list_and_dict([], {1: \"a\", 3: \"b\"}) is None\n    assert find_elements_in_list_and_dict([1, 2, 3], {}) is None\n    assert find_elements_in_list_and_dict([4, 5, 6], {4: \"a\", 5: \"b\", 6: \"c\"}) == (4, 5, 6)\n    assert find_elements_in_list_and_dict([7, 8], {9: \"a\", 10: \"b\"}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_unique_set_from_multiple_sources(lst, t, d):\n    if not lst or not t or not d:\n        return None\n    combined_set = sorted(set(lst).union(t).union(d.values()))\n    return combined_set if combined_set else None"}, {"role": "assistant", "content": "def test_create_unique_set_from_multiple_sources():\n    assert create_unique_set_from_multiple_sources([1, 2], (2, 3), {1: 4, 2: 5}) == [1, 2, 3, 4, 5]\n    assert create_unique_set_from_multiple_sources([], (), {}) is None\n    assert create_unique_set_from_multiple_sources([1, 1], (1, 1), {1: 1, 2: 2}) == [1, 2]\n    assert create_unique_set_from_multiple_sources([1, 2, 3], (4, 5), {6: 7}) == [1, 2, 3, 4, 5, 7]\n    assert create_unique_set_from_multiple_sources([1, 2], (2, 3), {4: 5}) == [1, 2, 3, 5]\n    assert create_unique_set_from_multiple_sources([3, 4], (4, 5), {5: 6}) == [3, 4, 5, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_long_strings_6(lst, d, length):\n    if not lst or not d:\n        return None\n    long_strings = []\n    for item in lst:\n        if isinstance(item, str) and len(item) > length:\n            long_strings.append(item)\n    for value in d.values():\n        if isinstance(value, str) and len(value) > length:\n            long_strings.append(value)\n    return tuple(long_strings) if long_strings else None"}, {"role": "assistant", "content": "def test_find_long_strings_6():\n    assert find_long_strings_6(['apple', 'banana'], {'a': 'kiwi', 'b': 'mango'}, 5) == ('banana',)\n    assert find_long_strings_6([], {'a': 'apple'}, 3) is None\n    assert find_long_strings_6(['apple'], {}, 3) is None\n    assert find_long_strings_6(['short'], {'a': 'tiny', 'b': 'huge string'}, 4) == ('short', 'huge string')\n    assert find_long_strings_6(['small', 'big'], {'a': 'larger', 'b': 'largest'}, 5) == ('larger', 'largest')\n    assert find_long_strings_6(['longstring'], {'a': 'short', 'b': 'tiny'}, 5) == ('longstring',)\n    assert find_long_strings_6([], {}, 1) is None\n    assert find_long_strings_6(['apple'], {'a': 'apple'}, 10) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_greater_than_dict_values(lst, d):\n    if not lst or not d:\n        return None\n    greater_numbers = set()\n    max_value = max(d.values())\n    for n in lst:\n        if n > max_value:\n            greater_numbers.add(n)\n    return sorted(greater_numbers) if greater_numbers else None"}, {"role": "assistant", "content": "def test_find_numbers_greater_than_dict_values():\n    assert find_numbers_greater_than_dict_values([1, 2, 3], {'a': 0, 'b': 1}) == [2, 3]\n    assert find_numbers_greater_than_dict_values([], {'a': 1, 'b': 2}) is None\n    assert find_numbers_greater_than_dict_values([5, 6], {}) is None\n    assert find_numbers_greater_than_dict_values([5, 6, 7], {'a': 5}) == [6, 7]\n    assert find_numbers_greater_than_dict_values([10], {'a': 5, 'b': 8}) == [10]\n    assert find_numbers_greater_than_dict_values([5, 8, 12], {'a': 10}) == [12]\n    assert find_numbers_greater_than_dict_values([1, 2, 3], {'a': 3}) is None\n    assert find_numbers_greater_than_dict_values([1, 2, 3], {'a': 0, 'b': 1, 'c': 2}) == [3]\n    assert find_numbers_greater_than_dict_values([1, 10, 20], {'a': 15}) == [20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_numbers_in_list(lst):\n    if not lst:\n        return None\n    count_dict = {}\n    for n in lst:\n        count_dict[n] = count_dict.get(n, 0) + 1\n    return count_dict if count_dict else None"}, {"role": "assistant", "content": "def test_count_numbers_in_list():\n    assert count_numbers_in_list([1, 2, 2, 3]) == {1: 1, 2: 2, 3: 1}\n    assert count_numbers_in_list([]) is None\n    assert count_numbers_in_list([4, 4, 4, 4]) == {4: 4}\n    assert count_numbers_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n    assert count_numbers_in_list([1]) == {1: 1}\n    assert count_numbers_in_list([1, 1, 2, 2, 2, 3]) == {1: 2, 2: 3, 3: 1}\n    assert count_numbers_in_list([5, 5, 5, 6, 6]) == {5: 3, 6: 2}\n    assert count_numbers_in_list([7, 8, 7, 8, 9]) == {7: 2, 8: 2, 9: 1}\n    assert count_numbers_in_list([1, 1, 1, 1, 1]) == {1: 5}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_in_dict_and_tuple(d, t):\n    if not d or not t:\n        return None\n    result = []\n    for value in d.values():\n        if value in t:\n            result.append(value)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_numbers_in_dict_and_tuple():\n    assert find_numbers_in_dict_and_tuple({'a': 1, 'b': 2}, (1, 3)) == [1]\n    assert find_numbers_in_dict_and_tuple({}, (1, 3)) is None\n    assert find_numbers_in_dict_and_tuple({'a': 1, 'b': 2}, ()) is None\n    assert find_numbers_in_dict_and_tuple({'a': 4, 'b': 5}, (5, 6)) == [5]\n    assert find_numbers_in_dict_and_tuple({'a': 1}, (1,)) == [1]\n    assert find_numbers_in_dict_and_tuple({'a': 10, 'b': 20}, (30,)) is None\n    assert find_numbers_in_dict_and_tuple({'a': 2, 'b': 3, 'c': 4}, (2, 3, 4)) == [2, 3, 4]\n    assert find_numbers_in_dict_and_tuple({'a': 7, 'b': 8, 'c': 9}, (8, 10, 12)) == [8]\n    assert find_numbers_in_dict_and_tuple({'a': 2, 'b': 5, 'c': 8}, (5, 8)) == [5, 8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_index_dict(lst):\n    if not lst:\n        return None\n    index_dict = {}\n    for i, item in enumerate(lst):\n        index_dict[item] = i\n    return index_dict if index_dict else None"}, {"role": "assistant", "content": "def test_create_index_dict():\n    assert create_index_dict(['a', 'b', 'c']) == {'a': 0, 'b': 1, 'c': 2}\n    assert create_index_dict([]) is None\n    assert create_index_dict(['apple', 'banana']) == {'apple': 0, 'banana': 1}\n    assert create_index_dict(['x', 'y', 'z']) == {'x': 0, 'y': 1, 'z': 2}\n    assert create_index_dict(['cat', 'dog', 'cat']) == {'cat': 2, 'dog': 1}\n    assert create_index_dict(['one']) == {'one': 0}\n    assert create_index_dict(['a', 'b', 'a', 'b']) == {'a': 2, 'b': 3}\n    assert create_index_dict(['unique', 'value']) == {'unique': 0, 'value': 1}\n    assert create_index_dict(['repeat', 'repeat']) == {'repeat': 1}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_unique_char_set(lst, d):\n    if not lst or not d:\n        return None\n    char_set = set()\n    for s in lst:\n        if isinstance(s, str):\n            char_set.update(s)\n    for value in d.values():\n        if isinstance(value, str):\n            char_set.update(value)\n    return sorted(char_set) if char_set else None"}, {"role": "assistant", "content": "def test_create_unique_char_set():\n    assert create_unique_char_set([\"abc\", \"def\"], {\"key1\": \"ghi\", \"key2\": \"jkl\"}) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n    assert create_unique_char_set([\"abc\", \"abc\"], {\"key1\": \"abc\", \"key2\": \"abc\"}) == ['a', 'b', 'c']\n    assert create_unique_char_set([], {\"key1\": \"value\"}) is None\n    assert create_unique_char_set([\"string\"], {}) is None\n    assert create_unique_char_set([], {}) is None\n    assert create_unique_char_set([\"123\"], {\"key1\": \"456\"}) == ['1', '2', '3', '4', '5', '6']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_unique_elements(lst):\n    if not lst:\n        return None\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    return count_dict if count_dict else None"}, {"role": "assistant", "content": "def test_count_unique_elements():\n    assert count_unique_elements([1, 2, 2, 3, 4, 4, 4]) == {1: 1, 2: 2, 3: 1, 4: 3}\n    assert count_unique_elements([\"a\", \"b\", \"b\", \"c\"]) == {'a': 1, 'b': 2, 'c': 1}\n    assert count_unique_elements([1.1, 2.2, 1.1]) == {1.1: 2, 2.2: 1}\n    assert count_unique_elements([]) is None\n    assert count_unique_elements([1, 1, 1]) == {1: 3}\n    assert count_unique_elements([0, 0, 0, 1, 1]) == {0: 3, 1: 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_in_set(s):\n    if not s:\n        return None\n    result = []\n    for n in s:\n        if (n ** 0.5).is_integer():\n            result.append(n)\n    return sorted(tuple(result)) if result else None"}, {"role": "assistant", "content": "def test_find_squares_in_set():\n    assert find_squares_in_set({1, 4, 9, 16, 20}) == [1, 4, 9, 16]\n    assert find_squares_in_set({2, 3, 5, 7, 8}) is None\n    assert find_squares_in_set({0, 1, 100, 25}) == [0, 1, 25, 100]\n    assert find_squares_in_set({1, 4, 4}) == [1, 4]\n    assert find_squares_in_set({}) is None\n    assert find_squares_in_set({36, 49, 64}) == [36, 49, 64]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numeric_strings(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, str) and any(char.isdigit() for char in item):\n            result.append(item)\n    for value in d.values():\n        if isinstance(value, str) and any(char.isdigit() for char in value):\n            result.append(value)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numeric_strings():\n    assert find_numeric_strings([\"abc1\", \"def\", \"ghi2\"], {\"key1\": \"jkl3\", \"key2\": \"mno\"}) == (\"abc1\", \"ghi2\", \"jkl3\")\n    assert find_numeric_strings([\"123\", \"456\", \"789\"], {\"key1\": \"123\"}) == (\"123\", \"456\", \"789\", \"123\")\n    assert find_numeric_strings([\"abc\", \"def\"], {\"key1\": \"ghi\"}) is None\n    assert find_numeric_strings([], {\"key1\": \"123\"}) is None\n    assert find_numeric_strings([\"123\"], {}) is None\n    assert find_numeric_strings([], {}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_equal_numbers(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if item in d.values():\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_equal_numbers():\n    assert find_equal_numbers([1, 2, 3], {\"key1\": 2, \"key2\": 4}) == (2,)\n    assert find_equal_numbers([1, 2, 3], {\"key1\": 3, \"key2\": 3}) == (3,)\n    assert find_equal_numbers([0, -1, -2], {\"key1\": 0, \"key2\": 1}) == (0,)\n    assert find_equal_numbers([], {\"key1\": 1}) is None\n    assert find_equal_numbers([1, 1, 1], {\"key1\": 1}) == (1, 1, 1)\n    assert find_equal_numbers([1, 2, 3], {\"key1\": 5}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_from_string(s):\n    if not s:\n        return None\n    result = []\n    for char in s:\n        if char.isdigit():\n            result.append(int(char))\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_from_string():\n    assert find_numbers_from_string(\"abc123\") == (1, 2, 3)\n    assert find_numbers_from_string(\"456def\") == (4, 5, 6)\n    assert find_numbers_from_string(\"789\") == (7, 8, 9)\n    assert find_numbers_from_string(\"\") is None\n    assert find_numbers_from_string(\"no numbers\") is None\n    assert find_numbers_from_string(\"0start\") == (0,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_even_indexed_list(d):\n    if not d:\n        return None\n    result = []\n    for i, (key, value) in enumerate(d.items()):\n        if i % 2 == 0:\n            result.append((key, value))\n    return result if result else None"}, {"role": "assistant", "content": "def test_create_even_indexed_list():\n    assert create_even_indexed_list({\"key1\": 1, \"key2\": 2, \"key3\": 3}) == [(\"key1\", 1), (\"key3\", 3)]\n    assert create_even_indexed_list({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == [(\"a\", 1), (\"c\", 3)]\n    assert create_even_indexed_list({\"a\": 1}) == [(\"a\", 1)]\n    assert create_even_indexed_list({}) is None\n    assert create_even_indexed_list({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == [(\"a\", 1), (\"c\", 3), (\"e\", 5)]\n    assert create_even_indexed_list({\"x\": 1, \"y\": 2}) == [(\"x\", 1)]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_not_in_set(lst, s):\n    if not lst or not s:\n        return None\n    result = []\n    for item in lst:\n        if item not in s:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_not_in_set():\n    assert find_numbers_not_in_set([1, 2, 3, 4], {2, 4, 6}) == (1, 3)\n    assert find_numbers_not_in_set([5, 6, 7], {7, 8, 9}) == (5, 6)\n    assert find_numbers_not_in_set([], {1, 2}) is None\n    assert find_numbers_not_in_set([1, 2, 3], {1, 2, 3}) is None\n    assert find_numbers_not_in_set([1, 3, 5], {2, 4, 6}) == (1, 3, 5)\n    assert find_numbers_not_in_set([1, 2, 2, 3], {2}) == (1, 3)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_divisors_dict(lst):\n    if not lst:\n        return None\n    divisors_dict = {}\n    for item in lst:\n        divisors = {i for i in range(1, item + 1) if item % i == 0}\n        divisors_dict[item] = divisors\n    return divisors_dict if divisors_dict else None"}, {"role": "assistant", "content": "def test_create_divisors_dict():\n    assert create_divisors_dict([6, 10, 15]) == {6: {1, 2, 3, 6}, 10: {1, 2, 5, 10}, 15: {1, 3, 5, 15}}\n    assert create_divisors_dict([1, 2, 3]) == {1: {1}, 2: {1, 2}, 3: {1, 3}}\n    assert create_divisors_dict([]) is None\n    assert create_divisors_dict([12]) == {12: {1, 2, 3, 4, 6, 12}}\n    assert create_divisors_dict([0]) == {0: set()}\n    assert create_divisors_dict([100]) == {100: {1, 2, 4, 5, 10, 20, 25, 50, 100}}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_between_bounds(lst, lower, upper):\n    if not lst:\n        return None\n    result = []\n    for n in lst:\n        if lower < n < upper:\n            result.append(n)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_between_bounds():\n    assert find_numbers_between_bounds([1, 2, 3, 4], 1, 4) == (2, 3)\n    assert find_numbers_between_bounds([5, 6, 7], 5, 7) == (6,)\n    assert find_numbers_between_bounds([10, 15, 20], 5, 25) == (10, 15, 20)\n    assert find_numbers_between_bounds([], 1, 2) is None\n    assert find_numbers_between_bounds([1, 2, 3], 3, 4) is None\n    assert find_numbers_between_bounds([1, 2, 3, 4], 2, 3) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_values_less_than(d, num):\n    if not d:\n        return None\n    result = []\n    for value in d.values():\n        if value < num:\n            result.append(value)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_values_less_than():\n    assert find_values_less_than({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == (1, 2)\n    assert find_values_less_than({\"a\": 5, \"b\": 6}, 6) == (5,)\n    assert find_values_less_than({\"a\": 10, \"b\": 20, \"c\": 30}, 25) == (10, 20)\n    assert find_values_less_than({}, 1) is None\n    assert find_values_less_than({\"a\": 1, \"b\": 2, \"c\": 3}, 0) is None\n    assert find_values_less_than({\"a\": -1, \"b\": -2, \"c\": -3}, 0) == (-1, -2, -3)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_length_dict_from_set(s):\n    if not s:\n        return None\n    length_dict = {}\n    for item in s:\n        if isinstance(item, str):\n            length_dict[item] = len(item)\n    return length_dict if length_dict else None"}, {"role": "assistant", "content": "def test_create_length_dict_from_set():\n    assert create_length_dict_from_set({\"apple\", \"banana\", \"cherry\"}) == {'apple': 5, 'banana': 6, 'cherry': 6}\n    assert create_length_dict_from_set({\"one\", \"two\", \"three\"}) == {'one': 3, 'three': 5, 'two': 3}\n    assert create_length_dict_from_set({\"\", \"a\", \"ab\"}) == {'': 0, 'a': 1, 'ab': 2}\n    assert create_length_dict_from_set({1, 2, 3}) is None\n    assert create_length_dict_from_set(set()) is None\n    assert create_length_dict_from_set({\"text\"}) == {'text': 4}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_in_list_and_even_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if item % 2 != 0 and item in d:\n            if d[item] % 2 == 0:\n                result.append(item)\n    return result if result else None"}, {"role": "assistant", "content": "def test_find_odd_in_list_and_even_in_dict():\n    assert find_odd_in_list_and_even_in_dict([1, 3, 5], {1: 2, 3: 4, 5: 6}) == [1, 3, 5]\n    assert find_odd_in_list_and_even_in_dict([1, 2, 3], {1: 2, 2: 3}) == [1]\n    assert find_odd_in_list_and_even_in_dict([1, 3, 5], {2: 4, 4: 6}) is None\n    assert find_odd_in_list_and_even_in_dict([], {1: 2}) is None\n    assert find_odd_in_list_and_even_in_dict([1, 3, 5], {}) is None\n    assert find_odd_in_list_and_even_in_dict([2, 4, 6], {2: 2, 4: 4}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_even_number_set(lst, s):\n    if not lst or not s:\n        return None\n    even_set = set()\n    for item in lst:\n        if item % 2 == 0:\n            even_set.add(item)\n    for item in s:\n        if item % 2 == 0:\n            even_set.add(item)\n    return sorted(even_set) if even_set else None"}, {"role": "assistant", "content": "def test_create_even_number_set():\n    assert create_even_number_set([1, 2, 3], {4, 5, 6}) == [2, 4, 6]\n    assert create_even_number_set([2, 4, 6], {8, 10, 12}) == [2, 4, 6, 8, 10, 12]\n    assert create_even_number_set([1, 3, 5], {7, 9}) is None\n    assert create_even_number_set([], {2, 4}) is None\n    assert create_even_number_set([2, 4], set()) is None\n    assert create_even_number_set([], set()) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_greater_than_avg_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    avg = sum(d.values()) / len(d)\n    result = []\n    for item in lst:\n        if item > avg:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_greater_than_avg_in_dict():\n    assert find_numbers_greater_than_avg_in_dict([1, 2, 3, 4], {\"a\": 2, \"b\": 4}) == (4,)\n    assert find_numbers_greater_than_avg_in_dict([5, 6, 7], {\"a\": 5, \"b\": 7}) == (7,)\n    assert find_numbers_greater_than_avg_in_dict([10, 20, 30], {\"a\": 10, \"b\": 30}) == (30,)\n    assert find_numbers_greater_than_avg_in_dict([], {\"a\": 1, \"b\": 2}) is None\n    assert find_numbers_greater_than_avg_in_dict([1, 2, 3], {\"a\": 3, \"b\": 3}) is None\n    assert find_numbers_greater_than_avg_in_dict([1, 2, 3], {}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_short_strings_2(lst, d, length):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, str) and len(item) < length:\n            result.append(item)\n    for value in d.values():\n        if isinstance(value, str) and len(value) < length:\n            result.append(value)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_short_strings_2():\n    assert find_short_strings_2(['abc', 'abcd', 'ab'], {'k1': 'abc', 'k2': 'defg'}, 4) == ('abc', 'ab', 'abc')\n    assert find_short_strings_2(['apple', 'banana'], {'key': 'value'}, 5) is None\n    assert find_short_strings_2([], {}, 2) is None\n    assert find_short_strings_2(['a', 'abc'], {'k1': 'd'}, 2) == ('a', 'd')\n    assert find_short_strings_2(['apple', 'banana'], {'key': 'value'}, 1) is None\n    assert find_short_strings_2(['apple'], {'key': 'value'}, 2) is None\n    assert find_short_strings_2(['a'], {'k1': 'b', 'k2': 'cde'}, 3) == ('a', 'b')\n    assert find_short_strings_2(['apple', 'orange'], {'key1': 'val'}, 4) == ('val',)\n    assert find_short_strings_2(['one', 'two'], {'key1': 'one', 'key2': 'four'}, 3) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_in_dict_and_list(lst, d):\n    if not lst or not d:\n        return None\n    max_list_value = max(lst)\n    max_dict_value = max(d.values())\n    return max(max_list_value, max_dict_value)"}, {"role": "assistant", "content": "def test_find_max_in_dict_and_list():\n    assert find_max_in_dict_and_list([1, 2, 3], {'a': 4, 'b': 5}) == 5\n    assert find_max_in_dict_and_list([-1, -2, -3], {'a': 4, 'b': 5}) == 5\n    assert find_max_in_dict_and_list([], {}) is None\n    assert find_max_in_dict_and_list([3, 2], {'a': 1, 'b': 2}) == 3\n    assert find_max_in_dict_and_list([10, 12, 14], {'a': 8, 'b': 13}) == 14\n    assert find_max_in_dict_and_list([1, 2, 3], {'a': 0}) == 3\n    assert find_max_in_dict_and_list([-1, -2, 0], {'a': -3, 'b': -4}) == 0\n    assert find_max_in_dict_and_list([1, 5, 6], {'a': 5, 'b': 3}) == 6\n    assert find_max_in_dict_and_list([0, 0, 0], {'a': 0}) == 0"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_length_dict_from_set_2(s):\n    if not s:\n        return None\n    length_dict = {}\n    for item in s:\n        length_dict[item] = len(str(item))\n    return length_dict if length_dict else None"}, {"role": "assistant", "content": "def test_create_length_dict_from_set_2():\n    assert create_length_dict_from_set_2({'abc', 'abcd', 'ab'}) == {'abc': 3, 'abcd': 4, 'ab': 2}\n    assert create_length_dict_from_set_2({123, 45, 6789}) == {123: 3, 45: 2, 6789: 4}\n    assert create_length_dict_from_set_2(set()) is None\n    assert create_length_dict_from_set_2({'', 'a', 'ab'}) == {'': 0, 'a': 1, 'ab': 2}\n    assert create_length_dict_from_set_2({1, 22, 333}) == {1: 1, 22: 2, 333: 3}\n    assert create_length_dict_from_set_2({'apple', 'banana'}) == {'apple': 5, 'banana': 6}\n    assert create_length_dict_from_set_2({0, 10000}) == {0: 1, 10000: 5}\n    assert create_length_dict_from_set_2({'aaa', 'bbbb', 'cc'}) == {'aaa': 3, 'bbbb': 4, 'cc': 2}\n    assert create_length_dict_from_set_2({'car', 'plane', 'train'}) == {'car': 3, 'plane': 5, 'train': 5}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_elements_in_list_and_dict(lst, d):\n    if not lst or not d:\n        return None\n    count_dict = {}\n    for item in lst + list(d.values()):\n        count_dict[item] = count_dict.get(item, 0) + 1\n    return count_dict if count_dict else None"}, {"role": "assistant", "content": "def test_count_elements_in_list_and_dict():\n    assert count_elements_in_list_and_dict([1, 2, 2], {'a': 2, 'b': 3}) == {1: 1, 2: 3, 3: 1}\n    assert count_elements_in_list_and_dict([], {}) is None\n    assert count_elements_in_list_and_dict([1, 1], {'a': 1}) == {1: 3}\n    assert count_elements_in_list_and_dict([0, 1], {'a': 1, 'b': 0}) == {0: 2, 1: 2}\n    assert count_elements_in_list_and_dict(['a', 'b', 'b'], {'c': 'b', 'd': 'a'}) == {'a': 2, 'b': 3}\n    assert count_elements_in_list_and_dict(['x'], {'a': 'y'}) == {'x': 1, 'y': 1}\n    assert count_elements_in_list_and_dict(['car', 'car'], {'a': 'car'}) == {'car': 3}\n    assert count_elements_in_list_and_dict([3, 3, 3], {'a': 3}) == {3: 4}\n    assert count_elements_in_list_and_dict([1, 2, 2], {'a': 1, 'b': 1}) == {1: 3, 2: 2}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_set_and_tuple(s, t):\n    if not s or not t:\n        return None\n    result = s.intersection(t)\n    return sorted(tuple(result)) if result else None"}, {"role": "assistant", "content": "def test_find_common_in_set_and_tuple():\n    assert find_common_in_set_and_tuple({1, 2, 3}, (2, 3, 4)) == [2, 3]\n    assert find_common_in_set_and_tuple(set(), tuple()) is None\n    assert find_common_in_set_and_tuple({1}, (1,)) == [1]\n    assert find_common_in_set_and_tuple({0, 1}, (1, 2)) == [1]\n    assert find_common_in_set_and_tuple({'a', 'b'}, ('b', 'c')) == ['b']\n    assert find_common_in_set_and_tuple({100, 200}, (200, 300)) == [200]\n    assert find_common_in_set_and_tuple({0, 0}, (0, 1)) == [0]\n    assert find_common_in_set_and_tuple({5, 6, 7}, (7, 8, 9)) == [7]\n    assert find_common_in_set_and_tuple({-1, -2}, (-2, -3)) == [-2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_with_digit(lst, num):\n    if not lst:\n        return None\n    result = []\n    str_num = str(num)\n    for item in lst:\n        if any(digit in str(item) for digit in str_num):\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_with_digit():\n    assert find_numbers_with_digit([123, 456, 789], 4) == (456,)\n    assert find_numbers_with_digit([], 4) is None\n    assert find_numbers_with_digit([111, 222, 333], 1) == (111,)\n    assert find_numbers_with_digit([12, 23, 34], 2) == (12, 23)\n    assert find_numbers_with_digit([111, 22, 3333], 3) == (3333,)\n    assert find_numbers_with_digit([4, 44, 444], 4) == (4, 44, 444)\n    assert find_numbers_with_digit([40, 50, 60], 6) == (60,)\n    assert find_numbers_with_digit([70, 80, 90], 9) == (90,)\n    assert find_numbers_with_digit([100, 200], 0) == (100, 200)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_odd_numbers_in_both(lst, d):\n    if not lst or not d:\n        return None\n    odd_set = set()\n    for item in lst:\n        if item % 2 != 0 and item in d:\n            odd_set.add(item)\n    return sorted(odd_set) if odd_set else None"}, {"role": "assistant", "content": "def test_find_odd_numbers_in_both():\n    assert find_odd_numbers_in_both([1, 2, 3], {1: 'a', 3: 'b'}) == [1, 3]\n    assert find_odd_numbers_in_both([], {}) is None\n    assert find_odd_numbers_in_both([4, 5], {5: 'e'}) == [5]\n    assert find_odd_numbers_in_both([6, 7], {7: 'f'}) == [7]\n    assert find_odd_numbers_in_both([8, 9], {9: 'g'}) == [9]\n    assert find_odd_numbers_in_both([0, 1], {1: 'h'}) == [1]\n    assert find_odd_numbers_in_both([2, 3, 5], {5: 'i'}) == [5]\n    assert find_odd_numbers_in_both([7, 11], {11: 'j'}) == [11]\n    assert find_odd_numbers_in_both([13, 17], {17: 'k'}) == [17]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_not_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if item not in d:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_not_in_dict():\n    assert find_numbers_not_in_dict([1, 2, 3], {1: 'a', 3: 'b'}) == (2,)\n    assert find_numbers_not_in_dict([], {}) is None\n    assert find_numbers_not_in_dict([4, 5], {5: 'e'}) == (4,)\n    assert find_numbers_not_in_dict([6, 7], {7: 'f'}) == (6,)\n    assert find_numbers_not_in_dict([8, 9], {9: 'g'}) == (8,)\n    assert find_numbers_not_in_dict([0, 1], {1: 'h'}) == (0,)\n    assert find_numbers_not_in_dict([2, 3, 5], {5: 'i'}) == (2, 3)\n    assert find_numbers_not_in_dict([7, 11], {11: 'j'}) == (7,)\n    assert find_numbers_not_in_dict([13, 17], {17: 'k'}) == (13,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_elements_9(lst, t, s):\n    if not lst or not t or not s:\n        return None\n    unique_elements = set(lst).union(set(t)).union(s)\n    return sorted(tuple(unique_elements)) if unique_elements else None"}, {"role": "assistant", "content": "def test_find_unique_elements_9():\n    assert find_unique_elements_9([1, 2], (2, 3), {3, 4}) == [1, 2, 3, 4]\n    assert find_unique_elements_9([], (), set()) is None\n    assert find_unique_elements_9([1, 1], (1,), {1}) == [1]\n    assert find_unique_elements_9([0, 1], (1, 2), {2, 3}) == [0, 1, 2, 3]\n    assert find_unique_elements_9(['a', 'b'], ('b', 'c'), {'c', 'd'}) == ['a', 'b', 'c', 'd']\n    assert find_unique_elements_9([100, 200], (300,), {400}) == [100, 200, 300, 400]\n    assert find_unique_elements_9([0, 0], (0,), {0}) == [0]\n    assert find_unique_elements_9([5, 6], (7,), {8}) == [5, 6, 7, 8]\n    assert find_unique_elements_9(['x'], ('y',), {'z'}) == ['x', 'y', 'z']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_divisible_by_all(lst, s):\n    if not lst or not s:\n        return None\n    result = []\n    for item in lst:\n        if all(item % i == 0 for i in s):\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_divisible_by_all():\n    assert find_numbers_divisible_by_all([12, 24, 36], {2, 3}) == (12, 24, 36)\n    assert find_numbers_divisible_by_all([], {2, 3}) is None\n    assert find_numbers_divisible_by_all([12, 24, 36], set()) is None\n    assert find_numbers_divisible_by_all([12, 25, 36], {2, 3}) == (12, 36)\n    assert find_numbers_divisible_by_all([12, 24], {2, 5}) is None\n    assert find_numbers_divisible_by_all([24, 36, 48], {4, 6}) == (24, 36, 48)\n    assert find_numbers_divisible_by_all([15, 30, 45], {5, 3}) == (15, 30, 45)\n    assert find_numbers_divisible_by_all([7, 14, 21], {7}) == (7, 14, 21)\n    assert find_numbers_divisible_by_all([8, 16, 24], {2, 4}) == (8, 16, 24)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_odd_number_set(lst, s):\n    if not lst or not s:\n        return None\n    odd_set = set()\n    for item in lst:\n        if item % 2 != 0:\n            odd_set.add(item)\n    for item in s:\n        if item % 2 != 0:\n            odd_set.add(item)\n    return sorted(odd_set) if odd_set else None"}, {"role": "assistant", "content": "def test_create_odd_number_set():\n    assert create_odd_number_set([1, 2, 3], {4, 5}) == [1, 3, 5]\n    assert create_odd_number_set([], {}) is None\n    assert create_odd_number_set([2, 4], {6, 8}) is None\n    assert create_odd_number_set([3, 5], {7, 9}) == [3, 5, 7, 9]\n    assert create_odd_number_set([0, 1], {2, 3}) == [1, 3]\n    assert create_odd_number_set([11, 12], {13, 14}) == [11, 13]\n    assert create_odd_number_set([15, 16], {17, 18}) == [15, 17]\n    assert create_odd_number_set([19, 20], {21, 22}) == [19, 21]\n    assert create_odd_number_set([23, 24], {25, 26}) == [23, 25]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_in_list_and_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if item in d.values():\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_in_list_and_dict():\n    assert find_numbers_in_list_and_dict([1, 2, 3], {'a': 1, 'b': 3}) == (1, 3)\n    assert find_numbers_in_list_and_dict([], {}) is None\n    assert find_numbers_in_list_and_dict([4, 5], {'e': 5}) == (5,)\n    assert find_numbers_in_list_and_dict([6, 7], {'f': 7}) == (7,)\n    assert find_numbers_in_list_and_dict([8, 9], {'g': 10}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_unique_elements_in_list_and_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = set(lst).union(set(d.values()))\n    return len(result) if result else None"}, {"role": "assistant", "content": "def test_count_unique_elements_in_list_and_dict():\n    assert count_unique_elements_in_list_and_dict([1, 2, 2], {1: 'a', 2: 'b'}) == 4\n    assert count_unique_elements_in_list_and_dict([], {}) is None\n    assert count_unique_elements_in_list_and_dict([4, 5], {5: 'e'}) == 3\n    assert count_unique_elements_in_list_and_dict([6, 7], {7: 'f'}) == 3\n    assert count_unique_elements_in_list_and_dict([8, 9], {9: 'g'}) == 3\n    assert count_unique_elements_in_list_and_dict([0, 1], {1: 'h'}) == 3\n    assert count_unique_elements_in_list_and_dict([2, 3, 5], {5: 'i'}) == 4\n    assert count_unique_elements_in_list_and_dict([7, 11], {11: 'j'}) == 3\n    assert count_unique_elements_in_list_and_dict([13, 17], {17: 'k'}) == 3"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_square_dict_from_set(s):\n    if not s:\n        return None\n    square_dict = {}\n    for item in s:\n        square_dict[item] = item ** 2\n    return square_dict if square_dict else None"}, {"role": "assistant", "content": "def test_create_square_dict_from_set():\n    assert create_square_dict_from_set({1, 2, 3}) == {1: 1, 2: 4, 3: 9}\n    assert create_square_dict_from_set(set()) is None\n    assert create_square_dict_from_set({0}) == {0: 0}\n    assert create_square_dict_from_set({-1, -2, -3}) == {-1: 1, -2: 4, -3: 9}\n    assert create_square_dict_from_set({4, 5, 6}) == {4: 16, 5: 25, 6: 36}\n    assert create_square_dict_from_set({7, 8, 9}) == {7: 49, 8: 64, 9: 81}\n    assert create_square_dict_from_set({10, 11, 12}) == {10: 100, 11: 121, 12: 144}\n    assert create_square_dict_from_set({13, 14, 15}) == {13: 169, 14: 196, 15: 225}\n    assert create_square_dict_from_set({16, 17, 18}) == {16: 256, 17: 289, 18: 324}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_product_list_from_dict(d):\n    if not d:\n        return None\n    product_list = []\n    for key, value in d.items():\n        if isinstance(value, (list, tuple)) and all(isinstance(num, (int, float)) for num in value):\n            product = 1\n            for num in value:\n                product *= num\n            product_list.append(product)\n    return product_list if product_list else None"}, {"role": "assistant", "content": "def test_create_product_list_from_dict():\n    assert create_product_list_from_dict({'a': [1, 2, 3], 'b': [4, 5, 6]}) == [6, 120]\n    assert create_product_list_from_dict({}) is None\n    assert create_product_list_from_dict({'a': [0]}) == [0]\n    assert create_product_list_from_dict({'a': [-1, -2, -3]}) == [-6]\n    assert create_product_list_from_dict({'a': [2, 2, 2], 'b': [1, 1, 1]}) == [8, 1]\n    assert create_product_list_from_dict({'a': [1.5, 2.5], 'b': [3.5, 4.5]}) == [3.75, 15.75]\n    assert create_product_list_from_dict({'a': [10], 'b': [20, 30]}) == [10, 600]\n    assert create_product_list_from_dict({'a': [0.1, 0.2], 'b': [0.3, 0.4]}) == [0.020000000000000004, 0.12]\n    assert create_product_list_from_dict({'a': [5], 'b': [2, 3]}) == [5, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_strings_with_digit(lst, s):\n    if not lst or not s:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, str) and any(char.isdigit() for char in item):\n            result.append(item)\n    for item in s:\n        if isinstance(item, str) and any(char.isdigit() for char in item):\n            result.append(item)\n    return sorted(tuple(result)) if result else None"}, {"role": "assistant", "content": "def test_find_strings_with_digit():\n    assert find_strings_with_digit(['abc1', '2def'], {'3ghi'}) == ['2def', '3ghi', 'abc1']\n    assert find_strings_with_digit([], set()) is None\n    assert find_strings_with_digit(['a1', 'b2'], {'c3', 'd4'}) == ['a1', 'b2', 'c3', 'd4']\n    assert find_strings_with_digit(['ab', 'cd'], {'ef'}) is None\n    assert find_strings_with_digit(['123', '456'], {'789'}) == ['123', '456', '789']\n    assert find_strings_with_digit(['a', 'b'], {'c'}) is None\n    assert find_strings_with_digit(['1a', 'b2'], {'3c', 'd4'}) == ['1a', '3c', 'b2', 'd4']\n    assert find_strings_with_digit(['xyz'], {'789'}) == ['789']\n    assert find_strings_with_digit(['ab', 'cd'], {'ef', 'gh1'}) == ['gh1']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_numbers(lst, t, s):\n    if not lst or not t or not s:\n        return None\n    common = set(lst).intersection(t, s)\n    return sorted(tuple(common)) if common else None"}, {"role": "assistant", "content": "def test_find_common_numbers():\n    assert find_common_numbers([1, 2, 3], (2, 3, 4), {3, 4, 5}) == [3]\n    assert find_common_numbers([], (), set()) is None\n    assert find_common_numbers([1, 2], (2, 3), {3, 4}) is None\n    assert find_common_numbers([0, 1], (1, 2), {2, 3}) is None\n    assert find_common_numbers(['a', 'b'], ('b', 'c'), {'c', 'd'}) is None\n    assert find_common_numbers([100, 200], (300,), {400}) is None\n    assert find_common_numbers([0, 0], (0,), {0}) == [0]\n    assert find_common_numbers([5, 6], (7,), {8}) is None\n    assert find_common_numbers(['x'], ('y',), {'z'}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_set_of_short_strings(lst, max_len):\n    if not lst:\n        return None\n    result = set()\n    for item in lst:\n        if isinstance(item, str) and len(item) < max_len:\n            result.add(item)\n    return sorted(result) if result else None"}, {"role": "assistant", "content": "def test_create_set_of_short_strings():\n    assert create_set_of_short_strings(['abc', 'abcd', 'ab'], 4) == ['ab', 'abc']\n    assert create_set_of_short_strings([], 4) is None\n    assert create_set_of_short_strings(['a', 'ab', 'abc'], 3) == ['a', 'ab']\n    assert create_set_of_short_strings(['123', '4567'], 4) == ['123']\n    assert create_set_of_short_strings(['apple', 'banana'], 5) is None\n    assert create_set_of_short_strings(['a', 'b', 'c'], 2) == ['a', 'b', 'c']\n    assert create_set_of_short_strings(['xyz'], 4) == ['xyz']\n    assert create_set_of_short_strings(['abcdef'], 4) is None\n    assert create_set_of_short_strings(['aa', 'bbb', 'cc'], 3) == ['aa', 'cc']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_long_strings_2(lst):\n    if not lst:\n        return None\n    avg_length = sum(len(item) for item in lst) / len(lst)\n    result = []\n    for item in lst:\n        if len(item) > avg_length:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_long_strings_2():\n    assert find_long_strings_2(['apple', 'banana', 'cherry']) == ('banana', 'cherry')\n    assert find_long_strings_2([]) is None\n    assert find_long_strings_2(['a', 'ab', 'abc']) == ('abc',)\n    assert find_long_strings_2(['123', '4567', '89']) == ('4567',)\n    assert find_long_strings_2(['short', 'longer', 'longest']) == ('longest',)\n    assert find_long_strings_2(['tiny', 'small', 'big']) == ('small',)\n    assert find_long_strings_2(['cat', 'dog', 'elephant']) == ('elephant',)\n    assert find_long_strings_2(['hello', 'world', 'python']) == ('python',)\n    assert find_long_strings_2(['sun', 'moon', 'star']) == ('moon', 'star')"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_in_tuple_not_in_dict(t, d):\n    if not t or not d:\n        return None\n    result = []\n    for item in t:\n        if item not in d:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_in_tuple_not_in_dict():\n    assert find_numbers_in_tuple_not_in_dict((1, 2, 3), {1: 'a', 3: 'b'}) == (2,)\n    assert find_numbers_in_tuple_not_in_dict((), {}) is None\n    assert find_numbers_in_tuple_not_in_dict((4, 5), {5: 'e'}) == (4,)\n    assert find_numbers_in_tuple_not_in_dict((6, 7), {7: 'f'}) == (6,)\n    assert find_numbers_in_tuple_not_in_dict((8, 9), {9: 'g'}) == (8,)\n    assert find_numbers_in_tuple_not_in_dict((0, 1), {1: 'h'}) == (0,)\n    assert find_numbers_in_tuple_not_in_dict((2, 3, 5), {5: 'i'}) == (2, 3)\n    assert find_numbers_in_tuple_not_in_dict((7, 11), {11: 'j'}) == (7,)\n    assert find_numbers_in_tuple_not_in_dict((13, 17), {17: 'k'}) == (13,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_list_not_in_set_and_dict(lst, s, d):\n    if not lst or not s or not d:\n        return None\n    result = []\n    for item in lst:\n        if item not in s and item not in d.values():\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_in_list_not_in_set_and_dict():\n    assert find_in_list_not_in_set_and_dict([1, 2, 3], {2}, {\"a\": 3}) == (1,)\n    assert find_in_list_not_in_set_and_dict([], {2}, {\"a\": 3}) is None\n    assert find_in_list_not_in_set_and_dict([1], set(), {}) is None\n    assert find_in_list_not_in_set_and_dict([1, 2], {1, 2}, {\"a\": 3}) is None\n    assert find_in_list_not_in_set_and_dict([4], {1, 2}, {\"a\": 3}) == (4,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_values(lst, d):\n    if not lst or not d:\n        return None\n    max_lst = max(filter(lambda x: isinstance(x, (int, float)), lst), default=None)\n    max_dict = max(filter(lambda x: isinstance(x, (int, float)), d.values()), default=None)\n    if max_lst is None or max_dict is None:\n        return None\n    return max(max_lst, max_dict)"}, {"role": "assistant", "content": "def test_find_max_values():\n    assert find_max_values([1, 2, 3], {\"a\": 4, \"b\": 5}) == 5\n    assert find_max_values([1, 2], {\"a\": -1}) == 2\n    assert find_max_values([], {}) is None\n    assert find_max_values(['2', '5', '8'], {'a': '2'}) is None\n    assert find_max_values([-1, -2], {\"a\": -3}) == -1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_set_not_in_dict(s, d):\n    if not s or not d:\n        return None\n    result = []\n    for item in s:\n        if item not in d:\n            result.append(item)\n    return tuple(sorted(result)) if result else None"}, {"role": "assistant", "content": "def test_find_in_set_not_in_dict():\n    assert find_in_set_not_in_dict({1, 2, 3}, {\"a\": 2, \"b\": 3}) == (1, 2, 3)\n    assert find_in_set_not_in_dict({1}, {}) is None\n    assert find_in_set_not_in_dict(set(), {\"a\": 1}) is None\n    assert find_in_set_not_in_dict({4}, {\"a\": 3}) == (4,)\n    assert find_in_set_not_in_dict({1, 2}, {\"a\": 1, \"b\": 2}) == (1, 2)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_string_length_dict(s):\n    if not s:\n        return None\n    string_length_dict = {}\n    for item in s:\n        if isinstance(item, str):\n            string_length_dict[item] = len(item)\n    return string_length_dict if string_length_dict else None"}, {"role": "assistant", "content": "def test_create_string_length_dict():\n    assert create_string_length_dict({\"a\", \"abc\", \"test\"}) == {\"a\": 1, \"abc\": 3, \"test\": 4}\n    assert create_string_length_dict(set()) is None\n    assert create_string_length_dict({\"only\"}) == {\"only\": 4}\n    assert create_string_length_dict({123, \"word\"}) == {\"word\": 4}\n    assert create_string_length_dict({123}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_unique_set_from_list_and_set(lst, s):\n    if not lst or not s:\n        return None\n    unique_set = set()\n    for item in lst:\n        unique_set.add(item)\n    for item in s:\n        unique_set.add(item)\n    return sorted(unique_set) if unique_set else None"}, {"role": "assistant", "content": "def test_create_unique_set_from_list_and_set():\n    assert create_unique_set_from_list_and_set([1, 2, 3], {3, 4}) == [1, 2, 3, 4]\n    assert create_unique_set_from_list_and_set([], {3, 4}) is None\n    assert create_unique_set_from_list_and_set([1, 2], set()) is None\n    assert create_unique_set_from_list_and_set([], set()) is None\n    assert create_unique_set_from_list_and_set([5], {5}) == [5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_numbers_in_list_and_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if item % 2 == 0:\n            result.append(item)\n    for value in d.values():\n        if value % 2 == 0:\n            result.append(value)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_even_numbers_in_list_and_dict():\n    assert find_even_numbers_in_list_and_dict([1, 2, 3], {\"a\": 4, \"b\": 5}) == (2, 4)\n    assert find_even_numbers_in_list_and_dict([1, 3], {\"a\": 5}) is None\n    assert find_even_numbers_in_list_and_dict([], {\"a\": 2}) is None\n    assert find_even_numbers_in_list_and_dict([4, 6], {}) is None\n    assert find_even_numbers_in_list_and_dict([], {}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_length_dict_from_strings_in_both(lst, s):\n    if not lst or not s:\n        return None\n    length_dict = {}\n    for item in lst:\n        if isinstance(item, str) and item in s:\n            length_dict[item] = len(item)\n    return length_dict if length_dict else None"}, {"role": "assistant", "content": "def test_create_length_dict_from_strings_in_both():\n    assert create_length_dict_from_strings_in_both([\"a\", \"abc\"], {\"a\", \"abc\", \"test\"}) == {\"a\": 1, \"abc\": 3}\n    assert create_length_dict_from_strings_in_both([\"abc\"], {\"xyz\"}) is None\n    assert create_length_dict_from_strings_in_both([], {\"a\"}) is None\n    assert create_length_dict_from_strings_in_both([\"test\"], set()) is None\n    assert create_length_dict_from_strings_in_both([\"only\"], {\"only\"}) == {\"only\": 4}"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_strings_with_common_characters(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    for item in lst1:\n        if isinstance(item, str):\n            for char in item:\n                if any(char in s for s in lst2 if isinstance(s, str)):\n                    result.append(item)\n                    break\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_strings_with_common_characters():\n    assert find_strings_with_common_characters([\"hello\", \"world\"], [\"h\", \"e\", \"x\"]) == (\"hello\",)\n    assert find_strings_with_common_characters([\"test\", \"data\"], [\"a\"]) == (\"data\",)\n    assert find_strings_with_common_characters([\"abc\"], [\"x\", \"y\", \"z\"]) is None\n    assert find_strings_with_common_characters([], [\"x\"]) is None\n    assert find_strings_with_common_characters([\"same\"], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_values_greater_than_in_list(d, lst):\n    if not d or not lst:\n        return None\n    result = []\n    for value in d.values():\n        for item in lst:\n            if value > item:\n                result.append(value)\n                break\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_values_greater_than_in_list():\n    assert find_values_greater_than_in_list({\"a\": 5, \"b\": 10}, [1, 2, 3]) == (5, 10)\n    assert find_values_greater_than_in_list({\"a\": 3}, [4, 5]) is None\n    assert find_values_greater_than_in_list({}, [1]) is None\n    assert find_values_greater_than_in_list({\"a\": 2}, []) is None\n    assert find_values_greater_than_in_list({\"a\": 6, \"b\": 7}, [5]) == (6, 7)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_in_both_list_and_set(lst, s):\n    if not lst or not s:\n        return None\n    result = []\n    for item in lst:\n        if item in s:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_in_both_list_and_set():\n    assert find_numbers_in_both_list_and_set([1, 2, 3], {2, 3, 4}) == (2, 3)\n    assert find_numbers_in_both_list_and_set([5, 6], {1, 2}) is None\n    assert find_numbers_in_both_list_and_set([], {1, 2}) is None\n    assert find_numbers_in_both_list_and_set([7, 8], set()) is None\n    assert find_numbers_in_both_list_and_set([3, 4], {4}) == (4,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_elements_not_in_other_structures(lst, s, d, t):\n    if not lst or not s or not d or not t:\n        return None\n    result = []\n    for item in lst:\n        if item not in s and item not in d.values() and item not in t:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_elements_not_in_other_structures():\n    assert find_elements_not_in_other_structures([1, 2, 3], {2}, {\"a\": 3}, (4,)) == (1,)\n    assert find_elements_not_in_other_structures([1], set(), {}, ()) is None\n    assert find_elements_not_in_other_structures([], {2}, {\"a\": 3}, (4,)) is None\n    assert find_elements_not_in_other_structures([5], {5}, {\"a\": 5}, (5,)) is None\n    assert find_elements_not_in_other_structures([6], {1, 2}, {\"b\": 3}, (4,)) == (6,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_between_min_in_list_and_max_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    min_lst = min(lst)\n    max_dict = max(d.values())\n    result = []\n    for item in lst:\n        if min_lst < item < max_dict:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_between_min_in_list_and_max_in_dict():\n    assert find_numbers_between_min_in_list_and_max_in_dict([1, 2, 3, 4], {\"a\": 5}) == (2, 3, 4)\n    assert find_numbers_between_min_in_list_and_max_in_dict([5, 6], {\"a\": 4}) is None\n    assert find_numbers_between_min_in_list_and_max_in_dict([], {\"a\": 3}) is None\n    assert find_numbers_between_min_in_list_and_max_in_dict([1, 2, 3], {}) is None\n    assert find_numbers_between_min_in_list_and_max_in_dict([3, 4], {\"a\": 4}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_set_of_long_strings(lst, min_length):\n    if not lst:\n        return None\n    long_strings = set()\n    for item in lst:\n        if isinstance(item, str) and len(item) > min_length:\n            long_strings.add(item)\n    return sorted(long_strings) if long_strings else None"}, {"role": "assistant", "content": "def test_create_set_of_long_strings():\n    assert create_set_of_long_strings([\"hello\", \"world\", \"py\"], 3) == [\"hello\", \"world\"]\n    assert create_set_of_long_strings([\"a\", \"b\", \"c\"], 1) is None\n    assert create_set_of_long_strings([], 3) is None\n    assert create_set_of_long_strings([\"test\"], 4) is None\n    assert create_set_of_long_strings([\"abc\", \"abcd\"], 2) == [\"abc\", \"abcd\"]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_less_than_avg_in_dict(d):\n    if not d:\n        return None\n    avg = sum(d.values()) / len(d)\n    result = []\n    for value in d.values():\n        if value < avg:\n            result.append(value)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_less_than_avg_in_dict():\n    assert find_numbers_less_than_avg_in_dict({\"a\": 2, \"b\": 4, \"c\": 6}) == (2,)\n    assert find_numbers_less_than_avg_in_dict({\"a\": 3}) is None\n    assert find_numbers_less_than_avg_in_dict({}) is None\n    assert find_numbers_less_than_avg_in_dict({\"a\": 1, \"b\": 2}) == (1,)\n    assert find_numbers_less_than_avg_in_dict({\"a\": 10, \"b\": 15, \"c\": 20}) == (10,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_strings_longer_than_avg(lst):\n    if not lst:\n        return None\n    avg_length = sum(len(item) for item in lst if isinstance(item, str)) / len(lst)\n    count = 0\n    for item in lst:\n        if isinstance(item, str) and len(item) > avg_length:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_strings_longer_than_avg():\n    assert count_strings_longer_than_avg([\"a\", \"abc\", \"abcd\"]) == 2\n    assert count_strings_longer_than_avg([\"abc\"]) is None\n    assert count_strings_longer_than_avg([]) is None\n    assert count_strings_longer_than_avg([\"a\", \"b\", \"c\"]) is None\n    assert count_strings_longer_than_avg([\"abc\", \"defgh\", \"ij\"]) == 1"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_set_and_tuple_2(s, t):\n    if not s or not t:\n        return None\n    result = []\n    for item in s:\n        if item in t:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_common_in_set_and_tuple_2():\n    assert find_common_in_set_and_tuple_2({1, 2, 3}, (2, 4)) == (2,)\n    assert find_common_in_set_and_tuple_2({1}, (2,)) is None\n    assert find_common_in_set_and_tuple_2(set(), (1,)) is None\n    assert find_common_in_set_and_tuple_2({3}, ()) is None\n    assert find_common_in_set_and_tuple_2({4, 5}, (5, 6)) == (5,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_length_dict_from_strings_in_list(lst):\n    if not lst:\n        return None\n    length_dict = {}\n    for item in lst:\n        if isinstance(item, str):\n            length_dict[item] = len(item)\n    return length_dict if length_dict else None"}, {"role": "assistant", "content": "def test_create_length_dict_from_strings_in_list():\n    assert create_length_dict_from_strings_in_list([\"a\", \"abc\", \"test\"]) == {\"a\": 1, \"abc\": 3, \"test\": 4}\n    assert create_length_dict_from_strings_in_list([]) is None\n    assert create_length_dict_from_strings_in_list([\"only\"]) == {\"only\": 4}\n    assert create_length_dict_from_strings_in_list([\"word\", 123]) == {\"word\": 4}\n    assert create_length_dict_from_strings_in_list([123]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_between_max_in_list_and_min_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    max_lst = max(lst)\n    min_dict = min(d.values())\n    result = []\n    for item in lst:\n        if min_dict < item < max_lst:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_between_max_in_list_and_min_in_dict():\n    assert find_numbers_between_max_in_list_and_min_in_dict([1, 2, 3], {\"a\": 5}) is None\n    assert find_numbers_between_max_in_list_and_min_in_dict([5, 6], {\"a\": 4}) == (5,)\n    assert find_numbers_between_max_in_list_and_min_in_dict([], {\"a\": 3}) is None\n    assert find_numbers_between_max_in_list_and_min_in_dict([1, 2, 3], {}) is None\n    assert find_numbers_between_max_in_list_and_min_in_dict([3, 4], {\"a\": 5}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_strings_with_letter_from_set(lst, s):\n    if not lst or not s:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, str) and any(char in s for char in item):\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_strings_with_letter_from_set():\n    assert find_strings_with_letter_from_set([\"abc\", \"xyz\"], {\"a\", \"x\"}) == (\"abc\", \"xyz\")\n    assert find_strings_with_letter_from_set([\"abc\", \"def\"], {\"z\"}) is None\n    assert find_strings_with_letter_from_set([], {\"a\"}) is None\n    assert find_strings_with_letter_from_set([\"test\"], set()) is None\n    assert find_strings_with_letter_from_set([\"word\"], {\"w\"}) == (\"word\",)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_in_list_not_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if item not in d:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_in_list_not_in_dict():\n    assert find_numbers_in_list_not_in_dict([1, 2, 3], {\"a\": 2}) == (1, 2, 3)\n    assert find_numbers_in_list_not_in_dict([1], {\"a\": 1}) == (1,)\n    assert find_numbers_in_list_not_in_dict([], {\"a\": 1}) is None\n    assert find_numbers_in_list_not_in_dict([4], {}) is None\n    assert find_numbers_in_list_not_in_dict([5, 6], {\"a\": 5}) == (5, 6)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_numbers_in_both_set_and_dict(lst, s, d):\n    if not lst or not s or not d:\n        return None\n    result = []\n    for item in lst:\n        if item in s and item in d.values():\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_numbers_in_both_set_and_dict():\n    assert find_numbers_in_both_set_and_dict([1, 2, 3], {2, 3, 4}, {1: 3, 2: 2}) == (2, 3)\n    assert find_numbers_in_both_set_and_dict([5, 6, 7], {7, 8, 9}, {1: 5, 2: 6, 3: 7}) == (7,)\n    assert find_numbers_in_both_set_and_dict([8, 9, 10], {10, 11, 12}, {3: 8, 4: 9, 5: 10}) == (10,)\n    assert find_numbers_in_both_set_and_dict([], {1, 2, 3}, {1: 2}) is None\n    assert find_numbers_in_both_set_and_dict([1, 2, 3], set(), {1: 2}) is None\n    assert find_numbers_in_both_set_and_dict([1, 2, 3], {1, 2, 3}, dict()) is None\n    assert find_numbers_in_both_set_and_dict([1, 2, 3], {2, 3}, {1: 1, 2: 2, 3: 3}) == (2, 3)\n    assert find_numbers_in_both_set_and_dict([1, 2], {2, 3}, {1: 3, 2: 2}) == (2,)\n    assert find_numbers_in_both_set_and_dict([5, 6, 7], {8, 9}, {1: 7, 2: 6, 3: 5}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_list_between_min_in_dict_and_max_in_set(d, s):\n    if not d or not s:\n        return None\n    min_dict = min(d.values())\n    max_set = max(s)\n    result = []\n    for value in sorted(d.values()):\n        if min_dict < value < max_set:\n            result.append(value)\n    return result if result else None"}, {"role": "assistant", "content": "def test_create_list_between_min_in_dict_and_max_in_set():\n    assert create_list_between_min_in_dict_and_max_in_set({1: 2, 2: 3}, {4, 5, 6}) == [3]\n    assert create_list_between_min_in_dict_and_max_in_set({1: 1, 2: 2, 3: 3}, {5, 6}) == [2, 3]\n    assert create_list_between_min_in_dict_and_max_in_set({1: 5}, {5, 6, 7}) is None\n    assert create_list_between_min_in_dict_and_max_in_set({}, {1, 2, 3}) is None\n    assert create_list_between_min_in_dict_and_max_in_set({1: 1, 2: 2, 3: 3}, set()) is None\n    assert create_list_between_min_in_dict_and_max_in_set({1: 2, 2: 3}, {3}) is None\n    assert create_list_between_min_in_dict_and_max_in_set({1: 1, 2: 2}, {4, 5}) == [2]\n    assert create_list_between_min_in_dict_and_max_in_set({1: 3, 2: 4, 3: 5}, {6}) == [4, 5]\n    assert create_list_between_min_in_dict_and_max_in_set({1: 10, 2: 20}, {30}) == [20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_in_tuple_not_in_set_and_dict(t, s, d):\n    if not t or not s or not d:\n        return None\n    result = []\n    for item in t:\n        if item not in s and item not in d:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_in_tuple_not_in_set_and_dict():\n    assert find_in_tuple_not_in_set_and_dict((1, 2, 3), {4, 5}, {1: 6, 2: 7}) == (3,)\n    assert find_in_tuple_not_in_set_and_dict((1, 2, 3), {1, 2, 3}, {1: 1, 2: 2, 3: 3}) is None\n    assert find_in_tuple_not_in_set_and_dict((4, 5, 6), {1, 2, 3}, {1: 1, 2: 2, 3: 3}) == (4, 5, 6)\n    assert find_in_tuple_not_in_set_and_dict((1,), set(), {2: 2}) is None\n    assert find_in_tuple_not_in_set_and_dict((), {1, 2, 3}, {1: 1}) is None\n    assert find_in_tuple_not_in_set_and_dict((1, 2, 3), {1, 3, 5}, {2: 4}) is None\n    assert find_in_tuple_not_in_set_and_dict((7, 8, 9), {4, 5, 6}, {1: 3, 2: 2, 3: 1}) == (7, 8, 9)\n    assert find_in_tuple_not_in_set_and_dict((10, 11), {8, 9}, {1: 7}) == (10, 11)\n    assert find_in_tuple_not_in_set_and_dict((1, 3, 5), {1, 2}, {3: 3, 4: 4, 5: 5}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_list_and_dict(lst, d):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, float):\n            if min(lst) < item < max(d.values()):\n                result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_list_and_dict():\n    assert find_floats_between_list_and_dict([0.1, 0.2, 0.3], {1: 0.4, 2: 0.5, 3: 0.6}) == (0.2, 0.3)\n    assert find_floats_between_list_and_dict([0.4, 0.5], {1: 0.3}) is None\n    assert find_floats_between_list_and_dict([0.2, 0.3], {1: 0.1, 2: 0.4}) == (0.3,)\n    assert find_floats_between_list_and_dict([1.1, 1.2], {1: 2.0, 2: 1.5}) == (1.2,)\n    assert find_floats_between_list_and_dict([], {1: 0.1, 2: 0.2}) is None\n    assert find_floats_between_list_and_dict([0.1, 0.2], dict()) is None\n    assert find_floats_between_list_and_dict([1.0, 2.0, 3.0], {1: 2.5, 2: 3.5}) == (2.0, 3.0)\n    assert find_floats_between_list_and_dict([1.0], {1: 1.5, 2: 2.0}) is None\n    assert find_floats_between_list_and_dict([0.1, 0.2, 0.3], {1: 0.5, 2: 0.6}) == (0.2, 0.3)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_greater_than_max_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    max_dict = max(d.values())\n    result = []\n    for item in lst:\n        if isinstance(item, float) and item > max_dict:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_greater_than_max_in_dict():\n    assert find_floats_greater_than_max_in_dict([1.0, 2.0, 3.0], {1: 2.0, 2: 3.0}) is None\n    assert find_floats_greater_than_max_in_dict([1.0, 2.0, 4.0], {1: 3.0, 2: 3.5}) == (4.0,)\n    assert find_floats_greater_than_max_in_dict([0.5, 1.5], {1: 1.0, 2: 2.0}) is None\n    assert find_floats_greater_than_max_in_dict([1.1, 1.2], {1: 1.0}) == (1.1, 1.2)\n    assert find_floats_greater_than_max_in_dict([], {1: 1.0, 2: 2.0}) is None\n    assert find_floats_greater_than_max_in_dict([1.0, 2.0], dict()) is None\n    assert find_floats_greater_than_max_in_dict([3.0, 4.0, 5.0], {1: 2.0, 2: 4.0}) == (5.0,)\n    assert find_floats_greater_than_max_in_dict([1.0], {1: 0.5, 2: 1.5}) is None\n    assert find_floats_greater_than_max_in_dict([2.0, 3.0, 4.0], {1: 1.0, 2: 3.5}) == (4.0,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_floats_less_than_value_in_list_and_dict(lst, d, value):\n    if not lst or not d:\n        return None\n    count = 0\n    for item in lst:\n        if isinstance(item, float) and item < value:\n            count += 1\n    for val in d.values():\n        if isinstance(val, float) and val < value:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_floats_less_than_value_in_list_and_dict():\n    assert count_floats_less_than_value_in_list_and_dict([0.1, 0.2, 0.3], {1: 0.4, 2: 0.5}, 0.35) == 3\n    assert count_floats_less_than_value_in_list_and_dict([0.4, 0.5], {1: 0.3}, 0.4) == 1\n    assert count_floats_less_than_value_in_list_and_dict([0.2, 0.3], {1: 0.1, 2: 0.4}, 0.3) == 2\n    assert count_floats_less_than_value_in_list_and_dict([1.1, 1.2], {1: 2.0, 2: 1.5}, 1.3) == 2\n    assert count_floats_less_than_value_in_list_and_dict([], {1: 0.1, 2: 0.2}, 0.3) is None\n    assert count_floats_less_than_value_in_list_and_dict([0.1, 0.2], dict(), 0.15) is None\n    assert count_floats_less_than_value_in_list_and_dict([1.0, 2.0, 3.0], {1: 2.5, 2: 3.5}, 2.1) == 2\n    assert count_floats_less_than_value_in_list_and_dict([1.0], {1: 1.5, 2: 2.0}, 1.6) == 2\n    assert count_floats_less_than_value_in_list_and_dict([0.1, 0.2, 0.3], {1: 0.5, 2: 0.6}, 0.3) == 2"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_less_than_max_in_other_list(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    max_lst2 = max(lst2)\n    result = []\n    for item in lst1:\n        if isinstance(item, float) and item < max_lst2:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_less_than_max_in_other_list():\n    assert find_floats_less_than_max_in_other_list([1.0, 2.0, 3.0], [4.0, 5.0]) == (1.0, 2.0, 3.0)\n    assert find_floats_less_than_max_in_other_list([1.0, 2.0, 4.0], [3.0, 3.5]) == (1.0, 2.0)\n    assert find_floats_less_than_max_in_other_list([0.5, 1.5], [1.0, 2.0]) == (0.5, 1.5)\n    assert find_floats_less_than_max_in_other_list([1.1, 1.2], [2.0]) == (1.1, 1.2)\n    assert find_floats_less_than_max_in_other_list([], [1.0, 2.0]) is None\n    assert find_floats_less_than_max_in_other_list([1.0, 2.0], []) is None\n    assert find_floats_less_than_max_in_other_list([3.0, 4.0, 5.0], [6.0, 7.0]) == (3.0, 4.0, 5.0)\n    assert find_floats_less_than_max_in_other_list([1.0], [1.5, 2.0]) == (1.0,)\n    assert find_floats_less_than_max_in_other_list([2.0, 3.0, 4.0], [5.0, 6.0]) == (2.0, 3.0, 4.0)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_max_in_list_and_min_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    min_dict = min(d.values())\n    max_lst = max(lst)\n    result = []\n    for item in lst:\n        if isinstance(item, float) and min_dict < item < max_lst:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_max_in_list_and_min_in_dict():\n    assert find_floats_between_max_in_list_and_min_in_dict([1.1, 1.2], {1: 1.0}) == (1.1,)\n    assert find_floats_between_max_in_list_and_min_in_dict([], {1: 1.0, 2: 2.0}) is None\n    assert find_floats_between_max_in_list_and_min_in_dict([1.0, 2.0], dict()) is None\n    assert find_floats_between_max_in_list_and_min_in_dict([3.0, 4.0, 5.0], {1: 2.0, 2: 4.0}) == (3.0, 4.0)\n    assert find_floats_between_max_in_list_and_min_in_dict([1.0], {1: 0.5, 2: 1.5}) is None\n    assert find_floats_between_max_in_list_and_min_in_dict([2.0, 3.0, 4.0], {1: 1.0, 2: 3.5}) == (2.0, 3.0)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_less_than_or_equal_to_set_values(lst, s):\n    if not lst or not s:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, float) and any(item <= elem for elem in s):\n            result.append(item)\n    return tuple(sorted(result)) if result else None"}, {"role": "assistant", "content": "def test_find_floats_less_than_or_equal_to_set_values():\n    assert find_floats_less_than_or_equal_to_set_values([1.0, 2.0, 3.0], {4.0, 5.0}) == (1.0, 2.0, 3.0)\n    assert find_floats_less_than_or_equal_to_set_values([1.0, 2.0, 4.0], {3.0, 3.5}) == (1.0, 2.0)\n    assert find_floats_less_than_or_equal_to_set_values([0.5, 1.5], {1.0, 2.0}) == (0.5, 1.5)\n    assert find_floats_less_than_or_equal_to_set_values([1.1, 1.2], {2.0}) == (1.1, 1.2)\n    assert find_floats_less_than_or_equal_to_set_values([], {1.0, 2.0}) is None\n    assert find_floats_less_than_or_equal_to_set_values([1.0, 2.0], set()) is None\n    assert find_floats_less_than_or_equal_to_set_values([3.0, 4.0, 5.0], {6.0, 7.0}) == (3.0, 4.0, 5.0)\n    assert find_floats_less_than_or_equal_to_set_values([1.0], {1.5, 2.0}) == (1.0,)\n    assert find_floats_less_than_or_equal_to_set_values([2.0, 3.0, 4.0], {5.0, 6.0}) == (2.0, 3.0, 4.0)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_less_than_value_in_dict(d, value):\n    if not d:\n        return None\n    result = []\n    for item in d.values():\n        if isinstance(item, float) and item < value:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_less_than_value_in_dict():\n    assert find_floats_less_than_value_in_dict({1: 1.0, 2: 2.0, 3: 3.0}, 4.0) == (1.0, 2.0, 3.0)\n    assert find_floats_less_than_value_in_dict({1: 2.0, 2: 3.0, 3: 4.0}, 3.5) == (2.0, 3.0)\n    assert find_floats_less_than_value_in_dict({1: 0.5, 2: 1.5}, 1.0) == (0.5,)\n    assert find_floats_less_than_value_in_dict({1: 1.1, 2: 1.2}, 2.0) == (1.1, 1.2)\n    assert find_floats_less_than_value_in_dict({}, 1.0) is None\n    assert find_floats_less_than_value_in_dict({1: 1.0, 2: 2.0}, 1.5) == (1.0,)\n    assert find_floats_less_than_value_in_dict({1: 3.0, 2: 4.0, 3: 5.0}, 4.5) == (3.0, 4.0)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_max_in_first_list_and_min_in_second_list(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    max_lst2 = max(lst2)\n    min_lst2 = min(lst2)\n    result = []\n    for item in lst1:\n        if isinstance(item, float) and min_lst2 < item < max_lst2:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_max_in_first_list_and_min_in_second_list():\n    assert find_floats_between_max_in_first_list_and_min_in_second_list([1.0, 2.0, 3.0], [2.0, 5.0]) == (3.0,)\n    assert find_floats_between_max_in_first_list_and_min_in_second_list([1.0, 2.0], [1.5, 2.5]) == (2.0,)\n    assert find_floats_between_max_in_first_list_and_min_in_second_list([], [1.0, 2.0]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_less_than_or_equal_to_max_in_list(lst):\n    if not lst:\n        return None\n    max_lst = max(lst)\n    result = []\n    for item in lst:\n        if isinstance(item, float) and item <= max_lst:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_less_than_or_equal_to_max_in_list():\n    assert find_floats_less_than_or_equal_to_max_in_list([1.0, 2.0, 3.0]) == (1.0, 2.0, 3.0)\n    assert find_floats_less_than_or_equal_to_max_in_list([0.5, 1.5]) == (0.5, 1.5)\n    assert find_floats_less_than_or_equal_to_max_in_list([],) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_min_in_list_and_max_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    min_lst = min(lst)\n    max_dict = max(d.values())\n    result = []\n    for item in lst:\n        if isinstance(item, float) and min_lst < item < max_dict:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_min_in_list_and_max_in_dict():\n    assert find_floats_between_min_in_list_and_max_in_dict([1.0, 2.0], {1: 3.0}) == (2.0,)\n    assert find_floats_between_min_in_list_and_max_in_dict([0.5, 1.5], {1: 2.0}) == (1.5,)\n    assert find_floats_between_min_in_list_and_max_in_dict([], {1: 1.0}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_set_between_min_in_dict_and_max_in_list(d, lst):\n    if not d or not lst:\n        return None\n    min_dict = min(d.values())\n    max_lst = max(lst)\n    result = set()\n    for value in sorted(d.values()):\n        if isinstance(value, float) and min_dict < value < max_lst:\n            result.add(value)\n    return result if result else None"}, {"role": "assistant", "content": "def test_create_set_between_min_in_dict_and_max_in_list():\n    assert create_set_between_min_in_dict_and_max_in_list({1: 1.0, 2: 2.0}, [3.0, 4.0]) == {2.0}\n    assert create_set_between_min_in_dict_and_max_in_list({1: 0.5}, [1.0, 1.5]) is None\n    assert create_set_between_min_in_dict_and_max_in_list({}, [1.0, 2.0]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_divisible_by_value_in_list(lst, value):\n    if not lst:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, float) and item % value == 0:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_divisible_by_value_in_list():\n    assert find_floats_divisible_by_value_in_list([1.0, 2.0, 3.0], 1.0) == (1.0, 2.0, 3.0)\n    assert find_floats_divisible_by_value_in_list([0.5, 1.5], 0.5) == (0.5, 1.5)\n    assert find_floats_divisible_by_value_in_list([], 1.0) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_value_in_list_and_value_in_dict(lst, d, value):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, float) and item < value and any(val > value for val in d.values()):\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_value_in_list_and_value_in_dict():\n    assert find_floats_between_value_in_list_and_value_in_dict([1.0, 2.0], {1: 3.0}, 2.5) == (1.0, 2.0)\n    assert find_floats_between_value_in_list_and_value_in_dict([0.5, 1.5], {1: 2.0}, 1.0) == (0.5,)\n    assert find_floats_between_value_in_list_and_value_in_dict([], {1: 1.0}, 0.5) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef count_floats_greater_than_avg_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    avg_dict = sum(d.values()) / len(d)\n    count = 0\n    for item in lst:\n        if isinstance(item, float) and item > avg_dict:\n            count += 1\n    return count if count > 0 else None"}, {"role": "assistant", "content": "def test_count_floats_greater_than_avg_in_dict():\n    assert count_floats_greater_than_avg_in_dict([1.0, 2.0], {1: 1.5}) == 1\n    assert count_floats_greater_than_avg_in_dict([0.5, 1.5], {1: 1.0}) == 1\n    assert count_floats_greater_than_avg_in_dict([], {1: 1.0}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_divisible_by_two_values(lst, value1, value2):\n    if not lst:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, float) and item % value1 == 0 and item % value2 == 0:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_divisible_by_two_values():\n    assert find_floats_divisible_by_two_values([1.0, 2.0, 3.0], 1.0, 2.0) == (2.0,)\n    assert find_floats_divisible_by_two_values([0.5, 1.5], 0.5, 0.5) == (0.5, 1.5)\n    assert find_floats_divisible_by_two_values([], 1.0, 2.0) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef create_set_of_floats_greater_than_value_in_list(lst, value):\n    if not lst:\n        return None\n    result = set()\n    for item in lst:\n        if isinstance(item, float) and item > value:\n            result.add(item)\n    return sorted(result) if result else None"}, {"role": "assistant", "content": "def test_create_set_of_floats_greater_than_value_in_list():\n    assert create_set_of_floats_greater_than_value_in_list([1.0, 2.0, 3.0], 2.0) == [3.0]\n    assert create_set_of_floats_greater_than_value_in_list([0.5, 1.5], 1.0) == [1.5]\n    assert create_set_of_floats_greater_than_value_in_list([], 1.0) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_less_than_avg_in_other_list(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    avg_lst2 = sum(lst2) / len(lst2)\n    result = []\n    for item in lst1:\n        if isinstance(item, float) and item < avg_lst2:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_less_than_avg_in_other_list():\n    assert find_floats_less_than_avg_in_other_list([1.0, 2.0], [2.5, 3.5]) == (1.0, 2.0)\n    assert find_floats_less_than_avg_in_other_list([0.5, 1.5], [1.0, 2.0]) == (0.5,)\n    assert find_floats_less_than_avg_in_other_list([], [1.0]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_min_in_first_list_and_max_in_second_list(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    min_lst1 = min(lst1)\n    max_lst2 = max(lst2)\n    result = []\n    for item in lst1:\n        if isinstance(item, float) and min_lst1 < item < max_lst2:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_min_in_first_list_and_max_in_second_list():\n    assert find_floats_between_min_in_first_list_and_max_in_second_list([1.2, 3.4, 0.5], [5.6, 7.8, 9.0]) == (1.2, 3.4)\n    assert find_floats_between_min_in_first_list_and_max_in_second_list([2.2, 4.4, -1.5], [3.6, 7.8, 1.0]) == (2.2, 4.4)\n    assert find_floats_between_min_in_first_list_and_max_in_second_list([], [1.0, 2.0, 3.0]) is None\n    assert find_floats_between_min_in_first_list_and_max_in_second_list([1.2, 2.4, 3.6], []) is None\n    assert find_floats_between_min_in_first_list_and_max_in_second_list([1.2, 3.4, 5.6], [1.0, 2.0, 3.0]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_less_than_avg_in_dict(lst, d):\n    if not lst or not d:\n        return None\n    avg_dict = sum(d.values()) / len(d)\n    result = []\n    for item in lst:\n        if isinstance(item, float) and item < avg_dict:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_less_than_avg_in_dict():\n    assert find_floats_less_than_avg_in_dict([1.2, 3.4, 0.5], {\"a\": 5.6, \"b\": 7.8, \"c\": 9.0}) == (1.2, 3.4, 0.5)\n    assert find_floats_less_than_avg_in_dict([2.2, 4.4, -1.5], {\"a\": 3.6, \"b\": 7.8, \"c\": 1.0}) == (2.2, -1.5)\n    assert find_floats_less_than_avg_in_dict([], {\"a\": 1.0, \"b\": 2.0, \"c\": 3.0}) is None\n    assert find_floats_less_than_avg_in_dict([1.2, 2.4, 3.6], {}) is None\n    assert find_floats_less_than_avg_in_dict([1.2, 3.4, 5.6], {\"a\": 1.0, \"b\": 2.0, \"c\": 3.0}) == (1.2,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_greater_than_value_in_dict(lst, d, value):\n    if not lst or not d:\n        return None\n    result = []\n    for item in lst:\n        if isinstance(item, float) and any(val > value for val in d.values()):\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_greater_than_value_in_dict():\n    assert find_floats_greater_than_value_in_dict([1.2, 3.4, 0.5], {\"a\": 5.6, \"b\": 7.8, \"c\": 9.0}, 4.0) == (1.2, 3.4, 0.5)\n    assert find_floats_greater_than_value_in_dict([2.2, 4.4, -1.5], {\"a\": 3.6, \"b\": 7.8, \"c\": 1.0}, 2.0) == (2.2, 4.4, -1.5)\n    assert find_floats_greater_than_value_in_dict([], {\"a\": 1.0, \"b\": 2.0, \"c\": 3.0}, 2.0) is None\n    assert find_floats_greater_than_value_in_dict([1.2, 2.4, 3.6], {}, 2.0) is None\n    assert find_floats_greater_than_value_in_dict([1.2, 3.4, 5.6], {\"a\": 1.0, \"b\": 2.0, \"c\": 3.0}, 1.0) == (1.2, 3.4, 5.6)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_floats_between_max_in_first_list_and_max_in_second_list(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    max_lst2 = max(lst2)\n    result = []\n    for item in lst1:\n        if isinstance(item, float) and item < max_lst2:\n            result.append(item)\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_floats_between_max_in_first_list_and_max_in_second_list():\n    assert find_floats_between_max_in_first_list_and_max_in_second_list([1.2, 3.4, 0.5], [5.6, 7.8, 9.0]) == (1.2, 3.4, 0.5)\n    assert find_floats_between_max_in_first_list_and_max_in_second_list([2.2, 4.4, -1.5], [3.6, 7.8, 1.0]) == (2.2, 4.4, -1.5)\n    assert find_floats_between_max_in_first_list_and_max_in_second_list([], [1.0, 2.0, 3.0]) is None\n    assert find_floats_between_max_in_first_list_and_max_in_second_list([1.2, 2.4, 3.6], []) is None\n    assert find_floats_between_max_in_first_list_and_max_in_second_list([1.2, 3.4, 5.6], [1.0, 2.0, 3.0]) == (1.2,)"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef add_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_add_lists():\n    assert add_lists([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n    assert add_lists([0, 0, 0], [1, 2, 3]) == [1, 2, 3]\n    assert add_lists([1, 2], [3, 4]) == [4, 6]\n    assert add_lists([], [1, 2, 3]) is None\n    assert add_lists([1, 2, 3], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef square_list_2(lst):\n    result = []\n    for num in lst:\n        result.append(num ** 2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_square_list_2():\n    assert square_list_2([1, 2, 3]) == [1, 4, 9]\n    assert square_list_2([0, -1, -2]) == [0, 1, 4]\n    assert square_list_2([2, 4, 6]) == [4, 16, 36]\n    assert square_list_2([]) is None\n    assert square_list_2([3]) == [9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_not_14(lst):\n    result = []\n    for num in lst:\n        if num % 7 == 0 and num % 14 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_7_not_14():\n    assert find_divisible_by_7_not_14([7, 14, 21, 28]) == [7, 21]\n    assert find_divisible_by_7_not_14([0, 2, 3, 5]) is None\n    assert find_divisible_by_7_not_14([49, 98]) == [49]\n    assert find_divisible_by_7_not_14([42, 56, 63]) == [63]\n    assert find_divisible_by_7_not_14([7, 14, 21, 28, 35]) == [7, 21, 35]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_in_lists_2(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_in_lists_2():\n    assert find_common_in_lists_2([1, 2, 3], [3, 4, 5]) == [3]\n    assert find_common_in_lists_2([1, 2, 3], [4, 5, 6]) is None\n    assert find_common_in_lists_2([1, 2, 3, 4], [2, 4, 6, 8]) == [2, 4]\n    assert find_common_in_lists_2([7, 8, 9], [9, 10, 11]) == [9]\n    assert find_common_in_lists_2([1], [1]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_list_elements(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    if result == 1:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_list_elements():\n    assert multiply_list_elements([1, 2, 3]) == 6\n    assert multiply_list_elements([1, 1, 1]) is None\n    assert multiply_list_elements([1]) is None\n    assert multiply_list_elements([7, 8, 9]) == 504\n    assert multiply_list_elements([10]) == 10"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_squares_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a**2 - b**2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_squares_of_lists():\n    assert subtract_squares_of_lists([3, 4], [1, 2]) == [8, 12]\n    assert subtract_squares_of_lists([5, 6], [7, 8]) == [-24, -28]\n    assert subtract_squares_of_lists([1, 1], [1, 1]) == [0, 0]\n    assert subtract_squares_of_lists([], []) is None\n    assert subtract_squares_of_lists([3, 5], [2, 4]) == [5, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_8_not_16(lst):\n    result = []\n    for num in lst:\n        if num % 8 == 0 and num % 16 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_8_not_16():\n    assert find_divisible_by_8_not_16([8, 16, 24, 32]) == [8, 24]\n    assert find_divisible_by_8_not_16([0, 2, 3, 5]) is None\n    assert find_divisible_by_8_not_16([48, 96]) is None\n    assert find_divisible_by_8_not_16([32, 64, 72]) == [72]\n    assert find_divisible_by_8_not_16([8, 16, 24, 32, 40]) == [8, 24, 40]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_in_list_2(lst):\n    result = []\n    for num in lst:\n        for other in lst:\n            if other != num and other % num == 0:\n                result.append(num)\n                break\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_in_list_2():\n    assert find_divisors_in_list_2([1, 2, 3, 4]) == [1, 2]\n    assert find_divisors_in_list_2([5, 10, 15, 20]) == [5, 10]\n    assert find_divisors_in_list_2([7, 14, 28]) == [7, 14]\n    assert find_divisors_in_list_2([13, 26, 39]) == [13]\n    assert find_divisors_in_list_2([1]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_less_than_all_other(lst1, lst2):\n    result = []\n    for num in lst1:\n        if all(num < x for x in lst2):\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_less_than_all_other():\n    assert find_less_than_all_other([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\n    assert find_less_than_all_other([3, 4, 5], [1, 2, 3]) is None\n    assert find_less_than_all_other([1, 2, 3], [3, 2, 1]) is None\n    assert find_less_than_all_other([2, 3, 4], [5, 6, 7]) == [2, 3, 4]\n    assert find_less_than_all_other([], [1, 2, 3]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_or_3(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 or num % 3 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_or_3():\n    assert find_divisible_by_2_or_3([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 6]\n    assert find_divisible_by_2_or_3([7, 8, 9, 10]) == [8, 9, 10]\n    assert find_divisible_by_2_or_3([11, 13]) is None\n    assert find_divisible_by_2_or_3([15, 16, 17, 18]) == [15, 16, 18]\n    assert find_divisible_by_2_or_3([19, 7, 101]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef add_lists_elements_with_offset(lst1, lst2, offset):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b + offset)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_add_lists_elements_with_offset():\n    assert add_lists_elements_with_offset([1, 2, 3], [4, 5, 6], 1) == [6, 8, 10]\n    assert add_lists_elements_with_offset([0, 0, 0], [1, 2, 3], 2) == [3, 4, 5]\n    assert add_lists_elements_with_offset([1, 2], [3, 4], -1) == [3, 5]\n    assert add_lists_elements_with_offset([], [1, 2, 3], 0) is None\n    assert add_lists_elements_with_offset([1, 2, 3], [], 0) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_list_by_constant(lst, constant):\n    result = []\n    for num in lst:\n        result.append(num * constant)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_list_by_constant():\n    assert multiply_list_by_constant([1, 2, 3], 2) == [2, 4, 6]\n    assert multiply_list_by_constant([0, -1, -2], 3) == [0, -3, -6]\n    assert multiply_list_by_constant([2, 4, 6], -1) == [-2, -4, -6]\n    assert multiply_list_by_constant([], 10) is None\n    assert multiply_list_by_constant([3], 5) == [15]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_not_divisible_by_3_and_5(lst):\n    result = []\n    for num in lst:\n        if num % 3 != 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_not_divisible_by_3_and_5():\n    assert find_not_divisible_by_3_and_5([1, 2, 3, 4, 5, 6]) == [1, 2, 4]\n    assert find_not_divisible_by_3_and_5([10, 15, 20, 25, 30]) is None\n    assert find_not_divisible_by_3_and_5([7, 11, 13, 17]) == [7, 11, 13, 17]\n    assert find_not_divisible_by_3_and_5([8, 14, 19, 22]) == [8, 14, 19, 22]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef add_lists_conditionally(lst1, lst2, condition):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if a + b > condition:\n            result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_add_lists_conditionally():\n    assert add_lists_conditionally([1, 2, 3], [4, 5, 6], 5) == [7, 9]\n    assert add_lists_conditionally([0, 0, 0], [1, 2, 3], 1) == [2, 3]\n    assert add_lists_conditionally([1, 2], [3, 4], 4) == [6]\n    assert add_lists_conditionally([], [1, 2, 3], 0) is None\n    assert add_lists_conditionally([1, 2, 3], [], 0) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_and_greater_than_10(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num > 10:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_and_greater_than_10():\n    assert find_even_and_greater_than_10([1, 2, 3, 12, 14]) == [12, 14]\n    assert find_even_and_greater_than_10([5, 7, 9, 11, 13]) is None\n    assert find_even_and_greater_than_10([2, 4, 6, 8, 10]) is None\n    assert find_even_and_greater_than_10([15, 16, 20, 22]) == [16, 20, 22]\n    assert find_even_and_greater_than_10([1, 12, 13, 24, 26]) == [12, 24, 26]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_elements_in_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j and lst[i] - lst[j] in lst:\n                result.append(lst[i])\n    return tuple(result) if result else None"}, {"role": "assistant", "content": "def test_find_difference_elements_in_list():\n    assert find_difference_elements_in_list([1, 2, 3, 4]) == (2, 3, 3, 4, 4, 4)\n    assert find_difference_elements_in_list([5, 10, 15, 20]) == (10, 15, 15, 20, 20, 20)\n    assert find_difference_elements_in_list([7, 14, 28]) == (14, 28)\n    assert find_difference_elements_in_list([13, 26, 39]) == (26, 39, 39)\n    assert find_difference_elements_in_list([1]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_square_roots(lst):\n    result = []\n    for num in lst:\n        if num >= 0:\n            result.append(num ** 0.5)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_square_roots():\n    assert find_square_roots([4, 16, 25]) == [2.0, 4.0, 5.0]\n    assert find_square_roots([-1, -4]) is None\n    assert find_square_roots([0, 1, 9]) == [0.0, 1.0, 3.0]\n    assert find_square_roots([1]) == [1.0]\n    assert find_square_roots([]) is None\n    assert find_square_roots([36, 49, -9]) == [6.0, 7.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_first_list(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num not in lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_unique_in_first_list():\n    assert find_unique_in_first_list([1, 2, 3], [2, 3, 4]) == [1]\n    assert find_unique_in_first_list([5, 6, 7], [7, 8, 9]) == [5, 6]\n    assert find_unique_in_first_list([1, 2, 3], [1, 2, 3]) is None\n    assert find_unique_in_first_list([], [1, 2, 3]) is None\n    assert find_unique_in_first_list([1, 2, 3], []) == [1, 2, 3]\n    assert find_unique_in_first_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_10_or_12(lst):\n    result = []\n    for num in lst:\n        if num % 10 == 0 or num % 12 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_10_or_12():\n    assert find_divisible_by_10_or_12([10, 12, 15, 20]) == [10, 12, 20]\n    assert find_divisible_by_10_or_12([24, 36, 48]) == [24, 36, 48]\n    assert find_divisible_by_10_or_12([1, 3, 5]) is None\n    assert find_divisible_by_10_or_12([]) is None\n    assert find_divisible_by_10_or_12([10, 20, 30]) == [10, 20, 30]\n    assert find_divisible_by_10_or_12([12, 24, 36]) == [12, 24, 36]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_11_not_22(lst):\n    result = []\n    for num in lst:\n        if num % 11 == 0 and num % 22 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_11_not_22():\n    assert find_divisible_by_11_not_22([11, 22, 33]) == [11, 33]\n    assert find_divisible_by_11_not_22([44, 55, 66]) == [55]\n    assert find_divisible_by_11_not_22([22, 44]) is None\n    assert find_divisible_by_11_not_22([11]) == [11]\n    assert find_divisible_by_11_not_22([]) is None\n    assert find_divisible_by_11_not_22([11, 22, 33, 44]) == [11, 33]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_factorials(lst):\n    result = []\n    for num in lst:\n        if num == 0:\n            result.append(1)\n        else:\n            fact = 1\n            for i in range(1, num + 1):\n                fact *= i\n            result.append(fact)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_factorials():\n    assert find_factorials([0, 1, 2]) == [1, 1, 2]\n    assert find_factorials([3, 4, 5]) == [6, 24, 120]\n    assert find_factorials([-1, -2]) == [1, 1]\n    assert find_factorials([0]) == [1]\n    assert find_factorials([6, 7]) == [720, 5040]\n    assert find_factorials([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_diff_between_max_and_min(lst):\n    if not lst:\n        return None\n    result = []\n    max_val = max(lst)\n    min_val = min(lst)\n    result.append(max_val - min_val)\n    return result"}, {"role": "assistant", "content": "def test_find_diff_between_max_and_min():\n    assert find_diff_between_max_and_min([1, 2, 3, 4, 5]) == [4]\n    assert find_diff_between_max_and_min([-1, -2, -3, -4, -5]) == [4]\n    assert find_diff_between_max_and_min([]) is None\n    assert find_diff_between_max_and_min([0]) == [0]\n    assert find_diff_between_max_and_min([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_squares_of_lists_v2(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a**2 - b**2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_squares_of_lists_v2():\n    assert subtract_squares_of_lists_v2([2, 3], [1, 1]) == [3, 8]\n    assert subtract_squares_of_lists_v2([4, 5], [2, 2]) == [12, 21]\n    assert subtract_squares_of_lists_v2([1, 2], [1, 2]) == [0, 0]\n    assert subtract_squares_of_lists_v2([], []) is None\n    assert subtract_squares_of_lists_v2([1], [0]) == [1]\n    assert subtract_squares_of_lists_v2([3, 6], [2, 5]) == [5, 11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_list_by_constant_v2(lst, constant):\n    result = []\n    for num in lst:\n        result.append(num * constant)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_list_by_constant_v2():\n    assert multiply_list_by_constant_v2([1, 2, 3], 2) == [2, 4, 6]\n    assert multiply_list_by_constant_v2([4, 5], 0) == [0, 0]\n    assert multiply_list_by_constant_v2([-1, -2], 3) == [-3, -6]\n    assert multiply_list_by_constant_v2([0], 10) == [0]\n    assert multiply_list_by_constant_v2([], 5) is None\n    assert multiply_list_by_constant_v2([10, 20, 30], 1) == [10, 20, 30]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_list_by_constant(lst, constant):\n    result = []\n    if constant == 0:\n        return None\n    for num in lst:\n        result.append(num / constant)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_list_by_constant():\n    assert divide_list_by_constant([10, 20, 30], 10) == [1.0, 2.0, 3.0]\n    assert divide_list_by_constant([4, 5, 6], 2) == [2.0, 2.5, 3.0]\n    assert divide_list_by_constant([10, 20], 0) is None\n    assert divide_list_by_constant([0], 1) == [0.0]\n    assert divide_list_by_constant([], 5) is None\n    assert divide_list_by_constant([9, 18, 27], 3) == [3.0, 6.0, 9.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_or_8_not_12(lst):\n    result = []\n    for num in lst:\n        if (num % 4 == 0 or num % 8 == 0) and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4_or_8_not_12():\n    assert find_divisible_by_4_or_8_not_12([4, 8, 12]) == [4, 8]\n    assert find_divisible_by_4_or_8_not_12([16, 24, 32]) == [16, 32]\n    assert find_divisible_by_4_or_8_not_12([12, 24, 36]) is None\n    assert find_divisible_by_4_or_8_not_12([4]) == [4]\n    assert find_divisible_by_4_or_8_not_12([]) is None\n    assert find_divisible_by_4_or_8_not_12([8, 16, 32]) == [8, 16, 32]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef add_lists_with_condition(lst1, lst2, condition):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if a + b > condition:\n            result.append(a + b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_add_lists_with_condition():\n    assert add_lists_with_condition([1, 2], [3, 4], 4) == [6]\n    assert add_lists_with_condition([5, 6], [5, 6], 10) == [12]\n    assert add_lists_with_condition([1, 2], [1, 2], 5) is None\n    assert add_lists_with_condition([], [], 1) is None\n    assert add_lists_with_condition([1, 1], [4, 4], 2) == [5, 5]\n    assert add_lists_with_condition([10, 20], [30, 40], 30) == [40, 60]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_max_min_diff_in_lists(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    max_val1 = max(lst1)\n    min_val1 = min(lst1)\n    max_val2 = max(lst2)\n    min_val2 = min(lst2)\n    result.append(max_val1 - min_val1)\n    result.append(max_val2 - min_val2)\n    return result"}, {"role": "assistant", "content": "def test_find_max_min_diff_in_lists():\n    assert find_max_min_diff_in_lists([1, 2, 3], [4, 5, 6]) == [2, 2]\n    assert find_max_min_diff_in_lists([7, 8, 9], [10, 11, 12]) == [2, 2]\n    assert find_max_min_diff_in_lists([1], []) is None\n    assert find_max_min_diff_in_lists([], [0]) is None\n    assert find_max_min_diff_in_lists([10, 20, 30], [40, 50, 60]) == [20, 20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_and_7(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 and num % 7 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_and_7():\n    assert find_divisible_by_3_and_7([21, 42, 63]) == [21, 42, 63]\n    assert find_divisible_by_3_and_7([10, 20, 30]) is None\n    assert find_divisible_by_3_and_7([3, 7, 14]) is None\n    assert find_divisible_by_3_and_7([]) is None\n    assert find_divisible_by_3_and_7([3 * 7, 6 * 7, 9 * 7]) == [21, 42, 63]\n    assert find_divisible_by_3_and_7([5, 15, 25]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_15_not_30(lst):\n    result = []\n    for num in lst:\n        if num % 15 == 0 and num % 30 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_15_not_30():\n    assert find_divisible_by_15_not_30([15, 30, 45]) == [15, 45]\n    assert find_divisible_by_15_not_30([60, 90, 120]) is None\n    assert find_divisible_by_15_not_30([15, 75, 105]) == [15, 75, 105]\n    assert find_divisible_by_15_not_30([30, 60, 90]) is None\n    assert find_divisible_by_15_not_30([15]) == [15]\n    assert find_divisible_by_15_not_30([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_lists_elements(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a - b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_lists_elements():\n    assert subtract_lists_elements([10, 20, 30], [1, 2, 3]) == [9, 18, 27]\n    assert subtract_lists_elements([1, 2, 3], [3, 2, 1]) == [-2, 0, 2]\n    assert subtract_lists_elements([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\n    assert subtract_lists_elements([5, 15], [5, 15]) == [0, 0]\n    assert subtract_lists_elements([10, 20], [5, 10]) == [5, 10]\n    assert subtract_lists_elements([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_3_not_7(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 3 == 0 and num % 7 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_3_not_7():\n    assert find_divisible_by_2_and_3_not_7([88, 88, 88]) is None\n    assert find_divisible_by_2_and_3_not_7([2, 15, 6]) == [6]\n    assert find_divisible_by_2_and_3_not_7([3, 6, 20]) == [6]\n    assert find_divisible_by_2_and_3_not_7([4, 8, 16]) is None\n    assert find_divisible_by_2_and_3_not_7([10, 20, 30]) == [30]\n    assert find_divisible_by_2_and_3_not_7([12, 15, 18]) == [12, 18]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_squares_of_elements(lst):\n    result = []\n    for num in lst:\n        result.append(num**2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_squares_of_elements():\n    assert find_squares_of_elements([1, 2, 3]) == [1, 4, 9]\n    assert find_squares_of_elements([4, 5, 6]) == [16, 25, 36]\n    assert find_squares_of_elements([0]) == [0]\n    assert find_squares_of_elements([]) is None\n    assert find_squares_of_elements([10, 20, 30]) == [100, 400, 900]\n    assert find_squares_of_elements([7, 8, 9]) == [49, 64, 81]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_even_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if a % 2 == 0 and b % 2 == 0:\n            result.append(a * b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_even_lists():\n    assert multiply_even_lists([2, 3, 4], [2, 3, 4]) == [4, 16]\n    assert multiply_even_lists([1, 1, 1], [2, 2, 2]) is None\n    assert multiply_even_lists([2, 4, 6], [2, 4, 6]) == [4, 16, 36]\n    assert multiply_even_lists([], []) is None\n    assert multiply_even_lists([2], [2]) == [4]\n    assert multiply_even_lists([2, 4], [2, 4]) == [4, 16]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_11_not_5(lst):\n    result = []\n    for num in lst:\n        if num % 11 == 0 and num % 5 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_11_not_5():\n    assert find_divisible_by_11_not_5([11, 22, 33]) == [11, 22, 33]\n    assert find_divisible_by_11_not_5([10, 15, 25]) is None\n    assert find_divisible_by_11_not_5([55, 110, 165]) is None\n    assert find_divisible_by_11_not_5([]) is None\n    assert find_divisible_by_11_not_5([121, 132, 143]) == [121, 132, 143]\n    assert find_divisible_by_11_not_5([44, 55, 66]) == [44, 66]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_product_of_elements_of_other_list(lst1, lst2):\n    result = []\n    product = 1\n    for num in lst2:\n        product *= num\n    for num in lst1:\n        if num == product:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_product_of_elements_of_other_list():\n    assert find_product_of_elements_of_other_list([1, 2, 3], [1, 2, 3]) is None\n    assert find_product_of_elements_of_other_list([1, 2, 6], [1, 2, 3]) == [6]\n    assert find_product_of_elements_of_other_list([1, 2, 3], [2, 2, 2]) is None\n    assert find_product_of_elements_of_other_list([], [2, 2, 2]) is None\n    assert find_product_of_elements_of_other_list([4, 8], [2, 2]) == [4]\n    assert find_product_of_elements_of_other_list([2], [2]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_4(lst, num):\n    result = []\n    for i in lst:\n        if num % i == 0:\n            result.append(i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_4():\n    assert find_divisors_4([1, 2, 3, 4], 8) == [1, 2, 4]\n    assert find_divisors_4([5, 6, 7], 12) == [6]\n    assert find_divisors_4([3, 5, 9], 29) is None\n    assert find_divisors_4([1, 2, 4], 27) == [1]\n    assert find_divisors_4([], 30) is None\n    assert find_divisors_4([7, 8, 9], 63) == [7, 9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_all_in_other_list(lst1, lst2):\n    result = []\n    for num in lst1:\n        if all(num > x for x in lst2):\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_greater_than_all_in_other_list():\n    assert find_greater_than_all_in_other_list([1, 2, 3], [0, -1]) == [1, 2, 3]\n    assert find_greater_than_all_in_other_list([1, 2, 3], [2, 3]) is None\n    assert find_greater_than_all_in_other_list([10, 20, 30], [5, 15]) == [20, 30]\n    assert find_greater_than_all_in_other_list([5, 10, 15], [10]) == [15]\n    assert find_greater_than_all_in_other_list([5, 5, 5], [5]) is None\n    assert find_greater_than_all_in_other_list([10, 20, 30], [30]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_list_by_2(lst):\n    result = []\n    for num in lst:\n        result.append(num * 2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_list_by_2():\n    assert multiply_list_by_2([1, 2, 3]) == [2, 4, 6]\n    assert multiply_list_by_2([0, -1, -2]) == [0, -2, -4]\n    assert multiply_list_by_2([4, 5, 6]) == [8, 10, 12]\n    assert multiply_list_by_2([-3, -2, -1]) == [-6, -4, -2]\n    assert multiply_list_by_2([2, 3, 4]) == [4, 6, 8]\n    assert multiply_list_by_2([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_of_elements(lst, power):\n    result = []\n    for num in lst:\n        result.append(num ** power)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_of_elements():\n    assert find_powers_of_elements([1, 2, 3], 2) == [1, 4, 9]\n    assert find_powers_of_elements([2, 3, 4], 3) == [8, 27, 64]\n    assert find_powers_of_elements([0, 1, 2], 4) == [0, 1, 16]\n    assert find_powers_of_elements([5, 6], 0) == [1, 1]\n    assert find_powers_of_elements([-1, -2], 2) == [1, 4]\n    assert find_powers_of_elements([], 2) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_or_equal_to_all(lst1, lst2):\n    result = []\n    for num in lst1:\n        if all(num >= x for x in lst2):\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_greater_or_equal_to_all():\n    assert find_greater_or_equal_to_all([1, 2, 3], [0, -1]) == [1, 2, 3]\n    assert find_greater_or_equal_to_all([5, 10, 15], [10]) == [10, 15]\n    assert find_greater_or_equal_to_all([1, 2, 3], [4, 5]) is None\n    assert find_greater_or_equal_to_all([4, 5, 6], [4]) == [4, 5, 6]\n    assert find_greater_or_equal_to_all([7, 8, 9], [6, 7]) == [7, 8, 9]\n    assert find_greater_or_equal_to_all([1, 1, 1], [1]) == [1, 1, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_lists_with_condition(lst1, lst2, condition):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if a - b > condition:\n            result.append(a - b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_lists_with_condition():\n    assert subtract_lists_with_condition([10, 20, 30], [1, 2, 3], 5) == [9, 18, 27]\n    assert subtract_lists_with_condition([5, 10, 15], [1, 2, 3], 3) == [4, 8, 12]\n    assert subtract_lists_with_condition([1, 2, 3], [4, 5, 6], 0) is None\n    assert subtract_lists_with_condition([6, 7, 8], [5, 4, 3], 2) == [3, 5]\n    assert subtract_lists_with_condition([2, 3, 4], [1, 1, 1], 1) == [2, 3]\n    assert subtract_lists_with_condition([10, 10, 10], [5, 5, 5], 4) == [5, 5, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_lists_elements(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a * b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_lists_elements():\n    assert multiply_lists_elements([1, 2, 3], [4, 5, 6]) == [4, 10, 18]\n    assert multiply_lists_elements([0, -1, -2], [-3, -4, -5]) == [0, 4, 10]\n    assert multiply_lists_elements([2, 3], [2, 3]) == [4, 9]\n    assert multiply_lists_elements([], [0, 0, 0]) is None\n    assert multiply_lists_elements([3, 4, 5], [6, 7, 8]) == [18, 28, 40]\n    assert multiply_lists_elements([5, 10], [5, 10]) == [25, 100]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisors_of_list_elements(lst):\n    result = []\n    for num in lst:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                result.append(i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisors_of_list_elements():\n    assert find_divisors_of_list_elements([4, 6]) == [1, 2, 4, 1, 2, 3, 6]\n    assert find_divisors_of_list_elements([]) is None\n    assert find_divisors_of_list_elements([7, 11]) == [1, 7, 1, 11]\n    assert find_divisors_of_list_elements([]) is None\n    assert find_divisors_of_list_elements([8, 9]) == [1, 2, 4, 8, 1, 3, 9]\n    assert find_divisors_of_list_elements([13, 17]) == [1, 13, 1, 17]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_greater_than_or_equal_min(lst1, lst2):\n    result = []\n    min_val = min(lst2)\n    for num in lst1:\n        if num >= min_val:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_greater_than_or_equal_min():\n    assert find_greater_than_or_equal_min([1, 2, 3], [2]) == [2, 3]\n    assert find_greater_than_or_equal_min([4, 5, 6], [3]) == [4, 5, 6]\n    assert find_greater_than_or_equal_min([1, 1, 1], [1]) == [1, 1, 1]\n    assert find_greater_than_or_equal_min([1, 2, 3], [4]) is None\n    assert find_greater_than_or_equal_min([7, 8, 9], [7]) == [7, 8, 9]\n    assert find_greater_than_or_equal_min([5, 5, 5], [5]) == [5, 5, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_elements(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            result.append(lst[i] - lst[j])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_elements():\n    assert find_difference_of_elements([4, 1, 5]) == [3, -1, -4]\n    assert find_difference_of_elements([9, 7, 6]) == [2, 3, 1]\n    assert find_difference_of_elements([]) is None\n    assert find_difference_of_elements([1, 1, 1]) == [0, 0, 0]\n    assert find_difference_of_elements([]) is None\n    assert find_difference_of_elements([5, 4, 3]) == [1, 2, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_square_roots_of_list(lst):\n    result = []\n    for num in lst:\n        result.append(num**0.5)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_square_roots_of_list():\n    assert find_square_roots_of_list([4, 9, 16]) == [2.0, 3.0, 4.0]\n    assert find_square_roots_of_list([1, 0, 25]) == [1.0, 0.0, 5.0]\n    assert find_square_roots_of_list([36, 49, 64]) == [6.0, 7.0, 8.0]\n    assert find_square_roots_of_list([0, 1, 4]) == [0.0, 1.0, 2.0]\n    assert find_square_roots_of_list([81, 100]) == [9.0, 10.0]\n    assert find_square_roots_of_list([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_lists_elementwise(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] - lst2[i])\n        else:\n            result.append(lst1[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_lists_elementwise():\n    assert subtract_lists_elementwise([10, 20, 30], [1, 2, 3]) == [9, 18, 27]\n    assert subtract_lists_elementwise([5, 10, 15], [5, 5, 5]) == [0, 5, 10]\n    assert subtract_lists_elementwise([], [1, 1, 1]) is None\n    assert subtract_lists_elementwise([1, 2], [2, 1]) == [-1, 1]\n    assert subtract_lists_elementwise([3, 3, 3], [1, 1]) == [2, 2, 3]\n    assert subtract_lists_elementwise([1, 1], [1, 1, 1]) == [0, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_exclusive_in_both(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num not in lst2:\n            result.append(num)\n    for num in lst2:\n        if num not in lst1:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_exclusive_in_both():\n    assert find_exclusive_in_both([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]\n    assert find_exclusive_in_both([5, 6], [6, 7]) == [5, 7]\n    assert find_exclusive_in_both([], []) is None\n    assert find_exclusive_in_both([1, 1], [2, 2]) == [1, 1, 2, 2]\n    assert find_exclusive_in_both([], [1, 2, 3]) == [1, 2, 3]\n    assert find_exclusive_in_both([1, 2, 3], []) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_lists_if_greater_than_10(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        summ = a + b\n        if summ > 10:\n            result.append(summ)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_lists_if_greater_than_10():\n    assert sum_lists_if_greater_than_10([5, 10], [6, 5]) == [11, 15]\n    assert sum_lists_if_greater_than_10([4, 5], [7, 8]) == [11, 13]\n    assert sum_lists_if_greater_than_10([1, 2], [3, 4]) is None\n    assert sum_lists_if_greater_than_10([10, 20], [1, 2]) == [11, 22]\n    assert sum_lists_if_greater_than_10([0, 10], [12, 8]) == [12, 18]\n    assert sum_lists_if_greater_than_10([3, 6], [5, 5]) == [11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_of_elements(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a ** b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_of_elements():\n    assert power_of_elements([1, 2], [3, 4]) == [1, 16]\n    assert power_of_elements([2, 3], [2, 3]) == [4, 27]\n    assert power_of_elements([0, 1], [0, 1]) == [1, 1]\n    assert power_of_elements([], [0, 0]) is None\n    assert power_of_elements([4, 5], [1, 2]) == [4, 25]\n    assert power_of_elements([5, 6], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_lists_with_exclusion_of_zero(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result.append(a / b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_lists_with_exclusion_of_zero():\n    assert divide_lists_with_exclusion_of_zero([10, 20], [2, 5]) == [5.0, 4.0]\n    assert divide_lists_with_exclusion_of_zero([30, 40], [3, 4]) == [10.0, 10.0]\n    assert divide_lists_with_exclusion_of_zero([], []) is None\n    assert divide_lists_with_exclusion_of_zero([4, 6], [2, 0]) == [2.0]\n    assert divide_lists_with_exclusion_of_zero([5, 7], [1, 1]) == [5.0, 7.0]\n    assert divide_lists_with_exclusion_of_zero([8, 10], [4, 5]) == [2.0, 2.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_even_common(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2 and num % 2 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_even_common():\n    assert find_even_common([2, 4, 6], [4, 6, 8]) == [4, 6]\n    assert find_even_common([1, 2, 3], [2, 4, 5]) == [2]\n    assert find_even_common([10, 12], [12, 14]) == [12]\n    assert find_even_common([0, 2], [2, 3]) == [2]\n    assert find_even_common([5, 6], [7, 8]) is None\n    assert find_even_common([4, 8], [8, 12]) == [8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_less_than_sum_of_other_list(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        if num < sum_lst2:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_less_than_sum_of_other_list():\n    assert find_less_than_sum_of_other_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\n    assert find_less_than_sum_of_other_list([10, 20], [5, 5]) is None\n    assert find_less_than_sum_of_other_list([5, 15], [10, 20]) == [5, 15]\n    assert find_less_than_sum_of_other_list([30, 40], [10, 10]) is None\n    assert find_less_than_sum_of_other_list([3, 7], [6, 5]) == [3, 7]\n    assert find_less_than_sum_of_other_list([2, 9], [1, 2]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_from_squares(lst):\n    result = []\n    for num in lst:\n        result.append(num**2 - num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_from_squares():\n    assert subtract_from_squares([1, 2, 3]) == [0, 2, 6]\n    assert subtract_from_squares([]) is None\n    assert subtract_from_squares([10, 12]) == [90, 132]\n    assert subtract_from_squares([2, 3, 4]) == [2, 6, 12]\n    assert subtract_from_squares([]) is None\n    assert subtract_from_squares([8, 9]) == [56, 72]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_lists_if_greater_than_20(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        product = a * b\n        if product > 20:\n            result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_lists_if_greater_than_20():\n    assert multiply_lists_if_greater_than_20([5, 10], [5, 3]) == [25, 30]\n    assert multiply_lists_if_greater_than_20([6, 7], [4, 5]) == [24, 35]\n    assert multiply_lists_if_greater_than_20([2, 3], [10, 7]) == [21]\n    assert multiply_lists_if_greater_than_20([2, 2], [5, 5]) is None\n    assert multiply_lists_if_greater_than_20([4, 5], [6, 5]) == [24, 25]\n    assert multiply_lists_if_greater_than_20([1, 2], [30, 20]) == [30, 40]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_3_not_6(lst):\n    result = []\n    for num in lst:\n        if num % 3 == 0 and num % 6 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_3_not_6():\n    assert find_divisible_by_3_not_6([3, 6, 9, 12, 15]) == [3, 9, 15]\n    assert find_divisible_by_3_not_6([1, 2, 4, 5, 7, 8]) is None\n    assert find_divisible_by_3_not_6([-3, -6, -9, -12, 0]) == [-3, -9]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_elements_in_sets_3(lst1, lst2):\n    result = list(set(lst1) ^ set(lst2))\n    if not result:\n        return None\n    return sorted(result)"}, {"role": "assistant", "content": "def test_find_unique_elements_in_sets_3():\n    assert find_unique_elements_in_sets_3([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]\n    assert find_unique_elements_in_sets_3([1, 2, 3], [1, 2, 3]) is None\n    assert find_unique_elements_in_sets_3([], [1, 2, 3]) == [1, 2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_elements_times_index(lst):\n    result = []\n    for i, num in enumerate(lst):\n        result.append(num * i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_elements_times_index():\n    assert sum_elements_times_index([1, 2, 3, 4]) == [0, 2, 6, 12]\n    assert sum_elements_times_index([0, 0, 0]) == [0, 0, 0]\n    assert sum_elements_times_index([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_multiplied_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a * b) - a)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_multiplied_lists():\n    assert diff_of_multiplied_lists([1, 2, 3], [4, 5, 6]) == [3, 8, 15]\n    assert diff_of_multiplied_lists([0, 0], [0, 0]) == [0, 0]\n    assert diff_of_multiplied_lists([1], [2]) == [1]\n    assert diff_of_multiplied_lists([], [2]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_unique_in_both_lists_and_sum(lst1, lst2):\n    result = []\n    total_sum = 0\n    for num in lst1:\n        if num not in lst2:\n            result.append(num)\n            total_sum += num\n    for num in lst2:\n        if num not in lst1:\n            result.append(num)\n            total_sum += num\n    if not result:\n        return None\n    return total_sum"}, {"role": "assistant", "content": "def test_find_unique_in_both_lists_and_sum():\n    assert find_unique_in_both_lists_and_sum([1, 2, 3], [3, 4, 5]) == 12\n    assert find_unique_in_both_lists_and_sum([1, 2, 3], [1, 2, 3]) is None\n    assert find_unique_in_both_lists_and_sum([], [1, 2, 3]) == 6"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_difference_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a * b) - (b - a))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_difference_of_lists():\n    assert multiply_by_difference_of_lists([1, 2, 3], [4, 5, 6]) == [1, 7, 15]\n    assert multiply_by_difference_of_lists([0, 0], [0, 0]) == [0, 0]\n    assert multiply_by_difference_of_lists([1], [2]) == [1]\n    assert multiply_by_difference_of_lists([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_difference_of_elements_and_squares(lst):\n    result = []\n    for num in lst:\n        result.append(num - num**2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_difference_of_elements_and_squares():\n    assert find_difference_of_elements_and_squares([1, 2, 3]) == [0, -2, -6]\n    assert find_difference_of_elements_and_squares([0]) == [0]\n    assert find_difference_of_elements_and_squares([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_and_divisible_by_5(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2 and num % 5 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_and_divisible_by_5():\n    assert find_common_and_divisible_by_5([5, 10, 15], [5, 15, 20]) == [5, 15]\n    assert find_common_and_divisible_by_5([1, 2, 3], [4, 5, 6]) is None\n    assert find_common_and_divisible_by_5([], [5, 10, 15]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_less_than_all_and_gt_10(lst1, lst2):\n    result = []\n    for num in lst1:\n        if all(num < x for x in lst2) and num > 10:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_less_than_all_and_gt_10():\n    assert find_less_than_all_and_gt_10([5, 15, 25], [10, 20, 30]) is None\n    assert find_less_than_all_and_gt_10([5, 6], [1, 2]) is None\n    assert find_less_than_all_and_gt_10([15, 20], [30, 40]) == [15, 20]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_4_not_12(lst):\n    result = []\n    for num in lst:\n        if num % 2 == 0 and num % 4 == 0 and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_4_not_12():\n    assert find_divisible_by_2_and_4_not_12([8, 16, 24]) == [8, 16]\n    assert find_divisible_by_2_and_4_not_12([3, 6, 9]) is None\n    assert find_divisible_by_2_and_4_not_12([12, 24, 36]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_diff_between_square_and_cube(lst):\n    result = []\n    for num in lst:\n        result.append(num**2 - num**3)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_diff_between_square_and_cube():\n    assert find_diff_between_square_and_cube([2, 3, 4]) == [-4, -18, -48]\n    assert find_diff_between_square_and_cube([1, 0, -1]) == [0, 0, 2]\n    assert find_diff_between_square_and_cube([]) is None\n    assert find_diff_between_square_and_cube([0]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_elements_by_index(lst):\n    result = []\n    for i, num in enumerate(lst):\n        result.append(num ** i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_elements_by_index():\n    assert power_elements_by_index([1, 2, 3, 4]) == [1, 2, 9, 64]\n    assert power_elements_by_index([5, 6]) == [1, 6]\n    assert power_elements_by_index([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_squares_of_two_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a**2 - b**2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_squares_of_two_lists():\n    assert subtract_squares_of_two_lists([5], []) is None\n    assert subtract_squares_of_two_lists([2, 3, 4], [1, 2, 3]) == [3, 5, 7]\n    assert subtract_squares_of_two_lists([5], [3]) == [16]\n    assert subtract_squares_of_two_lists([1, 2], [2, 1]) == [-3, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_divided_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result.append(a - (a / b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_divided_lists():\n    assert subtract_divided_lists([], [2, 4, 6]) is None\n    assert subtract_divided_lists([10, 20, 30], [2, 4, 6]) == [5.0, 15.0, 25.0]\n    assert subtract_divided_lists([1, 2, 3], []) is None\n    assert subtract_divided_lists([1, 2, 3], [1, 1, 1]) == [0.0, 0.0, 0.0]\n    assert subtract_divided_lists([5, 10], [0, 5]) == [8.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_elements_times_index_v2(lst):\n    result = []\n    for i, num in enumerate(lst):\n        result.append(num * (i + 1))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_elements_times_index_v2():\n    assert sum_elements_times_index_v2([1, 2, 3, 4]) == [1, 4, 9, 16]\n    assert sum_elements_times_index_v2([0, 0, 0]) == [0, 0, 0]\n    assert sum_elements_times_index_v2([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_and_8(lst):\n    result = []\n    for num in lst:\n        if num % 6 == 0 and num % 8 == 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_6_and_8():\n    assert find_divisible_by_6_and_8([24, 48, 72]) == [24, 48, 72]\n    assert find_divisible_by_6_and_8([12, 18, 30]) is None\n    assert find_divisible_by_6_and_8([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_diff_and_factorials(lst):\n    result = []\n    for num in lst:\n        fact = 1\n        for i in range(1, num + 1):\n            fact *= i\n        result.append(num - fact)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_diff_and_factorials():\n    assert find_diff_and_factorials([3, 4, 5]) == [-3, -20, -115]\n    assert find_diff_and_factorials([0, 1, 2]) == [-1, 0, 0]\n    assert find_diff_and_factorials([]) is None\n    assert find_diff_and_factorials([6]) == [-714]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_lists_if_less_than_100(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        product = a * b\n        if product < 100:\n            result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_lists_if_less_than_100():\n    assert multiply_lists_if_less_than_100([5, 10, 20], [3, 4, 2]) == [15, 40, 40]\n    assert multiply_lists_if_less_than_100([10], [10]) is None\n    assert multiply_lists_if_less_than_100([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_powers_by_index(lst):\n    result = []\n    for i, num in enumerate(lst):\n        result.append(num ** (i + 1))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_powers_by_index():\n    assert find_powers_by_index([2, 3, 4]) == [2, 9, 64]\n    assert find_powers_by_index([5, 6]) == [5, 36]\n    assert find_powers_by_index([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_lists_with_index(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] - lst2[i]) * i)\n        else:\n            result.append(lst1[i] * i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_lists_with_index():\n    assert subtract_lists_with_index([10, 20, 30], [1, 2, 3]) == [0, 18, 54]\n    assert subtract_lists_with_index([1, 2, 3], [3, 2, 1]) == [0, 0, 4]\n    assert subtract_lists_with_index([], []) is None\n    assert subtract_lists_with_index([6, 7, 2], [8, 8]) == [0, -1, 4]\n    assert subtract_lists_with_index([5, 10], [5, 5]) == [0, 5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_divided_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result.append(a / b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_divided_lists():\n    assert sum_divided_lists([10, 20, 30], [2, 4, 5]) == [5.0, 5.0, 6.0]\n    assert sum_divided_lists([0, 0, 0], [1, 1, 1]) == [0.0, 0.0, 0.0]\n    assert sum_divided_lists([1, 2, 3], [0, 1, 2]) == [2.0, 1.5]\n    assert sum_divided_lists([5, 10], [0, 0]) is None\n    assert sum_divided_lists([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a**2 - b**2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares():\n    assert diff_of_squares([3, 4], [1, 2]) == [8, 12]\n    assert diff_of_squares([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert diff_of_squares([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\n    assert diff_of_squares([1, 2], []) is None\n    assert diff_of_squares([], [1, 2]) is None\n    assert diff_of_squares([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_not_14_or_21(lst):\n    result = []\n    for num in lst:\n        if num % 7 == 0 and num % 14 != 0 and num % 21 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_7_not_14_or_21():\n    assert find_divisible_by_7_not_14_or_21([7, 14, 21, 28, 35]) == [7, 35]\n    assert find_divisible_by_7_not_14_or_21([7, 49, 56]) == [7, 49]\n    assert find_divisible_by_7_not_14_or_21([14, 28, 42]) is None\n    assert find_divisible_by_7_not_14_or_21([1, 2, 3]) is None\n    assert find_divisible_by_7_not_14_or_21([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_and_diff_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a + b) - (b - a))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_and_diff_of_lists():\n    assert sum_and_diff_of_lists([1, 2, 3], [1, 2, 3]) == [2, 4, 6]\n    assert sum_and_diff_of_lists([10, 20], [5, 5]) == [20, 40]\n    assert sum_and_diff_of_lists([0, 0, 0], [1, 2, 3]) == [0, 0, 0]\n    assert sum_and_diff_of_lists([1, 2], []) is None\n    assert sum_and_diff_of_lists([], [1, 2]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_lists_if_greater_than_50(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        product = a * b\n        if product > 50:\n            result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_lists_if_greater_than_50():\n    assert multiply_lists_if_greater_than_50([10, 20, 30], [6, 3, 2]) == [60, 60, 60]\n    assert multiply_lists_if_greater_than_50([5, 10, 15], [1, 6, 4]) == [60, 60]\n    assert multiply_lists_if_greater_than_50([1, 2, 3], [1, 2, 3]) is None\n    assert multiply_lists_if_greater_than_50([10, 10, 10], [1, 1, 1]) is None\n    assert multiply_lists_if_greater_than_50([100], [1]) == [100]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_8_not_24(lst):\n    result = []\n    for num in lst:\n        if num % 8 == 0 and num % 24 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_8_not_24():\n    assert find_divisible_by_8_not_24([8, 16, 24, 32, 48]) == [8, 16, 32]\n    assert find_divisible_by_8_not_24([8, 48]) == [8]\n    assert find_divisible_by_8_not_24([24, 48, 72]) is None\n    assert find_divisible_by_8_not_24([1, 2, 3]) is None\n    assert find_divisible_by_8_not_24([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_all_squares(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    sum_sq_lst1 = sum([num ** 2 for num in lst1])\n    sum_sq_lst2 = sum([num ** 2 for num in lst2])\n    result.append(sum_sq_lst1 - sum_sq_lst2)\n    return result"}, {"role": "assistant", "content": "def test_diff_of_all_squares():\n    assert diff_of_all_squares([1, 2, 3], [4, 5, 6]) == [-63]\n    assert diff_of_all_squares([0], [0]) == [0]\n    assert diff_of_all_squares([1, 1, 1], [1, 1, 1]) == [0]\n    assert diff_of_all_squares([3, 3], [2, 2]) == [10]\n    assert diff_of_all_squares([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_and_sum_gt_20(lst1, lst2):\n    result = []\n    for num in lst1:\n        if num in lst2 and (num + num > 20):\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_and_sum_gt_20():\n    assert find_common_and_sum_gt_20([15, 30, 45], [15, 30, 50]) == [15, 30]\n    assert find_common_and_sum_gt_20([10, 20], [10, 30]) is None\n    assert find_common_and_sum_gt_20([1, 2, 3], [1, 2, 3]) is None\n    assert find_common_and_sum_gt_20([25], [25]) == [25]\n    assert find_common_and_sum_gt_20([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_with_remainder(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result.append(a % b)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_with_remainder():\n    assert divide_with_remainder([10, 20, 30], [3, 4, 5]) == [1, 0, 0]\n    assert divide_with_remainder([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert divide_with_remainder([5, 10, 15], [2, 3, 4]) == [1, 1, 3]\n    assert divide_with_remainder([5, 5], [0, 1]) == [0]\n    assert divide_with_remainder([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_if_greater_than_100(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        product = a * b\n        if product > 100:\n            result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_if_greater_than_100():\n    assert multiply_if_greater_than_100([10, 20, 30], [11, 6, 4]) == [110, 120, 120]\n    assert multiply_if_greater_than_100([15, 25], [5, 5]) == [125]\n    assert multiply_if_greater_than_100([1, 2, 3], [100, 50, 25]) is None\n    assert multiply_if_greater_than_100([10, 10, 10], [9, 9, 9]) is None\n    assert multiply_if_greater_than_100([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_by_index(lst1, lst2):\n    result = []\n    for i, num in enumerate(lst1):\n        if i < len(lst2):\n            result.append(num - lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_by_index():\n    assert subtract_by_index([10, 20, 30], [1, 2, 3]) == [9, 18, 27]\n    assert subtract_by_index([1, 2, 3], [0, 1, 2]) == [1, 1, 1]\n    assert subtract_by_index([5, 10, 15], [5, 5, 5]) == [0, 5, 10]\n    assert subtract_by_index([5, 5], []) is None\n    assert subtract_by_index([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_by_index(lst):\n    result = []\n    for i, num in enumerate(lst):\n        result.append(num ** (i + 1))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_by_index():\n    assert power_by_index([2, 2, 2]) == [2, 4, 8]\n    assert power_by_index([1, 2, 3]) == [1, 4, 27]\n    assert power_by_index([0, 1, 2]) == [0, 1, 8]\n    assert power_by_index([]) is None\n    assert power_by_index([5, 6]) == [5, 36]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_divided_by_index(lst1, lst2):\n    result = []\n    for i, (a, b) in enumerate(zip(lst1, lst2)):\n        if i != 0:\n            result.append((a - b) / i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_divided_by_index():\n    assert diff_divided_by_index([10, 20, 30], [1, 2, 3]) == [18.0, 13.5]\n    assert diff_divided_by_index([1, 2, 3], [3, 2, 1]) == [0.0, 1.0]\n    assert diff_divided_by_index([5, 10, 15], [5, 5, 5]) == [5.0, 5.0]\n    assert diff_divided_by_index([1, 2, 3], [1, 2]) == [0.0]\n    assert diff_divided_by_index([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_len_of_other_list(lst1, lst2):\n    result = []\n    len_lst2 = len(lst2)\n    for num in lst1:\n        result.append(num * len_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_len_of_other_list():\n    assert multiply_by_len_of_other_list([1, 2, 3], [1, 2]) == [2, 4, 6]\n    assert multiply_by_len_of_other_list([5, 10], [1]) == [5, 10]\n    assert multiply_by_len_of_other_list([], [1, 2, 3]) is None\n    assert multiply_by_len_of_other_list([3], [1, 2, 3, 4]) == [12]\n    assert multiply_by_len_of_other_list([2, 4, 6], [1]) == [2, 4, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_and_multiply_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b + (a * b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_and_multiply_lists():\n    assert sum_and_multiply_lists([1, 2, 3], [4, 5, 6]) == [9, 17, 27]\n    assert sum_and_multiply_lists([1, 1, 1], [1, 1, 1]) == [3, 3, 3]\n    assert sum_and_multiply_lists([0, 0, 0], [1, 1, 1]) == [1, 1, 1]\n    assert sum_and_multiply_lists([1, 2, 3], [0, 0, 0]) == [1, 2, 3]\n    assert sum_and_multiply_lists([], [1, 2, 3]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_and_product_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a + b) * (a * b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_and_product_of_lists():\n    assert sum_and_product_of_lists([1, 2], [3, 4]) == [12, 48]\n    assert sum_and_product_of_lists([2, 3], [4, 5]) == [48, 120]\n    assert sum_and_product_of_lists([1, 2], [0, 0]) == [0, 0]\n    assert sum_and_product_of_lists([1, 1], [1, 1]) == [2, 2]\n    assert sum_and_product_of_lists([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_not_8_or_16(lst):\n    result = []\n    for num in lst:\n        if num % 4 == 0 and num % 8 != 0 and num % 16 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4_not_8_or_16():\n    assert find_divisible_by_4_not_8_or_16([4, 8, 12, 16, 20]) == [4, 12, 20]\n    assert find_divisible_by_4_not_8_or_16([4, 20, 28]) == [4, 20, 28]\n    assert find_divisible_by_4_not_8_or_16([8, 16, 32]) is None\n    assert find_divisible_by_4_not_8_or_16([1, 2, 3]) is None\n    assert find_divisible_by_4_not_8_or_16([]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_by_other_list_index(lst1, lst2):\n    result = []\n    for i, num in enumerate(lst2):\n        if i < len(lst1):\n            result.append(lst1[i] - num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_by_other_list_index():\n    assert subtract_by_other_list_index([10, 20], [1, 2]) == [9, 18]\n    assert subtract_by_other_list_index([5, 10], [5, 0]) == [0, 10]\n    assert subtract_by_other_list_index([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert subtract_by_other_list_index([], [1, 2, 3]) is None\n    assert subtract_by_other_list_index([1, 2, 3], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_by_index(lst1, lst2):\n    result = []\n    for i, num in enumerate(lst2):\n        if i != 0:\n            result.append(lst1[i] / i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_by_index():\n    assert divide_by_index([10, 20, 30], [1, 2, 3]) == [20.0, 15.0]\n    assert divide_by_index([1, 2, 3], [3, 2, 1]) == [2.0, 1.5]\n    assert divide_by_index([5, 10, 15], [5, 5, 5]) == [10.0, 7.5]\n    assert divide_by_index([1, 2, 3], [1, 2]) == [2]\n    assert divide_by_index([], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_multiplied_by_index(lst1, lst2):\n    result = []\n    for i, num in enumerate(lst2):\n        if i < len(lst1):\n            result.append((lst1[i] - num) * i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_multiplied_by_index():\n    assert diff_multiplied_by_index([10, 20], [5, 5]) == [0, 15]\n    assert diff_multiplied_by_index([5, 10], [2, 1]) == [0, 9]\n    assert diff_multiplied_by_index([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert diff_multiplied_by_index([], [1, 2, 3]) is None\n    assert diff_multiplied_by_index([1, 2, 3], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_and_indexes(lst1, lst2):\n    result = []\n    for i, num in enumerate(lst2):\n        if i < len(lst1):\n            result.append((lst1[i] ** 2) - i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_and_indexes():\n    assert diff_of_squares_and_indexes([2, 4, 6], [0, 1, 2]) == [4, 15, 34]\n    assert diff_of_squares_and_indexes([3, 5], [2, 2]) == [9, 24]\n    assert diff_of_squares_and_indexes([], [1, 2]) is None\n    assert diff_of_squares_and_indexes([1], []) is None\n    assert diff_of_squares_and_indexes([1], [0]) == [1]\n    assert diff_of_squares_and_indexes([2], [3, 4]) == [4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_lists_and_products(lst1, lst2):\n    result = []\n    product_lst2 = 1\n    for num in lst2:\n        product_lst2 *= num\n    for num in lst1:\n        result.append(num - product_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_lists_and_products():\n    assert diff_of_lists_and_products([5, 10, 15], [2, 3]) == [-1, 4, 9]\n    assert diff_of_lists_and_products([6, 8], [1, 2, 3]) == [0, 2]\n    assert diff_of_lists_and_products([1, 1, 1], [2, 2, 2]) == [-7, -7, -7]\n    assert diff_of_lists_and_products([3], [1, 1, 1, 1]) == [2]\n    assert diff_of_lists_and_products([3, 4, 5], []) == [2, 3, 4]\n    assert diff_of_lists_and_products([], [1, 2, 3]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_by_sum_of_other_list(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    if sum_lst2 < 0 or sum_lst2 > 10:\n        return None\n    for num in lst1:\n        result.append(num ** sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_by_sum_of_other_list():\n    assert power_by_sum_of_other_list([2, 3], [1, 1]) == [4, 9]\n    assert power_by_sum_of_other_list([4], [-1, -1, 1]) is None\n    assert power_by_sum_of_other_list([5], [3, 2]) == [3125]\n    assert power_by_sum_of_other_list([], [1, 2, 3]) is None\n    assert power_by_sum_of_other_list([2], [10]) == [1024]\n    assert power_by_sum_of_other_list([1, 1, 1], [0, 0, 0]) == [1, 1, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_with_index(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] ** 2 - lst2[i] ** 2) + i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_with_index():\n    assert diff_of_squares_with_index([3, 5], [2, 1]) == [5, 25]\n    assert diff_of_squares_with_index([6, 8], [1, 1]) == [35, 64]\n    assert diff_of_squares_with_index([4, 7, 9], [3, 6, 2]) == [7, 14, 79]\n    assert diff_of_squares_with_index([], [1, 2, 3]) is None\n    assert diff_of_squares_with_index([2, 4, 6], []) is None\n    assert diff_of_squares_with_index([1, 2], [2, 2]) == [-3, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_division_of_other_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2) and lst2[i] != 0:\n            result.append(lst1[i] * (1 / lst2[i]))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_division_of_other_list():\n    assert multiply_by_division_of_other_list([6, 8, 10], [2, 4, 5]) == [3.0, 2.0, 2.0]\n    assert multiply_by_division_of_other_list([9, 12], [3, 4]) == [3.0, 3.0]\n    assert multiply_by_division_of_other_list([2], [2, 2, 2]) == [1.0]\n    assert multiply_by_division_of_other_list([5], [1]) == [5.0]\n    assert multiply_by_division_of_other_list([], [2, 4, 6]) is None\n    assert multiply_by_division_of_other_list([3, 5], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_by_index_of_other_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] ** lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_by_index_of_other_list():\n    assert power_by_index_of_other_list([2, 3, 4], [2, 3, 2]) == [4, 27, 16]\n    assert power_by_index_of_other_list([5, 6], [1, 0]) == [5, 1]\n    assert power_by_index_of_other_list([7, 8], [0, 1]) == [1, 8]\n    assert power_by_index_of_other_list([2], [2]) == [4]\n    assert power_by_index_of_other_list([], [1, 2, 3]) is None\n    assert power_by_index_of_other_list([4, 5], []) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_9_not_12(lst):\n    result = []\n    for num in lst:\n        if num % 9 == 0 and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_9_not_12():\n    assert find_divisible_by_9_not_12([9, 18, 27]) == [9, 18, 27]\n    assert find_divisible_by_9_not_12([36, 45, 54]) == [45, 54]\n    assert find_divisible_by_9_not_12([12, 24, 48]) is None\n    assert find_divisible_by_9_not_12([81, 99]) == [81, 99]\n    assert find_divisible_by_9_not_12([72, 108]) is None\n    assert find_divisible_by_9_not_12([5, 7, 11]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_and_indexes_from_other_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] ** 2 - lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_and_indexes_from_other_list():\n    assert diff_of_squares_and_indexes_from_other_list([3, 4], [1, 2]) == [8, 14]\n    assert diff_of_squares_and_indexes_from_other_list([5, 6], [0, 3]) == [25, 33]\n    assert diff_of_squares_and_indexes_from_other_list([7, 8], [6, 1]) == [43, 63]\n    assert diff_of_squares_and_indexes_from_other_list([], [1, 2, 3]) is None\n    assert diff_of_squares_and_indexes_from_other_list([2, 3], []) is None\n    assert diff_of_squares_and_indexes_from_other_list([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_by_index_of_other_list(lst1, lst2):\n    result = []\n    for i in range(len(lst2)):\n        if i < len(lst1) and i != 0:\n            result.append(lst1[i] / i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_by_index_of_other_list():\n    assert divide_by_index_of_other_list([10, 20, 30], [1, 2, 3]) == [20.0, 15.0]\n    assert divide_by_index_of_other_list([4, 8, 12], [2, 1, 0]) == [8.0, 6.0]\n    assert divide_by_index_of_other_list([6, 12], [3, 6]) == [12.0]\n    assert divide_by_index_of_other_list([], [1, 2, 3]) is None\n    assert divide_by_index_of_other_list([1, 2, 3], []) is None\n    assert divide_by_index_of_other_list([5], [5]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_if_less_than_50(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            product = lst1[i] * lst2[i]\n            if product < 50:\n                result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_if_less_than_50():\n    assert multiply_by_index_if_less_than_50([2, 3, 4], [10, 5, 2]) == [20, 15, 8]\n    assert multiply_by_index_if_less_than_50([5, 6], [8, 4]) == [40, 24]\n    assert multiply_by_index_if_less_than_50([1, 7], [6, 6]) == [6, 42]\n    assert multiply_by_index_if_less_than_50([], [1, 2, 3]) is None\n    assert multiply_by_index_if_less_than_50([1, 2, 3], []) is None\n    assert multiply_by_index_if_less_than_50([10], [10]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_and_9_not_12(lst):\n    result = []\n    for num in lst:\n        if num % 6 == 0 and num % 9 == 0 and num % 12 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_6_and_9_not_12():\n    assert find_divisible_by_6_and_9_not_12([18, 36, 54]) == [18, 54]\n    assert find_divisible_by_6_and_9_not_12([72, 90, 108]) == [90]\n    assert find_divisible_by_6_and_9_not_12([24, 48]) is None\n    assert find_divisible_by_6_and_9_not_12([54, 81]) == [54]\n    assert find_divisible_by_6_and_9_not_12([60, 120]) is None\n    assert find_divisible_by_6_and_9_not_12([1, 3, 5]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_and_sum_of_other_list(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        result.append(num ** 2 - sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_and_sum_of_other_list():\n    assert diff_of_squares_and_sum_of_other_list([3, 4], [1, 2]) == [6, 13]\n    assert diff_of_squares_and_sum_of_other_list([5, 6], [1, 1, 1]) == [22, 33]\n    assert diff_of_squares_and_sum_of_other_list([7, 8], [2, 2, 2]) == [43, 58]\n    assert diff_of_squares_and_sum_of_other_list([], [1, 2, 3]) is None\n    assert diff_of_squares_and_sum_of_other_list([2, 3], []) == [4, 9]\n    assert diff_of_squares_and_sum_of_other_list([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_divided_index(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2) and i != 0:\n            result.append((lst1[i] * lst2[i]) / i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_divided_index():\n    assert multiply_by_divided_index([4, 8, 12], [2, 1, 2]) == [8.0, 12.0]\n    assert multiply_by_divided_index([5, 10], [1, 2]) == [20.0]\n    assert multiply_by_divided_index([6, 12], [3, 3]) == [36.0]\n    assert multiply_by_divided_index([], [1, 2, 3]) is None\n    assert multiply_by_divided_index([1, 2, 3], []) is None\n    assert multiply_by_divided_index([2], [2]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_sum_of_other_list_v2(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        result.append(num * sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_sum_of_other_list_v2():\n    assert multiply_by_sum_of_other_list_v2([2, 3], [1, 2, 3]) == [12, 18]\n    assert multiply_by_sum_of_other_list_v2([4, 5], [1, 1, 1, 1]) == [16, 20]\n    assert multiply_by_sum_of_other_list_v2([6], [2, 2, 2]) == [36]\n    assert multiply_by_sum_of_other_list_v2([], [1, 2, 3]) is None\n    assert multiply_by_sum_of_other_list_v2([2, 3], []) == [0, 0]\n    assert multiply_by_sum_of_other_list_v2([1], [1]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef subtract_from_product_of_other_list_v2(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a - (a * b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_subtract_from_product_of_other_list_v2():\n    assert subtract_from_product_of_other_list_v2([2, 4], [1, 2]) == [0, -4]\n    assert subtract_from_product_of_other_list_v2([5, 7], [1, 1]) == [0, 0]\n    assert subtract_from_product_of_other_list_v2([6, 8], [0, 3]) == [6, -16]\n    assert subtract_from_product_of_other_list_v2([], [1, 2, 3]) is None\n    assert subtract_from_product_of_other_list_v2([2, 3], []) is None\n    assert subtract_from_product_of_other_list_v2([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_and_multiply_by_index(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] - lst2[i]) * i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_and_multiply_by_index():\n    assert diff_and_multiply_by_index([2, 4], [1, 2]) == [0, 2]\n    assert diff_and_multiply_by_index([3, 5], [1, 1]) == [0, 4]\n    assert diff_and_multiply_by_index([6, 8], [3, 2]) == [0, 6]\n    assert diff_and_multiply_by_index([], [1, 2, 3]) is None\n    assert diff_and_multiply_by_index([2, 3], []) is None\n    assert diff_and_multiply_by_index([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_by_index_of_list(lst):\n    result = []\n    for i in range(len(lst)):\n        if i != 0:\n            result.append(lst[i] / i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_by_index_of_list():\n    assert divide_by_index_of_list([10, 20, 30]) == [20.0, 15.0]\n    assert divide_by_index_of_list([4, 8, 12]) == [8.0, 6.0]\n    assert divide_by_index_of_list([6, 12]) == [12.0]\n    assert divide_by_index_of_list([]) is None\n    assert divide_by_index_of_list([1, 2, 3]) == [2.0, 1.5]\n    assert divide_by_index_of_list([5]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_lists_and_multiplied_by_other_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] - lst2[i]) * lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_lists_and_multiplied_by_other_list():\n    assert diff_of_lists_and_multiplied_by_other_list([4, 5], [2, 3]) == [4, 6]\n    assert diff_of_lists_and_multiplied_by_other_list([3, 6], [1, 2]) == [2, 8]\n    assert diff_of_lists_and_multiplied_by_other_list([7, 8], [3, 4]) == [12, 16]\n    assert diff_of_lists_and_multiplied_by_other_list([], [1, 2, 3]) is None\n    assert diff_of_lists_and_multiplied_by_other_list([2, 3], []) is None\n    assert diff_of_lists_and_multiplied_by_other_list([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_and_sum_v2(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        result.append((num ** 2) - sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_and_sum_v2():\n    assert diff_of_squares_and_sum_v2([3, 4], [1, 2]) == [6, 13]\n    assert diff_of_squares_and_sum_v2([5, 6], [1, 1, 1]) == [22, 33]\n    assert diff_of_squares_and_sum_v2([7, 8], [2, 2, 2]) == [43, 58]\n    assert diff_of_squares_and_sum_v2([], [1, 2, 3]) is None\n    assert diff_of_squares_and_sum_v2([2, 3], []) == [4, 9]\n    assert diff_of_squares_and_sum_v2([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_product_and_square(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a * b) - (a ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_product_and_square():\n    assert diff_of_product_and_square([2, 4], [1, 2]) == [-2, -8]\n    assert diff_of_product_and_square([3, 5], [2, 1]) == [-3, -20]\n    assert diff_of_product_and_square([6, 8], [0, 2]) == [-36, -48]\n    assert diff_of_product_and_square([], [1, 2, 3]) is None\n    assert diff_of_product_and_square([2, 3], []) is None\n    assert diff_of_product_and_square([1], [1]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_and_7_not_18(lst):\n    result = []\n    for num in lst:\n        if num % 4 == 0 and num % 7 == 0 and num % 18 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_4_and_7_not_18():\n    assert find_divisible_by_4_and_7_not_18([28, 56, 14, 7]) == [28, 56]\n    assert find_divisible_by_4_and_7_not_18([14, 21, 35]) is None\n    assert find_divisible_by_4_and_7_not_18([]) is None\n    assert find_divisible_by_4_and_7_not_18([8, 16, 32, 64]) is None\n    assert find_divisible_by_4_and_7_not_18([28, 56]) == [28, 56]\n    assert find_divisible_by_4_and_7_not_18([28]) == [28]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_and_diff_of_lists_v2(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b - 2*a)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_and_diff_of_lists_v2():\n    assert sum_and_diff_of_lists_v2([1, 2, 3], [4, 5, 6]) == [3, 3, 3]\n    assert sum_and_diff_of_lists_v2([], []) is None\n    assert sum_and_diff_of_lists_v2([1, 2], [1, 2]) == [0, 0]\n    assert sum_and_diff_of_lists_v2([3, 5, 7], [3, 5, 7]) == [0, 0, 0]\n    assert sum_and_diff_of_lists_v2([10, 20, 30], [15, 25, 35]) == [5, 5, 5]\n    assert sum_and_diff_of_lists_v2([1], [2]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_all_and_sum_other_list(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        result.append(num * sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_all_and_sum_other_list():\n    assert multiply_all_and_sum_other_list([1, 2, 3], [4, 5, 6]) == [15, 30, 45]\n    assert multiply_all_and_sum_other_list([], [4, 5, 6]) is None\n    assert multiply_all_and_sum_other_list([1, 2, 3], []) == [0, 0, 0]\n    assert multiply_all_and_sum_other_list([1, 2], [1, 2]) == [3, 6]\n    assert multiply_all_and_sum_other_list([3, 5, 7], [3, 5, 7]) == [45, 75, 105]\n    assert multiply_all_and_sum_other_list([10, 20, 30], [15, 25, 35]) == [750, 1500, 2250]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_lists_and_sum_other_list(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        result.append(num - sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_lists_and_sum_other_list():\n    assert diff_of_lists_and_sum_other_list([10, 20, 30], [1, 2, 3]) == [4, 14, 24]\n    assert diff_of_lists_and_sum_other_list([], []) is None\n    assert diff_of_lists_and_sum_other_list([1, 2, 3], [1, 2, 3]) == [-5, -4, -3]\n    assert diff_of_lists_and_sum_other_list([10, 20, 30], [10, 20, 30]) == [-50, -40, -30]\n    assert diff_of_lists_and_sum_other_list([5, 10, 15], [5, 10, 15]) == [-25, -20, -15]\n    assert diff_of_lists_and_sum_other_list([1, 2], [3, 4]) == [-6, -5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_and_division_by_other_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2) and lst2[i] != 0:\n            result.append((lst1[i] ** 2) / lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_and_division_by_other_list():\n    assert diff_of_squares_and_division_by_other_list([4, 9, 16], [2, 3, 4]) == [8.0, 27.0, 64.0]\n    assert diff_of_squares_and_division_by_other_list([4, 9, 16], [0, 0, 0]) is None\n    assert diff_of_squares_and_division_by_other_list([], []) is None\n    assert diff_of_squares_and_division_by_other_list([1, 2, 3], [1, 2, 3]) == [1.0, 2.0, 3.0]\n    assert diff_of_squares_and_division_by_other_list([10, 20, 30], [5, 10, 15]) == [20.0, 40.0, 60.0]\n    assert diff_of_squares_and_division_by_other_list([25, 36, 49], [5, 6, 7]) == [125.0, 216.0, 343.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_diff_of_lists(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] * (lst1[i] - lst2[i]))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_diff_of_lists():\n    assert multiply_by_diff_of_lists([4, 9, 16], [2, 3, 4]) == [8, 54, 192]\n    assert multiply_by_diff_of_lists([4, 9, 16], [0, 0, 0]) == [16, 81, 256]\n    assert multiply_by_diff_of_lists([], []) is None\n    assert multiply_by_diff_of_lists([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert multiply_by_diff_of_lists([10, 20, 30], [5, 10, 15]) == [50, 200, 450]\n    assert multiply_by_diff_of_lists([25, 36, 49], [5, 6, 7]) == [500, 1080, 2058]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_not_10_and_15(lst):\n    result = []\n    for num in lst:\n        if num % 5 == 0 and num % 10 != 0 and num % 15 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_5_not_10_and_15():\n    assert find_divisible_by_5_not_10_and_15([5, 15, 20, 25, 30]) == [5, 25]\n    assert find_divisible_by_5_not_10_and_15([10, 20, 30, 40]) is None\n    assert find_divisible_by_5_not_10_and_15([]) is None\n    assert find_divisible_by_5_not_10_and_15([35, 45, 55]) == [35, 55]\n    assert find_divisible_by_5_not_10_and_15([50, 60, 70]) is None\n    assert find_divisible_by_5_not_10_and_15([75, 85, 95]) == [85, 95]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_all_lists(lst1, lst2):\n    result = []\n    diff_lst2 = sum(lst2) - sum(lst1)\n    for num in lst1:\n        result.append(num - diff_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_all_lists():\n    assert diff_of_all_lists([10, 20, 30], [5, 10, 15]) == [40, 50, 60]\n    assert diff_of_all_lists([], []) is None\n    assert diff_of_all_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert diff_of_all_lists([10, 20, 30], [1, 2, 3]) == [64, 74, 84]\n    assert diff_of_all_lists([5, 10, 15], [2, 4, 6]) == [23, 28, 33]\n    assert diff_of_all_lists([1, 2], [3, 4]) == [-3, -2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_products(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a * b) - (a * 2 * b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_products():\n    assert diff_of_products([1, 2, 3], [4, 5, 6]) == [-4, -10, -18]\n    assert diff_of_products([], []) is None\n    assert diff_of_products([1, 2, 3], [1, 2, 3]) == [-1, -4, -9]\n    assert diff_of_products([10, 20, 30], [1, 2, 3]) == [-10, -40, -90]\n    assert diff_of_products([5, 10, 15], [2, 4, 6]) == [-10, -40, -90]\n    assert diff_of_products([1, 2], [3, 4]) == [-3, -8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef sum_and_positive_diff(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        diff = a - b\n        if diff > 0:\n            result.append(a + diff)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_sum_and_positive_diff():\n    assert sum_and_positive_diff([10, 20, 30], [5, 10, 15]) == [15, 30, 45]\n    assert sum_and_positive_diff([], []) is None\n    assert sum_and_positive_diff([1, 2, 3], [1, 2, 3]) is None\n    assert sum_and_positive_diff([10, 20, 30], [1, 2, 3]) == [19, 38, 57]\n    assert sum_and_positive_diff([5, 10, 15], [1, 5, 10]) == [9, 15, 20]\n    assert sum_and_positive_diff([0, 0, 0], [0, 0, 0]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_with_remainder(lst1, lst2):\n    result = []\n    for i, num in enumerate(lst1):\n        if i < len(lst2):\n            product = num * lst2[i]\n            result.append(product % 3)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_with_remainder():\n    assert multiply_by_index_with_remainder([1, 2, 3], [4, 5, 6]) == [1, 1, 0]\n    assert multiply_by_index_with_remainder([], []) is None\n    assert multiply_by_index_with_remainder([1, 2], [1, 2]) == [1, 1]\n    assert multiply_by_index_with_remainder([3, 5, 7], [3, 5, 7]) == [0, 1, 1]\n    assert multiply_by_index_with_remainder([10, 20, 30], [15, 25, 35]) == [0, 2, 0]\n    assert multiply_by_index_with_remainder([1], [2]) == [2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append((a ** 2) - (b ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_of_lists():\n    assert diff_of_squares_of_lists([4, 9, 16], [2, 3, 4]) == [12, 72, 240]\n    assert diff_of_squares_of_lists([], []) is None\n    assert diff_of_squares_of_lists([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n    assert diff_of_squares_of_lists([10, 20, 30], [10, 20, 30]) == [0, 0, 0]\n    assert diff_of_squares_of_lists([5, 10, 15], [5, 10, 15]) == [0, 0, 0]\n    assert diff_of_squares_of_lists([1, 2], [3, 4]) == [-8, -12]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_and_divide_by_condition(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        if b != 0:\n            result_value = (a * b) / b\n            if result_value > 10:\n                result.append(result_value)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_and_divide_by_condition():\n    assert multiply_and_divide_by_condition([1, 2, 3], [4, 5, 6]) is None\n    assert multiply_and_divide_by_condition([], []) is None\n    assert multiply_and_divide_by_condition([1, 2, 3], [1, 2, 3]) is None\n    assert multiply_and_divide_by_condition([10, 20, 30], [5, 10, 15]) == [20.0, 30.0]\n    assert multiply_and_divide_by_condition([5, 10, 15], [2, 4, 6]) == [15.0]\n    assert multiply_and_divide_by_condition([1, 2], [3, 4]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_from_product_of_other_list(lst1, lst2):\n    result = []\n    product_lst2 = 1\n    for num in lst2:\n        product_lst2 *= num\n    for num in lst1:\n        result.append(num - product_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_from_product_of_other_list():\n    assert diff_from_product_of_other_list([10, 20, 30], [1, 2, 3]) == [4, 14, 24]\n    assert diff_from_product_of_other_list([], []) is None\n    assert diff_from_product_of_other_list([1, 2, 3], [1, 2, 3]) == [-5, -4, -3]\n    assert diff_from_product_of_other_list([10, 20, 30], [10, 20, 30]) == [-5990, -5980, -5970]\n    assert diff_from_product_of_other_list([5, 10, 15], [5, 10, 15]) == [-745, -740, -735]\n    assert diff_from_product_of_other_list([1, 2], [3, 4]) == [-11, -10]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_by_index_with_condition(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2) and lst2[i] > 1:\n            result.append(lst1[i] ** lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_by_index_with_condition():\n    assert power_by_index_with_condition([2, 3, 4], [2, 3, 4]) == [4, 27, 256]\n    assert power_by_index_with_condition([], []) is None\n    assert power_by_index_with_condition([1, 2, 3], [1, 2, 3]) == [4, 27]\n    assert power_by_index_with_condition([10, 20, 30], [2, 3, 4]) == [100, 8000, 810000]\n    assert power_by_index_with_condition([5, 10, 15], [2, 3, 4]) == [25, 1000, 50625]\n    assert power_by_index_with_condition([1, 2], [3, 4]) == [1, 16]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_and_sum_multiplied_by_indexes(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for i, num in enumerate(lst1):\n        result.append(num - (sum_lst2 * i))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_and_sum_multiplied_by_indexes():\n    assert diff_and_sum_multiplied_by_indexes([10, 20, 30], [1, 2, 3]) == [10, 14, 18]\n    assert diff_and_sum_multiplied_by_indexes([], []) is None\n    assert diff_and_sum_multiplied_by_indexes([1, 2, 3], [1, 2, 3]) == [1, -4, -9]\n    assert diff_and_sum_multiplied_by_indexes([10, 20, 30], [10, 20, 30]) == [10, -40, -90]\n    assert diff_and_sum_multiplied_by_indexes([5, 10, 15], [5, 10, 15]) == [5, -20, -45]\n    assert diff_and_sum_multiplied_by_indexes([1, 2], [3, 4]) == [1, -5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_by_index_if_greater_than_2(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if len(lst2) > i > 2:\n            result.append(lst1[i] / lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_by_index_if_greater_than_2():\n    assert divide_by_index_if_greater_than_2([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1.0, 1.0]\n    assert divide_by_index_if_greater_than_2([], []) is None\n    assert divide_by_index_if_greater_than_2([1, 2, 3], [1, 2, 3]) is None\n    assert divide_by_index_if_greater_than_2([10, 20, 30], [2, 4, 6]) is None\n    assert divide_by_index_if_greater_than_2([5, 10, 15], [5, 10, 15]) is None\n    assert divide_by_index_if_greater_than_2([1, 2], [3, 4]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_8_not_16_and_sum(lst):\n    result = []\n    total_sum = 0\n    for num in lst:\n        if num % 8 == 0 and num % 16 != 0:\n            result.append(num)\n            total_sum += num\n    if not result:\n        return None\n    return total_sum"}, {"role": "assistant", "content": "def test_find_divisible_by_8_not_16_and_sum():\n    assert find_divisible_by_8_not_16_and_sum([8, 16, 24, 32]) == 8 + 24\n    assert find_divisible_by_8_not_16_and_sum([16, 32, 48]) is None\n    assert find_divisible_by_8_not_16_and_sum([]) is None\n    assert find_divisible_by_8_not_16_and_sum([8, 16, 24, 48]) == 32\n    assert find_divisible_by_8_not_16_and_sum([32, 64]) is None\n    assert find_divisible_by_8_not_16_and_sum([8, 40, 24]) == 8 + 40 + 24"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_with_index_condition(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result_value = lst1[i] ** lst2[i]\n            if result_value < 100:\n                result.append(result_value)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_with_index_condition():\n    assert power_with_index_condition([2, 3, 4], [2, 3, 4]) == [4, 27]\n    assert power_with_index_condition([], []) is None\n    assert power_with_index_condition([1, 2, 3], [1, 2, 3]) == [1, 4, 27]\n    assert power_with_index_condition([10, 20, 30], [2, 3, 4]) is None\n    assert power_with_index_condition([5, 10, 15], [2, 3, 4]) == [25]\n    assert power_with_index_condition([1, 2], [3, 4]) == [1, 16]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_product_and_squares(lst1, lst2):\n    result = []\n    product_lst1 = 1\n    for num in lst1:\n        product_lst1 *= num\n    for num in lst2:\n        result.append(product_lst1 - (num ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_product_and_squares():\n    assert diff_of_product_and_squares([2, 3, 4], [2, 3, 4]) == [20, 15, 8]\n    assert diff_of_product_and_squares([], []) is None\n    assert diff_of_product_and_squares([1, 2, 3], [1, 2, 3]) == [5, 2, -3]\n    assert diff_of_product_and_squares([10, 20, 30], [5, 10, 15]) == [5975, 5900, 5775]\n    assert diff_of_product_and_squares([5, 10, 15], [2, 4, 6]) == [746, 734, 714]\n    assert diff_of_product_and_squares([1, 2], [3, 4]) == [-7, -14]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_and_modulo(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result_value = lst1[i] ** lst2[i]\n            result.append(result_value % 5)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_and_modulo():\n    assert power_and_modulo([2, 3], [3, 2]) == [3, 4]\n    assert power_and_modulo([2, 3], [1, 1]) == [2, 3]\n    assert power_and_modulo([2], [0]) == [1]\n    assert power_and_modulo([], [0]) is None\n    assert power_and_modulo([2, 3, 4], [3, 2]) == [3, 4]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_6_not_9_and_multiply(lst):\n    result = []\n    product = 1\n    for num in lst:\n        if num % 6 == 0 and num % 9 != 0:\n            result.append(num)\n            product *= num\n    if not result:\n        return None\n    return product"}, {"role": "assistant", "content": "def test_find_divisible_by_6_not_9_and_multiply():\n    assert find_divisible_by_6_not_9_and_multiply([6, 12, 18, 30]) == 2160\n    assert find_divisible_by_6_not_9_and_multiply([6, 12, 18, 24]) == 1728\n    assert find_divisible_by_6_not_9_and_multiply([5, 7, 8]) is None\n    assert find_divisible_by_6_not_9_and_multiply([6, 12, 18]) == 72\n    assert find_divisible_by_6_not_9_and_multiply([5, 30]) == 30"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_lists_and_total_diff(lst1, lst2):\n    result = []\n    diff_lst2 = sum(lst2) - sum(lst1)\n    for num in lst1:\n        result.append(num - diff_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_lists_and_total_diff():\n    assert diff_of_lists_and_total_diff([1, 2, 3], [4, 5, 6]) == [-8, -7, -6]\n    assert diff_of_lists_and_total_diff([1, 1], [1, 1]) == [1, 1]\n    assert diff_of_lists_and_total_diff([], [1, 2, 3]) is None\n    assert diff_of_lists_and_total_diff([5, 5], [5, 5]) == [5, 5]\n    assert diff_of_lists_and_total_diff([10, 20], [5, 10]) == [25, 35]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_and_diff(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for i, num in enumerate(lst1):\n        if i < len(lst2):\n            result.append((num * i) - sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_and_diff():\n    assert multiply_by_index_and_diff([1, 2, 3], [4, 5, 6]) == [-15, -13, -9]\n    assert multiply_by_index_and_diff([1, 2], [2, 2]) == [-4, -2]\n    assert multiply_by_index_and_diff([10], [2]) == [-2]\n    assert multiply_by_index_and_diff([], [1]) is None\n    assert multiply_by_index_and_diff([1, 2], [0, 0]) == [0, 2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_and_index_squared(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] - lst2[i]) * (i ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_and_index_squared():\n    assert diff_and_index_squared([1, 2], [1, 2]) == [0, 0]\n    assert diff_and_index_squared([5, 10], [3, 4]) == [0, 6]\n    assert diff_and_index_squared([2], [2]) == [0]\n    assert diff_and_index_squared([], [1]) is None\n    assert diff_and_index_squared([10], [0]) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_product_and_index(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] * lst2[i]) - i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_product_and_index():\n    assert diff_of_product_and_index([1, 2], [3, 4]) == [3, 7]\n    assert diff_of_product_and_index([5], [6]) == [30]\n    assert diff_of_product_and_index([0, 1], [0, 0]) == [0, -1]\n    assert diff_of_product_and_index([], [1]) is None\n    assert diff_of_product_and_index([1, 1], [1, 1]) == [1, 0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_and_product_of_lists(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a - (a * b))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_and_product_of_lists():\n    assert diff_and_product_of_lists([1, 2], [3, 4]) == [-2, -6]\n    assert diff_and_product_of_lists([5, 0], [1, 1]) == [0, 0]\n    assert diff_and_product_of_lists([10, 20], [0, 1]) == [10, 0]\n    assert diff_and_product_of_lists([], [1]) is None\n    assert diff_and_product_of_lists([1, 1], [2, 3]) == [-1, -2]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_divided_by_sum(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for i in range(len(lst1)):\n        if i < len(lst2) and sum_lst2 != 0:\n            result.append((lst1[i] * lst2[i]) / sum_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_divided_by_sum():\n    assert multiply_by_index_divided_by_sum([1, 2], [3, 4]) == [0.42857142857142855, 1.1428571428571428]\n    assert multiply_by_index_divided_by_sum([2, 4], [3, 4]) == [0.8571428571428571, 2.2857142857142856]\n    assert multiply_by_index_divided_by_sum([2], [2]) == [2.0]\n    assert multiply_by_index_divided_by_sum([], [1]) is None\n    assert multiply_by_index_divided_by_sum([3, 6], [3, 6]) == [1.0, 4.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_squares_and_indexes_v2(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] ** 2) - lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_squares_and_indexes_v2():\n    assert diff_of_squares_and_indexes_v2([1, 2], [2, 3]) == [-1, 1]\n    assert diff_of_squares_and_indexes_v2([3], [2]) == [7]\n    assert diff_of_squares_and_indexes_v2([5, 10], [2, 4]) == [23, 96]\n    assert diff_of_squares_and_indexes_v2([], [1]) is None\n    assert diff_of_squares_and_indexes_v2([6, 7], [0, 1]) == [36, 48]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_7_and_11_not_154(lst):\n    result = []\n    for num in lst:\n        if num % 7 == 0 and num % 11 == 0 and num % 154 != 0:\n            result.append(num)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_divisible_by_7_and_11_not_154():\n    assert find_divisible_by_7_and_11_not_154([7, 11, 77, 14]) == [77]\n    assert find_divisible_by_7_and_11_not_154([77, 154, 231]) == [77, 231]\n    assert find_divisible_by_7_and_11_not_154([7, 22]) is None\n    assert find_divisible_by_7_and_11_not_154([154]) is None\n    assert find_divisible_by_7_and_11_not_154([11, 7]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_all_lists_v2(lst1, lst2):\n    result = []\n    sum_lst1 = sum(lst1)\n    sum_lst2 = sum(lst2)\n    for num in lst1:\n        result.append(num - (sum_lst1 - sum_lst2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_all_lists_v2():\n    assert diff_of_all_lists_v2([1, 2, 3], [4, 5]) == [4, 5, 6]\n    assert diff_of_all_lists_v2([0, 0, 0], [1, 1, 1]) == [3, 3, 3]\n    assert diff_of_all_lists_v2([], []) is None\n    assert diff_of_all_lists_v2([10, 20], [5, 10]) == [-5, 5]\n    assert diff_of_all_lists_v2([-1, -2, -3], [-4, -5]) == [-4, -5, -6]\n    assert diff_of_all_lists_v2([7, 8], [3]) == [-5, -4]\n    assert diff_of_all_lists_v2([5], [10, 15]) == [25]\n    assert diff_of_all_lists_v2([4, 5, 6], [7, 8, 9]) == [13, 14, 15]\n    assert diff_of_all_lists_v2([0], [1]) == [1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_and_square(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] * lst2[i]) * (i ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_and_square():\n    assert multiply_by_index_and_square([1, 2, 3], [4, 5, 6]) == [0, 10, 72]\n    assert multiply_by_index_and_square([0, 0, 0], [1, 2, 3]) == [0, 0, 0]\n    assert multiply_by_index_and_square([], []) is None\n    assert multiply_by_index_and_square([1], [2, 3]) == [0]\n    assert multiply_by_index_and_square([5, 6], [7]) == [0]\n    assert multiply_by_index_and_square([2, 4, 6], [1, 3, 5]) == [0, 12, 120]\n    assert multiply_by_index_and_square([3], [6, 9]) == [0]\n    assert multiply_by_index_and_square([7, 8, 9], [10, 11, 12]) == [0, 88, 432]\n    assert multiply_by_index_and_square([2, 3], [1, 2, 3]) == [0, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_5_not_10_and_15_and_multiply(lst):\n    result = []\n    product = 1\n    for num in lst:\n        if num % 5 == 0 and num % 10 != 0 and num % 15 != 0:\n            result.append(num)\n            product *= num\n    if not result:\n        return None\n    return product"}, {"role": "assistant", "content": "def test_find_divisible_by_5_not_10_and_15_and_multiply():\n    assert find_divisible_by_5_not_10_and_15_and_multiply([5, 10, 15, 20, 25]) == 125\n    assert find_divisible_by_5_not_10_and_15_and_multiply([30, 35, 40, 45, 50]) == 35\n    assert find_divisible_by_5_not_10_and_15_and_multiply([10, 20, 30]) is None\n    assert find_divisible_by_5_not_10_and_15_and_multiply([5, 25, 35]) == 4375\n    assert find_divisible_by_5_not_10_and_15_and_multiply([15, 45, 55]) == 55\n    assert find_divisible_by_5_not_10_and_15_and_multiply([0, 5, 10, 15]) == 5\n    assert find_divisible_by_5_not_10_and_15_and_multiply([50, 55, 60]) == 55\n    assert find_divisible_by_5_not_10_and_15_and_multiply([5, 55, 75, 85]) == 23375\n    assert find_divisible_by_5_not_10_and_15_and_multiply([25, 50, 75]) == 25"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_sum_and_len_other_list(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    len_lst2 = len(lst2)\n    for num in lst1:\n        result.append(num * (sum_lst2 / len_lst2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_sum_and_len_other_list():\n    assert multiply_by_sum_and_len_other_list([1, 2, 3], [4, 5, 6]) == [5.0, 10.0, 15.0]\n    assert multiply_by_sum_and_len_other_list([0, 0, 0], [1, 1, 1]) == [0.0, 0.0, 0.0]\n    assert multiply_by_sum_and_len_other_list([], []) is None\n    assert multiply_by_sum_and_len_other_list([1], [2, 3]) == [2.5]\n    assert multiply_by_sum_and_len_other_list([5, 6], [7]) == [35.0, 42.0]\n    assert multiply_by_sum_and_len_other_list([2, 4, 6], [1, 3, 5]) == [6.0, 12.0, 18.0]\n    assert multiply_by_sum_and_len_other_list([3], [6, 9]) == [22.5]\n    assert multiply_by_sum_and_len_other_list([7, 8, 9], [10, 11, 12]) == [77.0, 88.0, 99.0]\n    assert multiply_by_sum_and_len_other_list([2, 3], [1, 2, 3]) == [4.0, 6.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_if_greater_than_20(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            product = lst1[i] * lst2[i]\n            if product > 20:\n                result.append(product)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_if_greater_than_20():\n    assert multiply_by_index_if_greater_than_20([1, 2, 3], [4, 5, 6]) is None\n    assert multiply_by_index_if_greater_than_20([5, 10, 15], [1, 2, 3]) == [45]\n    assert multiply_by_index_if_greater_than_20([1, 1, 1], [1, 1, 1]) is None\n    assert multiply_by_index_if_greater_than_20([], []) is None\n    assert multiply_by_index_if_greater_than_20([5, 6], [7]) == [35]\n    assert multiply_by_index_if_greater_than_20([4, 5], [6, 7, 8]) == [24, 35]\n    assert multiply_by_index_if_greater_than_20([10, 20], [2, 4]) == [80]\n    assert multiply_by_index_if_greater_than_20([7, 3], [3, 10]) == [21, 30]\n    assert multiply_by_index_if_greater_than_20([1, 7, 9], [3, 8, 10]) == [56, 90]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_square_divided(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] ** 2) * lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_square_divided():\n    assert multiply_by_square_divided([1, 2, 3], [4, 5, 6]) == [4, 20, 54]\n    assert multiply_by_square_divided([0, 0, 0], [1, 2, 3]) == [0, 0, 0]\n    assert multiply_by_square_divided([], []) is None\n    assert multiply_by_square_divided([1], [2, 3]) == [2]\n    assert multiply_by_square_divided([5, 6], [7]) == [175]\n    assert multiply_by_square_divided([2, 4, 6], [1, 3, 5]) == [4, 48, 180]\n    assert multiply_by_square_divided([3], [6, 9]) == [54]\n    assert multiply_by_square_divided([7, 8, 9], [10, 11, 12]) == [490, 704, 972]\n    assert multiply_by_square_divided([2, 3], [1, 2, 3]) == [4, 18]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_from_sum_multiplied_by_index(lst1, lst2):\n    result = []\n    sum_lst2 = sum(lst2)\n    for i, num in enumerate(lst1):\n        result.append(num - (sum_lst2 * i))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_from_sum_multiplied_by_index():\n    assert diff_from_sum_multiplied_by_index([1, 2, 3], [4, 5, 6]) == [1, -13, -27]\n    assert diff_from_sum_multiplied_by_index([0, 0, 0], [1, 1, 1]) == [0, -3, -6]\n    assert diff_from_sum_multiplied_by_index([], []) is None\n    assert diff_from_sum_multiplied_by_index([1], [2, 3]) == [1]\n    assert diff_from_sum_multiplied_by_index([5, 6], [7]) == [5, -1]\n    assert diff_from_sum_multiplied_by_index([2, 4, 6], [1, 3, 5]) == [2, -5, -12]\n    assert diff_from_sum_multiplied_by_index([3], [6, 9]) == [3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef divide_by_index_if_less_than_5(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2) and i < 5:\n            result.append(lst1[i] / lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_divide_by_index_if_less_than_5():\n    assert divide_by_index_if_less_than_5([1, 2, 3], [4, 5, 6]) == [0.25, 0.4, 0.5]\n    assert divide_by_index_if_less_than_5([10, 20, 30], [1, 2, 3]) == [10.0, 10.0, 10.0]\n    assert divide_by_index_if_less_than_5([0, 0, 0], [1, 2, 3]) == [0.0, 0.0, 0.0]\n    assert divide_by_index_if_less_than_5([], []) is None\n    assert divide_by_index_if_less_than_5([5, 6], [7]) == [5/7]\n    assert divide_by_index_if_less_than_5([2, 4, 6], [1, 2, 3]) == [2.0, 2.0, 2.0]\n    assert divide_by_index_if_less_than_5([3], [6, 9]) == [0.5]\n    assert divide_by_index_if_less_than_5([7, 8, 9], [10, 11, 12]) == [0.7, 0.7272727272727273, 0.75]\n    assert divide_by_index_if_less_than_5([2, 3], [1, 2, 3]) == [2.0, 1.5]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_diff_of_other_list(lst1, lst2):\n    result = []\n    diff_lst2 = sum(lst2) - sum(lst1)\n    for num in lst1:\n        result.append(num * diff_lst2)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_diff_of_other_list():\n    assert multiply_by_diff_of_other_list([1, 2, 3], [4, 5, 6]) == [9, 18, 27]\n    assert multiply_by_diff_of_other_list([0, 0, 0], [1, 1, 1]) == [0, 0, 0]\n    assert multiply_by_diff_of_other_list([], []) is None\n    assert multiply_by_diff_of_other_list([1], [2, 3]) == [4]\n    assert multiply_by_diff_of_other_list([5, 6], [7]) == [-20, -24]\n    assert multiply_by_diff_of_other_list([2, 4, 6], [1, 3, 5]) == [-6, -12, -18]\n    assert multiply_by_diff_of_other_list([3], [6, 9]) == [36]\n    assert multiply_by_diff_of_other_list([7, 8, 9], [10, 11, 12]) == [63, 72, 81]\n    assert multiply_by_diff_of_other_list([2, 3], [1, 2, 3]) == [2, 3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_4_not_8_and_multiply(lst):\n    result = []\n    product = 1\n    for num in lst:\n        if num % 4 == 0 and num % 8 != 0:\n            result.append(num)\n            product *= num\n    if not result:\n        return None\n    return product"}, {"role": "assistant", "content": "def test_find_divisible_by_4_not_8_and_multiply():\n    assert find_divisible_by_4_not_8_and_multiply([4, 8, 12, 16]) == 4 * 12\n    assert find_divisible_by_4_not_8_and_multiply([24, 32, 36, 48]) == 36\n    assert find_divisible_by_4_not_8_and_multiply([8, 16, 24]) is None\n    assert find_divisible_by_4_not_8_and_multiply([4, 12, 20]) == 960\n    assert find_divisible_by_4_not_8_and_multiply([32, 48, 52]) == 52\n    assert find_divisible_by_4_not_8_and_multiply([4, 0, 8, 12]) == 48\n    assert find_divisible_by_4_not_8_and_multiply([16, 24, 36]) == 36\n    assert find_divisible_by_4_not_8_and_multiply([12, 24, 36, 48]) == 432\n    assert find_divisible_by_4_not_8_and_multiply([4, 12, 16, 20]) == 960"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_index_divided_by_square(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2) and i != 0:\n            result.append((lst1[i] * lst2[i]) / (i ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_index_divided_by_square():\n    assert multiply_by_index_divided_by_square([1, 2, 3], [1, 2, 3]) == [4.0, 2.25]\n    assert multiply_by_index_divided_by_square([], [4, 5, 2145]) is None\n    assert multiply_by_index_divided_by_square([1, 56], []) is None\n    assert multiply_by_index_divided_by_square([0, 0, 0], [1, 1, 1]) == [0.0, 0.0]\n    assert multiply_by_index_divided_by_square([1, 2], [1, 2, 3]) == [4.0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_and_product_multiplied_by_index(lst1, lst2):\n    result = []\n    product_lst2 = 1\n    for num in lst2:\n        product_lst2 *= num\n    for i, num in enumerate(lst1):\n        result.append(num - (product_lst2 * i))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_and_product_multiplied_by_index():\n    assert diff_and_product_multiplied_by_index([1, 2, 3], [1, 2, 3]) == [1, -4, -9]\n    assert diff_and_product_multiplied_by_index([], []) is None\n    assert diff_and_product_multiplied_by_index([0, 0, 0], [1, 1, 1]) == [0, -1, -2]\n    assert diff_and_product_multiplied_by_index([3, 2, 1], [3, 2, 1]) == [3, -4, -11]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_by_diff_of_all_lists(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    total_diff = sum(lst1) - sum(lst2)\n    for num in lst1:\n        result.append(num * total_diff)\n    return result"}, {"role": "assistant", "content": "def test_multiply_by_diff_of_all_lists():\n    assert multiply_by_diff_of_all_lists([1, 2, 3], [3, 2, 1]) == [0, 0, 0]\n    assert multiply_by_diff_of_all_lists([0, 0, 0], []) is None\n    assert multiply_by_diff_of_all_lists([0, 0, 0], [1, 1, 1]) == [0, 0, 0]\n    assert multiply_by_diff_of_all_lists([2, 2, 2], [1, 1, 1]) == [6, 6, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef power_by_index_v2(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] ** lst2[i])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_power_by_index_v2():\n    assert power_by_index_v2([], [3, 2, 1]) is None\n    assert power_by_index_v2([2, 3, 4], [1, 2, 3]) == [2, 9, 64]\n    assert power_by_index_v2([1, 2, 3], [3, 2, 1]) == [1, 4, 3]\n    assert power_by_index_v2([0, 1, 2], [1, 2, 3]) == [0, 1, 8]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_divisible_by_2_and_5_not_12_and_multiply(lst):\n    result = []\n    product = 1\n    for num in lst:\n        if num % 2 == 0 and num % 5 == 0 and num % 12 != 0:\n            result.append(num)\n            product *= num\n    if not result:\n        return None\n    return product"}, {"role": "assistant", "content": "def test_find_divisible_by_2_and_5_not_12_and_multiply():\n    assert find_divisible_by_2_and_5_not_12_and_multiply([10, 20, 30]) == 6000\n    assert find_divisible_by_2_and_5_not_12_and_multiply([0, 0, 0]) is None\n    assert find_divisible_by_2_and_5_not_12_and_multiply([15, 25, 35]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_and_product_with_index(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] - (lst2[i] * i))\n    return result"}, {"role": "assistant", "content": "def test_diff_and_product_with_index():\n    assert diff_and_product_with_index([1, 2, 3], [1, 2, 3]) == [1, 0, -3]\n    assert diff_and_product_with_index([0, 0, 0], [1, 1, 1]) == [0, -1, -2]\n    assert diff_and_product_with_index([], []) is None\n    assert diff_and_product_with_index([3, 2, 1], [3, 2, 1]) == [3, 0, -1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_all_and_index_product(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    total_diff_lst2 = sum(lst2) - sum(lst1)\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append(lst1[i] - (total_diff_lst2 * i))\n    return result"}, {"role": "assistant", "content": "def test_diff_of_all_and_index_product():\n    assert diff_of_all_and_index_product([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert diff_of_all_and_index_product([0, 0, 0], [1, 1, 1]) == [0, -3, -6]\n    assert diff_of_all_and_index_product([], [3, 2, 1]) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_and_diff_of_lists_v2(lst1, lst2):\n    if not lst1 or not lst2:\n        return None\n    result = []\n    total_diff = sum(lst1) - sum(lst2)\n    for num in lst1:\n        result.append(num * total_diff)\n    return result"}, {"role": "assistant", "content": "def test_multiply_and_diff_of_lists_v2():\n    assert multiply_and_diff_of_lists_v2([1, 2, 3], [3, 2, 1]) == [0, 0, 0]\n    assert multiply_and_diff_of_lists_v2([0, 0, 0], [1, 1, 1]) == [0, 0, 0]\n    assert multiply_and_diff_of_lists_v2([], [6, 54, 3]) is None\n    assert multiply_and_diff_of_lists_v2([2, 2, 2], [1, 1, 1]) == [6, 6, 6]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_product_and_index_v3(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        if i < len(lst2):\n            result.append((lst1[i] * lst2[i]) - (i ** 2))\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_product_and_index_v3():\n    assert diff_of_product_and_index_v3([1, 2, 3], [1, 2, 3]) == [1, 3, 5]\n    assert diff_of_product_and_index_v3([], [3, 3, 3]) is None\n    assert diff_of_product_and_index_v3([0, 0, 0], [1, 1, 1]) == [0, -1, -4]\n    assert diff_of_product_and_index_v3([3, 2, 1], [3, 2, 1]) == [9, 3, -3]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef diff_of_values_in_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2:\n            result.append(dict1[key] - dict2[key])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_diff_of_values_in_dicts():\n    assert diff_of_values_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 1}) == [0, 1]\n    assert diff_of_values_in_dicts({'a': 3, 'b': 4}, {'a': 2, 'b': 2}) == [1, 2]\n    assert diff_of_values_in_dicts(dict(), {'g': 2, 't': 98}) is None\n    assert diff_of_values_in_dicts({'a': 1}, {'a': 2}) == [-1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_common_keys_with_values_gt_10(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2 and dict1[key] > 10 and dict2[key] > 10:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_common_keys_with_values_gt_10():\n    assert find_common_keys_with_values_gt_10({'a': 15, 'b': 5}, {'a': 20, 'b': 10}) == ['a']\n    assert find_common_keys_with_values_gt_10({'a': 25, 'b': 30}, {'a': 35, 'b': 40}) == ['a', 'b']\n    assert find_common_keys_with_values_gt_10({'a': 5, 'b': 5}, {'a': 5, 'b': 5}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_values_by_index_in_other_dict(dict1, dict2):\n    result = []\n    for i, key in enumerate(dict1):\n        if key in dict2:\n            result.append(dict1[key] * dict2.get(key, 0) * i)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_values_by_index_in_other_dict():\n    assert multiply_values_by_index_in_other_dict({'a': 2, 'b': 3}, {'a': 2, 'b': 3}) == [0, 9]\n    assert multiply_values_by_index_in_other_dict({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) == [0, 8]\n    assert multiply_values_by_index_in_other_dict({'a': 5}, {'a': 2}) == [0]\n    assert multiply_values_by_index_in_other_dict({}, {'a': 2}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_with_value_greater_in_first_dict(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2 and dict1[key] > dict2[key]:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_with_value_greater_in_first_dict():\n    assert find_keys_with_value_greater_in_first_dict({'a': 10, 'b': 20}, {'a': 5, 'b': 15}) == ['a', 'b']\n    assert find_keys_with_value_greater_in_first_dict({'a': 5}, {'a': 10}) is None\n    assert find_keys_with_value_greater_in_first_dict({'a': 10}, {'b': 5}) is None\n    assert find_keys_with_value_greater_in_first_dict({'a': 10}, {'a': 10}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_with_equal_values_in_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2 and dict1[key] == dict2[key]:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_with_equal_values_in_dicts():\n    assert find_keys_with_equal_values_in_dicts({'a': 10, 'b': 20}, {'a': 10, 'b': 20}) == ['a', 'b']\n    assert find_keys_with_equal_values_in_dicts({'a': 10}, {'a': 5}) is None\n    assert find_keys_with_equal_values_in_dicts({'a': 10}, {'b': 10}) is None\n    assert find_keys_with_equal_values_in_dicts({'a': 10}, {'a': 10, 'b': 10}) == ['a']"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_value_diff_between_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2:\n            result.append(dict1[key] - dict2[key])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_value_diff_between_dicts():\n    assert find_value_diff_between_dicts({'a': 10, 'b': 20}, {'a': 5, 'b': 15}) == [5, 5]\n    assert find_value_diff_between_dicts({'a': 5}, {'a': 10}) == [-5]\n    assert find_value_diff_between_dicts({'a': 10}, {'b': 5}) is None\n    assert find_value_diff_between_dicts({'a': 10}, {'a': 10}) == [0]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef multiply_values_in_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2:\n            result.append(dict1[key] * dict2[key])\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_multiply_values_in_dicts():\n    assert multiply_values_in_dicts({'a': 10, 'b': 20}, {'a': 2, 'b': 3}) == [20, 60]\n    assert multiply_values_in_dicts({'a': 1}, {'a': 10}) == [10]\n    assert multiply_values_in_dicts({'a': 10}, {'b': 5}) is None\n    assert multiply_values_in_dicts({}, {'a': 10}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_with_values_divisible_by_3(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2 and dict1[key] % 3 == 0 and dict2[key] % 3 == 0:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_with_values_divisible_by_3():\n    assert find_keys_with_values_divisible_by_3({'a': 9, 'b': 12}, {'a': 3, 'b': 6}) == ['a', 'b']\n    assert find_keys_with_values_divisible_by_3({'a': 10, 'b': 15}, {'a': 3, 'b': 9}) == ['b']\n    assert find_keys_with_values_divisible_by_3({'a': 9}, {'a': 3}) == ['a']\n    assert find_keys_with_values_divisible_by_3({'a': 10}, {'a': 2}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef find_keys_with_value_range_in_dicts(dict1, dict2):\n    result = []\n    for key in dict1:\n        if key in dict2 and dict2[key] > dict1[key] > 5:\n            result.append(key)\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_find_keys_with_value_range_in_dicts():\n    assert find_keys_with_value_range_in_dicts({'a': 7, 'b': 8}, {'a': 10, 'b': 15}) == ['a', 'b']\n    assert find_keys_with_value_range_in_dicts({'a': 10, 'b': 12}, {'a': 7, 'b': 15}) == ['b']\n    assert find_keys_with_value_range_in_dicts({'a': 10}, {'a': 5}) is None\n    assert find_keys_with_value_range_in_dicts({}, {'a': 10}) is None"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef bubble_sort_descending(arr):\n    result = arr[:]\n    n = len(result)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if result[j] < result[j+1]:\n                result[j], result[j+1] = result[j+1], result[j]\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_bubble_sort_descending():\n    assert bubble_sort_descending([3, 2, 1]) == [3, 2, 1]\n    assert bubble_sort_descending([1, 2, 3]) == [3, 2, 1]\n    assert bubble_sort_descending([]) is None\n    assert bubble_sort_descending([1]) == [1]\n    assert bubble_sort_descending([3, 1, 2]) == [3, 2, 1]\n    assert bubble_sort_descending([1, 3, 2]) == [3, 2, 1]"}]}
{"messages": [{"role": "user", "content": "Напиши тест для следующей функции:\n\ndef insertion_sort_ascending(arr):\n    result = arr[:]\n    for i in range(1, len(result)):\n        key = result[i]\n        j = i - 1\n        while j >= 0 and key < result[j]:\n            result[j + 1] = result[j]\n            j -= 1\n        result[j + 1] = key\n    if not result:\n        return None\n    return result"}, {"role": "assistant", "content": "def test_insertion_sort_ascending():\n    assert insertion_sort_ascending([3, 2, 1]) == [1, 2, 3]\n    assert insertion_sort_ascending([1, 2, 3]) == [1, 2, 3]\n    assert insertion_sort_ascending([]) is None\n    assert insertion_sort_ascending([1]) == [1]\n    assert insertion_sort_ascending([3, 1, 2]) == [1, 2, 3]\n    assert insertion_sort_ascending([2, 3, 1]) == [1, 2, 3]"}]}
