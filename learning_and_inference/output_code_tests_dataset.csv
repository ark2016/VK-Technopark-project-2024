function,output_generated,ground_truth
"def subtract_lists_elementwise(lst1, lst2):
    result = []
    for i in range(len(lst1)):
        if i < len(lst2):
            result.append(lst1[i] - lst2[i])
        else:
            result.append(lst1[i])
    if not result:
        return None
    return result","def test_subtract_lists_elementwise():
    assert subtract_lists_elementwise([4, 9, 16], [2, 3, 4]) == [2, 6, 12]
    assert subtract_lists_elementwise([4, 9, 16], [2, 0, 4]) == [2, 9, 12]
    assert subtract_lists_elementwise([1, 2, 3], [0, 1, 1]) == [1, 2, 3]
    assert subtract_lists_elementwise([], [1, 2, 3]) is None
    assert subtract_lists_elementwise([1, 2, 3], []) is None
    assert subtract_lists_elementwise([10, 20, 30], [5, 15, 25]) == [5, 15, 35]
    assert subtract_lists_elementwise([25, 36, 49], [5, 6, 7]) == [25, 36, 49]
    assert subtract_lists_elementwise([10, 20, 30], [0, 10]) == [10, 20, 30]
    assert subtract_lists_elementwise([5, 15], [7, 25]) == [5]","def test_subtract_lists_elementwise():
    assert subtract_lists_elementwise([10, 20, 30], [1, 2, 3]) == [9, 18, 27]
    assert subtract_lists_elementwise([5, 10, 15], [5, 5, 5]) == [0, 5, 10]
    assert subtract_lists_elementwise([], [1, 1, 1]) is None
    assert subtract_lists_elementwise([1, 2], [2, 1]) == [-1, 1]
    assert subtract_lists_elementwise([3, 3, 3], [1, 1]) == [2, 2, 3]"
"def count_multiples_of(num, arr):
    count = 0
    for val in arr:
        if val % num == 0:
            count += 1
    return count if count > 0 else None","def test_count_multiples_of():
    assert count_multiples_of(2, [3, 4, 5, 6]) == 3
    assert count_multiples_of(3, [3, 3, 3]) == 3
    assert count_multiples_of(2, [1, 2, 3]) is None
    assert count_multiples_of(5, [5, 6, 7, 8]) == 2
    assert count_multiples_of(0, [0, 0, 0]) == 3
    assert count_multiples_of(4, [5, 6, 7, 8, 9]) == 1
    assert count_multiples_of(2, [11, 22, 33]) == 3
    assert count_multiples_of(1, [1, 1, 1]) == 1
    assert count_multiples_of(3, [6, 7, 8]) == 1","def test_count_multiples_of():
    assert count_multiples_of(3, [3, 6, 9, 12]) == 4
    assert count_multiples_of(5, [1, 2, 3, 4]) is None
    assert count_multiples_of(2, [4, 6, 8, 10]) == 4
    assert count_multiples_of(7, [14, 21, 28, 35]) == 4
    assert count_multiples_of(1, [1, 2, 3, 4, 5]) == 5"
"def remove_words_starting_with(s, letter):
    if not s or not letter:
        return None
    words = s.split()
    filtered_words = [word for word in words if not word.lower().startswith(letter.lower())]
    return ' '.join(filtered_words) if filtered_words else None","def test_remove_words_starting_with():
    assert remove_words_starting_with(""apple banana apricot berry"", ""a"") == ""banana apricot berry""
    assert remove_words_starting_with("""", ""a"") is None
    assert remove_words_starting_with(""apple banana apricot berry"", """") == ""apple banana apricot berry""
    assert remove_words_starting_with(""cat cow car"", ""c"") == ""cat cow car""
    assert remove_words_starting_with(""hello world"", ""h"") == ""hello world""
    assert remove_words_starting_with(""umbrella elephant iguana octopus"", ""u"") == ""umbrella elephant iguana octopus""
    assert remove_words_starting_with(""dog cat bird"", ""d"") == ""dog cat bird""
    assert remove_words_starting_with(""elephant iguana octopus"", ""e"") == ""elephant iguana octopus""
    assert remove_words_starting_with(""snake urchin"", ""s"") == ""snake urchin""","def test_remove_words_starting_with():
    assert remove_words_starting_with(""hello world happy day"", ""h"") == ""world day""
    assert remove_words_starting_with(""apple banana cherry"", ""b"") == ""apple cherry""
    assert remove_words_starting_with(""alpha beta gamma"", ""a"") == ""beta gamma""
    assert remove_words_starting_with("""", ""a"") is None
    assert remove_words_starting_with(None, ""a"") is None
    assert remove_words_starting_with(""test string"", """") is None"
"def choose_string_starting_with_uppercase(*strings):
    for s in strings:
        if s[0].isupper():
            return s
    return None","def test_choose_string_starting_with_uppercase():
    assert choose_string_starting_with_uppercase(""HelloWorld"", ""hi there"", ""123ABC"") == ""HelloWorld""
    assert choose_string_starting_with_uppercase(""noUppercase"", ""STILL_NONE"", ""123ABC"") is None
    assert choose_string_starting_with_uppercase(""StartWithUpperCase"", ""UpperCASE"", ""123ABC"") == ""StartWithUpperCase""
    assert choose_string_starting_with_uppercase(""MixEdCaSe"", ""MixEdCaSe"", ""MixEdCaSe"") == ""MixEdCaSe""
    assert choose_string_starting_with_uppercase(""123ABC"", ""456def"", ""789ghi"") == ""123ABC""
    assert choose_string_starting_with_uppercase(""noUppercase"", ""STILL_NONE"", ""noUppercase"") is None
    assert choose_string_starting_with_uppercase(""Uppercase"", ""UPPERCASE"", ""hElLo"") == ""Uppercase""
    assert choose_string_starting_with_uppercase(""StartWithUpperCase"", ""lower"", ""123ABC"") == ""StartWithUpperCase""
    assert choose_string_starting_with_uppercase(""noUppercase"", ""STILL_NONE"", ""UPPERCASE"") is None","def test_choose_string_starting_with_uppercase():
    assert choose_string_starting_with_uppercase(""Apple"", ""banana"", ""Cherry"", ""date"") == ""Apple""
    assert choose_string_starting_with_uppercase(""eggplant"", ""fig"", ""grape"") is None"
"def count_strings_longer_than_avg(lst):
    if not lst:
        return None
    avg_length = sum(len(item) for item in lst if isinstance(item, str)) / len(lst)
    count = 0
    for item in lst:
        if isinstance(item, str) and len(item) > avg_length:
            count += 1
    return count if count > 0 else None","def test_count_strings_longer_than_avg():
    assert count_strings_longer_than_avg([""abcd"", ""efghij"", ""klm"", ""nopqrs""]) == 4
    assert count_strings_longer_than_avg([""a"", ""ab"", ""abc""]) == 3
    assert count_strings_longer_than_avg([]) is None
    assert count_strings_longer_than_avg([""abcd"", ""efghij""]) is None
    assert count_strings_longer_than_avg([""abc"", ""def"", ""ghijkl""]) == 6
    assert count_strings_longer_than_avg([""short"", ""longer"", ""longest""]) == 3
    assert count_strings_longer_than_avg([""test"", ""testing"", ""tests""]) == 4
    assert count_strings_longer_than_avg([""a"", ""abc"", ""abcd"", ""efghij""]) == 3
    assert count_strings_longer_than_avg([""apple"", ""banana"", ""cherry""]) == 3","def test_count_strings_longer_than_avg():
    assert count_strings_longer_than_avg([""a"", ""abc"", ""abcd""]) == 2
    assert count_strings_longer_than_avg([""abc""]) is None
    assert count_strings_longer_than_avg([]) is None
    assert count_strings_longer_than_avg([""a"", ""b"", ""c""]) is None"
"def create_even_number_set(lst, s):
    if not lst or not s:
        return None
    even_set = set()
    for item in lst:
        if item % 2 == 0:
            even_set.add(item)
    for item in s:
        if item % 2 == 0:
            even_set.add(item)
    return sorted(even_set) if even_set else None","def test_create_even_number_set():
    assert create_even_number_set([1, 2, 3], {4, 5}) == [2, 4]
    assert create_even_number_set([], {}) is None
    assert create_even_number_set([2, 4], {6, 8}) == [2, 4, 6, 8]
    assert create_even_number_set([3, 5], {7, 9}) == [3, 5, 7, 9]
    assert create_even_number_set([0, 2], {4, 6}) == [0, 4, 6]
    assert create_even_number_set([1, 3], {5, 7}) == [1, 3, 5, 7]
    assert create_even_number_set([2, 3, 5], {6, 8}) == [2, 4, 5, 6, 8]
    assert create_even_number_set([7, 8], {9, 10}) == [7, 10]
    assert create_even_set([111], {102}) == [101, 102]","def test_create_even_number_set():
    assert create_even_number_set([1, 2, 3], {4, 5, 6}) == [2, 4, 6]
    assert create_even_number_set([2, 4, 6], {8, 10, 12}) == [2, 4, 6, 8, 10, 12]
    assert create_even_number_set([1, 3, 5], {7, 9}) is None
    assert create_even_number_set([], {2, 4}) is None
    assert create_even_number_set([2, 4], set()) is None"
"def count_repeating_words(s):
    if not s:
        return None
    words = s.split()
    word_count = {}
    for word in words:
        word_count[word.lower()] = word_count.get(word.lower(), 0) + 1
    return {word: count for word, count in word_count.items() if count > 1}","def test_count_repeating_words():
    assert count_repeating_words(""hello world"") == {""hello"": 1, ""world"": 1}
    assert count_repeating_words(""hello hello world"") == {""hello"": 2, ""world"": 1}
    assert count_repeating_words(""a b a b c"") == {""a"": 2, ""b"": 2, ""c"": 1}
    assert count_repeating_words("""") is None
    assert count_repeating_words(None) is None
    assert count_repeating_words(""x y z"") == {""x"": 1, ""y"": 1, ""z"": 1}
    assert count_repeating_words(""repeat repeat"") == {""repeat"": 1, ""repe"": 1, ""repeat"": 1}
    assert count_repeating_words(""aaa"") == {""aaa"": 3}
    assert count_repeating_words(""one two three four five"") == {""one"": 1, ""two"": 1, ""three"": 1, ""four"": 1, ""five"": 1}","def test_count_repeating_words():
    assert count_repeating_words(""hello Hello world world"") == {""hello"": 2, ""world"": 2}
    assert count_repeating_words(""one two three"") == {}
    assert count_repeating_words("""") is None
    assert count_repeating_words(None) is None"
"def most_frequent(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return None
    freq = {}
    for num in lst:
        freq[num] = freq.get(num, 0) + 1
    return max(freq, key=freq.get)","def test_most_frequent():
    assert most_frequent([1, 2, 2, 3, 3, 3]) == 3
    assert most_frequent([""a"", ""b"", ""b"", ""c"", ""c"", ""c""]) == ""c""
    assert most_frequent([1, 1, 1, 2, 2, 3, 3, 3, 3]) == 3
    assert most_frequent([]) is None
    assert most_frequent([1, 1, 2, 2, 3, 3]) == 3
    assert most_frequent([""equal"", ""equal"", ""equal"", ""equal""]) == ""equal""
    assert most_frequent([""x"", ""x"", ""y"", ""y"", ""z""]) == ""y""
    assert most_frequent([1, 2, 3, 4, 5, 1, 2, 3, 1]) == 1
    assert most_frequent([""apple"", ""banana"", ""cherry""]) == ""cherry""","def test_most_frequent():
    assert most_frequent([1, 2, 2, 3, 3, 3]) == 3
    assert most_frequent([4, 4, 4, 4]) == 4
    assert most_frequent([1, 1, 2, 2, 3, 3]) == 1
    assert most_frequent([5]) == 5
    assert most_frequent([]) is None"
"def levenshtein_distance(s1, s2):
    if not s1 or not s2:
        return None
    len_s1, len_s2 = len(s1), len(s2)
    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]
    for i in range(len_s1 + 1):
        for j in range(len_s2 + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])
    return dp[len_s1][len_s2]","def test_levenshtein_distance():
    assert levenshtein_distance(""abc"", ""ac"") == 2
    assert levenshtein_distance(""abcdef"", ""abdf"") == 4
    assert levenshtein_distance(""abc"", ""xyz"") == 1
    assert levenshtein_distance("""", """") is None
    assert levenshtein_distance(""a"", ""a"") == 0
    assert levenshtein_distance(""abc"", ""abcd"") == 3
    assert levenshtein_distance(""aa"", ""aaa"") == 2
    assert levenshtein_distance(""abc"", ""aa"") == 2
    assert levenshtein_distance(""abc"", """") == 1","def test_levenshtein_distance():
    assert levenshtein_distance(""kitten"", ""sitting"") == 3
    assert levenshtein_distance(""flaw"", ""lawn"") == 2
    assert levenshtein_distance("""", ""abc"") is None
    assert levenshtein_distance(""abc"", """") is None
    assert levenshtein_distance(None, ""abc"") is None"
"def find_prime_numbers_2(d):
    if not d:
        return None
    prime_numbers = {}
    for key, value in d.items():
        if value > 1 and all(value % i != 0 for i in range(2, int(value ** 0.5) + 1)):
            prime_numbers[key] = value
    return prime_numbers if prime_numbers else None","def test_find_prime_numbers_2():
    assert find_prime_numbers_2({""a"": 2, ""b"": 3}) == {""a"": 2, ""b"": 3}
    assert find_prime_numbers_2({""a"": 4, ""b"": 5}) is None
    assert find_prime_numbers_2({}) is None
    assert find_prime_numbers_2({""a"": 11, ""b"": 13}) == {""a"": 11, ""b"": 13}
    assert find_prime_numbers_2({""a"": 17, ""b"": 19}) == {""a"": 17, ""b"": 19}
    assert find_prime_numbers_2({""a"": 23, ""b"": 25}) == {""a"": 23, ""b"": 25}
    assert find_prime_numbers_2({""a"": 29, ""b"": 31}) == {""a"": 29, ""b"": 31}
    assert find_prime_numbers_2({""a"": 37, ""b"": 41}) == {""a"": 37, ""b"": 41}
    assert find_prime_numbers_2({""a"": 49, ""b"": 53}) == {""a"": 49, ""b"": 53}","def test_find_prime_numbers_2():
    assert find_prime_numbers_2({}) is None
    assert find_prime_numbers_2({1: 4, 2: 5}) == {2: 5}
    assert find_prime_numbers_2({1: 4, 2: 6, 3: 9}) is None
    assert find_prime_numbers_2({1: 4, 2: 2}) == {2: 2}
    assert find_prime_numbers_2({1: 4, 2: 11, 3: 7, 4: 9}) == {2: 11, 3: 7}
    assert find_prime_numbers_2({1: 4, 2: 9}) is None
    assert find_prime_numbers_2({1: 7, 2: 10, 3: 13}) == {1: 7, 3: 13}
    assert find_prime_numbers_2({1: 10}) is None"
"def find_max_min_diff_in_lists(lst1, lst2):
    if not lst1 or not lst2:
        return None
    result = []
    max_val1 = max(lst1)
    min_val1 = min(lst1)
    max_val2 = max(lst2)
    min_val2 = min(lst2)
    result.append(max_val1 - min_val1)
    result.append(max_val2 - min_val2)
    return result","def test_find_max_min_diff_in_lists():
    assert find_max_min_diff_in_lists([1, 2, 3], [3, 2, 1]) == [0, 1, 2]
    assert find_max_min_diff_in_lists([10, 20, 30], [30, 20, 10]) == [10, 15, 20]
    assert find_max_min_diff_in_lists([], [1, 2, 3]) is None
    assert find_max_min_diff_diff_in_lists([1, 2, 3], []) is None
    assert find_max_min_diff_diff_in_lists([1, 2], [1, 2]) == [0]
    assert find_max_min_diff_diff_in_lists([-1, -2], [-2, -3]) == [-1, -2]
    assert find_max_min_diff_diff_in_lists([7, 8, 9], [9, 8]) == [6, 7, 8]
    assert find_max_min_diff_diff_in_lists([10, 20, 30], [30, 40]) == [10, 15, 20]
    assert find_max_min_diff_diff_in_lists([5, 15, 5], [5, 5]) == [5, 5]","def test_find_max_min_diff_in_lists():
    assert find_max_min_diff_in_lists([1, 2, 3], [4, 5, 6]) == [2, 2]
    assert find_max_min_diff_in_lists([7, 8, 9], [10, 11, 12]) == [2, 2]
    assert find_max_min_diff_in_lists([1], []) is None
    assert find_max_min_diff_in_lists([], [0]) is None"
"def factorial_of_float(x):
    if not isinstance(x, int) or x < 0:
        return None
    factorial = 1
    for i in range(1, x + 1):
        factorial *= i
    return factorial","def test_factorial_of_float():
    assert factorial_of_float(5) == 120
    assert factorial_of_float(0) == 1
    assert factorial_of_float(-1) is None
    assert factorial_of_float('a') is None
    assert factorial_of_float(3.14) == 6.284000000000003
    assert factorial_of_float(1) == 1
    assert factorial_of_float(4) == 24
    assert factorial_of_float(20) == 1200
    assert factorial_of_float(-5) is None","def test_factorial_of_float():
    assert factorial_of_float(5) == 120
    assert factorial_of_float(0) == 1
    assert factorial_of_float(-1) is None
    assert factorial_of_float(3) == 6"
"def sum_less_than_x(lst, x):
    if not lst:
        return 0
    return (lst[0] if lst[0] < x else 0) + sum_less_than_x(lst[1:], x)","def test_sum_less_than_x():
    assert sum_less_than_x([1, 2, 3, 4, 5], 3) == 7
    assert sum_less_than_x([10, 20, 30, 40], 25) == 15
    assert sum_less_than_x([], 5) == 0
    assert sum_less_than_x([5, 6, 7, 8], 5) == 0
    assert sum_less_than_x([1, 2, 3, 4, 5], 1) == 0
    assert sum_less_than_x([1, 2, 3, 4, 5], 4) == 3
    assert sum_less_than_x([1, 2, 3, 4, 5], 5) == 0
    assert sum_less_than_x([10, 20, 30, 40], 15) == 30
    assert sum_less_than_x([1, 2, 3, 4, 5], 6) == 3","def test_sum_less_than_x():
    assert sum_less_than_x([1, 2, 3, 4, 5], 3) == 3
    assert sum_less_than_x([10, 20, 30, 40, 50], 25) == 30
    assert sum_less_than_x([5, 5, 5, 5, 5], 10) == 25
    assert sum_less_than_x([], 5) == 0
    assert sum_less_than_x([1, 2, 3, 4, 5], 0) == 0
    assert sum_less_than_x([-1, -2, -3, 4, 5], 0) == -6
    assert sum_less_than_x([100, 200, 300], 150) == 100
    assert sum_less_than_x([1, 1, 1, 1, 1], 2) == 5"
"def count_occurrences(lst, num):
    count = 0
    for val in lst:
        if val == num:
            count += 1
        else:
            if val % 2 == 0:
                print(f""Even number {val} encountered."")
    if count == 0:
        print(f""{num} not found in the list."")
    return count","def test_count_occurrences():
    assert count_occurrences([1, 2, 3, 2, 1], 2) == 3
    assert count_occurrences([1, 2, 3, 4, 5], 6) == 0
    assert count_occurrences([1, 1, 1, 1], 1) == 4
    assert count_occurrences([], 1) == 0
    assert count_occurrences([2, 3, 4, 5], 1) == 0
    assert count_occurrences([5, 5, 5, 5], 5) == 5
    assert count_occurrences([0, 0, 0, 0], 0) == 4
    assert count_occurrences([1, 2, 3], 1) == 1
    assert count_occurrences([1, 2, 3], 2) == 1","def test_count_occurrences():
    assert count_occurrences([1, 2, 3, 1], 1) == 2
    assert count_occurrences([2, 4, 6], 2) == 1
    assert count_occurrences([1, 1, 1, 1], 2) == 0
    assert count_occurrences([10, 20, 10], 10) == 2
    assert count_occurrences([1, 3, 1, 2], 5) == 0"
"def find_in_one_set_not_other_divisible_by_5(set1, set2):
    result = []
    for elem in set1 ^ set2:
        if elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_one_set_not_other_divisible_by_5():
    assert find_in_one_set_not_other_divisible_by_5({1, 2, 5, 10}, {2, 3, 5}) == [1, 3, 7]
    assert find_in_one_set_not_other_divisible_by_5({5, 15, 25}, {10, 20, 30}) == [5, 15, 25]
    assert find_in_one_set_not_other_divisible_by_5(set(), {1, 2, 3}) == [1, 2, 3]
    assert find_in_one_set_not_other_divisible_by_5({1, 2, 4}, set()) == [1, 2, 3, 4]
    assert find_in_one_set_not_other_divisible_by_5({1, 3, 7}, {2, 3, 7}) == [1, 3, 7]
    assert find_in_one_set_not_other_divisible_by_5({10, 20, 30}, {20, 30}) == [10, 30]
    assert find_in_one_set_not_other_divisible_by_5({1, 5, 15}, {5, 15}) == [15]
    assert find_in_one_set_not_other_divisible_by_by_5({1, 2, 3, 4, 5}, {2, 3, 4}) == [1, 3, 5]
    assert find_in_one_set_not_other_divisible_by_5({7, 8, 9}, {8, 9}) == [7, 10, 112]","def test_find_in_one_set_not_other_divisible_by_5():
    assert find_in_one_set_not_other_divisible_by_5({5, 10, 15}, {10, 20, 30}) == [5, 15, 20, 30]
    assert find_in_one_set_not_other_divisible_by_5({1, 2, 5}, {5, 10, 15}) == [10, 15]
    assert find_in_one_set_not_other_divisible_by_5({5, 10}, {5, 10}) is None
    assert find_in_one_set_not_other_divisible_by_5(set(), {5, 10, 15}) == [5, 10, 15]
    assert find_in_one_set_not_other_divisible_by_5({5, 10, 15}, set()) == [5, 10, 15]"
"def find_exact_divisors_of_100(lst):
    result = []
    for num in lst:
        if 100 % num == 0:
            result.append(num)
    if not result:
        print(""No numbers found that are exact divisors of 100."")
    return result","def test_find_exact_divisors_of_100():
    assert find_exact_divisors_of_100([1, 2, 4, 5, 10, 20, 25, 50]) == [1, 2, 4, 5, 10, 20, 25, 50]
    assert find_exact_divisors_of_100([7, 11, 13, 17]) == [7, 11, 13, 17]
    assert find_exact_divisors_of_100([6, 10, 15, 20]) == [6, 10, 15, 20]
    assert find_exact_divisors_of_100([8, 14, 19, 22]) == [8, 14, 19, 22]
    assert find_exact_divisors_of_100([3, 6, 9, 12, 18]) == [3, 6, 9, 12, 18]
    assert find_exact_divisors_of_100([5, 12, 4, 8, 16, 30]) == [5, 2, 4, 8, 16, 30]
    assert find_find_find_exact_divisors_of_100([15, 200, 250, 300]) == [10, 200, 250]
    assert find_find_find_find_find_find_exact_divisors_of_100([5, 35, 45, 50, 60]) == [5, 35, 60]
    assert find_find_find_find_find_exact_divisors_of_100([]) == []","def test_find_exact_divisors_of_100():
    assert find_exact_divisors_of_100([1, 2, 4, 5, 10, 20, 25, 50, 100]) == [1, 2, 4, 5, 10, 20, 25, 50, 100]
    assert find_exact_divisors_of_100([3, 6, 9, 12, 15, 18, 21]) == []
    assert find_exact_divisors_of_100([4, 8, 16, 32, 64]) == [4]
    assert find_exact_divisors_of_100([50, 100]) == [50, 100]
    assert find_exact_divisors_of_100([]) == []
    assert find_exact_divisors_of_100([10, 20, 30, 40]) == [10, 20]"
"def choose_first_even_less_than_50(arr):
    for num in arr:
        if num % 2 == 0 and num < 50:
            return num
    return None","def test_choose_first_even_less_than_50():
    assert choose_first_even_less_than_50([1, 3, 5, 7, 9]) == 1
    assert choose_first_even_less_than_50([2, 4, 6, 8, 10]) is None
    assert choose_first_even_less_than_50([15, 25, 35, 45]) == 15
    assert choose_first_even_less_than_50([12, 14, 16, 18]) == 12
    assert choose_first_even_less_than_50([70, 80, 90, 100]) is None
    assert choose_first_even_less_than_50([50, 60, 70]) == 50
    assert choose_first_even_less_than_50([11, 22, 33, 44]) == 11
    assert choose_first_even_less_than_50([13, 23, 33, 44, 55]) == 13
    assert choose_first_even_less_than_50([]) is None","def test_choose_first_even_less_than_50():
    assert choose_first_even_less_than_50([10, 20, 30, 40, 50]) == 10
    assert choose_first_even_less_than_50([5, 10, 15, 20, 25]) == 10
    assert choose_first_even_less_than_50([1, 3, 5, 7, 9]) is None
    assert choose_first_even_less_than_50([2, 4, 6, 8, 10]) == 2
    assert choose_first_even_less_than_50([12, 14, 16, 18, 20]) == 12"
"def find_in_dicts(dict1, dict2):
    result = []
    for key in dict1:
        if key in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_in_dicts():
    assert find_in_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['b']
    assert find_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == ['a', 'b']
    assert find_in_dicts({'a': 1, 'b': 2, 'c': 3}, {'b': 3}) == ['b']
    assert find_in_dicts({}, {'a': 1}) is None
    assert find_in_dicts({'a': 1}, {}) is None
    assert find_in_dicts({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) is None
    assert find_in_dicts({'x': 0, 'y': 1}, {'y': 0}) == ['y']
    assert find_in_dicts({'k': 10, 'l': 20}, {'m': 30, 'n': 40}) == ['k']
    assert find_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == ['a', 'b']","def test_find_in_dicts():
    assert find_in_dicts({'a': 1, 'b': 2}, {'a': 3, 'c': 4}) == ['a']
    assert find_in_dicts({'a': 1}, {'b': 2}) is None"
"def find_odd_not_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 5 != 0:
            result.append(num)
    if not result:
        print(""No odd numbers found that are not divisible by 5."")
    return result","def test_find_odd_not_divisible_by_5():
    assert find_odd_not_divisible_by_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 7, 9]
    assert find_odd_not_divisible_by_5([11, 13, 17, 19, 23, 25, 29]) == [11, 13, 17, 19, 23, 25, 29]
    assert find_odd_not_divisible_by_5([5, 10, 20, 25]) == []
    assert find_odd_not_divisible_by_5([2, 4, 6, 8, 10]) == []
    assert find_odd_not_divisible_by_5([-1, -3, -5, -7]) == [-1, -3, -5, -7]
    assert find_odd_not_divisible_divisible_by_5([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]
    assert find_odd_not_divisible_divisible_by_5([]) == []
    assert find_odd_not_divisible_divisible_by_5([15, 25, 35, 45, 55]) == [15, 25, 35, 45]
    assert find_odd_not_divisible_divisible_by_5([9, 18, 27, 36]) == [18, 27, 36]","def test_find_odd_not_divisible_by_5():
    assert find_odd_not_divisible_by_5([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 7, 9, 11, 13, 17, 19]
    assert find_odd_not_divisible_by_5([5, 10, 15, 20, 25]) == []
    assert find_odd_not_divisible_by_5([2, 4, 6, 8, 10, 12]) == []
    assert find_odd_not_divisible_by_5([1, 2, 3, 4, 5]) == [1, 3]
    assert find_odd_not_divisible_by_5([]) == []
    assert find_odd_not_divisible_by_5([11, 12, 13, 14, 15, 16]) == [11, 13]"
"def subtract_from_product_of_other_list_v2(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a - (a * b))
    if not result:
        return None
    return result","def test_subtract_from_product_of_other_list_v2():
    assert subtract_from_product_of_other_list_v2([2, 3], [1, 1]) == [0, 1]
    assert subtract_from_product_of_other_list_v2([4, 5], [2, 2]) == [2, 3]
    assert subtract_from_product_of_other_list_v2([1], [1]) == [0]
    assert subtract_from_product_of_other_list_v2([], [1, 2, 3]) is None
    assert subtract_from_product_of_other_list_v2([1, 2, 3], []) is None
    assert subtract_from_product_of_other_list_v2([2], [2]) == [0]
    assert subtract_from_product_of_other_list_v2([-1, -2], [-3, -4]) == [-2, -3]
    assert subtract_from_product_of_other_list_v2([1.1, 2.2], [3.3]) == [0.0, 1.0]
    assert subtract_from_product_of_other_list_v2([5, 6], [7]) == [3.0, 4.0]","def test_subtract_from_product_of_other_list_v2():
    assert subtract_from_product_of_other_list_v2([2, 4], [1, 2]) == [0, -4]
    assert subtract_from_product_of_other_list_v2([5, 7], [1, 1]) == [0, 0]
    assert subtract_from_product_of_other_list_v2([6, 8], [0, 3]) == [6, -16]
    assert subtract_from_product_of_other_list_v2([], [1, 2, 3]) is None
    assert subtract_from_product_of_other_list_v2([2, 3], []) is None"
"def find_product_of_two_numbers(lst):
    result = [a * b for a in lst for b in lst]
    if not result:
        return None
    return result","def test_find_product_of_two_numbers():
    assert find_product_of_two_numbers([1, 2]) == [2, 3]
    assert find_product_of_two_numbers([3, 4]) == [6, 8]
    assert find_product_of_two_numbers([0, 1]) == [0, 1]
    assert find_product_of_two_numbers([]) is None
    assert find_product_of_two_numbers([5, 6]) == [15, 30]
    assert find_product_of_two_numbers([7, 8]) == [49, 64]
    assert find_product_of_two_numbers([2, 3, 4]) == [6, 12]
    assert find_product_of_two_numbers([11, 13]) == [169, 205]
    assert find_product_of_two_numbers([15, 16, 17]) == [235, 256, 309]","def test_find_product_of_two_numbers():
    assert find_product_of_two_numbers([1, 2, 3]) == [1, 2, 3, 2, 4, 6, 3, 6, 9]
    assert find_product_of_two_numbers([0, 1, 2]) == [0, 0, 0, 0, 1, 2, 0, 2, 4]
    assert find_product_of_two_numbers([1]) == [1]"
"def remove_greater_than_x(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem <= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_greater_than_x():
    assert remove_greater_than_x([1, 3, 5, 7, 9], 4) == [7, 9]
    assert remove_greater_than_x([2, 4, 6, 8], 10) == [8]
    assert remove_greater_than_x([-1, -3, -5, -7], -4) == [-1, -3]
    assert remove_greater_than_x([10, 20, 30, 40], 25) == [30, 40]
    assert remove_greater_than_x([], 5) is None
    assert remove_greater_than_x([-10, -20, -30], -15) == [-10, -20]
    assert remove_greater_than_x([9, 19, 29], 30) == [19, 29]
    assert remove_greater_than_x([5, 5, 5, 5], 5) is None
    assert remove_greater_than_x([1, 2, 3, 4, 5], 0) == [4, 5]","def test_remove_greater_than_x():
    assert remove_greater_than_x([8, 12, 15, 4], 10) == [4, 8]
    assert remove_greater_than_x([16, 2, 5, 12], 7) == [5, 2]
    assert remove_greater_than_x([4, 8, 16, 3], 8) == [3, 8, 4]
    assert remove_greater_than_x([], 10) is None
    assert remove_greater_than_x([5, 7, 11], 15) == [11, 7, 5]
    assert remove_greater_than_x([4, 15, 20, 8], 10) == [8, 4]
    assert remove_greater_than_x([-4, -8, 0], -1) == [-8, -4]
    assert remove_greater_than_x([9, 17, 21], 10) == [9]"
"def common_numbers(lst1, lst2):
    return [x for x in lst1 if x in lst2]","def test_common_numbers():
    assert common_numbers([1, 2, 3], [3, 4, 5]) == [3]
    assert common_numbers([10, 20, 30], [5, 15, 25]) == []
    assert common_numbers([0, 1, 2], [2, 3, 4]) == [2]
    assert common_numbers(['a', 'b', 'c'], ['c', 'd', 'e']) == ['c']
    assert common_numbers([100, 200, 300], [50, 100, 150]) == []
    assert common_numbers([1, 1, 1], [1, 1, 1]) == [1]
    assert common_numbers([], []) == []
    assert common_numbers([4, 5, 6], [7, 8, 9]) == [8]
    assert common_numbers(['x'], ['y']) == []","def test_common_numbers():
    assert common_numbers([1, 2, 3], [3, 4, 5]) == [3]
    assert common_numbers([6, 7, 8], [8, 9, 10]) == [8]
    assert common_numbers([1, 2, 3], [4, 5, 6]) == []
    assert common_numbers([], [1, 2, 3]) == []"
"def find_divisible_by_3_and_4_not_7(lst):
    result = []
    for num in lst:
        if num % 3 == 0 and num % 4 == 0 and num % 7 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_3_and_4_not_7():
    assert find_divisible_by_3_and_4_not_7([8, 16, 24]) == [8, 16]
    assert find_divisible_by_3_and_4_not_7([3, 6, 9]) is None
    assert find_divisible_by_3_and_4_not_7([7, 14, 21]) is None
    assert find_divisible_by_3_and_4_not_7([8, 16, 32]) == [8, 16]
    assert find_divisible_by_3_and_4_not_7([3, 4, 5, 6]) is None
    assert find_divisible_by_3_and_4_not_7([5, 10, 15]) is None
    assert find_divisible_by_3_and_4_not_7([7, 9, 18]) is None
    assert find_divisible_by_3_and_4_not_7([1, 2, 3, 4, 5, 6, 7, 8]) is None
    assert find_divisible_by_3_and_4_not_7([3, 12, 4, 5, 7, 8]) is None","def test_find_divisible_by_3_and_4_not_7():
    assert find_divisible_by_3_and_4_not_7([12, 24, 36, 48, 60]) == [12, 24, 36, 48, 60]
    assert find_divisible_by_3_and_4_not_7([1, 2, 3, 4, 5]) is None
    assert find_divisible_by_3_and_4_not_7([21, 28, 35, 42, 49]) is None
    assert find_divisible_by_3_and_4_not_7([-12, -24, -36, -48, -60]) == [-12, -24, -36, -48, -60]
    assert find_divisible_by_3_and_4_not_7([6, 18, 30, 42, 54]) is None"
"def decrease_ring_elements(arr, value):
    if not arr:
        return arr
    return [x - value for x in arr]","def test_decrease_ring_elements():
    assert decrease_ring_elements([1, 2, 3], 1) == [0, 1, 2]
    assertdecrease_ring_elements([], 1) == []
    assert decrease_ring_elements([0], 1) == [1]
    assert decrease_ring_elements([1, 2, 3], -1) == [2, 3, 0]
    assert decrease_ring_elements([1, 2, 3], 0) == [1, 2, 3]
    assert decrease_ring_elements([1, 2, 3], 2) == [3, 1, 2]
    assert decrease_ring_elements([1, -2, 3], 1) == [0, -1, 2]
    assert decrease_ring_elements([-1, -2, -3], 1) == [2, -1, 0]
    assert decrease_ring_elements([1, 1, 1], 1) == [0, 0, 0]","def test_decrease_ring_elements():
    assert decrease_ring_elements([1, 2, 3], 1) == [0, 1, 2]
    assert decrease_ring_elements([], 1) == []
    assert decrease_ring_elements([0], 1) == [-1]
    assert decrease_ring_elements([1, 2, 3], -1) == [2, 3, 4]
    assert decrease_ring_elements([1, 2, 3], 0) == [1, 2, 3]
    assert decrease_ring_elements([1, 2, 3], 2) == [-1, 0, 1]
    assert decrease_ring_elements([1, -2, 3], 1) == [0, -3, 2]
    assert decrease_ring_elements([-1, -2, -3], 1) == [-2, -3, -4]"
"def insertion_sort_ascending(arr):
    result = arr[:]
    for i in range(1, len(result)):
        key = result[i]
        j = i - 1
        while j >= 0 and key < result[j]:
            result[j + 1] = result[j]
            j -= 1
        result[j + 1] = key
    if not result:
        return None
    return result","def test_insertion_sort_ascending():
    assert insertion_sort_ascending([1, 3, 5, 7]) == [1, 3, 5, 7]
    assert insertion_sort_ascending([2, 4, 6, 8]) == [2, 4, 6, 8]
    assert insertion_sort_ascending([10, 20, 30]) == [10, 20, 30]
    assert insertion_sort_ascending([]) is None
    assert insertion_sort_ascending([5, 5, 5]) == [5, 5, 5]
    assert insertion_sort_ascending([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]
    assert insertion_sort_ascending([0, 0, 0]) == [0, 0, 0]
    assert insertion_sort_ascending([1, 2, 3, 4, 5, 5, 6, 7]) == [1, 2, 3, 4, 5, 5, 6, 7]
    assert insertion_sort_ascending([10, 10, 10, 10]) == [10, 10, 10]","def test_insertion_sort_ascending():
    assert insertion_sort_ascending([3, 2, 1]) == [1, 2, 3]
    assert insertion_sort_ascending([1, 2, 3]) == [1, 2, 3]
    assert insertion_sort_ascending([]) is None
    assert insertion_sort_ascending([1]) == [1]
    assert insertion_sort_ascending([3, 1, 2]) == [1, 2, 3]"
"def find_in_list_not_in_set(lst, s):
    result = [x for x in lst if x not in s]
    if not result:
        return None
    return result","def test_find_in_list_not_in_set():
    assert find_in_list_not_in_set([1, 2, 3, 4], {3, 4, 5}) == [1, 2]
    assert find_in_list_not_in_set([1, 2, 3], {1, 2, 3}) is None
    assert find_in_list_not_in_set([], {1, 2, 3}) is None
    assert find_in_list_not_in_set([1, 2, 3], set()) == [1, 2, 3]
    assert find_in_list_not_in_set([1, 3, 5], {2, 4, 6}) == [1, 3, 5]
    assert find_in_list_not_in_set([-1, -2, -3], {-3, -4}) == [-1, -2]
    assert find_in_list_not_in_set([0, 2, 4], {4, 0, 6}) == [2]
    assert find_in_list_not_in_set([1.1, 2.2, 3.3], {3.3, 4.4}) == [1.1, 2.2]
    assert find_3(1, 2, 3), {3, 4, 5}) == [1, 2, 3]","def test_find_in_list_not_in_set():
    assert find_in_list_not_in_set([1, 2, 3], {2}) == [1, 3]
    assert find_in_list_not_in_set([1, 2, 3], {1, 2, 3}) is None
    assert find_in_list_not_in_set([], {1, 2, 3}) is None"
"def find_even_not_powers_of_2(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and (num & (num - 1)) != 0:
            result.append(num)
    if not result:
        return ""No even numbers found that are not powers of 2.""
    return result","def test_find_even_not_powers_of_2():
    assert find_even_not_powers_of_2([2, 4, 6, 8, 10, 12, 14, 16]) == [2, 4, 6, 8, 10, 12, 14, 16]
    assert find_even_not_powers_of_2([1, 3, 5, 7, 9, 11]) == 'No even numbers found that are not powers of 2.'
    assert find_even_not_powers_of_2([17, 19, 23, 25, 27]) == [17, 19, 23, 25, 27]
    assert find_even_not_powers_of_2([21, 24, 28, 30, 32]) == [21, 24, 28, 30, 32]
    assert find_even_not_powers_of_2([16, 20, 24, 28]) == [16, 20, 24, 28]
    assert find_even_not_powers_of_2([]) == 'No even numbers found that are not powers of 2.'
    assert find_even_not_powers_of_2([9, 12, 15, 18]) == [9, 12, 15, 18]
    assert find_even_not_powers_powers_of_2([33, 35, 38]) == [33, 35, 38]
    assert find_not_powers_powers_of_2([41, 43, 47]) == [41, 43, 47]","def test_find_even_not_powers_of_2():
    assert find_even_not_powers_of_2([2, 3, 6, 9]) == [6]
    assert find_even_not_powers_of_2([4, 8, 16, 32]) == ""No even numbers found that are not powers of 2.""
    assert find_even_not_powers_of_2([18, 20, 22, 24]) == [18, 20, 22, 24]"
"def find_square_numbers_in_tuple(tpl):
    result = []
    for elem in tpl:
        if (elem ** 0.5).is_integer():
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_square_numbers_in_tuple():
    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5, 16, 25, 0, 100)) == (1, 4, 16, 64, 100)
    assert find_square_numbers_in_tuple((7, 9, 10, 12)) == (9,)
    assert find_square_numbers_in_tuple((2, 3, 5, 6)) is None
    assert find_square_numbers_in_tuple((4, 9, 16, 25, 36)) == (4, 9, 16, 64, 100)
    assert find_square_numbers_in_tuple((2, 3, 4, 5, 6)) is None
    assert find_square_numbers_in_tuple((7, 8, 10, 11, 12)) == (10,)
    assert find_square_numbers_in_tuple((),) is None
    assert find_square_numbers_in_tuple((1, 3, 7, 111, 14)) == (1,)
    assert find_square_numbers_in_tuple((1, 4, 9, 16, 25, 36)) == (1, 4, 16, 64, 1000)","def test_find_square_numbers_in_tuple():
    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5)) == (1, 4)
    assert find_square_numbers_in_tuple((10, 9, 8, 7, 6)) == (9,)
    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5)) == (1, 4)
    assert find_square_numbers_in_tuple((4, 9, 16, 25, 36)) == (4, 9, 16, 25, 36)
    assert find_square_numbers_in_tuple(()) is None"
"def find_divisible_by_5_in_one_set(set1, set2):
    result = []
    for elem in set1:
        if elem % 5 == 0 and elem not in set2:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_5_in_one_set():
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {10, 15, 20}) == [10, 15]
    assert find_divisible_by_5_in_one_set({25, 30, 35}, {35, 40, 45}) == [35]
    assert find_divisible_by_5_in_one_set({50, 55}, {55, 60}) == [55]
    assert find_divisible_by_5_in_one_set(set(), {5, 10, 15}) is None
    assert find_divisible_by_5_in_one_set({5, 10, 15}, set()) is None
    assert find_divisible_by_5_in_one_set({20, 25, 30}, {25, 35, 40}) == [25]
    assert find_divisible_by_5_in_one_set({1, 3, 7}, {7, 10}) == [7]
    assert find_divisible_by_5_in_one_set({9, 14, 26}, {26, 39}) == [26]
    assert find_divisible_by_5_in_one_set({30, 35, 40}, {40, 45}) == [40]","def test_find_divisible_by_5_in_one_set():
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {10, 20, 30}) == [5, 15]
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {5, 10, 15}) is None
    assert find_divisible_by_5_in_one_set({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_5_in_one_set({10, 20, 30}, {5, 15, 25}) == [10, 20, 30]
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {2, 4, 6}) == [5, 10, 15]"
"def count_unique_elements_in_list_and_dict(lst, d):
    if not lst or not d:
        return None
    result = set(lst).union(set(d.values()))
    return len(result) if result else None","def test_count_unique_elements_in_list_and_dict():
    assert count_unique_elements_in_list_and_dict([1, 2, 3], {'a': 4, 'b': 5}) == 5
    assert count_unique_elements_in_list_and_dict([], {}) is None
    assert count_unique_elements_in_list_and_dict([1, 1], {'a': 1}) == 1
    assert count_unique_elements_in_list_and_dict([0, 1], {'a': 1, 'b': 0}) == 2
    assert count_unique_elements_in_list_and_dict(['a', 'b', 'c'], {'a': 'd', 'b': 'e'}) == 3
    assert count_unique_elements_in_list_and_dict(['x'], {'a': 'y'}) == 1
    assert count_unique_elements_in_list_and_dict(['car', 'car'], {'a': 'car'}) == 2
    assert count_unique_elements_in_list_and_dict([3, 3], {'a': 3, 'b': 3}) == 3
    assert count_unique_elements_in_list_and_dict([10, 20], {'a': 10, 'b': 20}) == 20","def test_count_unique_elements_in_list_and_dict():
    assert count_unique_elements_in_list_and_dict([1, 2, 2], {1: 'a', 2: 'b'}) == 4
    assert count_unique_elements_in_list_and_dict([], {}) is None
    assert count_unique_elements_in_list_and_dict([4, 5], {5: 'e'}) == 3
    assert count_unique_elements_in_list_and_dict([6, 7], {7: 'f'}) == 3
    assert count_unique_elements_in_list_and_dict([8, 9], {9: 'g'}) == 3
    assert count_unique_elements_in_list_and_dict([0, 1], {1: 'h'}) == 3
    assert count_unique_elements_in_list_and_dict([2, 3, 5], {5: 'i'}) == 4
    assert count_unique_elements_in_list_and_dict([7, 11], {11: 'j'}) == 3"
"def find_powers_of_2_not_even(lst):
    result = []
    for num in lst:
        if (num & (num - 1)) == 0 and num % 2 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_powers_of_2_not_even():
    assert find_powers_of_2_not_even([1, 2, 3, 4, 8, 16]) == [1, 3, 8]
    assert find_powers_of_2_not_even([6, 12, 18]) is None
    assert find_powers_of_2_not_even([32, 64, 128]) is None
    assert find_powers_of_2_not_even([1, 4, 8, 16]) == [1]
    assert find_powers_of_2_not_even([1024, 2048]) is None
    assert find_powers_of_2_not_even([5, 10, 20, 40]) is None
    assert find_powers_of_2_not_even([256, 512, 1024]) is None
    assert find_powers_of_2_not_even([5, 15, 25, 35]) is None
    assert find_powers_of_2_not_even([7, 9, 12]) is None","def test_find_powers_of_2_not_even():
    assert find_powers_of_2_not_even([1, 3, 7]) == [1]
    assert find_powers_of_2_not_even([8, 16, 32]) is None
    assert find_powers_of_2_not_even([2, 4, 64]) is None"
"def diff_multiplied_by_index(lst1, lst2):
    result = []
    for i, num in enumerate(lst2):
        if i < len(lst1):
            result.append((lst1[i] - num) * i)
    if not result:
        return None
    return result","def test_diff_multiplied_by_index():
    assert diff_multiplied_by_index([2, 4], [1, 2]) == [0, 2]
    assert diff_multiplied_by_index([3, 5], [1, 1]) == [0, 4]
    assert diff_multiplied_by_index([6, 8], [3, 2]) == [0, 6]
    assert diff_multiplied_by_index([], [1, 2, 3]) is None
    assert diff_multiplied_by_index([2, 3], []) is None
    assert diff_multiplied_by_index([1], [1]) == [0]
    assert diff_multiplied_by_index([2], [2, 2]) == [0, 2]
    assert diff_multiplied_by_index([5, 10], [5, 5]) == [0, 10]
    assert diff_multiplied_by_index([7, 14], [7, 14]) == [0, 12]","def test_diff_multiplied_by_index():
    assert diff_multiplied_by_index([10, 20], [5, 5]) == [0, 15]
    assert diff_multiplied_by_index([5, 10], [2, 1]) == [0, 9]
    assert diff_multiplied_by_index([1, 2, 3], [1, 2, 3]) == [0, 0, 0]
    assert diff_multiplied_by_index([], [1, 2, 3]) is None"
"def extract_numbers_from_string_2(s):
    if not s:
        return None
    numbers = []
    current_number = []
    for ch in s:
        if ch.isdigit():
            current_number.append(ch)
        elif current_number:
            numbers.append(''.join(current_number))
            current_number = []
    if current_number:
        numbers.append(''.join(current_number))
    return numbers if numbers else None","def test_extract_numbers_from_string_2():
    assert extract_numbers_from_string_2(""a1b2c3"") == [""a"", ""b"", ""c""]
    assert extract_numbers_from_string_2(""123"") == [""1"", ""2"", ""3""]
    assert extract_numbers_from_string_2("""") is None
    assert extract_numbers_from_string_2(""abc"") is None
    assert extract_numbers_from_string_2(""1a2b3c"") == [""1"", ""2"", ""3""]
    assert extract_numbers_from_string_2(""0"") == [""0""]
    assert extract_numbers_from_string_2(""10 20 30 40"") == [""10"", ""20"", ""30"", ""40""]
    assert extract_numbers_from_string_2(""5 15 25 35"") == [""5"", ""15"", ""25"", ""35""]
    assert extract_numbers_from_string_2(""123 456 789"") == [""123"", ""456"", ""789""]","def test_extract_numbers_from_string_2():
    assert extract_numbers_from_string_2(""abc123xyz456"") == [""123"", ""456""]
    assert extract_numbers_from_string_2(""no numbers here"") is None
    assert extract_numbers_from_string_2("""") is None
    assert extract_numbers_from_string_2(None) is None
    assert extract_numbers_from_string_2(""123"") == [""123""]
    assert extract_numbers_from_string_2(""abc123"") == [""123""]"
"def count_vowels(s):
    vowels = ""aeiou""
    vowels_count = 0
    consonants_count = 0
    for char in s:
        if char in vowels:
            vowels_count += 1
        elif char.isalpha():
            consonants_count += 1
    if vowels_count > consonants_count:
        return True
    return False","def test_count_vowels():
    assert count_vowels(""hello"") is False
    assert count_vowels(""a"") is True
    assert count_vowels(""bcdfg"") is False
    assert count_vowels(""AEIOU"") is True
    assert count_vowels(""xyz"") is False
    assert count_vowels(""supercalifragilisticexpialidocious"") is True
    assert count_vowels("""") is False
    assert count_vowels(""aEiOu"") is False
    assert count_vowels(""ai"") is True","def test_count_vowels():
    assert count_vowels(""hello"") is False
    assert count_vowels(""aeioubcd"") is True
    assert count_vowels(""aeiou"") is True
    assert count_vowels(""bcd"") is False
    assert count_vowels(""xylophone"") is False
    assert count_vowels(""consonant"") is False"
"def find_numbers_greater_than_dict_values(lst, d):
    if not lst or not d:
        return None
    greater_numbers = set()
    max_value = max(d.values())
    for n in lst:
        if n > max_value:
            greater_numbers.add(n)
    return sorted(greater_numbers) if greater_numbers else None","def test_find_numbers_greater_than_dict_values():
    assert find_numbers_greater_than_dict_values([1, 2, 3], {""a"": 2, ""b"": 3}) == [1, 3]
    assert find_numbers_greater_than_dict_values([1, 2, 3], {""a"": 1, ""b"": 2}) == [1, 2, 3]
    assert find_numbers_greater_than_dict_values([], {""a"": 1, ""b"": 2}) is None
    assert find_numbers_greater_than_dict_values([4, 5, 6], {""a"": 3, ""b"": 4}) == [5, 6]
    assert find_numbers_greater_than_dict_values([7, 8], {""a"": 5, ""b"": 6}) == [7, 8]
    assert find_numbers_greater_than_dict_values([5, 6], {""a"": 4, ""b"": 3}) == [5, 6]
    assert find_numbers_greater_than_dict_values([10, 20], {""a"": 5, ""b"": 15}) == [20]
    assert find_numbers_greater_than_dict_values([2, 3, 4], {""a"": 7, ""b"": 8}) == [2, 3, 4]
    assert find_numbers_greater_than_dict_values([3, 5], {""a"": 6, ""b"": 7}) == [3, 5]","def test_find_numbers_greater_than_dict_values():
    assert find_numbers_greater_than_dict_values([1, 2, 3], {'a': 0, 'b': 1}) == [2, 3]
    assert find_numbers_greater_than_dict_values([], {'a': 1, 'b': 2}) is None
    assert find_numbers_greater_than_dict_values([5, 6], {}) is None
    assert find_numbers_greater_than_dict_values([5, 6, 7], {'a': 5}) == [6, 7]
    assert find_numbers_greater_than_dict_values([10], {'a': 5, 'b': 8}) == [10]
    assert find_numbers_greater_than_dict_values([5, 8, 12], {'a': 10}) == [12]
    assert find_numbers_greater_than_dict_values([1, 2, 3], {'a': 3}) is None
    assert find_numbers_greater_than_dict_values([1, 2, 3], {'a': 0, 'b': 1, 'c': 2}) == [3]"
"def average(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return 0
    total = sum(lst)
    count = len(lst)
    if total == 0:
        print(""Sum is zero!"")
    return total / count","def test_average():
    assert average([1, 2, 3, 4, 5]) == 3
    assert average([10, 20, 30, 40, 50]) == 20
    assert average([-1, -2, -3, -4]) == -2
    assert average([5, 5, 5, 5]) == 5
    assert average([]) == 0
    assert average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.4
    assert average([100, 200, 300, 400]) == 200
    assert average([7, 14, 21, 28]) == 21.0
    assert average([-10, 10, -10, 10]) == 0","def test_average():
    assert average([1, 2, 3, 4, 5]) == 3
    assert average([0, 0, 0, 0]) == 0
    assert average([10, 20, 30, 40]) == 25
    assert average([-1, -2, -3, -4]) == -2.5
    assert average([5, 5, 5, 5]) == 5
    assert average([1, 2]) == 1.5"
"def find_difference_elements_in_list(lst):
    result = []
    for i in range(len(lst)):
        for j in range(len(lst)):
            if i != j and lst[i] - lst[j] in lst:
                result.append(lst[i])
    return tuple(result) if result else None","def test_find_difference_elements_in_list():
    assert find_difference_elements_in_list([1, 2, 3, 4, 5]) == (2, 3, 4, 5)
    assert find_difference_elements_in_list([10, 20, 30, 40]) == (10, 20, 30, 40)
    assert find_difference_elements_in_list([5, 10, 15]) == (5, 10, 15)
    assert find_difference_elements_in_list([]) is None
    assert find_difference_elements_in_list([1, 1, 1, 1]) is None
    assert find_difference_elements_in_list([2, 4, 6, 8]) == (2, 4, 6, 8)
    assert find_difference_elements_in_list([-1, -2, -3, -4]) == (-3, -4)
    assert find_difference_elements_in_list([7, 8, 9, 10]) == (7, 8, 9, 10)
    assert find_difference_elements_in_list([11, 222, 33, 444]) == (11, 222, 33, 44)","def test_find_difference_elements_in_list():
    assert find_difference_elements_in_list([1, 2, 3, 4]) == (2, 3, 3, 4, 4, 4)
    assert find_difference_elements_in_list([5, 10, 15, 20]) == (10, 15, 15, 20, 20, 20)
    assert find_difference_elements_in_list([7, 14, 28]) == (14, 28)
    assert find_difference_elements_in_list([13, 26, 39]) == (26, 39, 39)"
"def find_in_both_sets_not_divisible_by_3(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 3 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_in_both_sets_not_divisible_by_3():
    assert find_in_both_sets_not_divisible_by_3({1, 2, 3, 6, 9}, {2, 4, 5, 7, 8}) == [2, 4]
    assert find_in_both_sets_not_divisible_by_3({3, 6, 9}, {3, 6, 9}) == [3, 6, 9]
    assert find_in_both_sets_not_divisible_by_3({1, 4, 5}, {7, 8, 10}) is None
    assert find_in_both_sets_not_divisible_by_3(set(), set()) is None
    assert find_in_both_sets_not_divisible_by_3({1, 2, 2, 3}, {2, 2, 3}) == [2, 2, 3]
    assert find_in_both_sets_not_divisible_by_3({1, 3, 5, 7}, {2, 4, 6}) == [2, 4]
    assert find_in_both_sets_not_divisible_by_3({10, 15, 20}, {25, 30}) is None
    assert find_in_both_sets_not_divisible_by_3({7, 14, 210}, {14, 21}) == [1]
    assert find_in_both_sets_not_divisible_divisible_by_3({3, 6, 9}, {6, 9}) == [6, 9]","def test_find_in_both_sets_not_divisible_by_3():
    assert find_in_both_sets_not_divisible_by_3({1, 2, 3, 6, 9}, {2, 3, 5, 6}) == [2]
    assert find_in_both_sets_not_divisible_by_3({1, 2, 4}, {3, 4, 5, 6}) == [4]
    assert find_in_both_sets_not_divisible_by_3({3, 6, 9}, {12, 15}) is None
    assert find_in_both_sets_not_divisible_by_3(set(), {1, 2, 4}) is None
    assert find_in_both_sets_not_divisible_by_3({1, 2, 3}, set()) is None
    assert find_in_both_sets_not_divisible_by_3({2, 4, 6}, {2, 8, 10}) == [2]"
"def sum_exclude_multiples_of_two(n):
    total = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            continue
        total += i
    return total","def test_sum_exclude_multiples_of_two():
    assert sum_exclude_multiples_of_two(10) == 30
    assert sum_exclude_multiples_of_two(1) == 1
    assert sum_exclude_multiples_of_two(0) == 0
    assert sum_exclude_multiples_of_two(2) == 2
    assert sum_exclude_multiples_of_two(7) == 12
    assert sum_exclude_multiples_of_two(8) == 16
    assert sum_exclude_multiples_of_two(9) == 27
    assert sum_exclude_multiples_of_two(15) == 35
    assert sum_exclude_multiples_of_two(100) == 100","def test_sum_exclude_multiples_of_two():
    assert sum_exclude_multiples_of_two(10) == 25
    assert sum_exclude_multiples_of_two(1) == 1
    assert sum_exclude_multiples_of_two(0) == 0
    assert sum_exclude_multiples_of_two(-5) == 0
    assert sum_exclude_multiples_of_two(5) == 9"
"def pop_elements_less_than_y(stack, y):
    result = []
    while stack:
        elem = stack.pop()
        if elem < y:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_less_than_y():
    assert pop_elements_less_than_y([1, 2, 3, 4, 5], 3) == [2]
    assert pop_elements_less_than_y([5, 4, 3, 2, 1], 3) == [2, 1]
    assert pop_elements_less_than_y([1, 2, 3], 4) is None
    assert pop_elements_less_than_y([], 3) is None
    assert pop_elements_less_than_y([1, 2, 3], 1) == [2]
    assert pop_elements_less_than_y([3, 2, 1], 2) == [1]
    assert pop_elements_less_than_y([10, 20, 30], 25) == [20, 10]
    assert pop_elements_less_than_y([7, 8, 9], 8) == [9]
    assert pop_elements_less_than_y([1, 3, 5, 7], 7) == [3, 1]","def test_pop_elements_less_than_y():
    assert pop_elements_less_than_y([1, 2, 3, 4, 5], 3) == [2, 1]
    assert pop_elements_less_than_y([5, 4, 3, 2, 1], 3) == [1, 2]
    assert pop_elements_less_than_y([1, 2, 3], 5) == [3, 2, 1]
    assert pop_elements_less_than_y([], 3) is None
    assert pop_elements_less_than_y([1, 2, 3], 0) is None"
"def less_than_value(lst, value):
    if not isinstance(value, (int, float)) or not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and x < value]","def test_less_than_value():
    assert less_than_value([1, 2, 3, 4], 3) == [1, 2]
    assert less_than_value([5, 6, 7], 7) == [5, 6]
    assert less_than_value([10, 20, 30], 25) == [10, 20]
    assert less_than_value([], 1) is None
    assert less_than_value([1, 2, 3], 1) is None
    assert less_than_value([1, 2, 3], 4) == [1, 2, 3]
    assert less_than_value([-1, -2, -3], -3) == [-1, -2]
    assert less_than_value([10, 11, 12], 13) == [10, 11]
    assert less_than_value([15, 16, 17], 18) == [15, 16]","def test_less_than_value():
    assert less_than_value([1, 2, 3, 4], 3) == [1, 2]
    assert less_than_value([5, 6, 7], 10) == [5, 6, 7]
    assert less_than_value([], 5) is None
    assert less_than_value([1, 2, ""three""], 3) == [1, 2]
    assert less_than_value([1, 2], ""three"") is None"
"def pop_elements_divisible_by_3(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_divisible_by_3():
    assert pop_elements_divisible_by_3([3, 6, 9, 12, 15]) == [15, 12, 9, 6, 3]
    assert pop_elements_divisible_by_3([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 6, 3, 2, 1]
    assert pop_elements_divisible_by_3([3, 3, 3, 3]) == [3, 3, 3, 3]
    assert pop_elements_divisible_by_3([10, 11, 12, 13, 14, 15]) == [14, 13, 11, 10]
    assert pop_elements_divisible_by_3([3]) == [3]
    assert pop_elements_divisible_by_3([1]) == [1]
    assert pop_elements_divisible_by_3_2([9, 18, 27, 36, 45, 54]) == [54, 4, 36, 27, 18]
    assert pop_elements_divisible_by_3_2([7, 10, 114, 222, 29]) == [29, 14, 10, 7]
    assert pop_elements_divisible_by_3_2([]) is None","def test_pop_elements_divisible_by_3():
    assert pop_elements_divisible_by_3([1, 2, 3, 4, 5, 6, 9]) == [9, 6, 3]
    assert pop_elements_divisible_by_3([1, 2, 4, 5]) is None
    assert pop_elements_divisible_by_3([3, 6, 9]) == [9, 6, 3]
    assert pop_elements_divisible_by_3([]) is None
    assert pop_elements_divisible_by_3([3]) == [3]"
"def is_float(s):
    try:
        float(s)
        return True
    except ValueError:
        print(f""'{s}' is not a valid floating-point number."")
        return False","def test_is_float():
    assert is_float(""3.14"") is True
    assert is_float(""123"") is True
    assert is_float(""-0.001"") is True
    assert is_float(""abc"") is False
    assert is_float(""3.14.15"") is False
    assert is_float("""") is False
    assert is_float(""3.14.15e-1"") is False
    assert is_float(""1.2.3"") is True
    assert is_float(""0"") is False","def test_is_float():
    assert is_float(""3.14"") is True
    assert is_float(""2.718"") is True
    assert is_float(""abc"") is False
    assert is_float(""123"") is True
    assert is_float(""0.0"") is True"
"def choose_first_even_length_word(*words):
    for word in words:
        if len(word) % 2 == 0:
            return word
    return None","def test_choose_first_even_length_word():
    assert choose_first_even_length_word(""abcd"", ""defg"", ""hijklmn"") == ""defg""
    assert choose_first_even_length_word(""abcdefgh"", ""ijklmnopqrs"", ""tuv"") == ""tuv""
    assert choose_first_even_length_word(""123456"", ""789"", ""0123"") == ""123456""
    assert choose_first_even_length_word(""aaaaaa"", ""bbbbbbb"", ""ccccccccc"") == ""aaaaaa""
    assert choose_first_even_length_word(""hello"", ""world"", ""test"") is None
    assert choose_first_even_length_word(""a"", ""b"", ""c"") == ""a""
    assert choose_first_even_length_word(""xyz"", ""789"", ""0123"") == ""789""
    assert choose_first_even_length_word(""first"", ""second"", ""third"") == ""first""
    assert choose_first_even_even_length_word(""first"", ""last"", ""second"") == ""first""","def test_choose_first_even_length_word():
    assert choose_first_even_length_word(""one"", ""two"", ""three"", ""four"") == ""four""
    assert choose_first_even_length_word(""hello"", ""world"", ""Python"") == 'Python'
    assert choose_first_even_length_word(""apple"", ""banana"", ""cherry"", ""dates"") == ""banana""
    assert choose_first_even_length_word(""apple"", ""b"", ""c"", ""dd"") == ""dd""
    assert choose_first_even_length_word(""a"", ""bb"", ""ccc"", ""dddd"") == ""bb"""
"def count_even_odd(lst):
    count = {""even"": 0, ""odd"": 0}
    for num in lst:
        if num % 2 == 0:
            count[""even""] += 1
        else:
            count[""odd""] += 1
    return count","def test_count_even_odd():
    assert count_even_odd([1, 2, 3, 4, 5, 6]) == {""even"": 3, ""odd"": 3}
    assert count_even_odd([1, 3, 5, 7]) == {""even"": 0, ""odd"": 4}
    assert count_even_odd([2, 4, 6, 8]) == {""even"": 4, ""odd"": 0}
    assert count_even_odd([]) == {}
    assert count_even_odd([1, 1, 1, 1]) == {""even"": 0, ""odd"": 4}
    assert count_even_odd([2, 2, 2, 2]) == {""even"": 4, ""odd"": 0}
    assert count_even_odd([1]) == {""even"": 0, ""odd"": 1}
    assert count_even_odd([2]) == {""even"": 1, ""odd"": 0}
    assert count_even_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {""even"": 5, ""odd"": 7}","def test_count_even_odd():
    assert count_even_odd([1, 2, 3, 4, 5]) == {""even"": 2, ""odd"": 3}
    assert count_even_odd([2, 4, 6]) == {""even"": 3, ""odd"": 0}
    assert count_even_odd([1, 3, 5]) == {""even"": 0, ""odd"": 3}
    assert count_even_odd([0, -2, -4, 1, 3]) == {""even"": 3, ""odd"": 2}
    assert count_even_odd([]) == {""even"": 0, ""odd"": 0}
    assert count_even_odd([2, 3, 5, 7]) == {""even"": 1, ""odd"": 3}
    assert count_even_odd([0, 2, 4, 6]) == {""even"": 4, ""odd"": 0}
    assert count_even_odd([10, 11, 12, 13, 14]) == {""even"": 3, ""odd"": 2}
    assert count_even_odd([1, 2, 3, 5, 6]) == {""even"": 2, ""odd"": 3}"
"def find_divisible_by_2_and_7(tpl):
    result = []
    for elem in tpl:
        if elem % 2 == 0 and elem % 7 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_2_and_7():
    assert find_divisible_by_2_and_7((1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)
    assert find_divisible_by_2_and_7((10, 9, 8, 7)) == (8, 7)
    assert find_divisible_by_2_and_7((1, 3, 5, 7)) == (1, 3, 5, 7)
    assert find_divisible_by_2_and_7((0, 1, 2, 3, 4)) == (0, 1, 2, 3, 4)
    assert find_divisible_by_2_and_7((2, 4, 6, 8)) == (2, 4, 6, 8)
    assert find_divisible_by_2_and_7((),) is None
    assert find_divisible_by_2_and_7((7, 8, 9, 10)) == (8, 10)
    assert find_divisible_by_2_and_7((5, 7, 9, 111, 13)) == (5, 7, 9, 111, 13)
    assert find_divisible_by_2_and_7((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)","def test_find_divisible_by_2_and_7():
    assert find_divisible_by_2_and_7((1, 2, 7, 14, 21, 28, 35, 42)) == (14, 28, 42)
    assert find_divisible_by_2_and_7((14, 28, 42, 56, 70, 84)) == (14, 28, 42, 56, 70, 84)
    assert find_divisible_by_2_and_7((1, 3, 5, 7, 9, 11)) is None
    assert find_divisible_by_2_and_7((2, 4, 8, 16)) is None
    assert find_divisible_by_2_and_7((0, 7, 14, 28)) == (0, 14, 28)
    assert find_divisible_by_2_and_7((7, 14, 21)) == (14,)
    assert find_divisible_by_2_and_7((),) is None"
"def filter_numeric_strings(strings):
    return [s for s in strings if s.isdigit()]","def test_filter_numeric_strings():
    assert filter_numeric_strings([""123"", ""456"", ""789""]) == [""123"", ""456"", ""789""]
    assert filter_numeric_strings([""abc"", ""def""]) == []
    assert filter_numeric_strings([""12"", ""34"", ""56""]) == [""12"", ""34"", ""56""]
    assert filter_numeric_strings([]) == []
    assert filter_numeric_strings([""000"", ""001""]) == [""000"", ""001""]
    assert filter_numeric_strings([""111"", ""222""]) == [""111"", ""222""]
    assert filter_numeric_strings([""333"", ""444"", ""555""]) == [""333"", ""444"", ""555""]
    assert filter_numeric_strings([""hello"", ""world""]) == [""hello"", ""world""]
    assert filter_numeric_strings([""-1"", ""-2"", ""-3""]) == [""-1"", ""-2"", ""-3""]","def test_filter_numeric_strings():
    assert filter_numeric_strings([]) == []
    assert filter_numeric_strings([""123"", ""abc"", ""456"", ""78a""]) == [""123"", ""456""]
    assert filter_numeric_strings([""12"", ""12b"", ""c34"", ""56""]) == [""12"", ""56""]
    assert filter_numeric_strings([""one"", ""two"", ""three""]) == []"
"def reverse_even_index_elements(arr):
    if not arr:
        return arr
    n = len(arr)
    result = arr[:]
    for i in range(0, n, 2):
        result[i] = arr[n - 1 - i]
    return result","def test_reverse_even_index_elements():
    assert reverse_even_index_elements([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]
    assert reverse_even_index_elements([]) == []
    assert reverse_even_index_elements([1, 3, 5, 7]) == [7, 5, 3, 1]
    assert reverse_even_index_elements([2, 4, 6, 8]) == [8, 6, 4, 2]
    assert reverse_even_index_elements([0, 1, 2, 3]) == [3, 2, 1, 0]
    assert reverse_even_index_elements([2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2]
    assert reverse_even_index_elements([1]) == [1]
    assert reverse_even_index_elements([2, 2, 2, 2]) == [2, 2, 2]
    assert reverse_even_index_elements([3, 3, 3, 3]) == [3, 3, 3]","def test_reverse_even_index_elements():
    assert reverse_even_index_elements([1, 2, 3, 4]) == [4, 2, 2, 4]
    assert reverse_even_index_elements([]) == []
    assert reverse_even_index_elements([0]) == [0]
    assert reverse_even_index_elements([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]
    assert reverse_even_index_elements([1, -1, 2, -2]) == [-2, -1, -1, -2]
    assert reverse_even_index_elements([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert reverse_even_index_elements([10]) == [10]
    assert reverse_even_index_elements([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]"
"def find_max_value_in_dict_4(d):
    if not d:
        return None
    max_value = max(d.values())
    return max_value if max_value else None","def test_find_max_value_in_dict_4():
    assert find_max_value_in_dict_4({""a"": 1, ""b"": 2, ""c"": 3}) == 3
    assert find_max_value_in_dict_4({""a"": -1, ""b"": -2, ""c"": -3}) == -1
    assert find_max_value_in_dict_4({""a"": 0}) is None
    assert find_max_value_in_dict_4({}) is None
    assert find_max_value_in_dict_4({""a"": 5, ""b"": 5, ""c"": 5}) == 5
    assert find_max_value_in_dict_4({""a"": 5, ""b"": -5, ""c"": 10}) == -5
    assert find_max_value_in_dict_4({""a"": 1, ""b"": -2}) == 1
    assert find_max_value_in_dict_4({""a"": 100, ""b"": 200, ""c"": 300}) == 300
    assert find_max_value_in_dict_4({""a"": -1, ""b"": -2, ""c"": 3.0}) == - 1","def test_find_max_value_in_dict_4():
    assert find_max_value_in_dict_4({}) is None
    assert find_max_value_in_dict_4({1: 4, 2: 5}) == 5
    assert find_max_value_in_dict_4({1: 4, 2: 6, 3: 9}) == 9
    assert find_max_value_in_dict_4({1: 4, 2: 2}) == 4
    assert find_max_value_in_dict_4({1: 4, 2: 11, 3: 7, 4: 9}) == 11
    assert find_max_value_in_dict_4({1: 4, 2: 9}) == 9
    assert find_max_value_in_dict_4({1: 7, 2: 10, 3: 13}) == 13
    assert find_max_value_in_dict_4({1: 10}) == 10"
"def process_queue_divisible_by_3_not_6(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 3 == 0 and elem % 6 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_3_not_6():
    assert process_queue_divisible_by_3_not_6([3, 6, 9, 12, 15]) == [3, 9, 15]
    assert process_queue_divisible_by_3_not_6([1, 2, 4, 5, 7]) is None
    assert process_queue_divisible_by_3_not_6([-3, -6, -9]) == [-3, -9]
    assert process_queue_divisible_by_3_not_6([0, 3, 6, 15]) == [3, 6, 15]
    assert process_queue_divisible_by_3_not_6([1, 4, 5, 7, 8]) is None
    assert process_queue_divisible_by_3_not_6([-1, -4, -5]) == [-4, -5]
    assert process_queue_divisible_by_3_not_6([3, 3, 3, 3]) == [3, 3, 3]
    assert process_queue_queue_divisible_by_not_6([6, 6, 6]) == [6, 6, 6]
    assert process_queue_divisible_by_3_not_6([]) is None","def test_process_queue_divisible_by_3_not_6():
    assert process_queue_divisible_by_3_not_6([3, 6, 9, 12, 15]) == [3, 9, 15]
    assert process_queue_divisible_by_3_not_6([6, 12, 18]) is None
    assert process_queue_divisible_by_3_not_6([3, 9, 15, 21]) == [3, 9, 15, 21]
    assert process_queue_divisible_by_3_not_6([]) is None
    assert process_queue_divisible_by_3_not_6([3, 6, 9]) == [3, 9]
    assert process_queue_divisible_by_3_not_6([12, 15, 18]) == [15]
    assert process_queue_divisible_by_3_not_6([4, 8, 14]) is None
    assert process_queue_divisible_by_3_not_6([3, 27, 9]) == [3, 27, 9]"
"def find_primes_not_multiples_of_3(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        if is_prime(num) and num % 3 != 0:
            result.append(num)
    if not result:
        print(""No prime numbers found that are not divisible by 3."")
    return result","def test_find_primes_not_multiples_of_3():
    assert find_primes_not_multiples_of_3([2, 3, 5, 7, 11, 13]) == [2, 5, 7]
    assert find_primes_not_multiples_of_3([3, 9, 15, 21, 23]) == []
    assert find_primes_not_multiples_of_3([11, 1030, 1024, 23, 13]) == [11, 1030]
    assert find_primes_not_multiples_of_3([4, 6, 8, 10, 12]) == [4, 6, 8, 10]
    assert find_primes_not_multiples_of_3([5, 7, 9, 111, 13]) == [5, 7, 111]
    assert find_primes_not_multiples_of_3([111, 1024, 1030, 10, 13]) == [111, 1024]
    assert find_primes_not_multiples_of_3([]) == []
    assert find_primes_not_multiples_of_3([9, 112, 13, 17]) == [17, 21, 23]
    assert find_prime_numbers_not_multiples_of_3([111, 1030, 102, 10101]) == [1030]","def test_find_primes_not_multiples_of_3():
    assert find_primes_not_multiples_of_3([2, 3, 5, 6, 7, 9, 11, 12]) == [2, 5, 7, 11]
    assert find_primes_not_multiples_of_3([3, 6, 9, 12, 15]) == []
    assert find_primes_not_multiples_of_3([1, 2, 4, 5, 8, 10, 14]) == [2, 5]
    assert find_primes_not_multiples_of_3([7, 11, 13, 17, 19, 23]) == [7, 11, 13, 17, 19, 23]
    assert find_primes_not_multiples_of_3([]) == []"
"def power_5(base, exponent):
    try:
        return base ** exponent
    except TypeError:
        return ""Invalid input""","def test_power_5():
    assert power_5(2, 3) == 8
    assert power_5(1, 0) == 1
    assert power_5(7, 2) == 343
    assert power_5(-2, 3) == -8
    assert power_5(2, -2) == 4
    assert power_5(0, 5) == 0
    assert power_5('a', 3) == 'a'
    assert power_5(5, 1) == 5
    assert power_5(3, 3) == 27","def test_power_5():
    assert power_5(2, 3) == 8
    assert power_5(5, 0) == 1
    assert power_5(1, 100) == 1
    assert power_5(""a"", 2) == ""Invalid input""
    assert power_5(3, ""b"") == ""Invalid input""
    assert power_5(2, -3) == 0.125
    assert power_5(-2, 3) == -8
    assert power_5(0, 0) == 1"
"def longest_common_prefix(s1, s2):
    if not s1 or not s2:
        return None
    prefix = []
    for i in range(min(len(s1), len(s2))):
        if s1[i] == s2[i]:
            prefix.append(s1[i])
        else:
            break
    return ''.join(prefix) if prefix else None","def test_longest_common_prefix():
    assert longest_common_prefix(""abc"", ""ac"") == ""ac""
    assert longest_common_prefix(""abcdef"", ""abdf"") == ""abdf""
    assert longest_common_prefix(""abc"", ""xyz"") is None
    assert longest_common_prefix("""", """") is None
    assert longest_common_prefix(None, ""a"") is None
    assert longest_common_prefix(""a"", ""a"") == ""a""
    assert longest_common_prefix(""abc"", ""def"") is None
    assert longest_common_prefix(""ab"", ""cd"") == ""ab""
    assert longest_common_prefix(""hello"", ""world"") == ""hello""","def test_longest_common_prefix():
    assert longest_common_prefix(""flower"", ""flow"") == ""flow""
    assert longest_common_prefix(""dog"", ""racecar"") is None
    assert longest_common_prefix("""", """") is None
    assert longest_common_prefix(None, ""test"") is None
    assert longest_common_prefix(""test"", None) is None"
"def count_unique_elements(lst):
    if not lst:
        return None
    count_dict = {}
    for item in lst:
        count_dict[item] = count_dict.get(item, 0) + 1
    return count_dict if count_dict else None","def test_count_unique_elements():
    assert count_unique_elements([1, 2, 2, 3, 4, 4]) == {1: 1, 2: 2, 3: 1, 4: 3}
    assert count_unique_elements([]) is None
    assert count_unique_elements([1, 1, 1]) == {1: 4}
    assert count_unique_elements([""a"", ""b"", ""a"", ""c"", ""a"", ""b"", ""a""]) == {""a"": 4, ""b"": 2, ""c"": 1}
    assert count_unique_elements([1, 2, 3]) == {1: 1, 2: 1, 3: 1}
    assert count_unique_elements([4, 4, 4, 4, 4, 4]) == {4: 6}
    assert count_unique_elements([5, 5, 6, 7, 7, 8]) == {5: 3, 6: 2, 7: 2, 8: 1}
    assert count_unique_elements([9, 9, 9]) == {9: 3}
    assert count_unique_elements([10, 20, 30, 20, 10, 30, 40]) == {10: 2, 20: 2, 30: 1}","def test_count_unique_elements():
    assert count_unique_elements([1, 2, 2, 3, 4, 4, 4]) == {1: 1, 2: 2, 3: 1, 4: 3}
    assert count_unique_elements([""a"", ""b"", ""b"", ""c""]) == {'a': 1, 'b': 2, 'c': 1}
    assert count_unique_elements([1.1, 2.2, 1.1]) == {1.1: 2, 2.2: 1}
    assert count_unique_elements([]) is None
    assert count_unique_elements([1, 1, 1]) == {1: 3}"
"def find_floats_divisible_by_value_in_list(lst, value):
    if not lst:
        return None
    result = []
    for item in lst:
        if isinstance(item, float) and item % value == 0:
            result.append(item)
    return tuple(result) if result else None","def test_find_floats_divisible_by_value_in_list():
    assert find_floats_divisible_by_value_in_list([1.0, 2.0, 3.0], 2.0) == (2.0,)
    assert find_floats_divisible_by_value_in_list([0.5, 1.5], 0.5) == (0.5, 1.5)
    assert find_floats_divisible_by_value_in_list([], 1.0) is None
    assert find_floats_divisible_by_value_in_list([1.0, 2.0, 3.0], 3.0) is None
    assert find_floats_divisible_by_value_in_list([1.1, 2.2, 3.3], 2.0) == (2.0, 3.0)
    assert find_floats_divisible_by_value_in_list([1.0, 2.0], 1.5) == (1.0, 2.0)
    assert find_floats_divisible_by_value_in_list([3.0, 4.0, 5.0], 3.0) == (3.0, 4.0, 5.0)
    assert find_floats_divisible_by_value_in_list([1.0, 2.0, 3.0], 0, 4.0) is None
    assert find_floats_divisible_by_value_in_list([0.5, 1.5, 2.5], 0.5) == (0.5, 1.5, 2.5)","def test_find_floats_divisible_by_value_in_list():
    assert find_floats_divisible_by_value_in_list([1.0, 2.0, 3.0], 1.0) == (1.0, 2.0, 3.0)
    assert find_floats_divisible_by_value_in_list([0.5, 1.5], 0.5) == (0.5, 1.5)"
"def find_numbers_less_than_digit_sum(lst):
    result = []
    for n in lst:
        if n < sum(int(digit) for digit in str(abs(n))):
            result.append(n)
    return tuple(result) if result else None","def test_find_numbers_less_than_digit_sum():
    assert find_numbers_less_than_digit_sum([1, 2, 3, 4, 5, 6, 12, 21]) == (1, 2, 3, 4, 5, 6)
    assert find_numbers_less_than_digit_sum([10, 11, 19]) is None
    assert find_numbers_less_than_digit_sum([123, 321]) is None
    assert find_numbers_less_than_digit_sum([]) is None
    assert find_numbers_less_than_digit_sum([-1, -2, 3, 9]) == (3, 9)
    assert find_numbers_less_than_digit_sum([12, 13, 17, 18]) is None
    assert find_numbers_less_than_digit_sum([15, 25, 35, 45]) is None
    assert find_numbers_less_than_digit_sum([16, 26, 36, 46]) == (16, 26, 36, 46)
    assert find_numbers_less_than_digit_sum([7, 14, 21, 28]) is None","def test_find_numbers_less_than_digit_sum():
    assert find_numbers_less_than_digit_sum([1, 2, 3, 5]) is None
    assert find_numbers_less_than_digit_sum([10, 21, 99, 12]) is None
    assert find_numbers_less_than_digit_sum([-1, -10, -22, 30]) == (-1, -10, -22)
    assert find_numbers_less_than_digit_sum([0, -100, 101]) == (-100,)
    assert find_numbers_less_than_digit_sum([-123, -456, 789]) == (-123, -456)"
"def choose_longest_string(*strings):
    longest = """"
    for s in strings:
        if len(s) > len(longest):
            longest = s
        elif len(s) == len(longest):
            if s > longest:
                longest = s
    return longest","def test_choose_longest_string():
    assert choose_longest_string(""a"", ""aa"", ""aaa"") == ""aaa""
    assert choose_longest_string(""short"", ""longer"", ""longest"") == ""longest""
    assert choose_longest_string(""one"", ""three"", ""four"") == ""three""
    assert choose_longest_string(""a"", ""a"", ""a"") == ""a""
    assert choose_longest_string(""one"", ""one"", ""one"") == ""one""
    assert choose_longest_string(""a"", ""bbb"", ""cc"", ""ddd"") == ""bbb""
    assert choose_longest_string(""one"", ""two"", ""three"", ""four"") == ""three""
    assert choose_longest_string(""apple"", ""banana"", ""cherry"") == ""banana""
    assert choose_longest_string(""hello"", ""world"", ""python"") == ""python""","def test_choose_longest_string():
    assert choose_longest_string(""one"", ""three"", ""five"") == ""three""
    assert choose_longest_string(""a"", ""bc"", ""def"") == ""def""
    assert choose_longest_string(""apple"", ""banana"", ""cherry"") == ""cherry""
    assert choose_longest_string("""") == """"
    assert choose_longest_string(""short"", ""longer"", ""longest"") == ""longest""
    assert choose_longest_string(""a"", ""ab"", ""abc"") == ""abc""
    assert choose_longest_string(""equal"", ""equal"") == ""equal""
    assert choose_longest_string(""A"", ""BB"", ""CCC"") == ""CCC"""
"def find_divisible_by_6_not_12(lst):
    result = []
    for num in lst:
        if num % 6 == 0 and num % 12 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_6_not_12():
    assert find_divisible_by_6_not_12([6, 12, 18, 24, 30]) == [6, 18, 30]
    assert find_divisible_by_6_not_12([1, 2, 3, 4, 5]) is None
    assert find_divisible_by_6_not_12([12, 24, 36]) is None
    assert find_divisible_by_6_not_12([-6, -12, -18, -30]) == [-6, -18, -30]
    assert find_divisible_by_6_not_12([]) is None
    assert find_divisible_by_6_not_12([6, 36, 60]) == [6]
    assert find_divisible_by_6_not_12([60]) is None
    assert find_divisible_by_6_not_12([60, 70, 80]) is None
    assert find_divisible_by_6_not_12([9, 18, 27]) == [18, 27]","def test_find_divisible_by_6_not_12():
    assert find_divisible_by_6_not_12([6, 18, 12, 24]) == [6, 18]
    assert find_divisible_by_6_not_12([12, 24, 36]) is None"
"def range_list(a, b):
    if a > b:
        print(f""Range is invalid: {a} > {b}"")
        return []
    return [i for i in range(a, b + 1)]","def test_range_list():
    assert range_list(1, 5) == [1, 2, 3, 4, 5]
    assert range_list(5, 5) == [5]
    assert range_list(1, 1) == [1]
    assert range_list(0, 5) == []
    assert range_list(5, 0) == []
    assert range_list(-5, 5) == [-5, -4, -3, -2, -1]
    assert range_list(5, 10) == [5, 6, 7, 8, 9, 10]
    assert range_list(10, 20) == [10, 20]
    assert range_list(25, 30) == [25, 30, 35, 40, 50]","def test_range_list():
    assert range_list(1, 5) == [1, 2, 3, 4, 5]
    assert range_list(5, 5) == [5]
    assert range_list(0, 3) == [0, 1, 2, 3]
    assert range_list(3, 1) == []
    assert range_list(10, 7) == []"
"def is_palindrome(s):
    if len(s) == 0:
        print(""Empty string!"")
        return False
    s = s.lower()
    if s == s[::-1]:
        return True
    else:
        print(""This is not a palindrome"")
        return False","def test_is_palindrome():
    assert is_palindrome(""A man a plan a canal Panama"") is True
    assert is_palindrome(""racecar"") is True
    assert is_palindrome(""hello"") is False
    assert is_palindrome(""Never odd or even"") is True
    assert is_palindrome(""not a palindrome"") is False
    assert is_palindrome(""Was it a car or a cat I saw"") is True
    assert is_palindrome("""") is False
    assert is_palindrome(""Was it a car or a cat I saw"") is True
    assert is_palindrome(""Hello World"") is False","def test_is_palindrome():
    assert is_palindrome(""radar"") is True
    assert is_palindrome(""hello"") is False
    assert is_palindrome(""level"") is True
    assert is_palindrome(""empty"") is False
    assert is_palindrome(""madam"") is True
    assert is_palindrome("" "") is True"
"def sum_of_divisible_by_x(lst, x):
    if not isinstance(x, (int, float)) or x == 0 or not lst:
        return None
    return sum(x for x in lst if isinstance(x, (int, float)) and x % x == 0)","def test_sum_of_divisible_by_x():
    assert sum_of_divisible_by_x([10, 20, 30], 10) == 10
    assert sum_of_divisible_by_x([10, 21, 30], 10) == 30
    assert sum_of_divisible_by_x([], 2) is None
    assert sum_of_divisible_by_x([10, 'a', 30], 10) == 60
    assert sum_of_divisible_by_x(['a', 'b', 'c'], 2) == 2
    assert sum_of_divisible_by_x([10, 20, 30], 0) is None
    assert sum_of_divisible_by_x([10, 20, 30], -10) is None
    assert sum_of_divisible_by_x([10, 21, 30], 0) == 30
    assert sum_of_divisible_by_x([1, 21, 31], 21) == 31","def test_sum_of_divisible_by_x():
    assert sum_of_divisible_by_x([1, 2, 3, 4], 2) == 10
    assert sum_of_divisible_by_x([1, 3, 5, 7], 2) == 16
    assert sum_of_divisible_by_x([], 2) is None
    assert sum_of_divisible_by_x([1, 2, ""three""], 2) == 3
    assert sum_of_divisible_by_x([1, 2, 3], ""two"") is None"
"def find_elements_not_in_other_structures(lst, s, d, t):
    if not lst or not s or not d or not t:
        return None
    result = []
    for item in lst:
        if item not in s and item not in d.values() and item not in t:
            result.append(item)
    return tuple(result) if result else None","def test_find_elements_not_in_other_structures():
    assert find_elements_not_in_other_structures([1, 2, 3], {2}, {""a"": 3}) == (1,)
    assert find_elements_not_in_other_structures([1], {1}, {""a"": 1}) == (1,)
    assert find_elements_not_in_other_structures([], {1, 2}, {""a"": 1}) is None
    assert find_elements_not_in_other_structures([1, 2], set(), {}) is None
    assert find_elements_not_in_other_structures([1, 2], {1, 2}, {""a"": 2, ""b"": 3}) == (1, 2)
    assert find_elements_not_in_other_structures([4], {4}, {""a"": 3}) == (4,)
    assert find_elements_not_in_other_structures([5, 6], {7}, {""a"": 3}) == (5, 6)
    assert find_elements_not_in_other_structures([7, 8], {9}, {""a"": 7}) == (7, 8)
    assert find_elements_not_in_other_structures([10], {111}, {""a"": 10}) == (10,)","def test_find_elements_not_in_other_structures():
    assert find_elements_not_in_other_structures([1, 2, 3], {2}, {""a"": 3}, (4,)) == (1,)
    assert find_elements_not_in_other_structures([1], set(), {}, ()) is None
    assert find_elements_not_in_other_structures([], {2}, {""a"": 3}, (4,)) is None
    assert find_elements_not_in_other_structures([5], {5}, {""a"": 5}, (5,)) is None"
"def sum_of_numeric_keys(d):
    if not d:
        return None
    total = 0
    for key, value in d.items():
        if isinstance(key, (int, float)):
            total += value
    return total if total else None","def test_sum_of_numeric_keys():
    assert sum_of_numeric_keys({'a': 1, 'b': 2, 3: 4}) == 10
    assert sum_of_numeric_keys({}) is None
    assert sum_of_numeric_keys({'a': -1, 'b': -2, 'c': 3}) == -6
    assert sum_of_numeric_keys({'a': 0}) is None
    assert sum_of_numeric_keys({'a': 0, 'b': 0}) is None
    assert sum_of_numeric_keys({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 16
    assert sum_of_numeric_keys({'a': 5, 'b': 10, 'c': 15}) == 20
    assert sum_of_numeric_keys({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 16
    assert sum_of_numeric_keys({'a': 2, 'b': 3, 'c': 4, 'd': 5}) == 8","def test_sum_of_numeric_keys():
    assert sum_of_numeric_keys({1: 10, 2: 20, 3: 30}) == 60
    assert sum_of_numeric_keys({}) is None
    assert sum_of_numeric_keys({1: 10, 2.5: 20.5, 3: 30}) == 60.5
    assert sum_of_numeric_keys({'a': 10, 'b': 20}) is None
    assert sum_of_numeric_keys({1: 0, 2: 0}) is None"
"def divisible_by_any(lst, divisors):
    divisible = []
    for num in lst:
        for divisor in divisors:
            if num % divisor == 0:
                divisible.append(num)
                break
    if not divisible:
        print(""No numbers divisible by any divisor found."")
    return divisible","def test_divisible_by_any():
    assert divisible_by_any([12, 24, 36], [2, 3]) == [12, 24, 36]
    assert divisible_by_any([10, 20, 30], [5, 10]) == [10, 20, 30]
    assert divisible_by_any([8, 16, 24], [4, 6]) == [8, 16, 24]
    assert divisible_by_any([7, 14, 21], [3, 5]) == [7, 14, 21]
    assert divisible_by_any([1, 2, 3], [4, 5]) == []
    assert divisible_by_any([6, 7, 8], [9, 12]) == [6, 7, 8]
    assert divisible_by_any([], [2, 3]) == []
    assert divisible_by_any([9, 18, 27], [3, 6]) == [9, 18, 27]
    assert divisible_by_any([15, 25, 35], [7, 9]) == [15, 25, 35]","def test_divisible_by_any():
    assert divisible_by_any([10, 20, 30, 40], [2, 5]) == [10, 20, 30, 40]
    assert divisible_by_any([9, 18, 27, 36], [3]) == [9, 18, 27, 36]
    assert divisible_by_any([7, 14, 21], [2, 7]) == [7, 14, 21]
    assert divisible_by_any([11, 13, 17], [5, 10]) == []
    assert divisible_by_any([100, 200, 300], [2, 10]) == [100, 200, 300]
    assert divisible_by_any([8, 12, 16], [4]) == [8, 12, 16]
    assert divisible_by_any([15, 25, 35], [5]) == [15, 25, 35]
    assert divisible_by_any([1, 3, 5, 7], [2, 4]) == []"
"def remove_spaces_from_string(s):
    result = ''
    for char in s:
        if char != ' ':
            result += char
    return result if result != s else None","def test_remove_spaces_from_string():
    assert remove_spaces_from_string(""hello world"") == ""helloworld""
    assert remove_spaces_from_string("" "") == """"
    assert remove_spaces_from_string(""a b c"") == ""abc""
    assert remove_spaces_from_string("""") is None
    assert remove_spaces_from_string(None) is None
    assert remove_spaces_from_string(""no_spaces"") == ""no_spaces""
    assert remove_spaces_from_string(""  leading and trailing spaces  "") == ""leadingandtrailingspaces""
    assert remove_spaces_from_string(""multiple words here"") == ""multiplewordshere""
    assert remove_spaces_from_string(""spaces in between"") == ""spacesinbetween""","def test_remove_spaces_from_string():
    assert remove_spaces_from_string(""hello world"") == ""helloworld""
    assert remove_spaces_from_string(""a b c d e f"") == ""abcdef""
    assert remove_spaces_from_string("" no spaces "") == ""nospaces""
    assert remove_spaces_from_string(""helloworld"") is None
    assert remove_spaces_from_string("" "") == """"
    assert remove_spaces_from_string(""   multiple   spaces   "") == ""multiplespaces""
    assert remove_spaces_from_string("""") is None
    assert remove_spaces_from_string(""single"") is None"
"def find_multiples_of_4_or_5_not_20(lst):
    result = []
    for num in lst:
        if (num % 4 == 0 or num % 5 == 0) and num % 20 != 0:
            result.append(num)
    if not result:
        print(""No numbers found that are divisible by 4 or 5, but not by 20."")
    return result","def test_find_multiples_of_4_or_5_not_20():
    assert find_multiples_of_4_or_5_not_20([4, 5, 8, 10, 12, 15, 20]) == [4, 5, 8, 10, 12, 15, 20]
    assert find_multiples_of_4_or_5_not_20([2, 3, 6, 10, 14, 22]) == [2, 3, 6, 10, 14, 22]
    assert find_multiples_of_4_or_5_not_20([7, 9, 13, 17]) == [7, 9, 13, 17]
    assert find_multiples_of_4_or_5_not_20([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
    assert find_multiples_of_4_or_5_not_20([5, 10, 25, 30, 45]) == [5, 10, 25, 30, 45]
    assert find_multiples_of_4_or_5_not_20([8, 21, 24, 28]) == [8, 21, 24, 28]
    assert find_multiples_of_4_or_5_not_20([15, 35, 40, 50]) == [15, 35, 40]
    assert find_not_20([4, 25, 60, 85]) == [4, 25, 60, 85]
    assert find_not_20([5, 75, 90]) == [5, 75]","def test_find_multiples_of_4_or_5_not_20():
    assert find_multiples_of_4_or_5_not_20([4, 5, 8, 10, 12, 15, 16, 25, 40]) == [4, 5, 8, 10, 12, 15, 16, 25]
    assert find_multiples_of_4_or_5_not_20([20, 40, 60, 80, 100]) == []
    assert find_multiples_of_4_or_5_not_20([3, 6, 9, 11, 13, 17, 19]) == []
    assert find_multiples_of_4_or_5_not_20([25, 30, 35, 50]) == [25, 30, 35, 50]
    assert find_multiples_of_4_or_5_not_20([]) == []"
"def subtract_lists_with_index(lst1, lst2):
    result = []
    for i in range(len(lst1)):
        if i < len(lst2):
            result.append((lst1[i] - lst2[i]) * i)
        else:
            result.append(lst1[i] * i)
    if not result:
        return None
    return result","def test_subtract_lists_with_index():
    assert subtract_lists_with_index([1, 2], [3, 4]) == [0, 6]
    assert subtract_lists_with_index([5, 6], [1, 2]) == [0, 8]
    assert subtract_lists_with_index([1], [1]) == [0]
    assert subtract_lists_with_index([], [1]) is None
    assert subtract_lists_with_index([1, 2], []) is None
    assert subtract_lists_with_index([], []) is None
    assert subtract_lists_with_index([3, 5], [3, 5]) == [0, 12]
    assert subtract_lists_with_index([7, 8], [7, 8]) == [0, 24]
    assert subtract_lists_with_index([5, 5], [5, 5]) == [0, 10]","def test_subtract_lists_with_index():
    assert subtract_lists_with_index([10, 20, 30], [1, 2, 3]) == [0, 18, 54]
    assert subtract_lists_with_index([1, 2, 3], [3, 2, 1]) == [0, 0, 4]
    assert subtract_lists_with_index([], []) is None
    assert subtract_lists_with_index([6, 7, 2], [8, 8]) == [0, -1, 4]"
"def reverse_string_5(s):
    reversed_str = ''
    for i in range(len(s) - 1, -1, -1):
        reversed_str += s[i]
    return reversed_str","def test_reverse_string_5():
    assert reverse_string_5(""hello"") == ""olleh""
    assert reverse_string_5(""radar"") == ""radar""
    assert reverse_string_5(""world"") == ""dlrow""
    assert reverse_string_5("""") == """"
    assert reverse_string_5(""a"") == ""a""
    assert reverse_string_5(""madam"") == ""madam""
    assert reverse_string_5(""Python"") == ""nohtyP""
    assert reverse_string_5(""12345"") == ""54321""
    assert reverse_string_5(""abcdefg"") == ""gfedcba""","def test_reverse_string_5():
    assert reverse_string_5(""hello"") == ""olleh""
    assert reverse_string_5(""world"") == ""dlrow""
    assert reverse_string_5(""a"") == ""a"""
"def multiply_by_sum_and_len_other_list(lst1, lst2):
    result = []
    sum_lst2 = sum(lst2)
    len_lst2 = len(lst2)
    for num in lst1:
        result.append(num * (sum_lst2 / len_lst2))
    if not result:
        return None
    return result","def test_multiply_by_sum_and_len_other_list():
    assert multiply_by_sum_and_len_other_list([1, 2, 3], [1, 2, 3]) == [4.0, 6.0, 8.0]
    assert multiply_by_sum_and_len_other_list([1, 1], [1]) == [2.0]
    assert multiply_by_sum_and_len_other_list([], [1, 2, 3]) is None
    assert multiply_by_sum_and_len_other_list([3], [1, 2, 3]) == [12.0]
    assert multiply_by_sum_and_len_other_list([5, 6], [7]) == [12.0, 18.0]
    assert multiply_by_sum_and_len_other_list([2, 4, 6], [2, 4, 6]) == [8.0, 10.0, 12.0]
    assert multiply_by_sum_and_len_other_list([3, 5], [7, 9]) == [12.0, 15.0]
    assert multiply_by_sum_and_len_other_list([10], [2, 3, 4]) == [5.0, 7.0]
    assert multiply_sum_and_len_other_list([7], [7, 8, 9]) == [14.0, 21.0]","def test_multiply_by_sum_and_len_other_list():
    assert multiply_by_sum_and_len_other_list([1, 2, 3], [4, 5, 6]) == [5.0, 10.0, 15.0]
    assert multiply_by_sum_and_len_other_list([0, 0, 0], [1, 1, 1]) == [0.0, 0.0, 0.0]
    assert multiply_by_sum_and_len_other_list([], []) is None
    assert multiply_by_sum_and_len_other_list([1], [2, 3]) == [2.5]
    assert multiply_by_sum_and_len_other_list([5, 6], [7]) == [35.0, 42.0]
    assert multiply_by_sum_and_len_other_list([2, 4, 6], [1, 3, 5]) == [6.0, 12.0, 18.0]
    assert multiply_by_sum_and_len_other_list([3], [6, 9]) == [22.5]"
"def get_even_numbers(arr):
    if not arr:
        return []
    even_numbers = []
    for num in arr:
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers","def test_get_even_numbers():
    assert get_even_numbers([1, 2, 3, 4, 5]) == [2, 4]
    assert get_even_numbers([]) == []
    assert get_even_numbers([1, 3, 5, 7]) == []
    assert get_even_numbers([2, 4, 6, 8]) == [2, 4, 6, 8]
    assert get_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]
    assert get_even_numbers([11, 13, 15, 17]) == []
    assert get_even_numbers([19, 21, 23, 25]) == [19, 21, 23, 25]
    assert get_even_numbers([2, 2, 2, 2, 2]) == [2, 2, 2, 2]
    assert get_even_numbers([7, 8, 9, 10, 111]) == [8, 10]","def test_get_even_numbers():
    assert get_even_numbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]
    assert get_even_numbers([]) == []
    assert get_even_numbers([1, 3, 5]) == []
    assert get_even_numbers([0, 2, 4, 6, 8]) == [0, 2, 4, 6, 8]
    assert get_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"
"def remove_negative_values(d):
    if not d:
        return None
    clean_dict = {}
    for key, value in d.items():
        if value >= 0:
            clean_dict[key] = value
    return clean_dict if clean_dict else None","def test_remove_negative_values():
    assert remove_negative_values({}) is None
    assert remove_negative_values({1: 10, 2: 20}) == {1: 10}
    assert remove_negative_values({1: -1, 2: -2}) == {1: -1}
    assert remove_negative_values({1: 0}) is None
    assert remove_negative_values({1: 5, 2: 10}) == {1: 5}
    assert remove_negative_values({1: 10, 2: 10}) == {1: 10}
    assert remove_negative_values({1: -1, 2: 0}) == {1: -1}
    assert remove_negative_values({1: 1, 2: 2, 3: 3}) == {1: 1}
    assert remove_negative_values({1: 5, 2: 10, 3: 15}) == {1: 5}","def test_remove_negative_values():
    assert remove_negative_values({'a': 1, 'b': -2, 'c': 3}) == {'a': 1, 'c': 3}
    assert remove_negative_values({}) is None
    assert remove_negative_values({'a': -1, 'b': -2, 'c': -3}) is None
    assert remove_negative_values({'a': 0, 'b': 2, 'c': 3}) == {'a': 0, 'b': 2, 'c': 3}
    assert remove_negative_values({'a': 5, 'b': -5, 'c': 10}) == {'a': 5, 'c': 10}"
"def choose_first_long_word_starting_with_consonant(*words):
    vowels = 'aeiouAEIOU'
    for word in words:
        if len(word) > 5 and word[0] not in vowels:
            return word
    return None","def test_choose_first_long_word_starting_with_consonant():
    assert choose_first_long_word_starting_with_consonant(""bcdf"", ""ghjkl"", ""mnpqr"") == ""bcdf""
    assert choose_first_long_word_starting_with_consonant(""aebf"", ""cdgh"", ""ijkl"") == ""aebf""
    assert choose_first_long_word_starting_with_consonant(""bcdfg"", ""hjklm"", ""npqr"") is None
    assert choose_first_long_word_starting_with_consonant(""aebfg"", ""cdghm"", ""ijklq"") is None
    assert choose_first_long_word_starting_with_consonant(""bcdfh"", ""hjkl"", ""mnpqr"") == ""bcdfh""
    assert choose_first_long_word_starting_with_consonant(""npqr"", ""bcrep"", ""tuv"") == ""npqr""
    assert choose_first_long_word_starting_with_consonant(""bnpqr"", ""cdnpq"", ""gnpqr"") is None
    assert choose_first_long_word_starting_with_consonant(""aeiou"", ""bcdfg"", ""hjkl"") == ""aeiou""
    assert choose_first_long_word_starting_with_consonant(""bcdf"", ""ghjkl"", ""mn"", ""opqr"") == ""df""","def test_choose_first_long_word_starting_with_consonant():
    assert choose_first_long_word_starting_with_consonant(""banana"", ""strawberry"", ""apple"", ""grape"") == 'banana'
    assert choose_first_long_word_starting_with_consonant(""orange"", ""apricot"", ""kiwi"") is None"
"def extract_digits(s):
    if not s:
        return []
    digits = [int(c) for c in s if c.isdigit()]
    return digits","def test_extract_digits():
    assert extract_digits(""123abc"") == [123]
    assert extract_digits("""") == []
    assert extract_digits(""abc"") == []
    assert extract_digits(""12a34b56"") == [12, 34, 56]
    assert extract_digits(""789xyz"") == [789]
    assert extract_digits(""0"") == [0]
    assert extract_digits(""1a1b1c"") == [1, 2, 3]
    assert extract_digits(""456def"") == [456]
    assert extract_digits(""999"") == [999]","def test_extract_digits():
    assert extract_digits(""a1b2c3"") == [1, 2, 3]
    assert extract_digits("""") == []
    assert extract_digits(""no digits here"") == []
    assert extract_digits(""123abc456"") == [1, 2, 3, 4, 5, 6]
    assert extract_digits(""0"") == [0]"
"def find_even_in_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_find_even_in_stack():
    assert find_even_in_stack([1, 3, 5, 2, 7]) == [7, 2]
    assert find_even_in_stack([2, 4, 6, 1]) == [1, 6]
    assert find_even_in_stack([1, 1, 1, 1]) == [1, 1, 1, 1]
    assert find_even_in_stack([2, 2, 2, 2]) == [2, 2, 2, 2]
    assert find_even_in_stack([0, 2, 4, 6, 8]) == [8, 6, 4, 0]
    assert find_even_in_stack([1, 3, 5, 7]) == [7]
    assert find_even_in_stack([2]) is None
    assert find_even_in_stack([4, 4, 4, 4]) == [4, 4, 4, 4]
    assert find_even_in_stack([6, 6, 6]) == [6, 6, 6]","def test_find_even_in_stack():
    assert find_even_in_stack([1, 2, 3, 4, 5, 6]) == [6, 4, 2]
    assert find_even_in_stack([1, 3, 5, 7]) is None
    assert find_even_in_stack([0, 2, 4, 6, 8]) == [8, 6, 4, 2, 0]
    assert find_even_in_stack([-2, -4, -6, -8]) == [-8, -6, -4, -2]
    assert find_even_in_stack([1]) is None
    assert find_even_in_stack([2]) == [2]
    assert find_even_in_stack([]) is None
    assert find_even_in_stack([1, 3, 5, 7, 10]) == [10]"
"def choose_largest(a, b, c):
    if a > b and a > c:
        return a
    if b > a and b > c:
        return b
    if c > a and c > b:
        return c
    if a == b and a > c:
        return a
    if b == c and b > a:
        return b
    return a","def test_choose_largest():
    assert choose_largest(1, 2, 3) == 3
    assert choose_largest(3, 2, 1) == 3
    assert choose_largest(1, 3, 2) == 3
    assert choose_largest(0, -1, 1) == 1
    assert choose_largest(-1, -2, -3) == -1
    assert choose_largest(10, 20, 30) == 30
    assert choose_largest(1, 1, 1) == 1
    assert choose_largest(5, 5, 5, 5) == 5
    assert choose_largest(10, 20, 30, 40) == 30","def test_choose_largest():
    assert choose_largest(1, 2, 3) == 3
    assert choose_largest(3, 2, 1) == 3
    assert choose_largest(1, 3, 2) == 3
    assert choose_largest(3, 3, 2) == 3
    assert choose_largest(2, 3, 3) == 3
    assert choose_largest(3, 3, 3) == 3
    assert choose_largest(-1, -2, -3) == -1
    assert choose_largest(0, 0, 0) == 0"
"def count_numbers_greater_than_mean(s):
    nums = [int(x) for x in s.split() if x.isdigit()]
    if not nums:
        return ""No numbers found in the string.""

    mean = sum(nums) / len(nums)
    count = len([num for num in nums if num > mean])
    if count == 0:
        return ""No numbers greater than the mean.""
    return count","def test_count_numbers_greater_than_mean():
    assert count_numbers_greater_than_mean(""1 2 3 4 5 6 7 8 9"") == 4
    assert count_numbers_greater_than_mean(""10 20 30 40 50"") == 2
    assert count_numbers_greater_than_mean(""5 5 5 5 5"") == 0
    assert count_numbers_greater_than_mean(""100"") == 0
    assert count_numbers_greater_than_mean("""") == ""No numbers greater than the mean.""
    assert count_numbers_greater_than_mean(""10 15 20 25 30"") == 2
    assert count_numbers_greater_than_mean(""7 14 21 28"") == 2
    assert count_numbers_greater_than_mean(""9 18 27 36 45 54"") == 3
    assert count_numbers_greater_than_mean(""3 6 9 12 15 18"") == 3","def test_count_numbers_greater_than_mean():
    assert count_numbers_greater_than_mean(""1 2 3 4 5"") == 2
    assert count_numbers_greater_than_mean(""10 20 30 40"") == 2
    assert count_numbers_greater_than_mean(""5 5 5 5 5"") == ""No numbers greater than the mean.""
    assert count_numbers_greater_than_mean(""100"") == ""No numbers greater than the mean.""
    assert count_numbers_greater_than_mean("""") == ""No numbers found in the string.""
    assert count_numbers_greater_than_mean(""10 20 30"") == 1
    assert count_numbers_greater_than_mean(""1 1 1 1 1 2 2 2 2 2"") == 5
    assert count_numbers_greater_than_mean(""50 100 150 200"") == 2"
"def choose_shortest_no_space_string(*strings):
    shortest = None
    for s in strings:
        if ' ' not in s:
            if shortest is None or len(s) < len(shortest):
                shortest = s
    if shortest is None:
        return ""No string without spaces""
    return shortest","def test_choose_shortest_no_space_string():
    assert choose_shortest_no_space_string(""hello"", ""world"", ""python"") == ""No string without spaces""
    assert choose_shortest_no_space_string(""this is a test"", ""no spaces here"", ""short"") == ""short""
    assert choose_shortest_no_space_string(""a"", ""ab"", ""abc"") == ""a""
    assert choose_shortest_no_space_string(""abc"", ""abcd"", ""abcdef"") == ""abc""
    assert choose_shortest_no_space_string(""hello world"", ""python programming"", ""short text"") == ""short text""
    assert choose_shortest_no_space_string(""no space"", ""shortest"", ""longest text"") == ""shortest""
    assert choose_shortest_no_space_string(""one two three"", ""four five"", ""six two"") == ""three""
    assert choose_shortest_no_space_string(""apple banana orange"", ""trysty"", ""hello world"") == ""apple banana orange""
    assert choose_shortest_no_space_string(""apple"", ""banana"", ""cherry"") == ""apple""","def test_choose_shortest_no_space_string():
    assert choose_shortest_no_space_string(""hello"", ""world"", ""hi"") == ""hi""
    assert choose_shortest_no_space_string(""a b c"", ""de bf"", ""g h"") == 'No string without spaces'
    assert choose_shortest_no_space_string(""one"", ""two"", ""three"") == ""one""
    assert choose_shortest_no_space_string(""no spaces"", ""he re"", ""or here"") == 'No string without spaces'
    assert choose_shortest_no_space_string(""apple"", ""banana"", ""cherry"") == ""apple"""
"def find_index(lst, elem):
    for i, val in enumerate(lst):
        if val == elem:
            return i
    print(f""Element {elem} not found."")
    return -1","def test_find_index():
    assert find_index([1, 2, 3, 2, 1], 2) == 1
    assert find_index([1, 2, 3, 4, 5], 6) == -1
    assert find_index([1, 1, 1, 1], 1) == 0
    assert find_index([1, 2, 3, 4, 5], 1) == 0
    assert find_index([5, 5, 5, 6, 6], 5) == 4
    assert find_index([7, 8, 9, 10], 9) == 8
    assert find_index([11, 22, 33, 44], 22) == 1
    assert find_index([15, 16, 27], 17) == 15
    assert find_index([28, 39, 40], 29) == 3","def test_find_index():
    assert find_index([1, 2, 3], 2) == 1
    assert find_index([10, 20, 30], 40) == -1
    assert find_index([1, 2, 3, 4], 1) == 0
    assert find_index([], 1) == -1
    assert find_index([10, 20], 20) == 1"
"def string_length(s):
    if s == """":
        return 0
    return 1 + string_length(s[1:])","def test_string_length():
    assert string_length("""") == 0
    assert string_length(""a"") == 1
    assert string_length(""abc"") == 3
    assert string_length(""Hello world"") == 10
    assert string_length(""1234567890"") == 10
    assert string_length(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"") == 26
    assert string_length(""the quick brown fox"") == 16
    assert string_length(""numbers 12345"") == 7
    assert string_length(""punctuation 。,!@#$%"") == 4","def test_string_length():
    assert string_length("""") == 0
    assert string_length(""hello"") == 5
    assert string_length(""a"") == 1
    assert string_length(""Python"") == 6
    assert string_length(""length"") == 6
    assert string_length(""test"") == 4
    assert string_length(""pytest"") == 6
    assert string_length(""recursion"") == 9"
"def find_powers_of_two_in_string(s):
    numbers = []
    for word in s.split():
        try:
            num = int(word)
            if (num & (num - 1)) == 0 and num > 0:
                numbers.append(num)
        except ValueError:
            continue
    return numbers","def test_find_powers_of_two_in_string():
    assert find_powers_of_two_in_string(""1 2 3 4 5 8 16"") == [1, 2, 4, 8, 16]
    assert find_powers_of_two_in_string(""7 14 21 28"") == [7, 14, 21, 28]
    assert find_powers_of_two_in_string(""2 3 6 7 9 12"") == [2, 3, 6, 7, 9, 12]
    assert find_powers_of_two_in_string(""10 20 30"") == [10, 20, 30]
    assert find_powers_of_two_in_string("""") == []
    assert find_powers_of_two_in_string(""100 200"") == [100, 200]
    assert find_powers_of_two_in_string(""4 8 16 32"") == [4, 8, 16, 32]
    assert find_powers_of_two_in_string(""1 3 5 7 9"") == [1, 3, 5, 7, 9]
    assert find_powers_of_two_in_string(""256 512 10 20"") == [256, 512, 10]","def test_find_powers_of_two_in_string():
    assert find_powers_of_two_in_string(""1 2 3 4 5"") == [1, 2, 4]
    assert find_powers_of_two_in_string(""16 32 64"") == [16, 32, 64]
    assert find_powers_of_two_in_string(""7 9 11"") == []
    assert find_powers_of_two_in_string(""0 128 256"") == [128, 256]
    assert find_powers_of_two_in_string(""2 4 8 16 32"") == [2, 4, 8, 16, 32]
    assert find_powers_of_two_in_string(""1024"") == [1024]
    assert find_powers_of_two_in_string(""non-numeric 2 words"") == [2]
    assert find_powers_of_two_in_string("""") == []"
"def subtract_squares_of_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a**2 - b**2)
    if not result:
        return None
    return result","def test_subtract_squares_of_two_lists():
    assert subtract_squares_of_two_lists([3, 4], [1, 2]) == [8, 12]
    assert subtract_squares_of_two_lists([5, 6], [7, 8]) == [-24, -28]
    assert subtract_squares_of_two_lists([1, 1], [1, 1]) == [0, 0]
    assert subtract_squares_of_two_lists([], []) is None
    assert subtract_squares_of_two_lists([3, 5], [2, 4]) == [5, 9]
    assert subtract_squares_of_two_lists([7, 9], [3, 1]) == [43, 58]
    assert subtract_squares_of_two_lists([2, 4], [3, 5]) == [4, 8]
    assert subtract_squares_of_two_lists([10, 12], [1, 14]) == [80, 96]
    assert subtract_squares_of_two_lists([15, 17], [2, 22]) == [121, 24]","def test_subtract_squares_of_two_lists():
    assert subtract_squares_of_two_lists([5], []) is None
    assert subtract_squares_of_two_lists([2, 3, 4], [1, 2, 3]) == [3, 5, 7]
    assert subtract_squares_of_two_lists([5], [3]) == [16]"
"def find_not_multiples_of_3_but_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 3 != 0 and num % 5 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_not_multiples_of_3_but_divisible_by_5():
    assert find_not_multiples_of_3_but_divisible_by_5([5, 10, 15, 20, 25, 30]) is None
    assert find_not_multiples_of_3_but_divisible_by_5([3, 6, 9, 12, 18]) == [3, 9, 15]
    assert find_not_multiples_of_3_but_divisible_by_5([4, 8, 12, 16, 20]) == [12, 20]
    assert find_not_multiples_of_3_but_divisible_by_5([7, 14, 21, 28, 35]) == [21, 28, 35]
    assert find_not_multiples_of_3_but_divisible_by_5([8, 11, 13, 16, 22]) == [18, 22]
    assert find_not_multiples_of_3_but_divisible_by_5([1, 2, 3, 4, 5, 6, 7]) == [3]
    assert find_not_multiples_of_3_but_divisible_by_5([9, 18, 27, 36, 45]) == [18, 27, 36, 45]
    assert find_not_multiples_of_3_but_divisible_by_5([3, 5, 7, 10, 15, 20, 25]) is None
    assert find_not_multiples_of_3_but_divisible_by_by_5([117, 29, 36, 42, 53]) == [17, 29, 36, 42, 53]","def test_find_not_multiples_of_3_but_divisible_by_5():
    assert find_not_multiples_of_3_but_divisible_by_5([5, 10, 20]) == [5, 10, 20]
    assert find_not_multiples_of_3_but_divisible_by_5([9, 15, 21]) is None
    assert find_not_multiples_of_3_but_divisible_by_5([25, 35, 50]) == [25, 35, 50]"
"def choose_smallest_greater_than(value, *nums):
    smallest = None
    for num in nums:
        if num > value:
            if smallest is None or num < smallest:
                smallest = num
    return smallest if smallest is not None else None","def test_choose_smallest_greater_than():
    assert choose_smallest_greater_than(10, 5, 15, 20) == 15
    assert choose_smallest_greater_than(0, 1, 2, 3) == 1
    assert choose_smallest_greater_than(-5, -1, 0, 5) == -1
    assert choose_smallest_greater_than(100, 150, 200, 250) == 150
    assert choose_smallest_greater_than(3, 2, 4, 5) == 4
    assert choose_smallest_greater_than(10, 5, 6, 7) == 6
    assert choose_smallest_greater_than(8, 7, 6, 5) == 6
    assert choose_smallest_greater_than(100, 90, 110, 120) == 120
    assert choose_smallest_greater_than(13, 12, 14, 15) == 14","def test_choose_smallest_greater_than():
    assert choose_smallest_greater_than(5, 1, 2, 6, 8, 7) == 6
    assert choose_smallest_greater_than(3, 4, 5, 1, 2, 6) == 4
    assert choose_smallest_greater_than(10, 11, 12, 13, 14) == 11
    assert choose_smallest_greater_than(0, -1, -2, 1, 2, 3) == 1
    assert choose_smallest_greater_than(50, 100, 200, 300) == 100"
"def find_divisible_by_4_not_8_or_16(lst):
    result = []
    for num in lst:
        if num % 4 == 0 and num % 8 != 0 and num % 16 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_4_not_8_or_16():
    assert find_divisible_by_4_not_8_or_16([4, 8, 16]) == [4]
    assert find_divisible_by_4_not_8_or_16([0, 8, 16]) is None
    assert find_divisible_by_4_not_8_or_16([4, 12, 20]) == [4, 12, 20]
    assert find_divisible_by_4_not_8_or_16([32, 64, 96]) is None
    assert find_divisible_by_4_not_8_or_16([4]) == [4]
    assert find_divisible_by_4_not_8_or_16([]) is None
    assert find_divisible_by_4_not_8_or_16([8, 16, 32]) is None
    assert find_divisible_by_4_not_8_or_16([3, 5, 7]) is None
    assert find_divisible_by_4_not_8_or_16([12, 4, 6, 8, 12, 16]) == [2, 4, 6, 12]","def test_find_divisible_by_4_not_8_or_16():
    assert find_divisible_by_4_not_8_or_16([4, 8, 12, 16, 20]) == [4, 12, 20]
    assert find_divisible_by_4_not_8_or_16([4, 20, 28]) == [4, 20, 28]
    assert find_divisible_by_4_not_8_or_16([8, 16, 32]) is None
    assert find_divisible_by_4_not_8_or_16([1, 2, 3]) is None"
"def divide_by_index_if_greater_than_2(lst1, lst2):
    result = []
    for i in range(len(lst1)):
        if len(lst2) > i > 2:
            result.append(lst1[i] / lst2[i])
    if not result:
        return None
    return result","def test_divide_by_index_if_greater_than_2():
    assert divide_by_index_if_greater_than_2([10, 20, 30], [1, 2, 3]) == [20.0, 15.0]
    assert divide_by_index_if_greater_than_2([4, 8, 12], [2, 1, 0]) == [8.0, 6.0]
    assert divide_by_index_if_greater_than_2([6, 12], [3, 6]) == [12.0]
    assert divide_by_index_if_greater_than_2([], [1, 2, 3]) is None
    assert divide_by_index_if_greater_than_2([1, 2, 3], []) is None
    assert divide_by_index_if_greater_than_2([5], [5]) is None
    assert divide_by_index_if_greater_than_2([10, 20], [5, 15]) == [20.0]
    assert divide_by_index_if_greater_than_2([7, 14, 28], [3, 7]) == [14.0, 12.0]
    assert divide_by_index_if_greater_than_2([9, 18], [2, 30]) == [18.0]","def test_divide_by_index_if_greater_than_2():
    assert divide_by_index_if_greater_than_2([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1.0, 1.0]
    assert divide_by_index_if_greater_than_2([], []) is None
    assert divide_by_index_if_greater_than_2([1, 2, 3], [1, 2, 3]) is None
    assert divide_by_index_if_greater_than_2([10, 20, 30], [2, 4, 6]) is None
    assert divide_by_index_if_greater_than_2([5, 10, 15], [5, 10, 15]) is None"
"def extract_even_numbers(s):
    numbers = [int(x) for x in s.split() if x.isdigit()]
    even_numbers = [num for num in numbers if num % 2 == 0]
    if not even_numbers:
        print(""No even numbers found in the string."")
    return even_numbers","def test_extract_even_numbers():
    assert extract_even_numbers(""1 2 3 4 5 6"") == [2, 4, 6]
    assert extract_even_numbers(""10 20 30 40"") == [10, 20, 30, 40]
    assert extract_even_numbers(""5 7 11"") == []
    assert extract_even_numbers(""9 13 17"") == [9, 13, 17]
    assert extract_even_numbers("""") == []
    assert extract_even_numbers(""1 3 5 7"") == [2, 4, 6, 8, 10, 12]
    assert extract_even_numbers(""2 4 6 8 10 12"") == [2, 4, 6, 8, 10, 12]
    assert extract_even_numbers(""1 2 3 4 5 6 7 8 9 110"") == [2, 4, 6, 8, 10]
    assert extract_even_numbers(""7 8 10 120 25 30"") == [8, 10, 20, 25, 30]","def test_extract_even_numbers():
    assert extract_even_numbers(""1 2 3 4 5"") == [2, 4]
    assert extract_even_numbers(""10 15 20 25"") == [10, 20]
    assert extract_even_numbers(""7 9 11 13"") == []
    assert extract_even_numbers(""0 6 8 10"") == [0, 6, 8, 10]"
"def find_in_set_not_in_list(s, lst):
    result = sorted(list(s - set(lst)))
    if not result:
        return None
    return result","def test_find_in_set_not_in_list():
    assert find_in_set_not_in_list({1, 2, 3}, [2, 3, 4]) == [1]
    assert find_in_set_not_in_list({1, 2, 3}, [1, 2, 3]) is None
    assert find_in_set_not_in_list(set(), [1, 2, 3]) is None
    assert find_in_set_not_in_list({1, 2, 3}, []) == [1, 2, 3]
    assert find_in_set_not_in_list({1, 2, 3, 5}, [2, 3, 4, 5]) == [1]
    assert find_in_set_not_in_list({1, 6, 7}, [2, 3, 6]) == [1, 7]
    assert find_in_set_not_in_list({9, 10}, [11, 12]) == [9, 10]
    assert find_in_set_not_in_list({7, 8, 9}, [3, 7]) == [7, 8]
    assert find_in_set_not_in_list({1, 3, 5}, [2, 4, 5]) == [1]","def test_find_in_set_not_in_list():
    assert find_in_set_not_in_list({1, 2, 3}, [2, 3, 4]) == [1]
    assert find_in_set_not_in_list({1, 2, 3}, [1, 2, 3]) is None
    assert find_in_set_not_in_list({4, 5, 6}, [1, 2, 3]) == [4, 5, 6]
    assert find_in_set_not_in_list({0, 1, 2}, [2, 3, 4]) == [0, 1]
    assert find_in_set_not_in_list({-1, -2, -3}, [-3, -4, -5]) == [-2, -1]
    assert find_in_set_not_in_list({10, 20, 30}, [20, 30, 40]) == [10]
    assert find_in_set_not_in_list({15, 25, 35}, [10, 20, 30]) == [15, 25, 35]
    assert find_in_set_not_in_list({1, 2, 3}, []) == [1, 2, 3]"
"def pop_elements_greater_than_x(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem > x:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_greater_than_x():
    assert pop_elements_greater_than_x([8, 10, 12, 4], 9) == [12, 10]
    assert pop_elements_greater_than_x([16, 3, 5, 14], 12) == [14, 16]
    assert pop_elements_greater_than_x([4, 8, 16, 3], 6) == [16, 8]
    assert pop_elements_greater_than_x([], 5) is None
    assert pop_elements_greater_than_x([5, 7, 11], 10) is None
    assert pop_elements_greater_than_x([4, 15, 20, 8], 15) == [20]
    assert pop_elements_greater_than_x([-4, -8, 0], -3) == [0]
    assert pop_elements_greater_than_x([9, 17, 21], 1) is None
    assert pop_elements_greater_than_x([-1, -2, -5, -6], -4) == [-2]","def test_pop_elements_greater_than_x():
    assert pop_elements_greater_than_x([1, 3, 5, 7, 9], 4) == [9, 7, 5]
    assert pop_elements_greater_than_x([2, 4, 6, 8], 10) is None
    assert pop_elements_greater_than_x([10, 20, 30], 15) == [30, 20]
    assert pop_elements_greater_than_x([], 5) is None
    assert pop_elements_greater_than_x([-5, -2, -1, 0], -3) == [0, -1, -2]
    assert pop_elements_greater_than_x([5, 5, 5, 5, 5], 5) is None
    assert pop_elements_greater_than_x([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]
    assert pop_elements_greater_than_x([1, 2, 3, 4, 5], 5) is None"
"def find_square_roots(lst):
    result = []
    for num in lst:
        if num >= 0:
            result.append(num ** 0.5)
    if not result:
        return None
    return result","def test_find_square_roots():
    assert find_square_roots([4, 9, 16]) == [2.0, 3.0, 4.0]
    assert find_square_roots([1, 0, 25]) == [1.0, 0.0, 5.0]
    assert find_square_roots([-4, -9, -16]) is None
    assert find_square_roots([0, 1, 4]) == [0.0, 1.0, 2.0]
    assert find_square_roots([]) is None
    assert find_square_roots([36, 49, 64]) == [3.0, 4.0, 5.0]
    assert find_square_roots([7, 14, 21]) == [4.0, 5.0, 6.0]
    assert find_square_roots([8, 16, 24]) == [6.0, 7.0, 8.0]
    assert find_square_roots([5, 10, 20]) == [5.0, 10.0, 15.0]","def test_find_square_roots():
    assert find_square_roots([4, 16, 25]) == [2.0, 4.0, 5.0]
    assert find_square_roots([-1, -4]) is None
    assert find_square_roots([0, 1, 9]) == [0.0, 1.0, 3.0]
    assert find_square_roots([1]) == [1.0]
    assert find_square_roots([]) is None"
"def find_difference_of_elements_from_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a - b)
    if not result:
        return None
    return result","def test_find_difference_of_elements_from_two_lists():
    assert find_difference_of_elements_from_two_lists([1, 2, 3], [4, 5, 6]) == [3, 3, 3]
    assert find_difference_of_elements_from_two_lists([7, 8, 9], [1, 2, 3]) == [6, 6, 6]
    assert find_difference_of_elements_from_two_lists([0], [0]) == [0]
    assert find_difference_of_elements_from_two_lists([], []) is None
    assert find_difference_of_elements_from_two_lists([1], [0]) == [1]
    assert find_difference_of_elements_from_two_lists([0], [1]) == [1]
    assert find_difference_of_elements_from_two_lists([2, 3, 4], [5, 3, 1]) == [3, 0, 3]
    assert find_difference_of_elements_from_two_lists([5, 6, 7], [4, 3, 2]) == [0, 3, 6]
    assert find_difference_of_elements_from_two_lists([10, 20, 30], [2, 40]) == [5, 15, 25]","def test_find_difference_of_elements_from_two_lists():
    assert find_difference_of_elements_from_two_lists([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]
    assert find_difference_of_elements_from_two_lists([1, 1, 1], [1, 1, 1]) == [0, 0, 0]
    assert find_difference_of_elements_from_two_lists([], [1, 2, 3]) is None
    assert find_difference_of_elements_from_two_lists([1, 2, 3], []) is None
    assert find_difference_of_elements_from_two_lists([1, 2, 3], [1, 2, 3]) == [0, 0, 0]
    assert find_difference_of_elements_from_two_lists([-1, -2, -3], [-3, -4, -5]) == [2, 2, 2]"
"def find_squares_of_odd_numbers(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_odd_numbers():
    assert find_squares_of_odd_numbers([1, 4, 9, 16, 25, 36, 49]) == [1, 4, 9, 16, 25, 36, 49]
    assert find_squares_of_odd_numbers([2, 3, 5, 7, 11]) is None
    assert find_squares_of_odd_numbers([1, 25, 49, 81]) == [1, 25, 49, 81]
    assert find_squares_of_odd_numbers([1, 4, 9, 16, 25, 36, 49]) == [1, 4, 9, 16, 25, 36, 49]
    assert find_squares_of_odd_numbers([1, 3, 5, 7, 9, 111]) == [1]
    assert find_squares_of_odd_numbers([25, 49, 81, 121]) == [25, 49, 81, 121]
    assert find_squares_of_odd_numbers([100, 121, 1444]) == [10, 169, 186]
    assert find_squares_of_odd_numbers([5, 125, 36, 49]) == [5, 125, 36, 49]
    assert find_squares_of_odd_numbers([49, 81, 125]) == [49, 81, 125]","def test_find_squares_of_odd_numbers():
    assert find_squares_of_odd_numbers([9, 25, 49]) == [9, 25, 49]
    assert find_squares_of_odd_numbers([16, 36, 64]) is None
    assert find_squares_of_odd_numbers([81, 121, 169]) == [81, 121, 169]"
"def is_float_5(s):
    try:
        float(s)
        return ""."" in s
    except ValueError:
        return False","def test_is_float_5():
    assert is_float_5(""123.45"") is True
    assert is_float_5(""123"") is False
    assert is_float_5(""abc"") is False
    assert is_float_5("""") is False
    assert is_float_5(""123."") is True
    assert is_float_5("".45"") is True
    assert is_float_5("".789"") is False
    assert is_float_5(""123,456.789"") is True
    assert is_float_5(""0.001"") is False","def test_is_float_5():
    assert is_float_5(""3.14"") is True
    assert is_float_5(""0.001"") is True
    assert is_float_5(""-3.14"") is True
    assert is_float_5(""3"") is False
    assert is_float_5(""abc"") is False"
"def remove_less_than_ring(arr, threshold):
    if not arr:
        return arr
    return [x for x in arr if x >= threshold]","def test_remove_less_than_ring():
    assert remove_less_than_ring([1, 2, 3, 4, 5], 3) == [1, 2, 3]
    assert remove_less_than_ring([1, 2, 3], 2) == [1, 2]
    assert remove_less_than_ring([], 3) == []
    assert remove_less_than_ring([3, 3, 3], 3) == []
    assert remove_less_than_ring([1, 4, 7, 10], 5) == [1, 4, 7, 10]
    assert remove_less_than_ring([10, 20, 30], 15) == [10, 20]
    assert remove_less_than_ring([5], 5) == []
    assert remove_less_than_ring([3, 3, 3], 1) == [3, 3, 3]
    assert remove_less_than_ring([1, 2, 3, 4, 5], 2) == [1, 2]","def test_remove_less_than_ring():
    assert remove_less_than_ring([], 10) == []
    assert remove_less_than_ring([1, 5, 10, 15], 10) == [10, 15]
    assert remove_less_than_ring([20, 25, 30], 20) == [20, 25, 30]
    assert remove_less_than_ring([1, 2, 3], 5) == []"
"def unique_in_first(lst1, lst2):
    unique_elements = []
    for item in lst1:
        if item not in lst2:
            unique_elements.append(item)
    if not unique_elements:
        print(""No unique elements found in the first list."")
    return unique_elements","def test_unique_in_first():
    assert unique_in_first([1, 2, 3], [2, 3, 4]) == [1, 4]
    assert unique_in_first([5, 6, 7], [7, 8, 9]) == [5, 6, 8, 9]
    assert unique_in_first([1, 1, 1], [1, 1, 1]) == [1]
    assert unique_in_first([], [1, 2, 3]) == [1, 2, 3]
    assert unique_in_first([1, 2, 3], []) == [1, 2, 3]
    assert unique_in_first([1, 3, 5], [2, 4, 6]) == [1, 3, 5, 2, 4, 6]
    assert unique_in_first([7, 8, 9], [3, 6, 7]) == [7, 8, 9, 3, 6, 7]
    assert unique_in_first([10, 20, 30], [20, 30, 40]) == [10, 40]
    assert unique_in_first([1, 4, 5], [3, 7]) == [1, 4, 5, 3, 7]","def test_unique_in_first():
    assert unique_in_first([1, 2, 3], [3, 4, 5]) == [1, 2]
    assert unique_in_first([1, 2, 3], [4, 5, 6]) == [1, 2, 3]
    assert unique_in_first([5, 6, 7], [7, 8, 9]) == [5, 6]
    assert unique_in_first([1, 2], [1, 2]) == []
    assert unique_in_first([1, 2, 3], []) == [1, 2, 3]
    assert unique_in_first([], [1, 2, 3]) == []
    assert unique_in_first([10, 20, 30], [20, 40, 60]) == [10, 30]
    assert unique_in_first([1, 1, 2], [1, 3]) == [2]
    assert unique_in_first([100, 200], [100, 300]) == [200]"
"def find_floats_less_than_avg_in_dict(lst, d):
    if not lst or not d:
        return None
    avg_dict = sum(d.values()) / len(d)
    result = []
    for item in lst:
        if isinstance(item, float) and item < avg_dict:
            result.append(item)
    return tuple(result) if result else None","def test_find_floats_less_than_avg_in_dict():
    assert find_floats_less_than_avg_in_dict([1.0, 2.0], {1: 1.5}) == (1.0,)
    assert find_floats_less_than_avg_in_dict([0.5, 1.5], {1: 1.0}) == (0.5,)
    assert find_floats_less_than_avg_in_dict([], {1: 1.0}) is None
    assert find_floats_less_than_avg_in_dict([1.0], dict()) is None
    assert find_floats_less_than_avg_in_dict([3.0, 4.0], {1: 2.0}) == (3.0, 4.0)
    assert find_floats_less_than_avg_in_dict([5.0, 6.0], {1: 3.0}) == (5.0, 6.0)
    assert find_floats_less_than_avg_in_dict([7.0, 8.0], {1: 4.0}) == (7.0, 8.0)
    assert find_floats_less_than_avg_in_dict([9.0, 10.0], {1: 5.0}) == (9.0, 10.0)
    assert find_dict() is None","def test_find_floats_less_than_avg_in_dict():
    assert find_floats_less_than_avg_in_dict([1.2, 3.4, 0.5], {""a"": 5.6, ""b"": 7.8, ""c"": 9.0}) == (1.2, 3.4, 0.5)
    assert find_floats_less_than_avg_in_dict([2.2, 4.4, -1.5], {""a"": 3.6, ""b"": 7.8, ""c"": 1.0}) == (2.2, -1.5)
    assert find_floats_less_than_avg_in_dict([], {""a"": 1.0, ""b"": 2.0, ""c"": 3.0}) is None
    assert find_floats_less_than_avg_in_dict([1.2, 2.4, 3.6], {}) is None"
"def remove_even_from_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_even_from_stack():
    assert remove_even_from_stack([1, 3, 5, 2, 7]) == [7, 2]
    assert remove_even_from_stack([2, 4, 6, 1]) == [1, 6]
    assert remove_even_from_stack([1, 1, 1, 1]) == [1, 1, 1, 1]
    assert remove_even_from_stack([2, 2, 2, 2]) == [2, 2, 2, 2]
    assert remove_even_from_stack([4, 4, 4, 4]) == [4, 4, 4, 4]
    assert remove_even_from_stack([6, 6, 6]) == [6, 6, 6]
    assert remove_even_from_stack([8, 8, 8]) == [8, 8, 8]
    assert remove_even_from_stack([10, 20, 30, 40]) == [30, 40]
    assert remove_even_from_stack([5, 5, 5, 5, 5]) == [5, 5, 5]","def test_remove_even_from_stack():
    assert remove_even_from_stack([1, 2, 3, 4, 5]) == [5, 3, 1]
    assert remove_even_from_stack([2, 4, 6, 8]) is None
    assert remove_even_from_stack([1, 3, 5, 7]) == [7, 5, 3, 1]
    assert remove_even_from_stack([]) is None
    assert remove_even_from_stack([1]) == [1]"
"def find_even_and_greater_than_ten(lst):
    result = []
    for n in lst:
        if n % 2 == 0 and n > 10:
            result.append(n)
    return tuple(result) if result else None","def test_find_even_and_greater_than_ten():
    assert find_even_and_greater_than_ten([1, 2, 3, 12, 14]) == (12, 14)
    assert find_even_and_greater_than_ten([5, 7, 9, 11, 13]) is None
    assert find_even_and_greater_than_ten([2, 4, 6, 8, 10]) is None
    assert find_even_and_greater_than_ten([15, 16, 20, 22]) == (16, 20, 22)
    assert find_even_and_greater_than_ten([]) is None
    assert find_even_and_greater_than_ten([12, 13, 24, 26]) == (12, 13, 24, 26)
    assert find_even_and_greater_than_ten([17, 18, 29, 30]) == (18, 29, 30)
    assert find_even_and_greater_than_ten([31, 33, 35, 40]) == (33, 40)
    assert find_even_and_greater_than_ten([41, 42, 43, 444]) == (42, 43, 44)","def test_find_even_and_greater_than_ten():
    assert find_even_and_greater_than_ten([12, 14, 16, 18]) == (12, 14, 16, 18)
    assert find_even_and_greater_than_ten([8, 9, 10]) is None
    assert find_even_and_greater_than_ten([20, 21, 22]) == (20, 22)
    assert find_even_and_greater_than_ten([]) is None"
"def find_even_and_divisible_by_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0:
            if num % 3 == 0:
                result.append(num)
    if not result:
        return None
    return result","def test_find_even_and_divisible_by_3():
    assert find_even_and_divisible_by_3([3, 6, 9, 12, 15, 18, 21, 24]) == [3, 9, 15, 21]
    assert find_even_and_divisible_by_3([2, 4, 6, 8, 10, 12]) is None
    assert find_even_and_divisible_by_3([5, 10, 15]) == [15]
    assert find_even_and_divisible_by_3([1, 2, 3, 4, 5]) == [3]
    assert find_even_and_divisible_by_3([9, 18, 27, 36]) == [27, 36]
    assert find_even_and_divisible_by_3([3, 4, 5, 6, 7, 8, 9]) == [3, 9]
    assert find_even_and_divisible_by_3([111, 22, 33, 44, 55, 66]) == [33, 45, 55, 66]
    assert find_even_and_divisible_by_3([7, 14, 21, 28, 35]) == [21, 28]
    assert find_9, 229, 38, 49]","def test_find_even_and_divisible_by_3():
    assert find_even_and_divisible_by_3([6, 12, 18]) == [6, 12, 18]
    assert find_even_and_divisible_by_3([1, 2, 3]) is None
    assert find_even_and_divisible_by_3([]) is None"
"def multiply_by_diff_of_all_lists(lst1, lst2):
    if not lst1 or not lst2:
        return None
    result = []
    total_diff = sum(lst1) - sum(lst2)
    for num in lst1:
        result.append(num * total_diff)
    return result","def test_multiply_by_diff_of_all_lists():
    assert multiply_by_diff_of_all_lists([1, 2, 3], [3, 2, 1]) == [0, 0, 0]
    assert multiply_by_diff_of_all_lists([0, 0, 0], [1, 1, 1]) == [0, 0, 0]
    assert multiply_by_diff_of_all_lists([], []) is None
    assert multiply_by_diff_of_all_lists([1], [2]) == [0]
    assert multiply_by_diff_of_all_lists([5, 6], [7]) == [0]
    assert multiply_by_diff_of_all_lists([2, 4, 6], [1, 3, 5]) == [0, 0, 0]
    assert multiply_by_diff_of_all_lists([3], [6, 9], [9, 6]) == [0, 0, 0]
    assert multiply_by_diff_of_all_lists([7, 8, 9], [10, 111, 12]) == [0, 0, 0]
    assert multiply_by_diff_of_all_lists([2, 3], [1, 2, 3], [1]) == [0, 0, 0]","def test_multiply_by_diff_of_all_lists():
    assert multiply_by_diff_of_all_lists([1, 2, 3], [3, 2, 1]) == [0, 0, 0]
    assert multiply_by_diff_of_all_lists([0, 0, 0], []) is None
    assert multiply_by_diff_of_all_lists([0, 0, 0], [1, 1, 1]) == [0, 0, 0]"
"def find_common_keys_with_values_gt_10(dict1, dict2):
    result = []
    for key in dict1:
        if key in dict2 and dict1[key] > 10 and dict2[key] > 10:
            result.append(key)
    if not result:
        return None
    return result","def test_find_common_keys_with_values_gt_10():
    assert find_common_keys_with_values_gt_10({'a': 5, 'b': 15}, {'a': 10, 'b': 20}) == ['a', 'b']
    assert find_common_keys_with_values_gt_10({'a': 10}, {'a': 5}) is None
    assert find_common_keys_with_values_gt_10({'a': 10}, {'b': 10}) is None
    assert find_common_keys_with_values_gt_10({'a': 10}, {'a': 10, 'b': 10}) == ['a']
    assert find_common_keys_with_values_gt_10({'a': 10, 'b': 20}, {'a': 30, 'b': 40}) == ['b']
    assert find_common_keys_with_values_gt_10({'a': 10, 'b': 20}, {'c': 20}) is None
    assert find_common_keys_with_values_gt_10({'a': 20, 'b': 30}, {'a': 20, 'b': 30}) == ['a', 'b']
    assert find_common_keys_with_values_gt_10({'a': 30, 'b': 40}, {'a': 30, 'b': 50}) == ['a', 'b']
    assert find_common_keys_with_values_gt_10({'a': 5, 'b': 60}, {'a': 70}) is None","def test_find_common_keys_with_values_gt_10():
    assert find_common_keys_with_values_gt_10({'a': 15, 'b': 5}, {'a': 20, 'b': 10}) == ['a']
    assert find_common_keys_with_values_gt_10({'a': 25, 'b': 30}, {'a': 35, 'b': 40}) == ['a', 'b']"
"def replace_spaces_with_underscores_5(s):
    if not s:
        return None
    result = """"
    for char in s:
        if char == "" "":
            result += ""_""
        else:
            result += char
    return result","def test_replace_spaces_with_underscores_5():
    assert replace_spaces_with_underscores_5(""hello world"") == ""hello_world""
    assert replace_spaces_with_underscores_5("" a b c "") == ""_a_b_c_""
    assert replace_spaces_with_underscores_5("""") is None
    assert replace_spaces_with_underscores_5(None) is None
    assert replace_spaces_with_underscores_5(""nospace"") == ""nospace""
    assert replace_spaces_with_underscores_5(""   "") == ""___""
    assert replace_spaces_with_underscores_5(""Python programming"") == ""Python_programming""
    assert replace_spaces_with_underscores_5(""underscore_test"") == ""underscore_test""
    assert replace_spaces_with_underscores_5(""another example"") == ""another_example""","def test_replace_spaces_with_underscores_5():
    assert replace_spaces_with_underscores_5(""a b c"") == ""a_b_c""
    assert replace_spaces_with_underscores_5("""") is None
    assert replace_spaces_with_underscores_5(""no spaces"") == ""no_spaces""
    assert replace_spaces_with_underscores_5(""only one"") == ""only_one""
    assert replace_spaces_with_underscores_5(""leading space "") == ""leading_space_"""
"def find_keys_in_dicts(dict1, dict2):
    result = [key for key in dict1 if dict1[key] in dict2]
    if not result:
        return None
    return result","def test_find_keys_in_dicts():
    assert find_keys_in_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['b']
    assert find_keys_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == ['a', 'b']
    assert find_keys_in_dicts({'a': 1, 'b': 2, 'c': 3}, {'b': 2}) == ['b']
    assert find_keys_in_dicts({}, {'a': 1}) is None
    assert find_keys_in_dicts({'a': 1}, {}) is None
    assert find_keys_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 3}) == ['a', 'b']
    assert find_keys_in_dicts({'x': 0, 'y': 1}, {'y': 2}) == ['y']
    assert find_keys_in_dicts({'k': 10, 'l': 20}, {'m': 30}) == ['l']
    assert find_keys_in_dicts({'a': 1, 'b': 2, 'c': 3}, {'d': 2, 'e': 3}) == ['a', 'b', 'c']","def test_find_keys_in_dicts():
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {2: 'a', 4: 'b', 6: 'c'}) == [1, 3, 5]
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {7: 'a', 8: 'b', 9: 'c'}) is None
    assert find_keys_in_dicts({}, {2: 'a', 4: 'b', 6: 'c'}) is None
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {}) is None
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {4: 'b'}) == [3]
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {6: 'c'}) == [5]
    assert find_keys_in_dicts({1: 2, 3: 4}, {4: 'b', 2: 'a'}) == [1, 3]"
"def process_queue_greater_than_x_and_divisible_by_2(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem > x and elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_greater_than_x_and_divisible_by_2():
    assert process_queue_greater_than_x_and_divisible_by_2([8, 12, 15, 4], 9) == [12, 15]
    assert process_queue_greater_than_x_and_divisible_by_2([16, 2, 5, 12], 10) == [16, 12]
    assert process_queue_greater_than_x_and_divisible_by_2([4, 8, 16, 3], 6) == [4, 8, 16]
    assert process_queue_greater_than_x_and_divisible_by_2([], 10) is None
    assert process_queue_greater_than_x_and_divisible_by_2([5, 7, 11], 5) == [5, 7, 11]
    assert process_queue_greater_than_x_and_divisible_by_2([4, 15, 20, 8], 10) == [4, 15]
    assert process_queue_greater_than_x_and_divisible_by_2([-4, -8, 0], -1) == [-4]
    assert process_queue_greater_than_x_and_divisible_2([9, 17, 21], 10) == [17, 21]
    assert process_queue_greater_than_x_and_divisible_by_2([-1, -2, -5, -6], -3) == [-1, -2]","def test_process_queue_greater_than_x_and_divisible_by_2():
    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 2) == [4]
    assert process_queue_greater_than_x_and_divisible_by_2([10, 9, 8, 7, 6], 5) == [10, 8, 6]
    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 6) is None
    assert process_queue_greater_than_x_and_divisible_by_2([], 1) is None
    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 0) == [2, 4]"
"def create_string_dict(lst):
    if not lst:
        return None
    string_dict = {}
    for i, s in enumerate(lst):
        string_dict[i] = s
    return string_dict if string_dict else None","def test_create_string_dict():
    assert create_string_dict(['a', 'b', 'c']) == {0: 'a', 1: 'b', 2: 'c'}
    assert create_string_dict([]) is None
    assert create_string_dict([1, 2, 3]) == {0: '1', 1: '2', 2: '3'}
    assert create_string_dict(['x', 'y']) == {0: 'x', 1: 'y'}
    assert create_string_dict(['abc', 'def']) == {0: 'abc', 1: 'def'}
    assert create_string_dict(['a']) == {0: 'a'}
    assert create_string_dict(['apple', 'banana']) == {0: 'apple', 1: 'banana'}
    assert create_string_dict(['orange', 'banana']) == {0: 'orange', 1: 'banana'}
    assert create_string_dict(['grape']) == {0: 'grape'}","def test_create_string_dict():
    assert create_string_dict([""a"", ""b"", ""c""]) == {0: ""a"", 1: ""b"", 2: ""c""}
    assert create_string_dict([]) is None
    assert create_string_dict([""single""]) == {0: ""single""}
    assert create_string_dict([""one"", ""two"", ""three""]) == {0: ""one"", 1: ""two"", 2: ""three""}"
"def diff_and_product_multiplied_by_index(lst1, lst2):
    result = []
    product_lst2 = 1
    for num in lst2:
        product_lst2 *= num
    for i, num in enumerate(lst1):
        result.append(num - (product_lst2 * i))
    if not result:
        return None
    return result","def test_diff_and_product_multiplied_by_index():
    assert diff_and_product_multiplied_by_index([1, 2, 3], [4, 5, 6]) == [-1, -4, -9]
    assert diff_and_product_multiplied_by_index([0, 0, 0], [1, 1, 1]) == [0, -1, -4]
    assert diff_and_product_multiplied_by_index([], []) is None
    assert diff_and_product_multiplied_by_index([1], [2, 3]) == [1]
    assert diff_and_product_multiplied_by_index([5, 6], [7]) == [35]
    assert diff_and_product_multiplied_by_index([2, 4, 6], [1, 3, 5]) == [-2, -4, -6]
    assert diff_and_product_multiplied_by_index([3], [6, 9]) == [72]
    assert diff_and_product_multiplied_by_index([7, 8, 9], [10, 111]) == [127, 144]
    assert diff_and_product_multiplied_by_index([2, 3], [1, 2, 3]) == [-1, -2, -3]","def test_diff_and_product_multiplied_by_index():
    assert diff_and_product_multiplied_by_index([1, 2, 3], [1, 2, 3]) == [1, -4, -9]
    assert diff_and_product_multiplied_by_index([], []) is None
    assert diff_and_product_multiplied_by_index([0, 0, 0], [1, 1, 1]) == [0, -1, -2]"
"def choose_first_all_uppercase_word(*words):
    for word in words:
        if word.isupper():
            return word
    return None","def test_choose_first_all_uppercase_word():
    assert choose_first_all_uppercase_word(""All"", ""Upper"", ""Case"") == ""All""
    assert choose_first_all_uppercase_word(""123"", ""456"", ""789"") == ""123""
    assert choose_first_all_uppercase_word(""abc"", ""def"", ""ghi"") is None
    assert choose_first_all_uppercase_word(""Hello"", ""World"") == ""Hello""
    assert choose_first_all_uppercase_word(""One"", ""Two"", ""Three"") == ""One""
    assert choose_first_all_uppercase_word(""UPPER"", ""LOW"", ""CASE"") == ""UPPER""
    assert choose_first_all_uppercase_word(""a"", ""b"", ""c"") is None
    assert choose_first_all_uppercase_word(""ABCD"", ""efgh"", ""ijkl"") == ""ABCD""
    assert choose_first_all_uppercase_word(""a"", ""E"", ""B"") == ""a""","def test_choose_first_all_uppercase_word():
    assert choose_first_all_uppercase_word(""HELLO"", ""WORLD"", ""PYTHON"") == ""HELLO""
    assert choose_first_all_uppercase_word(""hello"", ""WORLD"", ""python"") == ""WORLD""
    assert choose_first_all_uppercase_word(""hello"", ""world"", ""python"") is None
    assert choose_first_all_uppercase_word(""HELLO"", ""WORLD"", ""PYTHON"") == ""HELLO""
    assert choose_first_all_uppercase_word(""hello"", ""WORLD"", ""PYTHON"") == ""WORLD"""
"def find_divisible_by_6_not_9_and_multiply(lst):
    result = []
    product = 1
    for num in lst:
        if num % 6 == 0 and num % 9 != 0:
            result.append(num)
            product *= num
    if not result:
        return None
    return product","def test_find_divisible_by_6_not_9_and_multiply():
    assert find_divisible_by_6_not_9_and_multiply([6, 12, 24]) == 48
    assert find_divisible_by_6_not_9_and_multiply([9, 18, 27]) is None
    assert find_divisible_by_6_not_9_and_multiply([30, 36, 42]) == 96
    assert find_divisible_by_6_not_9_and_multiply([45, 54, 63]) is None
    assert find_divisible_by_6_not_9_and_multiply([72, 81, 90]) == 108
    assert find_divisible_by_6_not_9_and_multiply([5, 10, 15]) is None
    assert find_divisible_by_6_not_9_and_multiply([12, 14, 18]) == 24
    assert find_divisible_by_6_not_9_and_multiply([7, 14, 21]) is None
    assert find_divisible_by_6_not_9_and_multiply([9, 27, 36]) is None","def test_find_divisible_by_6_not_9_and_multiply():
    assert find_divisible_by_6_not_9_and_multiply([6, 12, 18, 30]) == 2160
    assert find_divisible_by_6_not_9_and_multiply([6, 12, 18, 24]) == 1728
    assert find_divisible_by_6_not_9_and_multiply([5, 7, 8]) is None
    assert find_divisible_by_6_not_9_and_multiply([6, 12, 18]) == 72"
"def diff_and_product_with_index(lst1, lst2):
    if not lst1 or not lst2:
        return None
    result = []
    for i in range(len(lst1)):
        if i < len(lst2):
            result.append(lst1[i] - (lst2[i] * i))
    return result","def test_diff_and_product_with_index():
    assert diff_and_product_with_index([2, 4], [1, 2]) == [0, 2]
    assert diff_and_product_with_index([3, 5], [1, 1]) == [0, 4]
    assert diff_and_product_with_index([], [1, 2, 3]) is None
    assert diff_and_product_with_index([2, 3], []) is None
    assert diff_and_product_with_index([1], [1]) == [0]
    assert diff_and_product_with_index([2], [3, 4]) == [1, 3]
    assert diff_and_product_with_index([3, 6], [2, 5]) == [1, 3]
    assert diff_and_product_with_index([7, 9], [3, 7]) == [0, 6]
    assert diff_and_product_with_index([10, 20], [2, 4]) == [5, 15]","def test_diff_and_product_with_index():
    assert diff_and_product_with_index([1, 2, 3], [1, 2, 3]) == [1, 0, -3]
    assert diff_and_product_with_index([0, 0, 0], [1, 1, 1]) == [0, -1, -2]
    assert diff_and_product_with_index([], []) is None"
"def find_squares(lst):
    squares = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num:
            squares.append(num)
    return squares","def test_find_squares():
    assert find_squares([1, 4, 9, 16, 25, 36]) == [1, 4, 9, 16, 25, 36]
    assert find_squares([7, 14, 21, 28]) == [7, 14, 21, 28]
    assert find_squares([8, 11, 13, 16]) == [8, 11, 13, 16]
    assert find_squares([17, 29, 37]) == [17, 29, 37]
    assert find_squares([64, 729, 81, 992]) == [64, 729, 81, 992]
    assert find_squares([5, 10, 15]) == [5, 10, 15]
    assert find_squares([49, 64, 81, 1000]) == [49, 64, 81, 100]
    assert find_squares([36, 729, 992]) == [36, 729, 992]
    assert find_squares([10, 20, 30, 40]) == [10, 20, 30, 40]","def test_find_squares():
    assert find_squares([1, 4, 9, 16, 25]) == [1, 4, 9, 16, 25]
    assert find_squares([2, 3, 5, 6, 7]) == []
    assert find_squares([36, 49, 64, 81]) == [36, 49, 64, 81]
    assert find_squares([10, 20, 30]) == []
    assert find_squares([100, 121, 144]) == [100, 121, 144]
    assert find_squares([]) == []
    assert find_squares([0, 1, 2, 3]) == [0, 1]
    assert find_squares([50, 60, 70, 80]) == []"
"def remove_less_than_x(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem >= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_less_than_x():
    assert remove_less_than_x([1, 3, 5, 7, 9], 4) == [3, 1]
    assert remove_less_than_x([2, 4, 6, 8], 10) == [8, 6, 4, 2]
    assert remove_less_than_x([10, 20, 30], 15) == [30]
    assert remove_less_than_x([], 5) is None
    assert remove_less_than_x([-5, -2, -1], -3) == [-1]
    assert remove_less_than_x([5, 5, 5, 5, 5], 5) is None
    assert remove_less_than_x([1, 2, 3, 4, 5], 0) is None
    assert remove_less_than_x([1, 2, 3, 4, 5], 5) == [4, 3, 2, 1]
    assert remove_less_than_x([100], 10) is None","def test_remove_less_than_x():
    assert remove_less_than_x([1, 3, 5, 7, 9], 4) == [9, 7, 5]
    assert remove_less_than_x([2, 4, 6, 8], 10) is None
    assert remove_less_than_x([10, 20, 30], 15) == [30, 20]
    assert remove_less_than_x([], 5) is None
    assert remove_less_than_x([-5, -2, -1, 0], -3) == [0, -1, -2]
    assert remove_less_than_x([5, 5, 5, 5, 5], 5) == [5, 5, 5, 5, 5]
    assert remove_less_than_x([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]
    assert remove_less_than_x([1, 2, 3, 4, 5], 5) == [5]"
"def diff_of_squares_and_indexes_from_other_list(lst1, lst2):
    result = []
    for i in range(len(lst1)):
        if i < len(lst2):
            result.append(lst1[i] ** 2 - lst2[i])
    if not result:
        return None
    return result","def test_diff_of_squares_and_indexes_from_other_list():
    assert diff_of_squares_and_indexes_from_other_list([1, 2], [2, 3]) == [-1, 1]
    assert diff_of_squares_and_indexes_from_other_list([3], [2]) == [7]
    assert diff_of_squares_and_indexes_from_other_list([5, 10], [2, 4]) == [23, 96]
    assert diff_of_squares_and_indexes_from_other_list([], [1]) is None
    assert diff_of_squares_and_indexes_from_other_list([6, 7], [0, 1]) == [36, 48]
    assert diff_of_squares_and_indexes_from_other_list([8], [3, 5]) == [9, 27]
    assert diff_of_squares_and_indexes_from_other_list([11], [2]) == [-7, 14]
    assert diff_of_squares_and_indexes_from_other_list([13, 17], [3, 15]) == [19, 35]
    assert diff_of_squares_and_indexes_from_other_list([19], [21, 23]) == [3, 27]","def test_diff_of_squares_and_indexes_from_other_list():
    assert diff_of_squares_and_indexes_from_other_list([3, 4], [1, 2]) == [8, 14]
    assert diff_of_squares_and_indexes_from_other_list([5, 6], [0, 3]) == [25, 33]
    assert diff_of_squares_and_indexes_from_other_list([7, 8], [6, 1]) == [43, 63]
    assert diff_of_squares_and_indexes_from_other_list([], [1, 2, 3]) is None
    assert diff_of_squares_and_indexes_from_other_list([2, 3], []) is None"
"def find_largest_power_of_two(lst):
    largest = None
    for n in lst:
        if (n & (n - 1)) == 0 and (largest is None or n > largest):
            largest = n
    return largest","def test_find_largest_power_of_two():
    assert find_largest_power_of_two([1, 2, 4, 16, 64]) == 64
    assert find_largest_power_of_two([3, 5, 7]) is None
    assert find_largest_power_of_two([16, 8, 2]) == 16
    assert find_largest_power_of_two([]) is None
    assert find_largest_power_of_two([10, 20, 40]) is None
    assert find_largest_power_of_two([6, 12, 18]) is None
    assert find_largest_power_of_two([15, 30, 45]) is None
    assert find_largest_power_of_two([256, 512, 1024]) == 1024
    assert find_largest_power_of_two([5, 10, 20, 40]) is None","def test_find_largest_power_of_two():
    assert find_largest_power_of_two([1, 2, 4, 16, 64]) == 64
    assert find_largest_power_of_two([3, 5, 7]) is None
    assert find_largest_power_of_two([16, 8, 2]) == 16
    assert find_largest_power_of_two([0]) == 0"
"def list_to_comma_separated_string(arr):
    if not arr:
        return """"
    return "", "".join(map(str, arr))","def test_list_to_comma_separated_string():
    assert list_to_comma_separated_string([1, 2, 3]) == ""1, 2, 3""
    assert list_to_comma_separated_string([]) == """"
    assert list_to_comma_separated_string([True, False, None]) == ""True, False, None""
    assert list_to_comma_separated_string([""a"", ""b"", ""c""]) == ""a, b, c""
    assert list_to_comma_separated_string([1]) == ""1""
    assert list_to_comma_separated_string([1, 1, 1]) == ""1, 1, 1""
    assert list_to_comma_separated_string([1, 2, 3, 4, 5]) == ""1, 2, 3, 4, 5""
    assert list_to_comma_separated_string([7, 8, 9]) == ""7, 8, 9""
    assert list_to_comma_separated_string([10, 20, 30]) == ""10, 20, 30""","def test_list_to_comma_separated_string():
    assert list_to_comma_separated_string([1, 2, 3]) == ""1, 2, 3""
    assert list_to_comma_separated_string([]) == """"
    assert list_to_comma_separated_string([1]) == ""1""
    assert list_to_comma_separated_string([1, 2, 3, 4, 5]) == ""1, 2, 3, 4, 5""
    assert list_to_comma_separated_string([10, 20, 30]) == ""10, 20, 30"""
"def is_number_5(s):
    try:
        float(s)
        return True
    except ValueError:
        return False","def test_is_number_5():
    assert is_number_5(""5"") is True
    assert is_number_5(""10"") is False
    assert is_number_5(""-10"") is False
    assert is_number_5(""abc"") is False
    assert is_number_5(""0"") is True
    assert is_number_5(""1.5"") is False
    assert is_number_5(""100"") is False
    assert is_number_5(""0.1"") is True
    assert is_number_5(""100, 200"") is False","def test_is_number_5():
    assert is_number_5(""123"") is True
    assert is_number_5(""123.45"") is True
    assert is_number_5(""abc"") is False
    assert is_number_5("""") is False
    assert is_number_5(""123abc"") is False
    assert is_number_5(""-123.45"") is True
    assert is_number_5(""0"") is True
    assert is_number_5("".5"") is True"
"def choose_smallest_odd_number(*nums):
    smallest_odd = None
    for num in nums:
        if num % 2 != 0:
            if smallest_odd is None or num < smallest_odd:
                smallest_odd = num
    return smallest_odd if smallest_odd is not None else None","def test_choose_smallest_odd_number():
    assert choose_smallest_odd_number(1, 2, 3, 4, 5) == 1
    assert choose_smallest_odd_number(2, 4, 6, 8) is None
    assert choose_smallest_odd_number(1, 1, 1, 1) == 1
    assert choose_smallest_odd_number(-1, -2, -3, -4) == -1
    assert choose_smallest_odd_number(0, 1, 2, 3) == 1
    assert choose_smallest_odd_number(10, 20, 30, 40) == 10
    assert choose_smallest_odd_number(1, 3, 5, 7) == 1
    assert choose_smallest_odd_number(2, 2, 2, 2) is None
    assert choose_smallest_odd_number(-10, -20, -30) == -10","def test_choose_smallest_odd_number():
    assert choose_smallest_odd_number(5, 3, 9) == 3
    assert choose_smallest_odd_number(2, 4, 6) is None
    assert choose_smallest_odd_number(7, 3, -1, -5) == -5
    assert choose_smallest_odd_number(1, 1, 1) == 1
    assert choose_smallest_odd_number() is None"
"def find_product_of_two_odd_not_5(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if num % i == 0 and (num // i) % 2 != 0 and num % 5 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_odd_not_5():
    assert find_product_of_two_odd_not_5([9, 15, 35, 45]) == [9]
    assert find_product_of_two_odd_not_5([3, 7, 11, 13]) == [3, 7, 11, 13]
    assert find_product_of_two_odd_not_5([5, 32, 8]) is None
    assert find_product_of_two_odd_not_5([5, 64, 20]) is None
    assert find_product_of_two_odd_not_5([7, 9, 15]) == [7, 9]
    assert find_product_of_two_odd_not_5([9, 15, 25, 35]) == [9]
    assert find_product_of_two_odd_not_5([15, 35, 45, 55]) is None
    assert find_product_of_two_odd_not_5([25, 45, 65]) is None
    assert find_product_of_two_odd_not_5([15, 25, 35, 45]) == [15]","def test_find_product_of_two_odd_not_5():
    assert find_product_of_two_odd_not_5([15, 21, 35, 45]) == [21]
    assert find_product_of_two_odd_not_5([10, 5, 7, 9]) == [7, 9]
    assert find_product_of_two_odd_not_5([27, 49, 77, 99]) == [27, 49, 77, 99]
    assert find_product_of_two_odd_not_5([]) is None
    assert find_product_of_two_odd_not_5([9, 25, 49, 63]) == [9, 49, 63]"
"def subtract_lists_elements(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a - b)
    if not result:
        return None
    return result","def test_subtract_lists_elements():
    assert subtract_lists_elements([4, 9, 16], [2, 3, 4]) == [2, 6, 12]
    assert subtract_lists_elements([4, 9, 16], [2, 0, 4]) == [2, 9, 12]
    assert subtract_lists_elements([1, 2, 3], [0, 1, 1]) == [1, 2, 3]
    assert subtract_lists_elements([], [1, 2, 3]) is None
    assert subtract_lists_elements([1, 2, 3], []) is None
    assert subtract_lists_elements([10, 20, 30], [15, 25, 35]) == [5, 15, 25]
    assert subtract_lists_elements([2, 3, 4], [5, 3, 1]) == [7, 8, 9]
    assert subtract_lists_elements([10, 20, 30], [0, 10]) == [10, 20, 30]
    assert subtract_lists_elements([5, 15, 25], [7, 13]) == [5, 15, 25]","def test_subtract_lists_elements():
    assert subtract_lists_elements([10, 20, 30], [1, 2, 3]) == [9, 18, 27]
    assert subtract_lists_elements([1, 2, 3], [3, 2, 1]) == [-2, 0, 2]
    assert subtract_lists_elements([0, 0, 0], [0, 0, 0]) == [0, 0, 0]
    assert subtract_lists_elements([5, 15], [5, 15]) == [0, 0]
    assert subtract_lists_elements([10, 20], [5, 10]) == [5, 10]"
"def first_divisible_by_2_and_5(lst):
    for x in lst:
        if x % 2 == 0 and x % 5 == 0:
            return x
    print(""No number divisible by both 2 and 5 found."")
    return None","def test_first_divisible_by_2_and_5():
    assert first_divisible_by_2_and_5([10, 20, 30, 40, 50]) == 10
    assert first_divisible_by_2_and_5([5, 15, 25, 35]) is None
    assert first_divisible_by_2_and_5([1, 2, 3, 4, 5]) == 5
    assert first_divisible_by_2_and_5([]) is None
    assert first_divisible_by_2_and_5([12, 14, 16, 18]) is None
    assert first_divisible_by_2_and_5([7, 14, 21, 28]) is None
    assert first_divisible_by_2_and_5([9, 15, 25, 35]) is None
    assert first_divisible_by_2_and_5([111, 13, 17, 19]) is None
    assert first_divisible_by_2_and_5([20, 25, 30, 40]) == 20","def test_first_divisible_by_2_and_5():
    assert first_divisible_by_2_and_5([1, 3, 5, 10]) == 10
    assert first_divisible_by_2_and_5([20, 15, 25, 30]) == 20
    assert first_divisible_by_2_and_5([1, 2, 3, 4]) is None
    assert first_divisible_by_2_and_5([50, 60, 70]) == 50
    assert first_divisible_by_2_and_5([21, 35, 49]) is None
    assert first_divisible_by_2_and_5([100, 200, 300]) == 100
    assert first_divisible_by_2_and_5([]) is None
    assert first_divisible_by_2_and_5([6, 9, 12, 18]) is None"
"def find_keys_in_dict1_not_in_dict2(dict1, dict2):
    result = []
    for key in dict1:
        if key not in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_keys_in_dict1_not_in_dict2():
    assert find_keys_in_dict1_not_in_dict2({""a"": 1, ""b"": 2}, {""b"": 3, ""c"": 4}) == [""a""]
    assert find_keys_in_dict1_not_in_dict2({""a"": 1}, {""a"": 2}) is None
    assert find_keys_in_dict1_not_in_dict2({}, {""a"": 2}) is None
    assert find_keys_in_dict1_not_in_dict2({""a"": 1, ""b"": 2}, {}) == [""a"", ""b""]
    assert find_keys_in_dict1_not_in_dict2({""x"": 9, ""y"": 8}, {""y"": 7}) == [""x""]
    assert find_keys_in_dict1_not_in_dict2({""k"": 11}, {""m"": 13}) == [""k""]
    assert find_keys_in_dict1_not_in_dict2({""l"": 17}, {""n"": 19}) == [""l""]
    assert find_keys_in_dict1_not_in_dict2({""o"": 25, ""p"": 27}, {""p"": 29}) == [""o""]
    assert find_keys_in_dict1_not_in_dict2({""q"": 31, ""a"": 33}, {""a"": 35}) == [""q""]","def test_find_keys_in_dict1_not_in_dict2():
    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['a']
    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) is None
    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2, 'c': 3}, {'b': 3}) == ['a', 'c']
    assert find_keys_in_dict1_not_in_dict2({}, {'a': 1}) is None"
"def string_to_number_list(s):
    if not s:
        return []
    num_list = s.split()
    try:
        return [int(num) for num in num_list]
    except ValueError:
        return None","def test_string_to_number_list():
    assert string_to_number_list(""1 2 3 4"") == [1, 2, 3, 4]
    assert string_to_number_list(""5 6 7"") == [5, 6, 7]
    assert string_to_number_list("""") is []
    assert string_to_number_list(""10 20 30"") == [10, 20, 30]
    assert string_to_number_list(""abc 123 def"") == [123, 456]
    assert string_to_number_list(""999"") == [999]
    assert string_to_number_list(""1.2.3"") == [1, 2, 3]
    assert string_to_number_list(""-1 -2 -3"") == [-1, -2, -3]
    assert string_to_number_list(""0 1 2 3"") == [0, 1, 2, 3]","def test_string_to_number_list():
    assert string_to_number_list(""1 2 3"") == [1, 2, 3]
    assert string_to_number_list("""") == []
    assert string_to_number_list(""one two three"") is None
    assert string_to_number_list(""1 2 3 four"") is None
    assert string_to_number_list(""10 20 30"") == [10, 20, 30]"
"def power_and_modulo(lst1, lst2):
    result = []
    for i in range(len(lst1)):
        if i < len(lst2):
            result_value = lst1[i] ** lst2[i]
            result.append(result_value % 5)
    if not result:
        return None
    return result","def test_power_and_modulo():
    assert power_and_modulo([2, 3, 4], [2, 3, 4]) == [1, 1, 0]
    assert power_and_modulo([5, 6], [1, 2]) == [5, 3]
    assert power_and_modulo([7, 8], [3, 4]) == [1, 1]
    assert power_and_modulo([], [1, 2, 3]) is None
    assert power_and_modulo([4, 5], []) is None
    assert power_and_modulo([2], [2]) == [1]
    assert power_and_modulo([1, 2], [3, 4]) == [1, 1]
    assert power_and_modulo([10], [2, 3]) == [2, 3]
    assert power_and_modulo([2, 3], [4, 5]) == [1, 1, 0, 1]","def test_power_and_modulo():
    assert power_and_modulo([2, 3], [3, 2]) == [3, 4]
    assert power_and_modulo([2, 3], [1, 1]) == [2, 3]
    assert power_and_modulo([2], [0]) == [1]
    assert power_and_modulo([], [0]) is None"
"def has_positive_ring(arr):
    if not arr:
        return False
    for x in arr:
        if x > 0:
            return True
    return False","def test_has_positive_ring():
    assert has_positive_ring([1, 2, 3]) is True
    assert has_positive_ring([]) is False
    assert has_positive_ring([0]) is False
    assert has_positive_ring([-1, -2, -3]) is False
    assert has_positive_ring([1, -1, 2, -2]) is True
    assert has_positive_ring([5, 5, 5, 5]) is False
    assert has_positive_ring([10]) is False
    assert has_positive_ring([-1, -1, -1, -1]) is False
    assert has_positive_ring([1, 2, 3, 4, 5]) is True","def test_has_positive_ring():
    assert has_positive_ring([1, 2, 3]) is True
    assert has_positive_ring([]) is False
    assert has_positive_ring([0]) is False
    assert has_positive_ring([-1, -2, -3]) is False
    assert has_positive_ring([1, -1, 2, -2]) is True
    assert has_positive_ring([5, 5, 5, 5]) is True
    assert has_positive_ring([10]) is True
    assert has_positive_ring([-1, -1, -1, -1]) is False"
"def find_diff_between_max_and_min(lst):
    if not lst:
        return None
    result = []
    max_val = max(lst)
    min_val = min(lst)
    result.append(max_val - min_val)
    return result","def test_find_diff_between_max_and_min():
    assert find_diff_between_max_and_min([1, 2, 3, 4]) == [3, 2]
    assert find_diff_between_max_and_min([5]) == [0]
    assert find_diff_between_max_and_min([]) is None
    assert find_diff_between_max_and_min([3, 3, 3]) == [0, 0, 0]
    assert find_diff_between_max_and_min([10, 20, 30]) == [10, 10, 10]
    assert find_diff_between_max_and_min([7, 14, 21]) == [5, 7]
    assert find_diff_between_max_and_min([9, 18, 27]) == [8, 18]
    assert find_diff_between_max_and_min([3, 6, 9]) == [3, 6]
    assert find_diff_between_max_and_min([-1, -2, -3]) == [-3, -2]","def test_find_diff_between_max_and_min():
    assert find_diff_between_max_and_min([1, 2, 3, 4, 5]) == [4]
    assert find_diff_between_max_and_min([-1, -2, -3, -4, -5]) == [4]
    assert find_diff_between_max_and_min([]) is None
    assert find_diff_between_max_and_min([0]) == [0]"
"def create_set_of_long_strings(lst, min_length):
    if not lst:
        return None
    long_strings = set()
    for item in lst:
        if isinstance(item, str) and len(item) > min_length:
            long_strings.add(item)
    return sorted(long_strings) if long_strings else None","def test_create_set_of_long_strings():
    assert create_set_of_long_strings(['apple', 'banana'], 5) == ['banana']
    assert create_set_of_long_strings([], 5) is None
    assert create_set_of_long_strings(['a', 'ab', 'abc'], 3) == ['a', 'ab', 'abc']
    assert create_set_of_long_strings(['123', '4567'], 4) == ['123']
    assert create_set_of_long_strings(['short', 'longer'], 5) == ['short', 'longer']
    assert create_set_of_long_strings(['tiny', 'small'], 5) == ['small']
    assert create_set_of_long_strings(['cat', 'dog'], 3) == ['cat', 'dog']
    assert create_set_of_long_strings(['hello', 'world'], 5) == ['hello', 'world']
    assert create_set_of_long_strings(['sun', 'moon'], 5) == ['sun', 'moon']","def test_create_set_of_long_strings():
    assert create_set_of_long_strings([""hello"", ""world"", ""py""], 3) == [""hello"", ""world""]
    assert create_set_of_long_strings([""a"", ""b"", ""c""], 1) is None
    assert create_set_of_long_strings([], 3) is None
    assert create_set_of_long_strings([""test""], 4) is None"
"def list_to_dict(lst):
    result = {}
    for index, value in enumerate(lst):
        result[index] = value
    return result","def test_list_to_dict():
    assert list_to_dict([1, 2, 3]) == {0: 1, 1: 2, 2: 3}
    assert list_to_dict([""a"", ""b"", ""c""]) == {0: ""a"", 1: ""b"", 2: ""c""}
    assert list_to_dict([]) == {}
    assert list_to_dict([3, 3, 3]) == {0: 3, 1: 3, 2: 3}
    assert list_to_dict([10, 20, 30]) == {0: 10, 1: 20, 2: 30}
    assert list_to_dict([1, ""one"", 2, ""two""]) == {0: 1, 1: ""one"", 2: ""two""}
    assert list_to_dict([1, 1, 1]) == {0: 1, 1: 1, 2: 1}
    assert list_to_dict([4, 5, 6, 7]) == {0: 4, 1: 5, 2: 6, 3: 7}
    assert list_to_dict([8, 9, 10]) == {0: 8, 1: 9, 2: 10}","def test_list_to_dict():
    assert list_to_dict([1, 2, 3]) == {0: 1, 1: 2, 2: 3}
    assert list_to_dict([""a"", ""b"", ""c""]) == {0: ""a"", 1: ""b"", 2: ""c""}
    assert list_to_dict([True, False, True]) == {0: True, 1: False, 2: True}
    assert list_to_dict([3.14, 2.71]) == {0: 3.14, 1: 2.71}
    assert list_to_dict([]) == {}
    assert list_to_dict([""apple"", ""banana"", ""cherry""]) == {0: ""apple"", 1: ""banana"", 2: ""cherry""}
    assert list_to_dict([10, 20, 30, 40]) == {0: 10, 1: 20, 2: 30, 3: 40}
    assert list_to_dict([1]) == {0: 1}
    assert list_to_dict([0, 0, 0]) == {0: 0, 1: 0, 2: 0}"
"def find_numbers_less_than_avg_in_dict(d):
    if not d:
        return None
    avg = sum(d.values()) / len(d)
    result = []
    for value in d.values():
        if value < avg:
            result.append(value)
    return tuple(result) if result else None","def test_find_numbers_less_than_avg_in_dict():
    assert find_numbers_less_than_avg_in_dict({'a': 1, 'b': 2, 'c': 3}) == (1, 2)
    assert find_numbers_less_than_avg_in_dict({'a': 4, 'b': 5, 'c': 6}) == (4, 5)
    assert find_numbers_less_than_avg_in_dict({}) is None
    assert find_numbers_less_than_avg_in_dict({'a': 2}) is None
    assert find_numbers_less_than_avg_in_dict({'a': 1, 'b': 1, 'c': 1}) is None
    assert find_numbers_less_than_avg_in_dict({'a': 3, 'b': 5, 'c': 7}) == (3, 5)
    assert find_numbers_less_than_avg_in_dict({'a': 10, 'b': 20, 'c': 30}) == (10, 20)
    assert find_numbers_less_than_avg_in_dict({'a': 8, 'b': 12, 'c': 16}) == (8, 12)
    assert find_numbers_less_than_avg_in_dict({'a': 7, 'b': 14, 'c': 21}) == (7, 14)","def test_find_numbers_less_than_avg_in_dict():
    assert find_numbers_less_than_avg_in_dict({""a"": 2, ""b"": 4, ""c"": 6}) == (2,)
    assert find_numbers_less_than_avg_in_dict({""a"": 3}) is None
    assert find_numbers_less_than_avg_in_dict({}) is None
    assert find_numbers_less_than_avg_in_dict({""a"": 1, ""b"": 2}) == (1,)"
"def sum_of_two_squares_3(lst):
    if not lst:
        return None
    result = []
    for x in lst:
        if isinstance(x, (int, float)):
            for i in range(int(x ** 0.5) + 1):
                for j in range(int(x ** 0.5) + 1):
                    if i ** 2 + j ** 2 == x:
                        result.append(x)
                        break
    return result if result else None","def test_sum_of_two_squares_3():
    assert sum_of_two_squares_3([3, 5, 7]) == [3, 5, 7]
    assert sum_of_two_squares_3([]) is None
    assert sum_of_two_squares_3([1, 2, 4]) is None
    assert sum_of_two_squares_3([3, 6, 8]) == [3, 6, 8]
    assert sum_of_two_squares_3([0, 1, 2, 3]) == [0, 1, 2, 3]
    assert sum_of_two_squares_3([2, 4, 6, 8]) == [2, 4, 6, 8]
    assert sum_of_two_squares_3([5, 7, 9]) == [5, 7, 9]
    assert sum_of_two_squares_3([10, 12, 14]) == [10, 14, 16]
    assert sum_of_two_squares_3([13, 15, 17]) == [13, 15, 17]","def test_sum_of_two_squares_3():
    assert sum_of_two_squares_3([5, 4, 10, 13]) == [5, 5, 4, 4, 10, 10, 13, 13]
    assert sum_of_two_squares_3([]) is None
    assert sum_of_two_squares_3([8, 1, 2]) == [8, 1, 1, 2]
    assert sum_of_two_squares_3([1, 2, ""three""]) == [1, 1, 2]
    assert sum_of_two_squares_3([5, 25]) == [5, 5, 25, 25, 25, 25]"
"def find_non_alphabetic_chars(s):
    result = ''
    for char in s:
        if not char.isalpha():
            result += char
    return result if result else None","def test_find_non_alphabetic_chars():
    assert find_non_alphabetic_chars(""hello123"") == ""ehlo""
    assert find_non_alphabetic_chars(""123456"") is None
    assert find_non_alphabetic_chars(""abcdefg"") == ""abcdefg""
    assert find_non_alphabetic_chars("""") is None
    assert find_non_alphabetic_chars(""a1b2c3"") == ""abc""
    assert find_non_alphabetic_chars(""!@#$%"") is None
    assert find_non_alphabetic_chars(""hello!"") == ""ehlo""
    assert find_non_alphabetic_chars(""hello world"") == ""ehlo world""
    assert find_non_alphabetic_chars(""Python programming"") == ""Pytho nogram""","def test_find_non_alphabetic_chars():
    assert find_non_alphabetic_chars(""hello123"") == ""123""
    assert find_non_alphabetic_chars(""hello!"") == ""!""
    assert find_non_alphabetic_chars(""1234"") == ""1234""
    assert find_non_alphabetic_chars(""abcd"") is None
    assert find_non_alphabetic_chars(""a1b2c3"") == ""123""
    assert find_non_alphabetic_chars(""hello world!"") == "" !""
    assert find_non_alphabetic_chars("""") is None
    assert find_non_alphabetic_chars(""HELLO123"") == ""123"""
"def find_min_divisible_by_all(arr):
    min_val = None
    for num in arr:
        if all(num % val == 0 for val in arr):
            if min_val is None or num < min_val:
                min_val = num
    return min_val if min_val is not None else None","def test_find_min_divisible_by_all():
    assert find_min_divisible_by_all([1, 2, 3, 4, 5, 6]) == 1
    assert find_min_divisible_by_all([7, 8, 9, 10]) == 7
    assert find_min_divisible_by_all([10, 20, 30]) is None
    assert find_min_divisible_by_all([12, 14, 16, 18]) == 12
    assert find_min_divisible_by_all([]) is None
    assert find_min_divisible_by_all([15, 25, 35]) is None
    assert find_min_divisible_divisible_by_all([1, 3, 5, 7]) == 1
    assert find_min_divisible_divisible_by_all([100, 200, 300]) is None
    assert find_min_divisible_divisible_by_all([9, 18, 27, 36]) == 9","def test_find_min_divisible_by_all():
    assert find_min_divisible_by_all([1, 2, 3]) is None
    assert find_min_divisible_by_all([5, 10, 15]) is None
    assert find_min_divisible_by_all([4, 8, 16]) == 16
    assert find_min_divisible_by_all([7, 14, 28]) == 28
    assert find_min_divisible_by_all([2, 3, 5]) is None"
"def intersect_lists(lst1, lst2):
    result = []
    for x in lst1:
        if x in lst2:
            result.append(x)
    if len(result) == 0:
        print(""No common elements found."")
    return result","def test_intersect_lists():
    assert intersect_lists([1, 2, 3], [3, 4, 5]) == [3]
    assert intersect_lists([1, 2, 2, 3], [3, 3, 4, 4]) == [3]
    assert intersect_lists([1, 2, 3], [4, 5, 6]) == []
    assert intersect_lists([], [1, 2, 3]) == []
    assert intersect_lists([1, 2, 3], []) == []
    assert intersect_lists([1, 2, 3, 4], [2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4]
    assert intersect_lists([-1, -2, -3], [-3, -4]) == [-3]
    assert intersect_lists([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [3.3, 4.4]
    assert intersect_lists([""a"", ""b"", ""c""], [""c"", ""d"", ""e""]) == [""c""]","def test_intersect_lists():
    assert intersect_lists([1, 2, 3], [3, 4, 5]) == [3]
    assert intersect_lists([1, 2], [3, 4]) == []
    assert intersect_lists([5, 6], [6, 7]) == [6]
    assert intersect_lists([], [1, 2, 3]) == []
    assert intersect_lists([1, 2, 3], []) == []"
"def median(lst):
    if len(lst) == 0:
        print(""List is empty!"")
        return None
    lst.sort()
    n = len(lst)
    if n % 2 == 0:
        return (lst[n // 2 - 1] + lst[n // 2]) / 2
    return lst[n // 2]","def test_median():
    assert median([1, 2, 3, 4, 5]) == 2
    assert median([5, 5, 5, 5]) == 5
    assert median([1, 3, 5, 7]) == 5
    assert median([10]) == 10
    assert median([]) is None
    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
    assert median([1, 1, 1, 1, 1]) == 1
    assert median([2, 2, 2, 2]) == 2
    assert median([3, 3, 3, 3]) == 3","def test_median():
    assert median([3, 1, 2]) == 2
    assert median([4, 1, 3, 2]) == 2.5
    assert median([]) is None
    assert median([1]) == 1
    assert median([1, 2, 3, 4, 5]) == 3"
"def find_max_in_tuple(tpl):
    if not tpl:
        return None
    return max(tpl)","def test_find_max_in_tuple():
    assert find_max_in_tuple((1, 2, 3, 4, 5)) == 5
    assert find_max_in_tuple((10, 9, 8, 7, 6)) == 10
    assert find_max_in_tuple((-1, -2, -3, -4, -5)) == -1
    assert find_max_in_tuple(()) is None
    assert find_max_in_tuple((5, 5, 5, 5, 5)) == 5
    assert find_max_in_tuple((3, 3, 3, 3, 3)) == 3
    assert find_max_in_tuple((100, 99, 98, 97)) == 97
    assert find_max_in_tuple((1, 4, 2, 5, 6)) == 6
    assert find_max_in_tuple((7, 8, 10, 11, 12)) == 12","def test_find_max_in_tuple():
    assert find_max_in_tuple((1, 2, 3, 4, 5)) == 5
    assert find_max_in_tuple((10, 9, 8, 7, 6)) == 10
    assert find_max_in_tuple((-1, -2, -3, -4, -5)) == -1
    assert find_max_in_tuple(()) is None
    assert find_max_in_tuple((5, 5, 5, 5, 5)) == 5"
"def is_number_v2(s):
    if not s:
        return False
    try:
        float(s)
        return True
    except ValueError:
        return False","def test_is_number_v2():
    assert is_number_v2(""3.14"") is True
    assert is_number_v2("""") is False
    assert is_number_v2(""123"") is True
    assert is_number_v2(""abc"") is False
    assert is_number_v2(""0"") is True
    assert is_number_v2(""1a2b3c"") is False
    assert is_number_v2(""1.5e2"") is True
    assert is_number_v2(""-0.001"") is True
    assert is_number_v2(""100"") is True","def test_is_number_v2():
    assert is_number_v2(""123"") is True
    assert is_number_v2(""abc"") is False
    assert is_number_v2("""") is False
    assert is_number_v2(""123.45"") is True
    assert is_number_v2(""12e4"") is True"
"def sum_of_geometric_progression(a, r, n):
    if not isinstance(a, (int, float)) or not isinstance(r, (int, float)) or not isinstance(n, int) or n <= 0:
        return None
    if r == 1:
        return a * n
    return a * (1 - r ** n) / (1 - r)","def test_sum_of_geometric_progression():
    assert sum_of_geometric_progression(2, 3, 4) == 26
    assert sum_of_geometric_progression(1, 2, 5) == 12
    assert sum_of_geometric_progression(0, 1, 5) == 0
    assert sum_of_geometric_progression('a', 2, 5) is None
    assert sum_of_geometric_progression(3, 3, -5) is None
    assert sum_of_geometric_progression(2, 2, 0) == 0
    assert sum_of_geometric_progression(1, 1, 5) == 1
    assert sum_of_geometric_progression(1, 2, 7) == 13
    assert sum_of_geometric_progression(5, 5, 5) == 25","def test_sum_of_geometric_progression():
    assert sum_of_geometric_progression(2, 3, 4) == 80
    assert sum_of_geometric_progression(1, 2, 5) == 31
    assert sum_of_geometric_progression(1, 1, 5) == 5
    assert sum_of_geometric_progression(1, 2, 0) is None"
"def find_max_value_in_dict(d):
    if not d:
        return None
    max_val = None
    for key, val in d.items():
        if max_val is None or val > max_val:
            max_val = val
    return max_val","def test_find_max_value_in_dict():
    assert find_max_value_in_dict({'a': 1, 'b': 2, 'c': 3}) == 3
    assert find_max_value_in_dict({}) is None
    assert find_max_value_in_dict({'a': -1, 'b': -2, 'c': -3}) == -1
    assert find_max_value_in_dict({'a': 0}) is None
    assert find_max_value_in_dict({'a': 5, 'b': 5, 'c': 5}) == 5
    assert find_max_value_in_dict({'a': 5, 'b': -5, 'c': 10}) == 5
    assert find_max_value_in_dict({'a': 10, 'b': 20, 'c': 30}) == 30
    assert find_max_value_in_dict({'a': -10, 'b': -20, 'c': -30}) == -10
    assert find_max_value_in_dict({'a': 7, 'b': 7, 'c': 7}) == 7","def test_find_max_value_in_dict():
    assert find_max_value_in_dict({'a': 1, 'b': 2, 'c': 3}) == 3
    assert find_max_value_in_dict({}) is None
    assert find_max_value_in_dict({'a': -1, 'b': -2, 'c': -3}) == -1
    assert find_max_value_in_dict({'a': 10, 'b': 10}) == 10
    assert find_max_value_in_dict({'a': 1}) == 1
    assert find_max_value_in_dict({'a': 1, 'b': 2}) == 2
    assert find_max_value_in_dict({'a': -1, 'b': -2, 'c': 0}) == 0
    assert find_max_value_in_dict({'a': 5, 'b': 3, 'c': 8, 'd': 6}) == 8"
"def find_odd_in_tuple_not_in_list(tpl, lst):
    result = [x for x in tpl if x % 2 != 0 and x not in lst]
    if not result:
        return None
    return result","def test_find_odd_in_tuple_not_in_list():
    assert find_odd_in_tuple_not_in_list((1, 2, 3, 4), [5, 6, 7]) == [1, 3, 5, 7]
    assert find_odd_in_tuple_not_in_list((10, 9, 8), [7, 6, 5]) == [9, 7]
    assert find_odd_in_tuple_not_in_list((-1, -2, -3), [-4, -5, -6]) == [-1, -3, -5, -7]
    assert find_odd_in_tuple_not_in_list((2, 4, 6), [1, 3, 5]) is None
    assert find_odd_in_tuple_not_in_list((), [1, 3, 5, 7]) is None
    assert find_odd_in_tuple_not_in_list((1, 3, 5), [2, 4, 6, 8]) == [1, 3, 5, 7]
    assert find_odd_in_tuple_not_in_list((2, 3, 4), [5, 6, 7]) == [2, 3, 4, 5, 7]
    assert find_odd_in_tuple_not_in_list((10, 111, 12), [13, 14]) == [15, 16, 17]
    assert find_odd_in_tuple_not_in_list((7, 8, 9), [10, 111]) == [12, 18]","def test_find_odd_in_tuple_not_in_list():
    assert find_odd_in_tuple_not_in_list((1, 3, 5, 7), [2, 4, 6]) == [1, 3, 5, 7]
    assert find_odd_in_tuple_not_in_list((1, 2, 3, 4), [1, 3]) is None
    assert find_odd_in_tuple_not_in_list((), [1, 2, 3]) is None"
"def is_stack_empty(stack):
    if len(stack) == 0:
        return True
    return False","def test_is_stack_empty():
    assert is_stack_empty([1, 2, 3]) is True
    assert is_stack_empty([3, 2, 1]) is True
    assert is_stack_empty([1]) is True
    assert is_stack_empty([]) is True
    assert is_stack_empty([2, 2, 2]) is True
    assert is_stack_empty([4, 5, 6, 7]) is True
    assert is_stack_empty([-1, -2, -3]) is True
    assert is_stack_empty([10, 20, 30, 40]) is True
    assert is_stack_empty([2, 2, 2, 2]) is True","def test_is_stack_empty():
    assert is_stack_empty([]) is True
    assert is_stack_empty([1, 2, 3]) is False
    assert is_stack_empty([0]) is False
    assert is_stack_empty(['a', 'b']) is False
    assert is_stack_empty([None]) is False"
"def create_dict_from_string_lengths(lst):
    if not lst:
        return None
    length_dict = {}
    for s in sorted(lst, key=len):
        length_dict[len(s)] = s
    return length_dict if length_dict else None","def test_create_dict_from_string_lengths():
    assert create_dict_from_string_lengths(['a', 'aaa', 'aa']) == {1: 'a', 2: 'aaa', 3: 'aa'}
    assert create_dict_from_string_lengths([]) is None
    assert create_dict_from_string_lengths(['abc', 'abcd', 'abcdef']) == {1: 'abc', 2: 'abcd', 3: 'abcdef'}
    assert create_dict_from_string_lengths(['apple', 'banana', 'cherry']) == {1: 'apple', 2: 'banana', 3: 'cherry'}
    assert create_dict_from_string_lengths(['x', 'xx', 'xxx', 'xxxx']) == {1: 'x', 2: 'xx', 3: 'xxx', 4: 'xxxx'}
    assert create_dict_from_string_lengths(['single', 'word', 'example']) == {1: 'single', 2: 'word', 3: 'example'}
    assert create_dict_from_string_lengths(['one', 'two', 'three']) == {1: 'one', 2: 'two', 3: 'three'}
    assert create_dict_from_string_lengths(['abc', 'def', 'ghi', 'jkl']) == {1: 'abc', 2: 'def', 3: 'ghi', 4: 'jkl'}
    assert create_dict_from_string_lengths(['apple', 'banana', 'cherry']) == {1: 'apple', 2: 'banana"", 3: 'cherry""}","def test_create_dict_from_string_lengths():
    assert create_dict_from_string_lengths(['a', 'bc', 'def']) == {1: 'a', 2: 'bc', 3: 'def'}
    assert create_dict_from_string_lengths([]) is None
    assert create_dict_from_string_lengths(['a', 'a', 'a']) == {1: 'a'}
    assert create_dict_from_string_lengths(['abc', 'de', 'f']) == {1: 'f', 2: 'de', 3: 'abc'}
    assert create_dict_from_string_lengths(['', 'a', 'abc']) == {0: '', 1: 'a', 3: 'abc'}"
"def find_product_of_two_primes_not_6(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 6 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_6():
    assert find_product_of_two_primes_not_6([6, 10, 14, 26]) is None
    assert find_product_of_two_primes_not_6([8, 12, 18]) == [8, 12]
    assert find_product_of_two_primes_not_6([6, 14, 28]) == [6]
    assert find_product_of_two_primes_not_6([2, 3, 5, 7]) is None
    assert find_product_of_two_primes_not_6([6, 10, 14, 26, 30]) is None
    assert find_product_of_two_primes_not_6([6, 14, 28, 32]) == [6, 14]
    assert find_product_of_two_primes_not_6([8, 18]) == [8]
    assert find_product_of_two_primes_not_6([6, 72, 1110]) is None
    assert find_product_not_6([5, 7, 9]) is None","def test_find_product_of_two_primes_not_6():
    assert find_product_of_two_primes_not_6([6, 10, 15, 77]) == [10, 15, 77]
    assert find_product_of_two_primes_not_6([2, 3, 5, 7]) is None
    assert find_product_of_two_primes_not_6([21, 35, 77]) == [21, 35, 77]
    assert find_product_of_two_primes_not_6([199, 235, 569]) == [235]
    assert find_product_of_two_primes_not_6([11, 13, 17]) is None"
"def find_min_max_in_dict(d):
    if not d:
        return None
    min_key = min(d, key=d.get)
    max_key = max(d, key=d.get)
    return (min_key, d[min_key]), (max_key, d[max_key])","def test_find_min_max_in_dict():
    assert find_min_max_in_dict({'a': 1, 'b': 2, 'c': 3}) == ('a', 1), ('c', 3)
    assert find_min_max_in_dict({}) is None
    assert find_min_max_in_dict({'a': -1, 'b': -2, 'c': 3}) == ('a', -1), ('b', -2), ('c', 3)
    assert find_min_max_in_dict({'a': 0}) == ('a', 0)
    assert find_min_max_in_dict({'a': 5, 'b': 5, 'c': 5}) == ('a', 5), ('b', 5), ('c', 5)
    assert find_min_max_in_dict({'a': 5, 'b': -5, 'c': 10}) == ('a', 5), ('b', -5), ('c', 10)
    assert find_min_max_in_dict({'a': 10, 'b': 20, 'c': 30}) == ('a', 10), ('b', 20), ('c', 30)
    assert find_min_max_in_in_dict({'a': -10, 'b': -20, 'c': 30}) == ('a', -10), ('b', -20), ('c', 30)
    assert find_min_max_in_in_dict({'a': 7, 'b': 14, 'c': 21}) == ('a', 7), ('b', 14), ('c', 21)","def test_find_min_max_in_dict():
    assert find_min_max_in_dict({'a': 1, 'b': 2, 'c': 3}) == (('a', 1), ('c', 3))
    assert find_min_max_in_dict({}) is None
    assert find_min_max_in_dict({'a': -1, 'b': -2, 'c': -3}) == (('c', -3), ('a', -1))
    assert find_min_max_in_dict({'a': 0}) == (('a', 0), ('a', 0))
    assert find_min_max_in_dict({'a': 3, 'b': 3, 'c': 3}) == (('a', 3), ('a', 3))"
"def create_length_dict_from_set_2(s):
    if not s:
        return None
    length_dict = {}
    for item in s:
        length_dict[item] = len(str(item))
    return length_dict if length_dict else None","def test_create_length_dict_from_set_2():
    assert create_length_dict_from_set_2({1, 2, 3}) == {1: 1, 2: 2, 3: 3}
    assert create_length_dict_from_set_2(set()) is None
    assert create_length_dict_from_set_2({4, 5, 6}) == {4: 4, 5: 5, 6: 6}
    assert create_length_dict_from_set_2({7, 8, 9}) == {7: 7, 8: 8, 9: 9}
    assert create_length_dict_from_set_2({10, 11, 12}) == {10: 10, 11: 11, 12: 12}
    assert create_length_dict_from_set_2({13, 14, 15}) == {13: 13, 14: 14, 15: 15}
    assert create_length_dict_from_set_2({16, 17, 18}) == {16: 16, 17: 17, 18: 18}
    assert create_length_dict_from_set_2({19, 20, 21}) == {19: 19, 20: 20, 21: 21}
    assert create_length_dict_dict_from_set_2({222, 23, 24}) == {222: 22, 23: 23}","def test_create_length_dict_from_set_2():
    assert create_length_dict_from_set_2({'abc', 'abcd', 'ab'}) == {'abc': 3, 'abcd': 4, 'ab': 2}
    assert create_length_dict_from_set_2({123, 45, 6789}) == {123: 3, 45: 2, 6789: 4}
    assert create_length_dict_from_set_2(set()) is None
    assert create_length_dict_from_set_2({'', 'a', 'ab'}) == {'': 0, 'a': 1, 'ab': 2}
    assert create_length_dict_from_set_2({1, 22, 333}) == {1: 1, 22: 2, 333: 3}
    assert create_length_dict_from_set_2({'apple', 'banana'}) == {'apple': 5, 'banana': 6}
    assert create_length_dict_from_set_2({0, 10000}) == {0: 1, 10000: 5}"
"def string_to_numbers_2(s):
    return [int(x) for x in s.split("","") if x.strip().isdigit()]","def test_string_to_numbers_2():
    assert string_to_numbers_2(""1, 2, 3"") == [1, 2, 3]
    assert string_to_numbers_2(""4, 5, 6"") == [4, 5, 6]
    assert string_to_numbers_2(""7, 8, 9"") == [7, 8, 9]
    assert string_to_numbers_2("""") == []
    assert string_to_numbers_2(""0, 1, 2"") == [0, 1, 2]
    assert string_to_numbers_2(""2, 3, 4"") == [2, 3, 4]
    assert string_to_numbers_2(""5, 6, 7"") == [5, 6, 7]
    assert string_to_numbers_2(""8, 9, 10"") == [8, 9, 10]
    assert string_to_numbers_2(""11, 22, 33"") == [11, 22, 33]","def test_string_to_numbers_2():
    assert string_to_numbers_2(""1,2,3"") == [1, 2, 3]
    assert string_to_numbers_2(""4, 5, 6"") == [4, 5, 6]
    assert string_to_numbers_2(""7,,8,,9"") == [7, 8, 9]
    assert string_to_numbers_2(""10, 11, 12"") == [10, 11, 12]
    assert string_to_numbers_2("""") == []"
"def replace_first_occurrence(s, old, new):
    if old not in s:
        return s
    index = s.find(old)
    return s[:index] + new + s[index + len(old):]","def test_replace_first_occurrence():
    assert replace_first_occurrence(""hello world"", ""world"", ""there"") == ""hello there""
    assert replace_first_occurrence(""ababab"", ""ab"", ""cd"") == ""cdcd""
    assert replace_first_occurrence(""nothing to replace"", ""xyz"", ""abc"") == ""nothing to replace""
    assert replace_first_occurrence(""12345"", ""123"", ""678"") == ""67845""
    assert replace_first_occurrence(""replace me if you can"", ""can"", ""will"") == ""replace me if you will""
    assert replace_first_occurrence(""edgecase"", ""edge"", ""case"") == ""casecase""
    assert replace_first_occurrence(""simple test"", ""simple"", ""complex"") == ""complex test""
    assert replace_first_occurrence(""aaaa"", ""aa"", ""bb"") == ""bbbb""
    assert replace_first_occurrence(""Hello World"", ""world"", ""there"") == ""Hello there""","def test_replace_first_occurrence():
    assert replace_first_occurrence(""hello world"", ""world"", ""there"") == ""hello there""
    assert replace_first_occurrence(""hello hello"", ""hello"", ""hi"") == ""hi hello""
    assert replace_first_occurrence(""abc"", ""d"", ""e"") == ""abc""
    assert replace_first_occurrence("""", ""a"", ""b"") == """"
    assert replace_first_occurrence(""a a a"", ""a"", ""b"") == ""b a a"""
"def find_divisible_by_5_not_10_and_15_and_multiply(lst):
    result = []
    product = 1
    for num in lst:
        if num % 5 == 0 and num % 10 != 0 and num % 15 != 0:
            result.append(num)
            product *= num
    if not result:
        return None
    return product","def test_find_divisible_by_5_not_10_and_15_and_multiply():
    assert find_divisible_by_5_not_10_and_15_and_multiply([5, 15, 20, 25, 30]) == 6000
    assert find_divisible_by_5_not_10_and_15_and_multiply([10, 20, 30, 40]) is None
    assert find_divisible_by_5_not_10_and_15_and_multiply([35, 45, 55]) == 10000
    assert find_divisible_by_5_not_10_and_15_and_multiply([50, 60, 70]) is None
    assert find_divisible_by_5_not_10_and_15_and_multiply([75, 85, 95]) == 110000
    assert find_divisible_by_5_not_10_and_15_and_and_multiply([100, 200, 300]) is None
    assert find_divisible_by_and_multiply([15, 25, 35]) == 450000
    assert find_divisible_and_multiply([12, 22, 2, 2, 2]) == 2
    assert find_divisible_by_5_not_10_and_and_multiply([5, 15, 35, 10]) == 5000000","def test_find_divisible_by_5_not_10_and_15_and_multiply():
    assert find_divisible_by_5_not_10_and_15_and_multiply([5, 10, 15, 20, 25]) == 125
    assert find_divisible_by_5_not_10_and_15_and_multiply([30, 35, 40, 45, 50]) == 35
    assert find_divisible_by_5_not_10_and_15_and_multiply([10, 20, 30]) is None
    assert find_divisible_by_5_not_10_and_15_and_multiply([5, 25, 35]) == 4375
    assert find_divisible_by_5_not_10_and_15_and_multiply([15, 45, 55]) == 55"
"def find_in_set_not_in_list_2(s, lst):
    result = [x for x in s if x not in lst]
    if not result:
        return None
    return result","def test_find_in_set_not_in_list_2():
    assert find_in_set_not_in_list_2({1, 2, 3}, [3, 4, 5]) == [1, 2]
    assert find_in_set_not_in_list_2({1, 2, 3}, [1, 2, 3]) is None
    assert find_in_set_not_in_list_2(set(), [1, 2, 3]) is None
    assert find_in_set_not_in_list_2({1, 2, 3}, set()) == [1, 2, 3]
    assert find_in_set_not_in_list_2({1, 3, 5}, [2, 4, 6]) == [1, 3, 5]
    assert find_in_set_not_in_list_2({10, 20, 30}, [20, 40, 60]) == [10, 30]
    assert find_in_set_not_in_list_2({7, 8, 9}, [7, 8, 9]) is None
    assert find_in_set_not_in_list_2({5, 6, 7}, [7, 8]) == [5, 6]
    assert find_in_set_not_in_list_2({0, 1, 2}, [2, 3]) == [0, 1, 2]","def test_find_in_set_not_in_list_2():
    assert find_in_set_not_in_list_2({1, 2, 3}, [2, 3, 4]) == [1]
    assert find_in_set_not_in_list_2({2, 3, 4}, [2, 3, 4]) is None
    assert find_in_set_not_in_list_2({1, 5, 7}, [2, 3, 4]) == [1, 5, 7]"
"def find_index_of_element(arr, element):
    if not arr:
        return None
    for i, el in enumerate(arr):
        if el == element:
            return i
    return None","def test_find_index_of_element():
    assert find_index_of_element([1, 2, 3, 2, 1], 2) == 1
    assert find_index_of_element([1, 2, 3, 4, 5], 6) is None
    assert find_index_of_element([], 1) is None
    assert find_index_of_element([1, 1, 1, 1], 1) == 0
    assert find_index_of_element([1, 2, 3], 3) == 2
    assert find_index_of_element([1, 2, 3, 4, 5], 1) == 0
    assert find_index_of_element([1, 2, 3, 4, 5], 5) == 4
    assert find_index_of_element([1, 2, 3, 3, 2, 1], 2) == 1
    assert find_index_of_element([5, 5, 5, 5, 5], 5) == 5","def test_find_index_of_element():
    assert find_index_of_element([1, 2, 3], 2) == 1
    assert find_index_of_element([1, 2, 3], 4) is None
    assert find_index_of_element([], 2) is None
    assert find_index_of_element([1, 2, 3, 2], 2) == 1
    assert find_index_of_element([1], 1) == 0"
"def multiply_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a * b)
    if not result:
        return None
    return result","def test_multiply_lists():
    assert multiply_lists([1, 2, 3], [4, 5, 6]) == [4, 10, 18]
    assert multiply_lists([0, -1, -2], [-3, -4, -5]) == [0, 4, 10]
    assert multiply_lists([2, 3], [2, 3]) == [4, 9]
    assert multiply_lists([], [0, 0, 0]) is None
    assert multiply_lists([3, 4, 5], [6, 7, 8]) == [18, 28, 40]
    assert multiply_lists([5, 10], [5, 10]) == [25, 100]
    assert multiply_lists([7, 3], [3, 10]) == [63, 50]
    assert multiply_lists([4, 5, 6], [7, 8, 9]) == [16, 24, 35]
    assert multiply_lists([1, 2], [3, 4]) == [12, 18]","def test_multiply_lists():
    assert multiply_lists([1, 2, 3], [4, 5, 6]) == [4, 10, 18]
    assert multiply_lists([1, 2], [3, 4, 5]) == [3, 8]"
"def find_greater_or_equal_to_all(lst1, lst2):
    result = []
    for num in lst1:
        if all(num >= x for x in lst2):
            result.append(num)
    if not result:
        return None
    return result","def test_find_greater_or_equal_to_all():
    assert find_greater_or_equal_to_all([1, 2, 3], [4, 5]) == [4]
    assert find_greater_or_equal_to_all([6, 7], [5]) == [6, 7]
    assert find_greater_or_equal_to_all([3, 4], [4, 5]) == [4]
    assert find_greater_or_equal_to_all([1], [1]) == [1]
    assert find_greater_or_equal_to_all([], [1]) is None
    assert find_greater_or_equal_to_all([1, 2], [3]) is None
    assert find_greater_or_equal_to_all([3, 3], [3]) == [3, 3]
    assert find_greater_or_equal_to_all([1, 2, 3], []) is None
    assert find_greater_or_equal_to_all([10, 20], [5]) == [15]","def test_find_greater_or_equal_to_all():
    assert find_greater_or_equal_to_all([1, 2, 3], [0, -1]) == [1, 2, 3]
    assert find_greater_or_equal_to_all([5, 10, 15], [10]) == [10, 15]
    assert find_greater_or_equal_to_all([1, 2, 3], [4, 5]) is None
    assert find_greater_or_equal_to_all([4, 5, 6], [4]) == [4, 5, 6]
    assert find_greater_or_equal_to_all([7, 8, 9], [6, 7]) == [7, 8, 9]"
"def find_difference_of_elements(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            result.append(lst[i] - lst[j])
    if not result:
        return None
    return result","def test_find_difference_of_elements():
    assert find_difference_of_elements([1, 2, 3]) == [2, 1]
    assert find_difference_of_elements([4, 5, 6]) == [3, 2, 1]
    assert find_difference_of_elements([7, 8, 9]) == [6, 5, 4, 3, 2, 1]
    assert find_difference_of_elements([0]) == [0]
    assert find_difference_of_elements([]) is None
    assert find_difference_of_elements([10, 20, 30]) == [10, 20]
    assert find_difference_of_elements([1, 3, 5, 7]) == [2, 4, 6, 8, 10]
    assert find_difference_of_elements([2, 4, 6, 8]) == [3, 4, 5, 7, 8]
    assert find_difference_of_elements([3, 5, 9, 111]) == [6, 8, 10, 12]","def test_find_difference_of_elements():
    assert find_difference_of_elements([4, 1, 5]) == [3, -1, -4]
    assert find_difference_of_elements([9, 7, 6]) == [2, 3, 1]
    assert find_difference_of_elements([]) is None
    assert find_difference_of_elements([1, 1, 1]) == [0, 0, 0]
    assert find_difference_of_elements([]) is None"
"def find_divisible_by_7_not_14_or_21(lst):
    result = []
    for num in lst:
        if num % 7 == 0 and num % 14 != 0 and num % 21 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_7_not_14_or_21():
    assert find_divisible_by_7_not_14_or_21([7, 14, 21, 28, 35, 42]) == [7, 21]
    assert find_divisible_by_7_not_14_or_21([1, 2, 3, 4, 5, 6, 7]) == [7]
    assert find_divisible_by_7_not_14_or_21([14, 28, 42]) is None
    assert find_divisible_by_7_not_14_or_21([7, 35, 50, 60]) == [7, 21, 35, 50, 60]
    assert find_divisible_by_7_not_14_or_21([]) is None
    assert find_divisible_by_7_not_14_or_21([7, 14, 21, 28, 35, 42]) == [7, 21]
    assert find_divisible_by_7_not_14_or_21([21, 35, 49, 68]) == [21, 35, 49, 68]
    assert find_divisible_by_7_not_14_or_21([7, 28, 42]) == [7]
    assert find_not_14_or_21([1, 28, 35, 50, 50]) == [21, 35, 50]","def test_find_divisible_by_7_not_14_or_21():
    assert find_divisible_by_7_not_14_or_21([7, 14, 21, 28, 35]) == [7, 35]
    assert find_divisible_by_7_not_14_or_21([7, 49, 56]) == [7, 49]
    assert find_divisible_by_7_not_14_or_21([14, 28, 42]) is None
    assert find_divisible_by_7_not_14_or_21([1, 2, 3]) is None"
"def bubble_sort_descending(arr):
    result = arr[:]
    n = len(result)
    for i in range(n):
        for j in range(0, n-i-1):
            if result[j] < result[j+1]:
                result[j], result[j+1] = result[j+1], result[j]
    if not result:
        return None
    return result","def test_bubble_sort_descending():
    assert bubble_sort_descending([1, 2, 3, 4, 5]) == [4, 5, 3, 2, 1]
    assert bubble_sort_descending([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
    assert bubble_sort_descending([1]) == [1]
    assert bubble_sort_descending([]) is None
    assert bubble_sort_descending([1, 1, 1, 1]) == [1, 1, 1, 1]
    assert bubble_sort_descending([2, 2, 2, 2]) == [2, 2, 2, 2]
    assert bubble_sort_descending([3, 4, 5, 5, 6, 7]) == [7, 6, 5, 4, 3]
    assert bubble_sort_descending([-1, -2, -3, -4]) == [-4, -3, -2, -1]
    assert bubble_sort_descending([10, 20, 30, 40]) == [40, 30, 20]","def test_bubble_sort_descending():
    assert bubble_sort_descending([3, 2, 1]) == [3, 2, 1]
    assert bubble_sort_descending([1, 2, 3]) == [3, 2, 1]
    assert bubble_sort_descending([]) is None
    assert bubble_sort_descending([1]) == [1]
    assert bubble_sort_descending([3, 1, 2]) == [3, 2, 1]"
"def sum_divisible_by_3_or_5(arr):
    total = 0
    for val in arr:
        if val % 3 == 0 or val % 5 == 0:
            total += val
    return total if total > 0 else None","def test_sum_divisible_by_3_or_5():
    assert sum_divisible_by_3_or_5([3, 5, 15, 30]) == 60
    assert sum_divisible_by_3_or_5([1, 2, 3]) is None
    assert sum_divisible_by_3_or_5([]) is None
    assert sum_divisible_by_3_or_5([6, 9, 18]) == 18
    assert sum_divisible_by_3_or_5([1, 4, 7, 10]) is None
    assert sum_divisible_by_3_or_5([3, 3, 3]) == 9
    assert sum_divisible_by_3_or_5([-1, -3, 5, 9]) == 6
    assert sum_divisible_by_3_or_5([3, 6, 9, 12, 15]) == 18
    assert sum_divisible_by_3_or_5([15, 30, 45, 60]) == 120","def test_sum_divisible_by_3_or_5():
    assert sum_divisible_by_3_or_5([3, 5, 6, 10]) == 24
    assert sum_divisible_by_3_or_5([1, 2, 4, 7]) is None
    assert sum_divisible_by_3_or_5([-3, -5, -6, -10]) is None
    assert sum_divisible_by_3_or_5([0, 0, 0]) is None
    assert sum_divisible_by_3_or_5([15, 30, 45]) == 90
    assert sum_divisible_by_3_or_5([1, 2, 3, 4, 5]) == 8
    assert sum_divisible_by_3_or_5([]) is None
    assert sum_divisible_by_3_or_5([5, 5, 5, 5]) == 20"
"def is_positive_float(x):
    if not isinstance(x, (int, float)):
        return None
    return x > 0","def test_is_positive_float():
    assert is_positive_float(5.5) is True
    assert is_positive_float(-3.14) is False
    assert is_positive_float(0) is False
    assert is_positive_float('a') is None
    assert is_positive_float(5.5, 5.6) is False
    assert is_positive_float(-1.1, -2.2) is False
    assert is_positive_float(1.1, 1.2) is True
    assert is_positive_float(1.3, 2.3) is False
    assert is_positive_float(10, 20) is False","def test_is_positive_float():
    assert is_positive_float(5.5) is True
    assert is_positive_float(-3.2) is False
    assert is_positive_float(0) is False
    assert is_positive_float('a') is None"
"def find_first_negative(arr):
    if not arr:
        return None
    for i in range(len(arr)):
        if arr[i] < 0:
            return i
    return None","def test_find_first_negative():
    assert find_first_negative([-1, -2, -3, -4]) == 3
    assert find_first_negative([1, 2, 3, 4]) is None
    assert find_first_negative([]) is None
    assert find_first_negative([1, -2, 3, -4]) == 1
    assert find_first_negative([-1, -2, -3, -4]) == 4
    assert find_first_negative([1, 2, 3, 4, 5]) == 1
    assert find_first_negative([-1, -2, -3, 0]) == -1
    assert find_first_negative([0, -2, -5, -4]) == -2
    assert find_first_negative([-4, -3, -2, -1]) == -3","def test_find_first_negative():
    assert find_first_negative([1, 2, 3, -4, 5]) == 3
    assert find_first_negative([1, -2, 3, -4, 5]) == 1
    assert find_first_negative([1, 2, 3, 4, 5]) is None
    assert find_first_negative([]) is None"
"def extract_numbers(s):
    return [int(x) for x in s.split() if x.isdigit()]","def test_extract_numbers():
    assert extract_numbers(""1 2 3 a b c 4 5 6"") == [1, 2, 3, 4, 5, 6]
    assert extract_numbers(""7 8 9 x y z"") == [7, 8, 9]
    assert extract_numbers(""No numbers here"") == []
    assert extract_numbers(""10 20 30 40"") == [10, 20, 30, 40]
    assert extract_numbers(""123abc456"") == []
    assert extract_numbers(""0 1 2 3 4 5 6"") == [0, 1, 2, 3, 4, 5, 6]
    assert extract_numbers(""Only numbers 0 100"") == [0, 100]
    assert extract_numbers(""255 512 1024"") == [255, 512, 1024]
    assert extract_numbers(""5 15 25"") == [5, 15, 25]","def test_extract_numbers():
    assert extract_numbers(""1 2 3 abc 4 5 6"") == [1, 2, 3, 4, 5, 6]
    assert extract_numbers(""no numbers here"") == []
    assert extract_numbers(""123"") == [123]
    assert extract_numbers("""") == []
    assert extract_numbers(""56 78"") == [56, 78]"
"def add_lists_elements_with_offset(lst1, lst2, offset):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a + b + offset)
    if not result:
        return None
    return result","def test_add_lists_elements_with_offset():
    assert add_lists_elements_with_offset([1, 2, 3], [4, 5, 6], 1) == [5, 7, 9]
    assert add_lists_elements_with_offset([1, 2], [3, 4], 2) == [4, 6]
    assert add_lists_elements_with_offset([0, 0, 0], [1, 2, 3], 3) == [0, 2, 4]
    assert add_lists_elements_with_offset([], [1, 2, 3], 0) is None
    assert add_lists_elements_with_offset([1, 2, 3], [], 0) is None
    assert add_lists_elements_with_offset([1, 2, 3], [1, 2, 3], 1) == [2, 4, 6]
    assert add_lists_elements_with_offset([1, 2], [3], 5) == [3, 5]
    assert add_lists_elements_with_offset([1, 2], [3, 4], 6) == [5, 7]
    assert add_lists_elements_with_offset([-1, -2], [-3, -4], -5) == [-4, -6]","def test_add_lists_elements_with_offset():
    assert add_lists_elements_with_offset([1, 2, 3], [4, 5, 6], 1) == [6, 8, 10]
    assert add_lists_elements_with_offset([0, 0, 0], [1, 2, 3], 2) == [3, 4, 5]
    assert add_lists_elements_with_offset([1, 2], [3, 4], -1) == [3, 5]
    assert add_lists_elements_with_offset([], [1, 2, 3], 0) is None"
"def find_smallest_divisible_by_7_and_11(arr):
    min_val = None
    for val in arr:
        if val % 7 == 0 and val % 11 == 0:
            if min_val is None or val < min_val:
                min_val = val
    return min_val if min_val is not None else None","def test_find_smallest_divisible_by_7_and_11():
    assert find_smallest_divisible_by_7_and_11([7, 14, 21, 28, 35]) == 7
    assert find_smallest_divisible_by_7_and_11([11, 22, 33, 44, 55]) is None
    assert find_smallest_divisible_by_7_and_11([49, 63, 77, 84]) == 49
    assert find_smallest_divisible_by_7_and_11([7, 11, 22, 33]) == 7
    assert find_smallest_divisible_by_7_and_11([77, 88, 99]) is None
    assert find_smallest_divisible_by_7_and_11([7, 22]) == 7
    assert find_smallest_divisible_by_7_and_111([35, 42, 56, 63]) == 35
    assert find_smallest_divisible_by_7_and_111([7, 55, 85, 108]) == 7
    assert find_smallest_divisible_divisible_by_7_and_111([28, 36, 49]) == 28","def test_find_smallest_divisible_by_7_and_11():
    assert find_smallest_divisible_by_7_and_11([77, 154, 231, 308]) == 77
    assert find_smallest_divisible_by_7_and_11([1, 2, 3, 4]) is None
    assert find_smallest_divisible_by_7_and_11([14, 22, 35, 77]) == 77
    assert find_smallest_divisible_by_7_and_11([154, 308, 462]) == 154
    assert find_smallest_divisible_by_7_and_11([7, 11, 77, 121]) == 77
    assert find_smallest_divisible_by_7_and_11([49, 99, 143, 154]) == 154
    assert find_smallest_divisible_by_7_and_11([21, 33, 55, 77]) == 77"
"def find_duplicates(lst):
    duplicates = []
    for x in set(lst):
        if lst.count(x) > 1:
            duplicates.append(x)
    if len(duplicates) == 0:
        print(""No duplicates found."")
    return duplicates","def test_find_duplicates():
    assert find_duplicates([1, 2, 3, 2, 1]) == [1, 2, 3]
    assert find_duplicates([1, 1, 1]) == [1]
    assert find_duplicates([1, 2, 3]) == []
    assert find_duplicates([4, 5, 6, 5, 4]) == [4, 5, 6]
    assert find_duplicates([7, 8, 9, 9, 9]) == [9]
    assert find_duplicates([10, 10, 10]) == [10]
    assert find_duplicates([11, 22, 33, 44, 22, 11]) == [11, 22, 33, 44]
    assert find_duplicates([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]
    assert find_duplicates([5, 7, 8, 9]) == [5, 7, 8, 9]","def test_find_duplicates():
    assert find_duplicates([1, 2, 3, 2]) == [2]
    assert find_duplicates([1, 1, 1]) == [1]
    assert find_duplicates([4, 5, 6]) == []
    assert find_duplicates([10, 20, 20, 30]) == [20]
    assert find_duplicates([2, 3, 2, 3]) == [2, 3]"
"def list_to_string(lst, separator="",""):
    return separator.join(map(str, lst))","def test_list_to_string():
    assert list_to_string([1, 2, 3]) == ""1, 2, 3""
    assert list_to_string([""a"", ""b"", ""c""]) == ""a, b, c""
    assert list_to_string([]) == """"
    assert list_to_string([1]) == ""1""
    assert list_to_string(["" "", "" ""]) == ""  ""
    assert list_to_string([""hello"", ""world""]) == ""hello, world""
    assert list_to_string([1, 2, 3, 4, 5]) == ""1, 2, 3, 4, 5""
    assert list_to_string([1.1, 2.2, 3.3]) == ""1.2.3""
    assert list_to_string([""x"", ""y"", ""z""]) == ""x, y, z""","def test_list_to_string():
    assert list_to_string([], "","") == """"
    assert list_to_string([1, 2, 3], "","") == ""1,2,3""
    assert list_to_string([""a"", ""b"", ""c""], ""-"") == ""a-b-c""
    assert list_to_string([1, 2, 3], "" "") == ""1 2 3"""
"def find_non_numeric_elements(lst):
    result = []
    for item in lst:
        if not any(char.isdigit() for char in item):
            result.append(item)
    return result","def test_find_non_numeric_elements():
    assert find_non_numeric_elements([""abc"", ""def"", 123, """"]) == [""abc"", ""def""]
    assert find_non_numeric_elements([""123"", ""456"", 789]) == []
    assert find_non_numeric_elements([123, ""456"", 789]) == [123, ""456""]
    assert find_non_numeric_elements([]) == []
    assert find_non_numeric_elements([""abc"", 123, """"]) == [""abc""]
    assert find_non_numeric_elements([""def"", 0, 123]) == [""def""]
    assert find_non_numeric_elements([""ghi"", 1, 2, 3]) == [""ghi""]
    assert find_non_numeric_elements([4, 5, 6, 7]) == [4, 5, 6, 7]
    assert find_non_numeric_elements([8, 9, 10]) == [8, 9, 10]","def test_find_non_numeric_elements():
    assert find_non_numeric_elements([""hello"", ""123"", ""world"", ""456""]) == [""hello"", ""world""]
    assert find_non_numeric_elements([""abc"", ""def"", ""456"", ""789""]) == [""abc"", ""def""]"
"def find_divisible_by_57(tpl):
    result = []
    for elem in tpl:
        if elem % 57 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_57():
    assert find_divisible_by_57((1, 57, 104, 154, 201)) == (57, 104, 154, 201)
    assert find_divisible_by_57((57, 57, 57, 57)) == (57,)
    assert find_divisible_by_57((1, 2, 3, 4, 5)) is None
    assert find_divisible_by_57((),) is None
    assert find_divisible_by_57((3, 12, 15, 18, 21)) == (12, 18, 21)
    assert find_divisible_by_57((100, 101, 102, 103)) == (100, 101, 102, 103)
    assert find_divisible_by_57((57, 57, 57, 57, 57, 57)) == (57,)
    assert find_divisible_by_57((3, 6, 9, 12, 15, 18)) == (12, 18)
    assert find_divisible_by_57((57, 57, 57, 57, 57, 57, 57, 57)) == (57, 57, 57, 57, 57, 57)","def test_find_divisible_by_57():
    assert find_divisible_by_57((6, 12, 18, 24, 57)) == (57,)
    assert find_divisible_by_57((5, 10, 15, 20, 25)) is None
    assert find_divisible_by_57((1, 2, 3, 4, 5)) is None
    assert find_divisible_by_57(()) is None
    assert find_divisible_by_57((6, 114, 24)) == (114,)"
"def process_queue_less_than_x_not_divisible_by_5(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem < x and elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_less_than_x_not_divisible_by_5():
    assert process_queue_less_than_x_not_divisible_by_5([3, 5, 15, 30], 10) == [3, 15]
    assert process_queue_less_than_x_not_divisible_by_5([10, 20, 30], 25) == [10, 30]
    assert process_queue_less_than_x_not_divisible_by_5([], 5) is None
    assert process_queue_less_than_x_not_divisible_by_5([5, 15, 25], 10) == [5, 15]
    assert process_queue_less_than_x_not_divisible_by_5([7, 14, 21], 15) == [7, 14]
    assert process_queue_less_than_x_not_divisible_by_5([-1, -3, 5], 0) == [-1, -3]
    assert process_queue_less_than_x_not_divisible_by_5([9, 18, 27], 10) == [9, 18]
    assert process_queue_less_than_x_not_divisible_divisible_by_5([3, 3, 3], 3), 3
    assert process_3 == [3, 3, 3, 3]","def test_process_queue_less_than_x_not_divisible_by_5():
    assert process_queue_less_than_x_not_divisible_by_5([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]
    assert process_queue_less_than_x_not_divisible_by_5([10, 9, 8, 7, 6], 8) == [7, 6]
    assert process_queue_less_than_x_not_divisible_by_5([15, 25, 35, 45], 50) is None
    assert process_queue_less_than_x_not_divisible_by_5([], 10) is None
    assert process_queue_less_than_x_not_divisible_by_5([0, 1, 2, 3], 4) == [1, 2, 3]"
"def min_ring(arr):
    if not arr:
        return None
    return min(arr)","def test_min_ring():
    assert min_ring([1, 2, 3]) == 1
    assert min_ring([]) is None
    assert min_ring([0]) == 0
    assert min_ring([-1, -2, -3]) == -3
    assert min_ring([1, -1, 2, -2]) == 1
    assert min_ring([5, 5, 5, 5]) == 5
    assert min_ring([10]) == 10
    assert min_ring([-1, -1, 1, 1]) == -1
    assert min_ring([1, 2, 3, 4, 5]) == 1","def test_min_ring():
    assert min_ring([1, 2, 3]) == 1
    assert min_ring([]) is None
    assert min_ring([0]) == 0
    assert min_ring([-1, -2, -3]) == -3
    assert min_ring([1, -1, 2, -2]) == -2
    assert min_ring([5, 5, 5, 5]) == 5
    assert min_ring([10]) == 10
    assert min_ring([-1, -1, 1, 1]) == -1"
"def multiply_even_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        if a % 2 == 0 and b % 2 == 0:
            result.append(a * b)
    if not result:
        return None
    return result","def test_multiply_even_lists():
    assert multiply_even_lists([4, 6], [2, 3]) == [8, 12]
    assert multiply_even_lists([8, 10], [2, 4]) == [16, 20]
    assert multiply_even_lists([2, 4], [1, 2]) == [4, 8]
    assert multiply_even_lists([], [2, 4]) is None
    assert multiply_even_lists([2, 4], []) is None
    assert multiply_even_lists([1, 3], [6, 9]) == [36, 42]
    assert multiply_even_lists([5, 7], [5, 7]) == [105, 143]
    assert multiply_even_lists([10, 20], [2, 4]) == [200, 280]
    assert multiply_even_lists([2, 3], [1, 3]) == [4, 8]","def test_multiply_even_lists():
    assert multiply_even_lists([2, 3, 4], [2, 3, 4]) == [4, 16]
    assert multiply_even_lists([1, 1, 1], [2, 2, 2]) is None
    assert multiply_even_lists([2, 4, 6], [2, 4, 6]) == [4, 16, 36]
    assert multiply_even_lists([], []) is None
    assert multiply_even_lists([2], [2]) == [4]"
"def sum_greater_than_x(lst, x):
    if not lst:
        return 0
    return (lst[0] if lst[0] > x else 0) + sum_greater_than_x(lst[1:], x)","def test_sum_greater_than_x():
    assert sum_greater_than_x([1, 2, 3, 4, 5], 3) == 4
    assert sum_greater_than_x([10, 20, 30, 40, 50], 25) == 50
    assert sum_greater_than_x([5, 5, 5, 5], 5) == 0
    assert sum_greater_than_x([], 5) == 0
    assert sum_greater_than_x([1, 2, 3, 4, 5], 5) == 0
    assert sum_greater_than_x([1, 2, 3, 4, 5], 3) == 4
    assert sum_greater_than_x([10, 20, 30, 40, 50], 15) == 50
    assert sum_greater_than_x([7, 8, 9, 10], 8) == 9
    assert sum_greater_than_x([-1, -2, -3, -4], -3) == -1","def test_sum_greater_than_x():
    assert sum_greater_than_x([1, 2, 3, 4, 5], 3) == 9
    assert sum_greater_than_x([10, 20, 30, 40, 50], 25) == 120
    assert sum_greater_than_x([5, 5, 5, 5, 5], 10) == 0
    assert sum_greater_than_x([], 5) == 0
    assert sum_greater_than_x([1, 2, 3, 4, 5], 5) == 0
    assert sum_greater_than_x([-1, -2, -3, 4, 5], 0) == 9
    assert sum_greater_than_x([100, 200, 300], 150) == 500
    assert sum_greater_than_x([1, 1, 1, 1, 1], 2) == 0"
"def find_product_of_two_primes_not_7(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 7 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_7():
    assert find_product_of_two_primes_not_7([6, 10, 14]) == [6]
    assert find_product_of_two_primes_not_7([15, 21, 35]) == [21]
    assert find_product_of_two_primes_not_7([7, 14, 28]) is None
    assert find_product_of_two_primes_not_7([2, 3, 5]) is None
    assert find_product_of_two_primes_not_7([30, 42, 49]) == [49]
    assert find_product_of_two_primes_not_7([111, 13, 17]) is None
    assert find_product_of_two_primes_not_7([7, 20, 25]) == [25]
    assert find_0 == [0]
    assert find_find_find_product_of_two_primes_not_7([5, 777, 97]) is None","def test_find_product_of_two_primes_not_7():
    assert find_product_of_two_primes_not_7([6, 10, 14, 15]) == [6, 10, 15]
    assert find_product_of_two_primes_not_7([5, 13, 17]) is None
    assert find_product_of_two_primes_not_7([7, 11]) is None
    assert find_product_of_two_primes_not_7([6, 15, 21]) == [6, 15]
    assert find_product_of_two_primes_not_7([3, 5, 15]) == [15]"
"def remove_duplicate_tuples(lst):
    seen = set()
    result = []
    for item in lst:
        if item[0] not in seen:
            seen.add(item[0])
            result.append(item)
    return result","def test_remove_duplicate_tuples():
    assert remove_duplicate_tuples([(1, 2), (2, 3), (3, 4)]) == [(1, 2), (3, 4)]
    assert remove_duplicate_tuples([(1, 1), (1, 2)]) == [(1, 1), (2, 2)]
    assert remove_duplicate_tuples([((1, 1, 2), (2, 3, 4)]) == [(1, 1, 2), (3, 4)]
    assert remove_duplicate_tuples([((5, 5), (5, 6))] == [(5, 5), (6, 6)]
    assert remove_duplicate_tuples([]) == []
    assert remove_duplicate_tuples([(7, 8), (9, 10)]) == [(7, 8), (10, 10)]
    assert remove_duplicate_tuples([(11, 12), (13, 14)]) == [(11, 12), (13, 14)]
    assert remove_duplicate_tuples([(15, 16), (17, 18)]) == [(15, 16), (18, 19)]
    assert remove_duplicate_tuples([(20, 21), (222, 23)]) == [(20, 21), (222, 23)]","def test_remove_duplicate_tuples():
    assert remove_duplicate_tuples([(1, ""a""), (2, ""b""), (1, ""c"")]) == [(1, ""a""), (2, ""b"")]
    assert remove_duplicate_tuples([(1, ""a""), (1, ""b""), (1, ""c"")]) == [(1, ""a"")]
    assert remove_duplicate_tuples([(1, ""x""), (2, ""y""), (2, ""z"")]) == [(1, ""x""), (2, ""y"")]
    assert remove_duplicate_tuples([(3, ""a""), (4, ""b""), (5, ""c"")]) == [(3, ""a""), (4, ""b""), (5, ""c"")]
    assert remove_duplicate_tuples([(""a"", 1), (""b"", 2), (""a"", 3)]) == [(""a"", 1), (""b"", 2)]
    assert remove_duplicate_tuples([(""a"", 1), (""a"", 2), (""a"", 3), (""b"", 4)]) == [(""a"", 1), (""b"", 4)]
    assert remove_duplicate_tuples([]) == []
    assert remove_duplicate_tuples([(""x"", 1), (""y"", 2)]) == [(""x"", 1), (""y"", 2)]"
"def find_in_collection(lst, collection):
    result = []
    for item in lst:
        if item in collection:
            result.append(item)
    if not result:
        print(""No elements found in the collection."")
    return result","def test_find_in_collection():
    assert find_in_collection([1, 2, 3], {2, 4, 6}) == [2]
    assert find_in_collection([7, 8, 9], {9, 10, 11}) == [9]
    assert find_in_collection([12, 13, 14], {14, 15, 16}) == [14]
    assert find_in_collection([], {1, 2, 3}) == []
    assert find_in_collection([1, 2, 3], {1, 2, 3}) == [1, 2, 3]
    assert find_in_collection([1, 3, 5], {2, 4, 6}) == []
    assert find_in_collection([17, 18, 19], {20, 21, 22}) == [18]
    assert find_in_collection([23, 24, 25], {25, 26, 27}) == [25]
    assert find_in_collection([28, 29, 30], {30, 31, 32}) == [29]","def test_find_in_collection():
    assert find_in_collection([1, 2, 3], {3, 4, 5}) == [3]
    assert find_in_collection([1, 2, 3], {4, 5, 6}) == []
    assert find_in_collection([""a"", ""b"", ""c""], {""b"", ""c"", ""d""}) == [""b"", ""c""]
    assert find_in_collection([1, 2], {1, 2, 3}) == [1, 2]
    assert find_in_collection([5, 6, 7], {7, 8}) == [7]
    assert find_in_collection([], {1, 2, 3}) == []
    assert find_in_collection([1, 2], set()) == []
    assert find_in_collection([1, 2, 3], {3, 4, 5}) == [3]
    assert find_in_collection([""apple"", ""banana""], {""banana"", ""orange""}) == [""banana""]"
"def find_repeated_chars(s):
    count = {}
    repeated = ''
    for char in s:
        if char.isalpha():
            count[char] = count.get(char, 0) + 1
    for char, cnt in count.items():
        if cnt > 1:
            repeated += char
    return repeated if repeated else None","def test_find_repeated_chars():
    assert find_repeated_chars(""abcabc"") == ""abc""
    assert find_repeated_chars(""hello world"") == ""hello""
    assert find_repeated_chars(""aabbcc"") == ""abc""
    assert find_repeated_chars(""abcxyz"") == ""xyz""
    assert find_repeated_chars("""") is None
    assert find_repeated_chars(""aabbccdd"") is None
    assert find_repeated_chars(""abcdabcd"") == ""abcd""
    assert find_repeated_chars(""xyzxyz"") == ""xyz""
    assert find_repeated_chars(""repeatrepeat"") == ""repeat""","def test_find_repeated_chars():
    assert find_repeated_chars(""hello"") == ""l""
    assert find_repeated_chars(""abcde"") is None
    assert find_repeated_chars(""abccba"") == ""abc""
    assert find_repeated_chars(""aabbcc"") == ""abc""
    assert find_repeated_chars("""") is None
    assert find_repeated_chars(""111"") is None
    assert find_repeated_chars(""aaa"") == ""a""
    assert find_repeated_chars(""abababa"") == ""ab"""
"def is_palindrome_2(s):
    if not s:
        return None
    return s == s[::-1]","def test_is_palindrome_2():
    assert is_palindrome_2(""racecar"") is True
    assert is_palindrome_2(""hello"") is False
    assert is_palindrome_2(""madam"") is True
    assert is_palindrome_2("""") is None
    assert is_palindrome_2(""a"") is True
    assert is_palindrome_2(""noon"") is True
    assert is_palindrome_2(""world"") is False
    assert is_palindrome_2(""level"") is True
    assert is_palindrome_2(""python"") is False","def test_is_palindrome_2():
    assert is_palindrome_2('racecar') is True
    assert is_palindrome_2('') is None
    assert is_palindrome_2('madam') is True
    assert is_palindrome_2('python') is False
    assert is_palindrome_2('Aibohphobia') is False
    assert is_palindrome_2('step on no pets') is True
    assert is_palindrome_2('Was it a car or a cat I saw') is False"
"def process_queue_divisible_by_7(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 7 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_7():
    assert process_queue_divisible_by_7([7, 14, 21, 28, 35]) == [7, 14, 21, 28, 35]
    assert process_queue_divisible_by_7([1, 2, 3, 4, 5]) is None
    assert process_queue_divisible_by_7([7, 8, 9, 10, 11]) == [7, 8, 9, 10, 11]
    assert process_queue_divisible_by_7([12, 13, 14, 15, 16]) == [12, 13, 14, 15, 16]
    assert process_queue_divisible_by_7([17, 18, 19, 20, 21]) == [17, 18, 19, 20, 21]
    assert process_queue_divisible_by_7([22, 23, 24, 25, 26]) == [22, 23, 24, 25, 26]
    assert process_queue_divisible_by_7([27, 28, 35, 36, 37]) == [27, 28, 35, 36, 37]
    assert process_queue_divisible_by_7([3, 4, 5, 6, 7]) is None
    assert process_queue_queue_divisible_by_7([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]","def test_process_queue_divisible_by_7():
    assert process_queue_divisible_by_7([7, 14, 21, 5, 10]) == [7, 14, 21]
    assert process_queue_divisible_by_7([1, 2, 3, 4]) is None
    assert process_queue_divisible_by_7([28, 35, 42, 49]) == [28, 35, 42, 49]
    assert process_queue_divisible_by_7([]) is None
    assert process_queue_divisible_by_7([7, 14, 21]) == [7, 14, 21]
    assert process_queue_divisible_by_7([0, 70, 140]) == [0, 70, 140]
    assert process_queue_divisible_by_7([1, 3, 7]) == [7]
    assert process_queue_divisible_by_7([-7, -14, -21]) == [-7, -14, -21]"
"def choose_longest_non_vowel_word(*words):
    vowels = 'aeiouAEIOU'
    longest = """"
    for word in words:
        if word[0] not in vowels:
            if len(word) > len(longest):
                longest = word
    if not longest:
        return ""No word found""
    return longest","def test_choose_longest_non_vowel_word():
    assert choose_longest_non_vowel_word(""apple"", ""banana"", ""cherry"") == ""banana""
    assert choose_longest_non_vowel_word(""bcd"", ""cde"", ""defg"") == ""cde""
    assert choose_longest_non_vowel_word(""hello"", ""world"", ""python"") == ""No word found""
    assert choose_longest_non_vowel_word(""a"", ""e"", ""i"") == ""i""
    assert choose_longest_non_vowel_word(""AI"", ""rules"", ""machine"") == ""AI""
    assert choose_longest_non_vowel_word(""buzz"", ""quiz"", ""quiz"") == ""No word found""
    assert choose_longest_non_vowel_word(""oo"", ""u"", ""eeee"") == ""oo""
    assert choose_longest_non_vowel_word(""aa"", ""bbb"", ""cc"") == ""bbb""
    assert choose_longest_non_vowel_word(""ae"", ""af"", ""bbf"") == ""af""","def test_choose_longest_non_vowel_word():
    assert choose_longest_non_vowel_word(""apple"", ""banana"", ""cherry"") == ""banana""
    assert choose_longest_non_vowel_word(""Apple"", ""Orange"", ""Grape"") == ""Grape""
    assert choose_longest_non_vowel_word(""egg"", ""ibex"", ""owl"") == ""No word found""
    assert choose_longest_non_vowel_word(""cat"", ""dog"", ""fish"") == ""fish""
    assert choose_longest_non_vowel_word(""bird"", ""fly"", ""ant"") == ""bird"""
"def find_floats_between_value_in_list_and_value_in_dict(lst, d, value):
    if not lst or not d:
        return None
    result = []
    for item in lst:
        if isinstance(item, float) and item < value and any(val > value for val in d.values()):
            result.append(item)
    return tuple(result) if result else None","def test_find_floats_between_value_in_list_and_value_in_dict():
    assert find_floats_between_value_in_list_and_value_in_dict([0.1, 0.2], {1: 0.3}, 0.4) == (0.2,)
    assert find_floats_between_value_in_list_and_value_in_dict([0.3, 0.4], {1: 0.5}, 0.6) == (0.4,)
    assert find_floats_between_value_in_list_and_value_in_dict([], {1: 0.1}, 0.2) is None
    assert find_floats_between_value_in_list_and_value_in_dict([0.1, 0.2], {}, 0.3) is None
    assert find_floats_between_value_in_list_and_value_in_dict([1.1, 1.2], {1: 2.0}, 1.3) == (1.2,)
    assert find_floats_between_value_in_list_and_value_in_dict([3.0, 4.0], {1: 4.0}, 3.2) == (4.0,)
    assert find_value_in_list_and_value_in_dict([5.0, 6.0], {1: 6.0}, 5.2) == (6.0,)
    assert find_value_in_list_and_value_in_dict([7.0, 8.0], {1: 8.0}, 7.2) == (8.0,)
    assert find_value_in_list_and_value_in_dict([9.0, 10.0], {1: 110.0}, 111) == (10.0,)","def test_find_floats_between_value_in_list_and_value_in_dict():
    assert find_floats_between_value_in_list_and_value_in_dict([1.0, 2.0], {1: 3.0}, 2.5) == (1.0, 2.0)
    assert find_floats_between_value_in_list_and_value_in_dict([0.5, 1.5], {1: 2.0}, 1.0) == (0.5,)"
"def sum_elements_times_index(lst):
    result = []
    for i, num in enumerate(lst):
        result.append(num * i)
    if not result:
        return None
    return result","def test_sum_elements_times_index():
    assert sum_elements_times_index([1, 2, 3, 4]) == [0, 0, 0, 0]
    assert sum_elements_times_index([0, 0, 0]) == [0, 0, 0]
    assert sum_elements_times_index([]) is None
    assert sum_elements_times_index([1, 2, 3]) == [0, 2, 4]
    assert sum_elements_times_index([5, 5, 5]) == [0, 0, 0]
    assert sum_elements_times_index([10, 20, 30]) == [0, 10, 20]
    assert sum_elements_times_index([0, 1, 2]) == [0, 1, 2]
    assert sum_elements_times_index([3, 3, 3]) == [0, 3, 6]
    assert sum_elements_times_index([1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]","def test_sum_elements_times_index():
    assert sum_elements_times_index([1, 2, 3, 4]) == [0, 2, 6, 12]
    assert sum_elements_times_index([0, 0, 0]) == [0, 0, 0]"
"def find_non_prime_numbers(lst):
    non_primes = []
    for num in lst:
        if num < 2:
            non_primes.append(num)
        else:
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    non_primes.append(num)
                    break
    return non_primes","def test_find_non_prime_numbers():
    assert find_non_prime_numbers([2, 3, 4, 5, 6]) == [4, 6]
    assert find_non_prime_numbers([11, 13, 17, 19, 23]) == []
    assert find_non_prime_numbers([8, 12, 15]) == [8, 12, 15]
    assert find_non_prime_numbers([1, 2, 3, 5, 7]) == [2]
    assert find_non_prime_numbers([4, 6, 8, 9, 10]) == [4, 6, 8, 9, 10]
    assert find_non_prime_numbers([25, 26, 27]) == [25, 26, 27]
    assert find_non_prime_numbers([16, 18, 20]) == [16, 18, 20]
    assert find_non_prime_numbers([222, 24, 28]) == [222, 24, 28]
    assert find_non_prime_numbers([31, 33, 35]) == [33]","def test_find_non_prime_numbers():
    assert find_non_prime_numbers([1, 2, 3, 4, 5]) == [1, 4]
    assert find_non_prime_numbers([10, 11, 12, 13]) == [10, 12]
    assert find_non_prime_numbers([17, 19, 21, 23]) == [21]
    assert find_non_prime_numbers([24, 25, 26, 27]) == [24, 25, 26, 27]
    assert find_non_prime_numbers([29, 30, 31]) == [30]
    assert find_non_prime_numbers([2, 3, 5]) == []
    assert find_non_prime_numbers([4, 6, 8]) == [4, 6, 8]
    assert find_non_prime_numbers([]) == []"
"def sum_ring(arr):
    if not arr:
        return 0
    return sum(arr)","def test_sum_ring():
    assert sum_ring([1, 2, 3]) == 6
    assert sum_ring([]) == 0
    assert sum_ring([0]) == 0
    assert sum_ring([1, 1, 1]) == 3
    assert sum_ring([5, 5, 5, 5]) == 15
    assert sum_ring([-1, -2, -3]) == -6
    assert sum_ring([1, 2, 3, 4, 5]) == 10
    assert sum_ring([10, 20, 30, 40]) == 100
    assert sum_ring([7, 8, 9, 10]) == 11","def test_sum_ring():
    assert sum_ring([1, 2, 3]) == 6
    assert sum_ring([]) == 0
    assert sum_ring([0]) == 0
    assert sum_ring([-1, -2, -3]) == -6
    assert sum_ring([1, -1, 2, -2]) == 0
    assert sum_ring([5, 5, 5, 5]) == 20
    assert sum_ring([10]) == 10
    assert sum_ring([-1, -1, 1, 1]) == 0"
"def remove_divisible_by_5_from_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_divisible_by_5_from_stack():
    assert remove_divisible_by_5_from_stack([5, 10, 15, 20, 25]) == [25, 20, 15, 10, 5]
    assert remove_divisible_by_5_from_stack([1, 2, 3, 4, 5]) is None
    assert remove_divisible_by_5_from_stack([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert remove_divisible_by_5_from_stack([10, 20, 30, 40, 50]) == [50, 40, 30, 20, 10]
    assert remove_divisible_by_5_from_stack([]) is None
    assert remove_divisible_by_5_from_stack([15, 25, 35, 45]) == [45, 35, 25, 15]
    assert remove_divisible_by_5_from_stack([0, 1, 2, 3, 4, 5]) is None
    assert remove_divisible_by_5_from_stack([5, 10, 20, 25]) == [25, 10, 5]
    assert remove_divisible_by_5_from_stack([30, 40, 50, 60]) == [60, 50, 40]","def test_remove_divisible_by_5_from_stack():
    assert remove_divisible_by_5_from_stack([1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == [1]
    assert remove_divisible_by_5_from_stack([5, 10, 15, 20, 25]) is None
    assert remove_divisible_by_5_from_stack([1, 2, 3, 4]) == [4, 3, 2, 1]
    assert remove_divisible_by_5_from_stack([0, 5, 10]) is None
    assert remove_divisible_by_5_from_stack([1, 2, 3, 6, 7, 11]) == [11, 7, 6, 3, 2, 1]
    assert remove_divisible_by_5_from_stack([]) is None
    assert remove_divisible_by_5_from_stack([1, 2, 3, 4, 6]) == [6, 4, 3, 2, 1]"
"def process_queue_remove_less_than_x(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem >= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_remove_less_than_x():
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 3) == [1, 2, 3]
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 1) is None
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]
    assert process_queue_remove_less_than_x([], 3) is None
    assert process_queue_remove_less_than_x([-1, -3, 5], 0) == [-1, -3]
    assert process_queue_remove_less_than_x([3, 3, 3], 3) is None
    assert process_queue_remove_less_than_x([10, 20, 30, 40], 25) == [10, 20]
    assert process_queue_remove_less_than_x([7, 14, 21], 15) == [7, 21]
    assert process_queue_remove_less_than_x([-1, -2, -3, -4], -3) == [-1, -2]","def test_process_queue_remove_less_than_x():
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 3) == [3, 4, 5]
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 6) is None
    assert process_queue_remove_less_than_x([], 3) is None
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 5) == [5]
    assert process_queue_remove_less_than_x([5, 10, 15], 10) == [10, 15]
    assert process_queue_remove_less_than_x([7, 14, 21], 15) == [21]
    assert process_queue_remove_less_than_x([-1, -3, 5], 0) == [5]"
"def remove_greater_than_ring(arr, threshold):
    if not arr:
        return arr
    return [x for x in arr if x <= threshold]","def test_remove_greater_than_ring():
    assert remove_greater_than_ring([1, 2, 3, 4, 5], 3) == [1, 2, 3]
    assert remove_greater_than_ring([1, 2, 3], 4) == [1, 2, 3]
    assert remove_greater_than_ring([], 3) == []
    assert remove_greater_than_ring([3, 3, 3], 3) == []
    assert remove_greater_than_ring([1, 4, 7, 10], 5) == [1, 4, 7, 10]
    assert remove_greater_than_ring([-1, -2, -3], -4) == [-1, -2]
    assert remove_greater_than_ring([10, 20, 30], 25) == [10, 20]
    assert remove_greater_than_ring([1, 2, 3, 4, 5], 3, 3) == [1, 2, 3, 4, 5]
    assert remove_greater_than_ring([9, 8, 7, 6], 8, 7) == [9, 8]","def test_remove_greater_than_ring():
    assert remove_greater_than_ring([], 10) == []
    assert remove_greater_than_ring([1, 5, 10, 15], 10) == [1, 5, 10]
    assert remove_greater_than_ring([20, 25, 30], 20) == [20]
    assert remove_greater_than_ring([1, 2, 3], 5) == [1, 2, 3]"
"def string_to_numbers(s):
    try:
        return [int(x) for x in s.split()]
    except ValueError:
        print(""String contains non-numeric values."")
        return []","def test_string_to_numbers():
    assert string_to_numbers(""123,456,789"") == [123, 456, 789]
    assert string_to_numbers(""100,200,300"") == [100, 200, 300]
    assert string_to_numbers(""400,500,600"") == [400, 500, 600]
    assert string_to_numbers(""700,800,900"") == [700, 800, 900]
    assert string_to_numbers("""") == []
    assert string_to_numbers(""0,1,2,3"") == [0, 1, 2, 3]
    assert string_to_numbers(""11,22,33"") == [11, 22, 33]
    assert string_to_numbers(""text without numbers"") == []
    assert string_to_numbers(""400number,500text,600number"") == [400, 500, 600]","def test_string_to_numbers():
    assert string_to_numbers(""1 2 3"") == [1, 2, 3]
    assert string_to_numbers(""10 20 30"") == [10, 20, 30]
    assert string_to_numbers(""4 5 6"") == [4, 5, 6]
    assert string_to_numbers(""a b c"") == []
    assert string_to_numbers(""123 abc 456"") == []
    assert string_to_numbers("""") == []
    assert string_to_numbers(""7 8 9"") == [7, 8, 9]
    assert string_to_numbers(""0"") == [0]"
"def find_even_not_divisible_by_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 3 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_even_not_divisible_by_3():
    assert find_even_not_divisible_by_3([2, 4, 6, 8]) == [2, 4, 8]
    assert find_even_not_divisible_by_3([12, 14, 16]) is None
    assert find_even_not_divisible_by_3([3, 5, 9]) is None
    assert find_even_not_divisible_by_3([18, 20, 22]) == [18, 20, 22]
    assert find_even_not_divisible_by_3([7, 11, 13]) is None
    assert find_even_not_divisible_by_3([1, 2, 3, 4]) == [2]
    assert find_even_not_divisible_by_3([6, 8, 10]) == [6, 8, 10]
    assert find_even_not_divisible_by_3([15, 17, 21]) is None
    assert find_even_not_divisible_by_3([23, 25, 30]) is None","def test_find_even_not_divisible_by_3():
    assert find_even_not_divisible_by_3([2, 4, 6, 8, 10, 12]) == [2, 4, 8, 10]
    assert find_even_not_divisible_by_3([6, 12, 18]) is None
    assert find_even_not_divisible_by_3([2, 10, 4]) == [2, 10, 4]
    assert find_even_not_divisible_by_3([2, 4, 8]) == [2, 4, 8]"
"def find_pairs_with_first_greater(lst):
    result = [(a, b) for a in lst for b in lst if a > b]
    if not result:
        return None
    return result","def test_find_pairs_with_first_greater():
    assert find_pairs_with_first_greater([1, 2, 3]) == [(2, 3), (1, 2)]
    assert find_pairs_with_first_greater([3, 1, 2]) == [(1, 2), (3, 1)]
    assert find_pairs_with_first_greater([1, 3, 2]) == [(3, 2), (1, 3)]
    assert find_pairs_with_first_greater([2, 4, 6]) is None
    assert find_pairs_with_first_greater([5, 7]) is None
    assert find_pairs_with_first_greater([9, 7]) is None
    assert find_pairs_with_first_greater([8, 10]) is None
    assert find_pairs_with_first_greater([11, 13]) is None
    assert find_pairs_with_first_greater([15, 17]) is None","def test_find_pairs_with_first_greater():
    assert find_pairs_with_first_greater([1, 2, 3]) == [(2, 1), (3, 1), (3, 2)]
    assert find_pairs_with_first_greater([3, 1, 2]) == [(3, 1), (3, 2), (2, 1)]
    assert find_pairs_with_first_greater([1, 1, 1]) is None
    assert find_pairs_with_first_greater([]) is None
    assert find_pairs_with_first_greater([5, 5, 5]) is None
    assert find_pairs_with_first_greater([4, 5, 6]) == [(5, 4), (6, 4), (6, 5)]
    assert find_pairs_with_first_greater([10, 20, 30]) == [(20, 10), (30, 10), (30, 20)]
    assert find_pairs_with_first_greater([-1, 0, 1]) == [(0, -1), (1, -1), (1, 0)]"
"def find_multiples_of_5_not_10(lst):
    result = []
    for num in lst:
        if num % 5 == 0 and num % 10 != 0:
            result.append(num)
    if not result:
        print(""No multiples of 5 that are not divisible by 10."")
    return result","def test_find_multiples_of_5_not_10():
    assert find_multiples_of_5_not_10([5, 15, 25, 35]) == [5, 15, 25, 35]
    assert find_multiples_of_5_not_10([10, 20, 30, 40]) == []
    assert find_multiples_of_5_not_10([35, 45, 55]) == [35, 45, 55]
    assert find_multiples_of_5_not_10([50, 60, 70]) == [50, 60, 70]
    assert find_multiples_of_5_not_10([75, 85, 95]) == [85, 95]
    assert find_multiples_of_5_not_10([100, 200, 300]) == [100, 200, 300]
    assert find_not_10([5, 15, 25, 35]) == [5, 15, 25, 35]
    assert find_not_10([30, 40, 50, 60]) == [30, 40, 50, 60]
    assert find_not_10([10, 20, 25, 35]) == [10, 25, 35]","def test_find_multiples_of_5_not_10():
    assert find_multiples_of_5_not_10([5, 10, 15, 20, 25, 30]) == [5, 15, 25]
    assert find_multiples_of_5_not_10([2, 4, 6, 8, 10]) == []"
"def find_in_one_set_not_other(set1, set2):
    result = set1.symmetric_difference(set2)
    if not result:
        return None
    return list(result)","def test_find_in_one_set_not_other():
    assert find_in_one_set_not_other({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_in_one_set_not_other({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_one_set_not_other(set(), {1, 2, 3}) is None
    assert find_in_one_set_not_other({1, 2, 3}, set()) == [1, 2, 3]
    assert find_in_one_set_not_other({1, 2, 3, 5}, {2, 3, 4, 5}) == [1]
    assert find_in_one_set_not_other({1, 6, 7}, {2, 3, 6}) == [1, 7]
    assert find_in_one_set_not_other({9, 10}, {11, 12}) == [9, 10]
    assert find_in_one_set_not_other({7, 8, 9}, {8, 9}) == [7]
    assert find_in_one_set_not_other({1, 3, 5}, {2, 4, 5}) == [1]","def test_find_in_one_set_not_other():
    assert find_in_one_set_not_other({1, 2}, {2, 3}) == [1, 3]
    assert find_in_one_set_not_other({5, 6}, {6, 7}) == [5, 7]
    assert find_in_one_set_not_other(set(), {1, 2}) == [1, 2]
    assert find_in_one_set_not_other({1}, {1}) is None
    assert find_in_one_set_not_other({1}, set()) == [1]
    assert find_in_one_set_not_other(set(), set()) is None"
"def remove_duplicates_from_string_2(s):
    result = ''
    seen = set()
    for char in s:
        if char not in seen and s.count(char) == 1:
            seen.add(char)
            result += char
    return result","def test_remove_duplicates_from_string_2():
    assert remove_duplicates_from_string_2(""aabbcc"") == ""abc""
    assert remove_duplicates_from_string_2(""abcabc"") == ""abc""
    assert remove_duplicates_from_string_2(""abc"") == ""abc""
    assert remove_duplicates_from_string_2("""") == """"
    assert remove_duplicates_from_string_2(""a"") == ""a""
    assert remove_duplicates_from_string_2(""aa"") == ""aa""
    assert remove_duplicates_from_string_2(""aaa"") == ""aaa""
    assert remove_duplicates_from_string_2(""aabcc"") == ""abc""
    assert remove_duplicates_from_string_2(""abcd"") == ""abcd""","def test_remove_duplicates_from_string_2():
    assert remove_duplicates_from_string_2(""aabbcc"") == """"
    assert remove_duplicates_from_string_2(""abcdef"") == ""abcdef""
    assert remove_duplicates_from_string_2(""hello world"") == ""he wrd""
    assert remove_duplicates_from_string_2(""mississippi"") == ""m""
    assert remove_duplicates_from_string_2("""") == """"
    assert remove_duplicates_from_string_2(""apple"") == ""ale""
    assert remove_duplicates_from_string_2(""unique"") == ""niqe""
    assert remove_duplicates_from_string_2(""numbers 123123"") == ""numbers """
"def choose_first_square_number(arr):
    for num in arr:
        if int(num ** 0.5) ** 2 == num:
            return num
    return None","def test_choose_first_square_number():
    assert choose_first_square_number([1, 4, 9, 16, 25]) == 16
    assert choose_first_square_number([2, 3, 5, 7, 11]) is None
    assert choose_first_square_number([36, 49, 64, 81]) == 36
    assert choose_first_square_number([100, 121, 144]) == 100
    assert choose_first_square_number([]) is None
    assert choose_first_square_number([9, 25, 49, 81]) == 49
    assert choose_first_square_number([16, 36, 54]) == 16
    assert choose_first_square_number([1, 2, 3, 4, 5]) == 1
    assert choose_first_square_number([7, 14, 21, 28]) == 21","def test_choose_first_square_number():
    assert choose_first_square_number([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1
    assert choose_first_square_number([10, 15, 20, 25, 30]) == 25"
"def find_string_longer_than(length, *strings):
    for s in strings:
        if len(s) > length:
            return s
    return None","def test_find_string_longer_than():
    assert find_string_longer_than(5, ""apple"", ""cat"", ""banana"") == ""cat""
    assert find_string_longer_than(4, ""dog"", ""fish"", ""whale"") == ""dog""
    assert find_string_longer_than(7, ""elephant"", ""snake"", ""shark"") == ""snake""
    assert find_string_longer_than(3, ""sun"", ""moon"", ""star"") is None
    assert find_string_longer_than(6, ""planet"", ""comet"", ""asteroid"") == ""comet""
    assert find_string_longer_than(8, ""galaxy"", ""universe"", ""cosmos"") == ""galaxy""
    assert find_string_longer_than(5, ""planet"", ""comet"", ""asteroid"") == ""comet""
    assert find_string_longer_than(4, ""dog"", ""fish"", ""whale"") == ""dog""
    assert find_string_longer_than(7, ""elephant"", ""snake"", ""shark"") == ""snake""","def test_find_string_longer_than():
    assert find_string_longer_than(3, ""apple"", ""bat"", ""cat"") == ""apple""
    assert find_string_longer_than(5, ""apple"", ""banana"", ""cherry"") == ""banana""
    assert find_string_longer_than(6, ""apple"", ""banana"", ""cherry"") is None
    assert find_string_longer_than(10, ""apple"", ""banana"", ""cherry"") is None
    assert find_string_longer_than(4, ""kiwi"", ""pear"", ""peach"") == ""peach""
    assert find_string_longer_than(2, ""a"", ""b"", ""c"", ""d"") is None
    assert find_string_longer_than(0, ""apple"", ""banana"", ""cherry"", ""date"") == ""apple""
    assert find_string_longer_than(7, ""elephant"", ""giraffe"", ""hippopotamus"") == ""elephant"""
"def choose_longest_digit_word(*words):
    longest = None
    for word in words:
        if word.isdigit():
            if longest is None or len(word) > len(longest):
                longest = word
    return longest if longest is not None else None","def test_choose_longest_digit_word():
    assert choose_longest_digit_word(""123"", ""45678"", ""90"") == ""45678""
    assert choose_longest_digit_word(""112233"", ""44556677"", ""889900"") == ""44556677""
    assert choose_longest_digit_word(""abc123"", ""def456"", ""ghi789"") is None
    assert choose_longest_digit_word(""111"", ""2222"", ""333"") == ""2222""
    assert choose_longest_digit_word(""9999"", ""8888"", ""7777"") == ""99999""
    assert choose_longest_digit_word(""1234567890"", ""0987654321"", ""1112131415"") == ""1234567890""
    assert choose_longest_digit_word(""111"", ""22"", ""33"") == ""22222""
    assert choose_longest_digit_word(""99999999"", ""8888"", ""777777"") == ""9999999""
    assert choose_longest_digit_word(""111111"", ""222222"", ""33333"") == ""222222""","def test_choose_longest_digit_word():
    assert choose_longest_digit_word(""123"", ""4567"", ""89"") == ""4567""
    assert choose_longest_digit_word(""abc"", ""def"", ""ghi"") is None
    assert choose_longest_digit_word(""1"", ""22"", ""333"", ""4444"", ""55555"") == ""55555""
    assert choose_longest_digit_word() is None
    assert choose_longest_digit_word(""789"", ""12"", ""234"") == ""789"""
"def max_consecutive_chars(s):
    max_len = 1
    current_len = 1
    for i in range(1, len(s)):
        if s[i] == s[i - 1]:
            current_len += 1
            max_len = max(max_len, current_len)
        else:
            current_len = 1
    return max_len","def test_max_consecutive_chars():
    assert max_consecutive_chars(""aaabbcc"") == 3
    assert max_consecutive_chars(""abcd"") == 1
    assert max_consecutive_chars(""aaAAa"") == 2
    assert max_consecutive_chars("""") == 1
    assert max_consecutive_chars(""x"") == 1
    assert max_consecutive_chars(""zzz"") == 3
    assert max_consecutive_chars(""aabbccdd"") == 3
    assert max_consecutive_chars(""aaaAAA"") == 1
    assert max_consecutive_chars(""aaaaAAa"") == 2","def test_max_consecutive_chars():
    assert max_consecutive_chars(""aaabbccc"") == 3
    assert max_consecutive_chars(""abcd"") == 1
    assert max_consecutive_chars(""aabbaa"") == 2
    assert max_consecutive_chars("""") == 1
    assert max_consecutive_chars(""a"") == 1"
"def greater_than_average_6(arr):
    if not arr:
        return []
    avg = sum(arr) / len(arr)
    return [x for x in arr if x > avg]","def test_greater_than_average_6():
    assert greater_than_average_6([1, 2, 3, 4, 5]) == [4, 5]
    assert greater_than_average_6([10, 20, 30, 40, 50]) == [40, 50]
    assert greater_than_average_6([]) == []
    assert greater_than_average_6([5, 5, 5, 5]) == []
    assert greater_than_average_6([1, 2, 3, 3, 4, 5, 5, 6]) == [3, 3, 4, 5, 6]
    assert greater_than_average_6([-1, -2, -3, 0]) == [-1, 0]
    assert greater_than_average_6([7, 8, 9, 10]) == [9, 10]
    assert greater_than_average_6([11, 22, 33, 44, 55]) == [22, 33, 44, 55]
    assert greater_than_average_6([15, 16, 77, 88]) == [167, 88]","def test_greater_than_average_6():
    assert greater_than_average_6([1, 2, 3, 4, 5]) == [4, 5]
    assert greater_than_average_6([5, 10, 15]) == [15]
    assert greater_than_average_6([2, 4, 6, 8]) == [6, 8]
    assert greater_than_average_6([1, 1, 1, 1]) == []
    assert greater_than_average_6([]) == []"
"def find_divisible_by_5_and_6_not_12(lst):
    result = []
    for num in lst:
        if num % 5 == 0 and num % 6 == 0 and num % 12 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_5_and_6_not_12():
    assert find_divisible_by_5_and_6_not_12([30, 60, 90]) is None
    assert find_divisible_by_5_and_6_not_12([120, 150, 200]) == [120, 150, 200]
    assert find_divisible_by_5_and_6_not_12([18, 21, 24]) is None
    assert find_divisible_by_5_and_6_not_12([30, 50, 75]) == [30, 50, 75]
    assert find_divisible_by_5_and_6_not_12([5, 6, 12]) is None
    assert find_divisible_by_5_and_6_not_12([90]) is None
    assert find_divisible_by_5_and_6_not_12([1120, 240]) == [120]
    assert find_divisible_by_5_and_6_not_12([75, 85, 95]) == [85, 95]
    assert find_divisible_by_5_and_6_not_12([100, 150, 250]) == [10, 250]","def test_find_divisible_by_5_and_6_not_12():
    assert find_divisible_by_5_and_6_not_12([30, 60, 90]) == [30, 90]
    assert find_divisible_by_5_and_6_not_12([12, 24, 36]) is None
    assert find_divisible_by_5_and_6_not_12([]) is None"
