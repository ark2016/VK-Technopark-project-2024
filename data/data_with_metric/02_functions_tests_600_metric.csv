Function,Test,coverage_percent,Errors
"def is_even(n):
    if n < 0:
        print(""Negative number, can't be checked for evenness."")
        return False
    if n % 2 == 0:
        return True
    else:
        if n == 1:
            print(""One is odd!"")
        return False","def test_is_even():
    assert is_even(4) is True
    assert is_even(0) is True
    assert is_even(2) is True
    assert is_even(3) is False
    assert is_even(1) is False
    assert is_even(7) is False
    assert is_even(-2) is False
    assert is_even(-3) is False
    assert is_even(-7) is False",100.0,0
"def factorial(n):
    if n < 0:
        print(""Factorial is not defined for negative numbers!"")
        return None
    if n == 0:
        return 1
    result = 1
    for i in range(1, n + 1):
        if i % 2 == 0:
            result *= i
        else:
            result *= i
            if i == n:
                print(f""Factorial of {n} is {result}"")
    return result","def test_factorial():
    assert factorial(5) == 120
    assert factorial(0) == 1
    assert factorial(-1) is None
    assert factorial(-12) is None
    assert factorial(-5) is None
    assert factorial(1) == 1
    assert factorial(2) == 2
    assert factorial(4) == 24",100.0,0
"def count_vowels(s):
    vowels = ""aeiou""
    vowels_count = 0
    consonants_count = 0
    for char in s:
        if char in vowels:
            vowels_count += 1
        elif char.isalpha():
            consonants_count += 1
    if vowels_count > consonants_count:
        return True
    return False","def test_count_vowels():
    assert count_vowels(""hello"") is False
    assert count_vowels(""aeioubcd"") is True
    assert count_vowels(""aeiou"") is True
    assert count_vowels(""bcd"") is False
    assert count_vowels(""xylophone"") is False
    assert count_vowels(""consonant"") is False
    assert count_vowels(""aaaabbbbcccc"") is False",100.0,0
"def count_even_numbers(lst):
    even_count = 0
    odd_count = 0
    for num in lst:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    if even_count > odd_count:
        return True
    return False","def test_count_even_numbers():
    assert count_even_numbers([1, 2, 3, 4, 5]) is False
    assert count_even_numbers([2, 4, 6, 8]) is True
    assert count_even_numbers([1, 3, 5, 7]) is False
    assert count_even_numbers([0, 1, 2, 3, 4]) is True
    assert count_even_numbers([2, 3, 4, 1, 6]) is True
    assert count_even_numbers([2, 1, 2, 1, 2]) is True",100.0,0
"def sum_up_to_n(n):
    if n < 0:
        print(""Negative number provided!"")
        return 0
    total = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            total += i
        else:
            if i % 3 == 0:
                total += i * 2
    if total > 100:
        print(""Big sum!"")
    return total","def test_sum_up_to_n():
    assert sum_up_to_n(10) == 54
    assert sum_up_to_n(5) == 12
    assert sum_up_to_n(0) == 0
    assert sum_up_to_n(-1) == 0
    assert sum_up_to_n(3) == 8
    assert sum_up_to_n(20) == 164
    assert sum_up_to_n(2) == 2",100.0,0
"def is_palindrome(s):
    if len(s) == 0:
        print(""Empty string!"")
        return False
    s = s.lower()
    if s == s[::-1]:
        return True
    else:
        print(""This is not a palindrome"")
        return False","def test_is_palindrome():
    assert is_palindrome(""radar"") is True
    assert is_palindrome(""hello"") is False
    assert is_palindrome(""level"") is True
    assert is_palindrome(""empty"") is False
    assert is_palindrome(""madam"") is True
    assert is_palindrome("" "") is True
    assert is_palindrome("""") is False",100.0,0
"def fibonacci(n):
    if n <= 0:
        print(""Please provide a positive number"")
        return []
    a, b = 0, 1
    result = [a]
    while b <= n:
        result.append(b)
        a, b = b, a + b
        if b > n:
            break
    return result","def test_fibonacci():
    assert fibonacci(5) == [0, 1, 1, 2, 3, 5]
    assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]
    assert fibonacci(1) == [0, 1, 1]
    assert fibonacci(0) == []
    assert fibonacci(-1) == []
    assert fibonacci(2) == [0, 1, 1, 2]
    assert fibonacci(7) == [0, 1, 1, 2, 3, 5]",100.0,0
"def find_max(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return None
    max_val = lst[0]
    for num in lst:
        if num > max_val:
            max_val = num
        if num == 5:
            print(""Five found!"")
    return max_val","def test_find_max():
    assert find_max([1, 2, 3, 4, 5]) == 5
    assert find_max([5, 4, 3, 2, 1]) == 5
    assert find_max([1, 2, 3, 4, 0]) == 4
    assert find_max([0, 0, 0, 0]) == 0
    assert find_max([-1, -2, -3, -4]) == -1
    assert find_max([5, 1, 5, 2, 5]) == 5
    assert find_max([]) is None",100.0,0
"def find_min(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return None
    min_val = lst[0]
    for num in lst:
        if num < min_val:
            min_val = num
        if num == 10:
            print(""Ten found!"")
    return min_val","def test_find_min():
    assert find_min([1, 2, 3, 4, 5]) == 1
    assert find_min([5, 4, 3, 2, 1]) == 1
    assert find_min([1, 2, 3, 4, 0]) == 0
    assert find_min([0, 0, 0, 0]) == 0
    assert find_min([-1, -2, -3, -4]) == -4
    assert find_min([5, 1, 5, 2, 5]) == 1
    assert find_min([5, 1, 10, 2, 5]) == 1
    assert find_min([]) is None",100.0,0
"def sum_list(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return 0
    total = 0
    for num in lst:
        total += num
        if num == 0:
            print(""Zero encountered!"")
            total -= num
    return total","def test_sum_list():
    assert sum_list([1, 2, 3, 4, 5]) == 15
    assert sum_list([5, 5, 5, 5]) == 20
    assert sum_list([0, 1, 2, 3]) == 6
    assert sum_list([0, 0, 0, 0]) == 0
    assert sum_list([-1, -2, -3, -4]) == -10
    assert sum_list([1, 1, 1, 1]) == 4
    assert sum_list([]) == 0",100.0,0
"def filter_even(lst):
    result = []
    for num in lst:
        if num % 2 == 0:
            result.append(num)
        else:
            if num < 0:
                print(f""Negative number {num} skipped!"")
    if len(result) == 0:
        print(""No even numbers found."")
    return result","def test_filter_even():
    assert filter_even([1, 2, 3, 4, 5]) == [2, 4]
    assert filter_even([5, 5, 5, 5]) == []
    assert filter_even([0, 1, 2, 3]) == [0, 2]
    assert filter_even([0, 0, 0, 0]) == [0, 0, 0, 0]
    assert filter_even([-1, -2, -3, -4]) == [-2, -4]
    assert filter_even([1, 1, 1, 1]) == []
    assert filter_even([]) == []",100.0,0
"def filter_odd(lst):
    result = []
    for num in lst:
        if num % 2 != 0:
            result.append(num)
        else:
            if num == 0:
                print(""Zero is neither odd nor even!"")
    if len(result) == 0:
        print(""No odd numbers found."")
    return result","def test_filter_odd():
    assert filter_odd([1, 2, 3, 4, 5]) == [1, 3, 5]
    assert filter_odd([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert filter_odd([0, 1, 2, 3]) == [1, 3]
    assert filter_odd([0, 0, 0, 0]) == []
    assert filter_odd([-1, -2, -3, -4]) == [-1, -3]
    assert filter_odd([1, 1, 1, 1]) == [1, 1, 1, 1]
    assert filter_odd([]) == []",100.0,0
"def reverse_string(s):
    if len(s) == 0:
        print(""Empty string!"")
        return s
    reversed_s = s[::-1]
    if s == reversed_s:
        print(""String is the same when reversed!"")
    return reversed_s","def test_reverse_string():
    assert reverse_string(""hello"") == ""olleh""
    assert reverse_string(""radar"") == ""radar""
    assert reverse_string(""world"") == ""dlrow""
    assert reverse_string("""") == """"
    assert reverse_string(""a"") == ""a""
    assert reverse_string(""madam"") == ""madam""
    assert reverse_string(""Python"") == ""nohtyP""",100.0,0
"def count_words(s):
    words = s.split()
    count = len(words)
    if count == 1:
        print(""Only one word in the string."")
    elif count > 10:
        print(""Too many words!"")
    return count","def test_count_words():
    assert count_words(""This is a test"") == 4
    assert count_words(""Hello World"") == 2
    assert count_words(""Single"") == 1
    assert count_words("""") == 0
    assert count_words(""One Two Three"") == 3
    assert count_words(""Too many words here"") == 4
    assert count_words(""This sentence is longer than ten words and needs a test"") == 11",100.0,0
"def power(base, exp):
    if base == 0 and exp == 0:
        print(""Indeterminate form (0^0)!"")
        return None
    if exp < 0:
        print(""Negative exponent, calculating reciprocal."")
        base = 1 / base
        exp = -exp
    result = 1
    for _ in range(exp):
        result *= base
    return result","def test_power():
    assert power(2, 3) == 8
    assert power(0, 0) is None
    assert power(3, 0) == 1
    assert power(0, 3) == 0
    assert power(2, -2) == 0.25
    assert power(5, 1) == 5
    assert power(3, 3) == 27",100.0,0
"def average(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return 0
    total = sum(lst)
    count = len(lst)
    if total == 0:
        print(""Sum is zero!"")
    return total / count","def test_average():
    assert average([1, 2, 3, 4, 5]) == 3
    assert average([0, 0, 0, 0]) == 0
    assert average([10, 20, 30, 40]) == 25
    assert average([-1, -2, -3, -4]) == -2.5
    assert average([5, 5, 5, 5]) == 5
    assert average([1, 2]) == 1.5
    assert average([]) == 0",100.0,0
"def sum_until_negative(lst):
    total = 0
    for num in lst:
        if num < 0:
            print(f""Negative number {num} encountered, stopping!"")
            break
        total += num
    return total","def test_sum_until_negative():
    assert sum_until_negative([1, 2, 3, -1, 5]) == 6
    assert sum_until_negative([5, 5, 5, 5]) == 20
    assert sum_until_negative([0, 1, 2, 3]) == 6
    assert sum_until_negative([0, 0, 0, 0]) == 0
    assert sum_until_negative([-1, -2, -3, -4]) == 0
    assert sum_until_negative([1, 2, 3, 4]) == 10",100.0,0
"def find_primes(n):
    if n < 2:
        print(""There are no primes less than 2."")
        return []
    primes = []
    for num in range(2, n + 1):
        is_prime = True
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
        else:
            if num == 4:
                print(""4 is not a prime!"")
    return primes","def test_find_primes():
    assert find_primes(10) == [2, 3, 5, 7]
    assert find_primes(1) == []
    assert find_primes(2) == [2]
    assert find_primes(20) == [2, 3, 5, 7, 11, 13, 17, 19]
    assert find_primes(0) == []
    assert find_primes(-5) == []
    assert find_primes(4) == [2, 3]",100.0,0
"def sum_exclude_multiples_of_three(n):
    total = 0
    for i in range(1, n + 1):
        if i % 3 == 0:
            continue
        total += i
    if total > 50:
        print(""Large sum!"")
    return total","def test_sum_exclude_multiples_of_three():
    assert sum_exclude_multiples_of_three(10) == 37
    assert sum_exclude_multiples_of_three(3) == 3
    assert sum_exclude_multiples_of_three(6) == 12
    assert sum_exclude_multiples_of_three(0) == 0
    assert sum_exclude_multiples_of_three(1) == 1
    assert sum_exclude_multiples_of_three(5) == 12
    assert sum_exclude_multiples_of_three(20) == 147",100.0,0
"def is_prime(n):
    if n <= 1:
        print(f""{n} is not a prime."")
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            print(f""{n} is divisible by {i}, not prime!"")
            return False
    return True","def test_is_prime():
    assert is_prime(2) is True
    assert is_prime(3) is True
    assert is_prime(4) is False
    assert is_prime(5) is True
    assert is_prime(0) is False
    assert is_prime(1) is False
    assert is_prime(17) is True
    assert is_prime(-3) is False",100.0,0
"def range_list(a, b):
    if a > b:
        print(f""Range is invalid: {a} > {b}"")
        return []
    return [i for i in range(a, b + 1)]","def test_range_list():
    assert range_list(1, 5) == [1, 2, 3, 4, 5]
    assert range_list(5, 5) == [5]
    assert range_list(0, 3) == [0, 1, 2, 3]
    assert range_list(3, 1) == []
    assert range_list(10, 7) == []
    assert range_list(-5, 0) == [-5, -4, -3, -2, -1, 0]",100.0,0
"def product_list(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return 1
    product = 1
    for num in lst:
        if num == 0:
            print(""Zero encountered, skipping it!"")
            continue
        product *= num
    return product","def test_product_list():
    assert product_list([1, 2, 3]) == 6
    assert product_list([1, 0, 3]) == 3
    assert product_list([0, 0, 0]) == 1
    assert product_list([]) == 1
    assert product_list([5, 7]) == 35
    assert product_list([1, -2, 3]) == -6",100.0,0
"def intersect_lists(lst1, lst2):
    result = []
    for x in lst1:
        if x in lst2:
            result.append(x)
    if len(result) == 0:
        print(""No common elements found."")
    return result","def test_intersect_lists():
    assert intersect_lists([1, 2, 3], [3, 4, 5]) == [3]
    assert intersect_lists([1, 2], [3, 4]) == []
    assert intersect_lists([5, 6], [6, 7]) == [6]
    assert intersect_lists([], [1, 2, 3]) == []
    assert intersect_lists([1, 2, 3], []) == []
    assert intersect_lists([10, 20], [20, 30]) == [20]",100.0,0
"def remove_duplicates(lst):
    unique_lst = []
    for num in lst:
        if num not in unique_lst:
            unique_lst.append(num)
    if len(unique_lst) == len(lst):
        print(""No duplicates found."")
    return unique_lst","def test_remove_duplicates():
    assert remove_duplicates([1, 2, 3, 2, 1]) == [1, 2, 3]
    assert remove_duplicates([1, 1, 1]) == [1]
    assert remove_duplicates([1, 2, 3]) == [1, 2, 3]
    assert remove_duplicates([10, 20, 20, 30]) == [10, 20, 30]
    assert remove_duplicates([1, 1, 1, 2, 2, 2]) == [1, 2]
    assert remove_duplicates([1, 2, 2, 1]) == [1, 2]",100.0,0
"def gcd(a, b):
    while b:
        a, b = b, a % b
    if a == 1:
        print(""Numbers are co-prime."")
    return a","def test_gcd():
    assert gcd(12, 15) == 3
    assert gcd(100, 25) == 25
    assert gcd(7, 13) == 1
    assert gcd(0, 5) == 5
    assert gcd(5, 0) == 5
    assert gcd(14, 49) == 7",100.0,0
"def lcm(a, b):
    if a == 0 or b == 0:
        print(""Zero cannot have an LCM."")
        return None

    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    result = abs(a * b) // gcd(a, b)
    if result > 1000:
        print(""The LCM is quite large!"")
    return result","def test_lcm():
    assert lcm(4, 5) == 20
    assert lcm(3, 7) == 21
    assert lcm(0, 5) is None
    assert lcm(10, 15) == 30
    assert lcm(25, 40) == 200
    assert lcm(8, 12) == 24
    assert lcm(1000, 1001) == 1001000",100.0,0
"def count_occurrences(lst, num):
    count = 0
    for val in lst:
        if val == num:
            count += 1
        else:
            if val % 2 == 0:
                print(f""Even number {val} encountered."")
    if count == 0:
        print(f""{num} not found in the list."")
    return count","def test_count_occurrences():
    assert count_occurrences([1, 2, 3, 1], 1) == 2
    assert count_occurrences([2, 4, 6], 2) == 1
    assert count_occurrences([1, 1, 1, 1], 2) == 0
    assert count_occurrences([10, 20, 10], 10) == 2
    assert count_occurrences([1, 3, 1, 2], 5) == 0
    assert count_occurrences([0, 2, 0, 4], 0) == 2",100.0,0
"def is_number(s):
    if not s:
        print(""Empty string can't be a number."")
        return False
    if s.replace(""."", """", 1).isdigit():
        return True
    else:
        print(""This is not a valid number!"")
        return False","def test_is_number():
    assert is_number(""123"") is True
    assert is_number(""12.34"") is True
    assert is_number("""") is False
    assert is_number(""abc"") is False
    assert is_number(""123abc"") is False
    assert is_number(""-123"") is False",100.0,0
"def square_non_negative(n):
    if n < 0:
        print(f""Negative number {n} can't be squared!"")
        return None
    return n ** 2","def test_square_non_negative():
    assert square_non_negative(4) == 16
    assert square_non_negative(0) == 0
    assert square_non_negative(-4) is None
    assert square_non_negative(5) == 25
    assert square_non_negative(-10) is None
    assert square_non_negative(10) == 100",100.0,0
"def longest_common_subsequence(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    if dp[m][n] == 0:
        print(""No common subsequence found."")
    return dp[m][n]","def test_longest_common_subsequence():
    assert longest_common_subsequence(""abc"", ""ac"") == 2
    assert longest_common_subsequence(""abcdef"", ""abdf"") == 4
    assert longest_common_subsequence(""abc"", ""xyz"") == 0
    assert longest_common_subsequence(""abc"", """") == 0
    assert longest_common_subsequence(""12345"", ""54321"") == 1
    assert longest_common_subsequence("""", """") == 0",100.0,0
"def find_index(lst, elem):
    for i, val in enumerate(lst):
        if val == elem:
            return i
    print(f""Element {elem} not found."")
    return -1","def test_find_index():
    assert find_index([1, 2, 3], 2) == 1
    assert find_index([10, 20, 30], 40) == -1
    assert find_index([1, 2, 3, 4], 1) == 0
    assert find_index([], 1) == -1
    assert find_index([10, 20], 20) == 1
    assert find_index([1, 1, 1], 1) == 0",100.0,0
"def unique_chars(s):
    unique = []
    for char in s:
        if char not in unique:
            unique.append(char)
        else:
            if char == "" "":
                print(""Space character skipped."")
    return ''.join(unique)","def test_unique_chars():
    assert unique_chars(""aabcc"") == ""abc""
    assert unique_chars(""abcd"") == ""abcd""
    assert unique_chars(""aabbcc"") == ""abc""
    assert unique_chars(""aabb  cc"") == ""ab c""
    assert unique_chars(""abcdabcd"") == ""abcd""
    assert unique_chars("""") == """"",100.0,0
"def count_multiples_of_five(a, b):
    if a > b:
        print(""Invalid range, start must be less than end."")
        return 0
    count = 0
    for i in range(a, b + 1):
        if i % 5 == 0:
            count += 1
    return count","def test_count_multiples_of_five():
    assert count_multiples_of_five(1, 10) == 2
    assert count_multiples_of_five(10, 1) == 0
    assert count_multiples_of_five(0, 5) == 2
    assert count_multiples_of_five(5, 5) == 1
    assert count_multiples_of_five(10, 20) == 3
    assert count_multiples_of_five(12, 18) == 1
    assert count_multiples_of_five(1, 4) == 0",100.0,0
"def is_leap_year(year):
    if year % 400 == 0:
        return True
    elif year % 100 == 0:
        return False
    elif year % 4 == 0:
        return True
    return False","def test_is_leap_year():
    assert is_leap_year(2020) is True
    assert is_leap_year(2024) is True
    assert is_leap_year(1900) is False
    assert is_leap_year(2000) is True
    assert is_leap_year(2023) is False
    assert is_leap_year(2004) is True",100.0,0
"def max_min_difference_1(lst):
    if len(lst) == 0:
        print(""List is empty!"")
        return None
    max_val = max(lst)
    min_val = min(lst)
    return max_val - min_val","def test_max_min_difference_1():
    assert max_min_difference_1([1, 2, 3, 4]) == 3
    assert max_min_difference_1([10, 5]) == 5
    assert max_min_difference_1([1, 1, 1, 1]) == 0
    assert max_min_difference_1([0, 2, 0]) == 2
    assert max_min_difference_1([100]) == 0
    assert max_min_difference_1([]) is None",100.0,0
"def is_anagram(s1, s2):
    if len(s1) != len(s2):
        print(""Strings are of different lengths!"")
        return False
    return sorted(s1) == sorted(s2)","def test_is_anagram():
    assert is_anagram(""listen"", ""silent"") is True
    assert is_anagram(""hello"", ""world"") is False
    assert is_anagram(""evil"", ""vile"") is True
    assert is_anagram(""abc"", ""acb"") is True
    assert is_anagram(""abc"", ""abcd"") is False
    assert is_anagram(""123"", ""321"") is True",100.0,0
"def sum_of_squares(lst):
    total = 0
    for num in lst:
        if num < 0:
            print(f""Negative number {num} skipped."")
            continue
        total += num ** 2
    return total","def test_sum_of_squares():
    assert sum_of_squares([1, 2, 3]) == 14
    assert sum_of_squares([0, 4, 5]) == 41
    assert sum_of_squares([-1, -2, -3]) == 0
    assert sum_of_squares([1, 2, 3, 4]) == 30
    assert sum_of_squares([]) == 0
    assert sum_of_squares([1, 0, 1]) == 2",100.0,0
"def geometric_mean(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return None
    product = 1
    for x in lst:
        if x == 0:
            print(""Zero in list, skipped!"")
            continue
        product *= x
    return product ** (1 / len(lst))","def test_geometric_mean():
    assert geometric_mean([1, 2, 3]) == 1.8171205928321397
    assert geometric_mean([5, 5, 5]) == 5.0
    assert geometric_mean([1, 1, 1]) == 1.0
    assert geometric_mean([0, 1, 2]) == 1.2599210498948732
    assert geometric_mean([]) is None
    assert geometric_mean([3, 2, 4]) == 2.8844991406148166",100.0,0
"def find_duplicates(lst):
    duplicates = []
    for x in set(lst):
        if lst.count(x) > 1:
            duplicates.append(x)
    if len(duplicates) == 0:
        print(""No duplicates found."")
    return duplicates","def test_find_duplicates():
    assert find_duplicates([1, 2, 3, 2]) == [2]
    assert find_duplicates([1, 1, 1]) == [1]
    assert find_duplicates([4, 5, 6]) == []
    assert find_duplicates([10, 20, 20, 30]) == [20]
    assert find_duplicates([2, 3, 2, 3]) == [2, 3]
    assert find_duplicates([1, 1, 2, 3, 3]) == [1, 3]",100.0,0
"def square_list(lst):
    return [x ** 2 for x in lst if x >= 0]","def test_square_list():
    assert square_list([1, 2, 3]) == [1, 4, 9]
    assert square_list([0, -1, -2]) == [0]
    assert square_list([5, 6]) == [25, 36]
    assert square_list([-1, -3, 2]) == [4]
    assert square_list([]) == []
    assert square_list([4, 0, -5]) == [16, 0]",100.0,0
"def contains_digits(s):
    for char in s:
        if char.isdigit():
            return True
    print(""No digits in the string."")
    return False","def test_contains_digits():
    assert contains_digits(""123abc"") is True
    assert contains_digits(""abcdef"") is False
    assert contains_digits(""abc1"") is True
    assert contains_digits("""") is False
    assert contains_digits(""123"") is True
    assert contains_digits(""no digits here!"") is False",100.0,0
"def greater_than(lst, n):
    result = []
    for x in lst:
        if x > n:
            result.append(x)
        else:
            print(f""Number {x} is not greater than {n}"")
    return result","def test_greater_than():
    assert greater_than([1, 2, 3, 4], 2) == [3, 4]
    assert greater_than([5, 6, 7], 7) == []
    assert greater_than([10, 20, 30], 25) == [30]
    assert greater_than([-1, 0, 1], 0) == [1]
    assert greater_than([], 0) == []
    assert greater_than([2, 2, 2], 2) == []",100.0,0
"def sum_even_up_to_n(n):
    if n < 0:
        print(""Negative input, summing starts from 1."")
        n = 1
    return sum(i for i in range(1, n + 1) if i % 2 == 0)","def test_sum_even_up_to_n():
    assert sum_even_up_to_n(10) == 30
    assert sum_even_up_to_n(1) == 0
    assert sum_even_up_to_n(0) == 0
    assert sum_even_up_to_n(-5) == 0
    assert sum_even_up_to_n(7) == 12
    assert sum_even_up_to_n(2) == 2",100.0,0
"def reverse_range(n):
    if n <= 0:
        print(""Invalid range. Starting number should be positive."")
        return []
    return [i for i in range(n, 0, -1)]","def test_reverse_range():
    assert reverse_range(5) == [5, 4, 3, 2, 1]
    assert reverse_range(1) == [1]
    assert reverse_range(0) == []
    assert reverse_range(-1) == []
    assert reverse_range(10) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    assert reverse_range(2) == [2, 1]",100.0,0
"def common_element(lst1, lst2):
    for x in lst1:
        if x in lst2:
            return x
    print(""No common elements found."")
    return None","def test_common_element():
    assert common_element([1, 2, 3], [3, 4, 5]) == 3
    assert common_element([10, 20, 30], [5, 15, 20]) == 20
    assert common_element([1, 2, 3], [4, 5, 6]) is None
    assert common_element([], [1, 2, 3]) is None
    assert common_element([1, 2, 3], []) is None
    assert common_element([1, 2, 3], [1, 2, 3]) == 1",100.0,0
"def extract_numbers(s):
    return [int(x) for x in s.split() if x.isdigit()]","def test_extract_numbers():
    assert extract_numbers(""1 2 3 abc 4 5 6"") == [1, 2, 3, 4, 5, 6]
    assert extract_numbers(""no numbers here"") == []
    assert extract_numbers(""123"") == [123]
    assert extract_numbers("""") == []
    assert extract_numbers(""56 78"") == [56, 78]
    assert extract_numbers(""1 2 three"") == [1, 2]",100.0,0
"def trimmed_mean(lst):
    if len(lst) <= 2:
        print(""Too few elements to calculate trimmed mean."")
        return None
    lst.sort()
    return sum(lst[1:-1]) / len(lst[1:-1])","def test_trimmed_mean():
    assert trimmed_mean([1, 2, 3, 4, 5]) == 3
    assert trimmed_mean([10, 10, 10, 10, 10, 10]) == 10
    assert trimmed_mean([1, 2]) is None
    assert trimmed_mean([10]) is None
    assert trimmed_mean([]) is None
    assert trimmed_mean([1, 3, 3, 6, 7, 8, 9]) == 5.4",100.0,0
"def all_substrings(s):
    substrings = []
    for i in range(len(s)):
        for j in range(i + 1, len(s) + 1):
            substrings.append(s[i:j])
    return substrings","def test_all_substrings():
    assert all_substrings(""abc"") == [""a"", ""ab"", ""abc"", ""b"", ""bc"", ""c""]
    assert all_substrings(""ab"") == [""a"", ""ab"", ""b""]
    assert all_substrings(""a"") == [""a""]
    assert all_substrings("""") == []
    assert all_substrings(""xyz"") == [""x"", ""xy"", ""xyz"", ""y"", ""yz"", ""z""]
    assert all_substrings(""abca"") == [""a"", ""ab"", ""abc"", ""abca"", ""b"", ""bc"", ""bca"", ""c"", ""ca"", ""a""]",100.0,0
"def divisible_by_three(lst):
    result = []
    for x in lst:
        if x % 3 == 0:
            result.append(x)
    return result","def test_divisible_by_three():
    assert divisible_by_three([3, 6, 9, 12]) == [3, 6, 9, 12]
    assert divisible_by_three([1, 2, 4, 5]) == []
    assert divisible_by_three([0, 3, 6]) == [0, 3, 6]
    assert divisible_by_three([-3, -6, -9]) == [-3, -6, -9]
    assert divisible_by_three([4, 5, 6, 7, 8, 9]) == [6, 9]
    assert divisible_by_three([]) == []",100.0,0
"def unique_char_count(s):
    return len(set(s))","def test_unique_char_count():
    assert unique_char_count(""abcdef"") == 6
    assert unique_char_count(""aabbcc"") == 3
    assert unique_char_count(""abcABC"") == 6
    assert unique_char_count("""") == 0
    assert unique_char_count(""a"") == 1
    assert unique_char_count(""aaaa"") == 1",100.0,0
"def is_valid_email(email):
    if ""@"" not in email:
        print(""Missing '@' in the email address."")
        return False
    if ""."" not in email.split(""@"")[1]:
        print(""Missing '.' after '@'."")
        return False
    return True","def test_is_valid_email():
    assert is_valid_email(""test@example.com"") is True
    assert is_valid_email(""test.example.com"") is False
    assert is_valid_email(""test@.com"") is True
    assert is_valid_email(""test@com"") is False
    assert is_valid_email(""test@e.com"") is True
    assert is_valid_email("""") is False",100.0,0
"def max_consecutive_chars(s):
    max_len = 1
    current_len = 1
    for i in range(1, len(s)):
        if s[i] == s[i - 1]:
            current_len += 1
            max_len = max(max_len, current_len)
        else:
            current_len = 1
    return max_len","def test_max_consecutive_chars():
    assert max_consecutive_chars(""aaabbccc"") == 3
    assert max_consecutive_chars(""abcd"") == 1
    assert max_consecutive_chars(""aabbaa"") == 2
    assert max_consecutive_chars("""") == 1
    assert max_consecutive_chars(""a"") == 1
    assert max_consecutive_chars(""aaabbbaaacccddd"") == 3",100.0,0
"def median(lst):
    if len(lst) == 0:
        print(""List is empty!"")
        return None
    lst.sort()
    n = len(lst)
    if n % 2 == 0:
        return (lst[n // 2 - 1] + lst[n // 2]) / 2
    return lst[n // 2]","def test_median():
    assert median([3, 1, 2]) == 2
    assert median([4, 1, 3, 2]) == 2.5
    assert median([]) is None
    assert median([1]) == 1
    assert median([1, 2, 3, 4, 5]) == 3
    assert median([1, 1, 1, 1, 1]) == 1",100.0,0
"def most_frequent(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return None
    freq = {}
    for num in lst:
        freq[num] = freq.get(num, 0) + 1
    return max(freq, key=freq.get)","def test_most_frequent():
    assert most_frequent([1, 2, 2, 3, 3, 3]) == 3
    assert most_frequent([4, 4, 4, 4]) == 4
    assert most_frequent([1, 1, 2, 2, 3, 3]) == 1
    assert most_frequent([5]) == 5
    assert most_frequent([]) is None
    assert most_frequent([1, 2, 3, 4, 5]) == 1",100.0,0
"def remove_spaces(s):
    return s.replace("" "", """")","def test_remove_spaces():
    assert remove_spaces(""hello world"") == ""helloworld""
    assert remove_spaces("" "") == """"
    assert remove_spaces("""") == """"
    assert remove_spaces(""a b c"") == ""abc""
    assert remove_spaces(""no_spaces"") == ""no_spaces""
    assert remove_spaces(""  leading and trailing spaces  "") == ""leadingandtrailingspaces""",100.0,0
"def first_last(lst):
    if len(lst) == 0:
        print(""Empty list!"")
        return None, None
    return lst[0], lst[-1]","def test_first_last():
    assert first_last([1, 2, 3, 4]) == (1, 4)
    assert first_last([5]) == (5, 5)
    assert first_last([]) == (None, None)
    assert first_last([10, 20, 30, 40]) == (10, 40)
    assert first_last([0]) == (0, 0)
    assert first_last([1, 1, 1, 1]) == (1, 1)",100.0,0
"def join_with_space(str1, str2):
    return str1 + "" "" + str2","def test_join_with_space():
    assert join_with_space(""hello"", ""world"") == ""hello world""
    assert join_with_space(""a"", ""b"") == ""a b""
    assert join_with_space("""", ""empty"") == "" empty""
    assert join_with_space(""empty"", """") == ""empty ""
    assert join_with_space("""", """") == "" ""
    assert join_with_space(""one"", ""two"") == ""one two""",100.0,0
"def is_positive(n):
    if n == 0:
        print(""Zero is neither positive nor negative."")
        return False
    return n > 0","def test_is_positive():
    assert is_positive(5) is True
    assert is_positive(-1) is False
    assert is_positive(0) is False
    assert is_positive(100) is True
    assert is_positive(-50) is False
    assert is_positive(1) is True",100.0,0
"def sum_exclude_multiples_of_two(n):
    total = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            continue
        total += i
    return total","def test_sum_exclude_multiples_of_two():
    assert sum_exclude_multiples_of_two(10) == 25
    assert sum_exclude_multiples_of_two(1) == 1
    assert sum_exclude_multiples_of_two(0) == 0
    assert sum_exclude_multiples_of_two(-5) == 0
    assert sum_exclude_multiples_of_two(5) == 9
    assert sum_exclude_multiples_of_two(7) == 16",100.0,0
"def prime_numbers(lst):
    primes = []
    for num in lst:
        if num > 1:
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    break
            else:
                primes.append(num)
    return primes","def test_prime_numbers():
    assert prime_numbers([2, 3, 4, 5, 6]) == [2, 3, 5]
    assert prime_numbers([10, 11, 12, 13, 14]) == [11, 13]
    assert prime_numbers([0, 1, 2, 3]) == [2, 3]
    assert prime_numbers([-1, -2, 2, 3]) == [2, 3]
    assert prime_numbers([4, 6, 8, 9]) == []
    assert prime_numbers([29, 31, 37, 41]) == [29, 31, 37, 41]",100.0,0
"def extract_even_numbers(s):
    numbers = [int(x) for x in s.split() if x.isdigit()]
    even_numbers = [num for num in numbers if num % 2 == 0]
    if not even_numbers:
        print(""No even numbers found in the string."")
    return even_numbers","def test_extract_even_numbers():
    assert extract_even_numbers(""1 2 3 4 5"") == [2, 4]
    assert extract_even_numbers(""10 15 20 25"") == [10, 20]
    assert extract_even_numbers(""7 9 11 13"") == []
    assert extract_even_numbers(""0 6 8 10"") == [0, 6, 8, 10]
    assert extract_even_numbers(""1 3 5 7 9"") == []",100.0,0
"def divisible_by(lst, divisor):
    if divisor == 0:
        print(""Cannot divide by zero."")
        return []
    result = [x for x in lst if x % divisor == 0]
    if not result:
        print(f""No numbers divisible by {divisor} found."")
    return result","def test_divisible_by():
    assert divisible_by([1, 2, 3, 4, 5], 2) == [2, 4]
    assert divisible_by([6, 7, 8, 9], 3) == [6, 9]
    assert divisible_by([10, 20, 30], 5) == [10, 20, 30]
    assert divisible_by([1, 2, 3], 1) == [1, 2, 3]
    assert divisible_by([1, 2, 3], 0) == []
    assert divisible_by([5, 10, 15], 7) == []",100.0,0
"def is_float(s):
    try:
        float(s)
        return True
    except ValueError:
        print(f""'{s}' is not a valid floating-point number."")
        return False","def test_is_float():
    assert is_float(""3.14"") is True
    assert is_float(""2.718"") is True
    assert is_float(""abc"") is False
    assert is_float(""123"") is True
    assert is_float(""0.0"") is True
    assert is_float(""-1.5"") is True",100.0,0
"def count_starting_with(lst, char):
    count = 0
    for string in lst:
        if string.startswith(char):
            count += 1
        else:
            if char in string:
                print(f""String '{string}' contains {char} but doesn't start with it."")
    return count","def test_count_starting_with():
    assert count_starting_with([""apple"", ""apricot"", ""banana""], 'a') == 2
    assert count_starting_with([""pear"", ""plum"", ""peach""], 'p') == 3
    assert count_starting_with([""apple"", ""banana"", ""cherry""], 'x') == 0
    assert count_starting_with([""apple"", ""banana"", ""ananas""], 'a') == 2
    assert count_starting_with([""apple"", ""banana"", ""cherry""], 'b') == 1",100.0,0
"def max_odd_number(lst):
    odd_numbers = [x for x in lst if x % 2 != 0]
    if not odd_numbers:
        print(""No odd numbers found."")
        return None
    return max(odd_numbers)","def test_max_odd_number():
    assert max_odd_number([1, 3, 5, 7, 9]) == 9
    assert max_odd_number([2, 4, 6, 8]) is None
    assert max_odd_number([10, 15, 20, 25]) == 25
    assert max_odd_number([-1, -3, -5, -7, -9]) == -1
    assert max_odd_number([]) is None",100.0,0
"def count_uppercase(s):
    count = sum(1 for char in s if char.isupper())
    if count == 0:
        print(""No uppercase letters found."")
    return count","def test_count_uppercase():
    assert count_uppercase(""Hello World!"") == 2
    assert count_uppercase(""HELLO"") == 5
    assert count_uppercase(""hello"") == 0
    assert count_uppercase(""HeLLo WoRLd!"") == 6
    assert count_uppercase(""123ABC"") == 3",100.0,0
"def is_fibonacci_number(n):
    if n < 0:
        print(""Negative numbers cannot be Fibonacci numbers."")
        return False
    a, b = 0, 1
    while b < n:
        a, b = b, a + b
    return b == n","def test_is_fibonacci_number():
    assert is_fibonacci_number(0) is False
    assert is_fibonacci_number(1) is True
    assert is_fibonacci_number(2) is True
    assert is_fibonacci_number(3) is True
    assert is_fibonacci_number(4) is False
    assert is_fibonacci_number(5) is True
    assert is_fibonacci_number(-1) is False",100.0,0
"def is_symmetric(lst):
    if lst == lst[::-1]:
        return True
    else:
        print(""List is not symmetric."")
        return False","def test_is_symmetric():
    assert is_symmetric([1, 2, 3, 2, 1]) is True
    assert is_symmetric([1, 2, 2, 1]) is True
    assert is_symmetric([1, 2, 3, 4, 5]) is False
    assert is_symmetric([]) is True
    assert is_symmetric([1, 2, 3, 4, 3, 2, 1]) is True",100.0,0
"def sum_numbers_in_string(s):
    numbers = [int(x) for x in s.split() if x.isdigit()]
    return sum(numbers)","def test_sum_numbers_in_string():
    assert sum_numbers_in_string(""1 2 3 4 5"") == 15
    assert sum_numbers_in_string(""10 20 30"") == 60
    assert sum_numbers_in_string(""abc 123 def"") == 123
    assert sum_numbers_in_string(""100"") == 100
    assert sum_numbers_in_string(""1 a 2 b 3 c"") == 6",100.0,0
"def odd_max_min_difference(lst):
    odd_numbers = [x for x in lst if x % 2 != 0]
    if not odd_numbers:
        print(""No odd numbers found."")
        return None
    return max(odd_numbers) - min(odd_numbers)","def test_odd_max_min_difference():
    assert odd_max_min_difference([1, 3, 5, 7, 9]) == 8
    assert odd_max_min_difference([2, 4, 6, 8]) is None
    assert odd_max_min_difference([10, 15, 20, 25, 30]) == 10
    assert odd_max_min_difference([-1, -3, -5, -7, -9]) == 8
    assert odd_max_min_difference([]) is None",100.0,0
"def count_digits(s):
    count = sum(1 for char in s if char.isdigit())
    return count","def test_count_digits():
    assert count_digits(""abc123"") == 3
    assert count_digits(""1234567890"") == 10
    assert count_digits(""no digits here"") == 0
    assert count_digits(""123abc456"") == 6
    assert count_digits("""") == 0",100.0,0
"def is_even_length(s):
    return len(s) % 2 == 0","def test_is_even_length():
    assert is_even_length(""abcd"") is True
    assert is_even_length(""abcde"") is False
    assert is_even_length("""") is True
    assert is_even_length(""abcdefgh"") is True
    assert is_even_length(""abc"") is False",100.0,0
"def sum_exclude_multiples_of_four(lst):
    return sum(x for x in lst if x % 4 != 0)","def test_sum_exclude_multiples_of_four():
    assert sum_exclude_multiples_of_four([1, 2, 3, 4, 5, 6, 7, 8]) == 24
    assert sum_exclude_multiples_of_four([4, 8, 12]) == 0
    assert sum_exclude_multiples_of_four([1, 2, 3]) == 6
    assert sum_exclude_multiples_of_four([]) == 0
    assert sum_exclude_multiples_of_four([5, 10, 15]) == 30",100.0,0
"def missing_min_number(lst):
    i = 0
    while i in lst:
        i += 1
    return i","def test_missing_min_number():
    assert missing_min_number([0, 1, 2, 4, 5]) == 3
    assert missing_min_number([1, 2, 3]) == 0
    assert missing_min_number([0, 1, 2, 3]) == 4
    assert missing_min_number([]) == 0
    assert missing_min_number([5, 6, 7, 8]) == 0",100.0,0
"def common_numbers(lst1, lst2):
    return [x for x in lst1 if x in lst2]","def test_common_numbers():
    assert common_numbers([1, 2, 3], [3, 4, 5]) == [3]
    assert common_numbers([6, 7, 8], [8, 9, 10]) == [8]
    assert common_numbers([1, 2, 3], [4, 5, 6]) == []
    assert common_numbers([], [1, 2, 3]) == []
    assert common_numbers([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",100.0,0
"def first_string_with_digit(lst):
    for string in lst:
        if any(char.isdigit() for char in string):
            return string
    print(""No string with digits found."")
    return None","def test_first_string_with_digit():
    assert first_string_with_digit([""abc"", ""def2"", ""ghi""]) == ""def2""
    assert first_string_with_digit([""123"", ""abc"", ""456""]) == ""123""
    assert first_string_with_digit([""abc"", ""def"", ""ghi""]) is None
    assert first_string_with_digit([""abc1"", ""def"", ""ghi""]) == ""abc1""
    assert first_string_with_digit([]) is None",100.0,0
"def count_words_starting_with(lst, char):
    return sum(1 for word in lst if word.startswith(char))","def test_count_words_starting_with():
    assert count_words_starting_with([""apple"", ""apricot"", ""banana""], 'a') == 2
    assert count_words_starting_with([""pear"", ""plum"", ""peach""], 'p') == 3
    assert count_words_starting_with([""apple"", ""banana"", ""cherry""], 'x') == 0
    assert count_words_starting_with([""apple"", ""banana"", ""ananas""], 'a') == 2
    assert count_words_starting_with([""apple"", ""banana"", ""cherry""], 'b') == 1",100.0,0
"def count_greater_than(lst, n):
    return sum(1 for x in lst if x > n)","def test_count_greater_than():
    assert count_greater_than([1, 2, 3, 4, 5], 3) == 2
    assert count_greater_than([10, 20, 30, 40], 25) == 2
    assert count_greater_than([1, 2, 3], 4) == 0
    assert count_greater_than([], 5) == 0
    assert count_greater_than([5, 6, 7, 8], 5) == 3",100.0,0
"def max_sublist_sum(lst):
    if not lst:
        print(""List is empty!"")
        return None
    max_sum = current_sum = lst[0]
    for num in lst[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum","def test_max_sublist_sum():
    assert max_sublist_sum([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 9
    assert max_sublist_sum([1, 2, 3, 4, 5]) == 15
    assert max_sublist_sum([-1, -2, -3, -4]) == -1
    assert max_sublist_sum([3, -2, 5, -1]) == 6
    assert max_sublist_sum([]) is None",100.0,0
"def max_pairwise_product(lst):
    if len(lst) < 2:
        print(""Need at least two elements!"")
        return None
    lst.sort()
    return lst[-1] * lst[-2]","def test_max_pairwise_product():
    assert max_pairwise_product([1, 2, 3, 4, 5]) == 20
    assert max_pairwise_product([5, 5, 5, 5]) == 25
    assert max_pairwise_product([1, 0, 0, 1]) == 1
    assert max_pairwise_product([-1, -2, -3, -4]) == 2
    assert max_pairwise_product([5]) is None",100.0,0
"def is_palindrome_1(s):
    s = ''.join(c.lower() for c in s if c.isalnum())
    return s == s[::-1]","def test_is_palindrome_1():
    assert is_palindrome_1(""A man, a plan, a canal, Panama"") is True
    assert is_palindrome_1(""No lemon, no melon"") is True
    assert is_palindrome_1(""Hello, World!"") is False
    assert is_palindrome_1(""Madam"") is True
    assert is_palindrome_1("""") is True
    assert is_palindrome_1(""12321"") is True
    assert is_palindrome_1(""12345"") is False
    assert is_palindrome_1(""Was it a car or a cat I saw?"") is True
    assert is_palindrome_1(""Not a palindrome"") is False",100.0,0
"def largest_divisor_less_than(n):
    if n <= 1:
        print(f""{n} doesn't have any divisors greater than 1."")
        return None
    for i in range(n - 1, 1, -1):
        if n % i == 0:
            return i
    return None","def test_largest_divisor_less_than():
    assert largest_divisor_less_than(10) == 5
    assert largest_divisor_less_than(15) == 5
    assert largest_divisor_less_than(1) is None
    assert largest_divisor_less_than(2) is None
    assert largest_divisor_less_than(3) is None
    assert largest_divisor_less_than(25) == 5
    assert largest_divisor_less_than(100) == 50
    assert largest_divisor_less_than(49) == 7
    assert largest_divisor_less_than(97) is None
    assert largest_divisor_less_than(11) is None",100.0,0
"def non_prime_numbers(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    return [x for x in lst if not is_prime(x)]","def test_non_prime_numbers():
    assert non_prime_numbers([2, 3, 4, 5, 6]) == [4, 6]
    assert non_prime_numbers([11, 13, 17, 19, 23]) == []
    assert non_prime_numbers([8, 12, 15]) == [8, 12, 15]
    assert non_prime_numbers([1, 2, 3, 5, 7]) == [1]
    assert non_prime_numbers([4, 6, 8, 9, 10]) == [4, 6, 8, 9, 10]
    assert non_prime_numbers([25, 26, 27]) == [25, 26, 27]
    assert non_prime_numbers([16, 18, 20]) == [16, 18, 20]
    assert non_prime_numbers([22, 24, 28]) == [22, 24, 28]
    assert non_prime_numbers([31, 33, 35]) == [33, 35]",100.0,0
"def max_digit_in_string(s):
    if not s.isdigit():
        print(""The string doesn't contain only digits."")
        return None
    return max(map(int, s))","def test_max_digit_in_string():
    assert max_digit_in_string(""1234567890"") == 9
    assert max_digit_in_string(""5555"") == 5
    assert max_digit_in_string(""1029384756"") == 9
    assert max_digit_in_string(""9081726354"") == 9
    assert max_digit_in_string("""") is None
    assert max_digit_in_string(""a1b2c3"") is None
    assert max_digit_in_string(""7654321"") == 7
    assert max_digit_in_string(""0000"") == 0
    assert max_digit_in_string(""2468"") == 8",100.0,0
"def largest_square(lst):
    squares = [x for x in lst if int(x ** 0.5) ** 2 == x]
    if squares:
        return max(squares)
    print(""No perfect squares found."")
    return None","def test_largest_square():
    assert largest_square([1, 4, 9, 16, 25]) == 25
    assert largest_square([3, 6, 8, 10]) is None
    assert largest_square([4, 16, 25, 36]) == 36
    assert largest_square([0, 1, 2, 3]) == 1
    assert largest_square([49, 64, 81]) == 81
    assert largest_square([10, 20, 30]) is None
    assert largest_square([5, 12, 13]) is None
    assert largest_square([100, 121, 144]) == 144
    assert largest_square([9, 25, 49]) == 49",100.0,0
"def sum_of_two_squares(lst):
    def is_sum_of_squares(n):
        for i in range(1, int(n ** 0.5) + 1):
            if (n - i ** 2) ** 0.5 == int((n - i ** 2) ** 0.5):
                return True
        return False

    return [x for x in lst if is_sum_of_squares(x)]","def test_sum_of_two_squares():
    assert sum_of_two_squares([5, 10, 13, 18]) == [5, 10, 13, 18]
    assert sum_of_two_squares([2, 3, 7, 8]) == [2, 8]
    assert sum_of_two_squares([1, 4, 9, 16]) == [1, 4, 9, 16]
    assert sum_of_two_squares([6, 11, 15, 20]) == [20]
    assert sum_of_two_squares([17, 29, 37]) == [17, 29, 37]
    assert sum_of_two_squares([49, 64, 81]) == [49, 64, 81]
    assert sum_of_two_squares([3, 5, 7, 12]) == [5]
    assert sum_of_two_squares([50, 73, 90]) == [50, 73, 90]
    assert sum_of_two_squares([25, 41, 60]) == [25, 41]",100.0,0
"def sum_of_digits_in_string(s):
    return sum(int(c) for c in s if c.isdigit())","def test_sum_of_digits_in_string():
    assert sum_of_digits_in_string(""123abc456"") == 21
    assert sum_of_digits_in_string(""789xyz"") == 24
    assert sum_of_digits_in_string(""0"") == 0
    assert sum_of_digits_in_string(""abc"") == 0
    assert sum_of_digits_in_string(""555"") == 15
    assert sum_of_digits_in_string(""12a34b56c"") == 21
    assert sum_of_digits_in_string(""111"") == 3
    assert sum_of_digits_in_string(""909"") == 18
    assert sum_of_digits_in_string(""246"") == 12",100.0,0
"def elements_less_than_mean(lst):
    if not lst:
        print(""List is empty!"")
        return []
    mean = sum(lst) / len(lst)
    return [x for x in lst if x < mean]","def test_elements_less_than_mean():
    assert elements_less_than_mean([1, 2, 3, 4, 5]) == [1, 2]
    assert elements_less_than_mean([10, 20, 30, 40, 50]) == [10, 20]
    assert elements_less_than_mean([5, 6, 7, 8, 9]) == [5, 6]
    assert elements_less_than_mean([]) == []
    assert elements_less_than_mean([3, 3, 3, 3, 3]) == []
    assert elements_less_than_mean([2, 3, 5, 7, 11]) == [2, 3, 5]
    assert elements_less_than_mean([12, 14, 16, 18]) == [12, 14]
    assert elements_less_than_mean([8, 10, 12]) == [8]
    assert elements_less_than_mean([1, 4, 9, 16]) == [1, 4]",100.0,0
"def extract_numbers_from_string(s):
    return [int(x) for x in s.split() if x.isdigit()]","def test_extract_numbers_from_string():
    assert extract_numbers_from_string(""1 2 3 a b c 4 5 6"") == [1, 2, 3, 4, 5, 6]
    assert extract_numbers_from_string(""7 8 9 x y z"") == [7, 8, 9]
    assert extract_numbers_from_string(""No numbers here"") == []
    assert extract_numbers_from_string(""10 20 30 40"") == [10, 20, 30, 40]
    assert extract_numbers_from_string(""123abc456"") == []
    assert extract_numbers_from_string(""0 1 2 3"") == [0, 1, 2, 3]
    assert extract_numbers_from_string(""Only numbers 0 100"") == [0, 100]
    assert extract_numbers_from_string(""255 512 1024"") == [255, 512, 1024]
    assert extract_numbers_from_string(""5 15 25"") == [5, 15, 25]",100.0,0
"def max_min_difference(lst):
    if not lst:
        print(""List is empty!"")
        return None
    return max(lst) - min(lst)","def test_max_min_difference():
    assert max_min_difference([1, 2, 3, 4, 5]) == 4
    assert max_min_difference([10, 20, 30, 40, 50]) == 40
    assert max_min_difference([5, 10, 15, 20]) == 15
    assert max_min_difference([]) is None
    assert max_min_difference([1]) == 0
    assert max_min_difference([100, 200, 300, 400]) == 300
    assert max_min_difference([7, 14, 21, 28]) == 21
    assert max_min_difference([9, 18, 27, 36]) == 27
    assert max_min_difference([3, 6, 9, 12]) == 9",100.0,0
"def first_divisible_by_2_and_5(lst):
    for x in lst:
        if x % 2 == 0 and x % 5 == 0:
            return x
    print(""No number divisible by both 2 and 5 found."")
    return None","def test_first_divisible_by_2_and_5():
    assert first_divisible_by_2_and_5([1, 3, 5, 10]) == 10
    assert first_divisible_by_2_and_5([20, 15, 25, 30]) == 20
    assert first_divisible_by_2_and_5([1, 2, 3, 4]) is None
    assert first_divisible_by_2_and_5([50, 60, 70]) == 50
    assert first_divisible_by_2_and_5([21, 35, 49]) is None
    assert first_divisible_by_2_and_5([100, 200, 300]) == 100
    assert first_divisible_by_2_and_5([]) is None
    assert first_divisible_by_2_and_5([6, 9, 12, 18]) is None
    assert first_divisible_by_2_and_5([25, 50, 75]) == 50",100.0,0
"def square_if_number(s):
    try:
        number = float(s)
        return number ** 2
    except ValueError:
        print(f""'{s}' is not a valid number."")
        return None","def test_square_if_number():
    assert square_if_number(""4"") == 16.0
    assert square_if_number(""2.5"") == 6.25
    assert square_if_number(""-3"") == 9.0
    assert square_if_number(""abc"") is None
    assert square_if_number(""0"") == 0.0
    assert square_if_number(""10"") == 100.0
    assert square_if_number(""3.14"") == 9.8596
    assert square_if_number("""") is None
    assert square_if_number(""1.5e2"") == 22500.0",100.0,0
"def count_non_prime(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    return sum(1 for x in lst if not is_prime(x))","def test_count_non_prime():
    assert count_non_prime([2, 3, 4, 5, 6]) == 2
    assert count_non_prime([10, 12, 14]) == 3
    assert count_non_prime([11, 13, 17]) == 0
    assert count_non_prime([1, 2, 3, 4]) == 2
    assert count_non_prime([9, 15, 21]) == 3
    assert count_non_prime([4, 6, 8, 10]) == 4
    assert count_non_prime([5, 7, 11, 13]) == 0
    assert count_non_prime([0, 1, 2, 3, 4]) == 3
    assert count_non_prime([25, 36, 49]) == 3",100.0,0
"def palindromic_elements(lst):
    return [x for x in lst if str(x) == str(x)[::-1]]","def test_palindromic_elements():
    assert palindromic_elements([""121"", ""abc"", ""mam"", ""pop""]) == [""121"", ""mam"", ""pop""]
    assert palindromic_elements([""12321"", ""hello"", ""wow""]) == [""12321"", ""wow""]
    assert palindromic_elements([121, 1331, 12321]) == [121, 1331, 12321]
    assert palindromic_elements([123, 456, 789]) == []
    assert palindromic_elements([1441, 1221, 101]) == [1441, 1221, 101]
    assert palindromic_elements([]) == []
    assert palindromic_elements([55, 66, 77]) == [55, 66, 77]
    assert palindromic_elements([""aba"", ""cdc"", ""dad""]) == [""aba"", ""cdc"", ""dad""]
    assert palindromic_elements([""a"", ""b"", ""c"", ""d""]) == [""a"", ""b"", ""c"", ""d""]",100.0,0
"def largest_power_of_two(lst):
    powers_of_two = [x for x in lst if (x & (x - 1)) == 0 and x > 0]
    if powers_of_two:
        return max(powers_of_two)
    print(""No powers of two found."")
    return None","def test_largest_power_of_two():
    assert largest_power_of_two([1, 2, 4, 8, 16]) == 16
    assert largest_power_of_two([32, 64, 128]) == 128
    assert largest_power_of_two([3, 5, 7]) is None
    assert largest_power_of_two([2, 4, 16, 32]) == 32
    assert largest_power_of_two([]) is None
    assert largest_power_of_two([10, 20, 40]) is None
    assert largest_power_of_two([6, 12, 18]) is None
    assert largest_power_of_two([256, 512, 1024]) == 1024
    assert largest_power_of_two([5, 10, 20, 40]) is None",100.0,0
"def multiples_of_six(lst):
    return [x for x in lst if x % 6 == 0]","def test_multiples_of_six():
    assert multiples_of_six([6, 12, 18, 24]) == [6, 12, 18, 24]
    assert multiples_of_six([5, 10, 15, 20]) == []
    assert multiples_of_six([36, 42, 48]) == [36, 42, 48]
    assert multiples_of_six([7, 14, 21]) == []
    assert multiples_of_six([6, 6, 6]) == [6, 6, 6]
    assert multiples_of_six([]) == []
    assert multiples_of_six([30, 60, 90]) == [30, 60, 90]
    assert multiples_of_six([11, 22, 33]) == []
    assert multiples_of_six([18, 24, 36]) == [18, 24, 36]",100.0,0
"def unique_elements(lst):
    unique = set()
    for item in lst:
        if item not in unique:
            unique.add(item)
        else:
            print(f""Duplicate found: {item}"")
    return sorted(list(unique))","def test_unique_elements():
    assert unique_elements([1, 2, 3, 1, 2]) == [1, 2, 3]
    assert unique_elements([4, 5, 6, 4, 5]) == [4, 5, 6]
    assert unique_elements([7, 8, 9]) == [7, 8, 9]
    assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
    assert unique_elements([10, 10, 10]) == [10]
    assert unique_elements([]) == []
    assert unique_elements([11, 22, 33, 22, 11]) == [11, 22, 33]
    assert unique_elements([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]
    assert unique_elements([5, 10, 15, 10, 5]) == [5, 10, 15]",100.0,0
"def count_occurrences_1(lst):
    count_dict = {}
    for item in lst:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    if not count_dict:
        print(""No elements found."")
    return count_dict","def test_count_occurrences_1():
    assert count_occurrences_1([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}
    assert count_occurrences_1([4, 5, 6, 5, 4]) == {4: 2, 5: 2, 6: 1}
    assert count_occurrences_1([7, 8, 9]) == {7: 1, 8: 1, 9: 1}
    assert count_occurrences_1([1, 1, 1, 1]) == {1: 4}
    assert count_occurrences_1([]) == {}
    assert count_occurrences_1([2, 4, 4, 6, 6, 6]) == {2: 1, 4: 2, 6: 3}
    assert count_occurrences_1([10, 20, 30, 20, 10, 30, 30]) == {10: 2, 20: 2, 30: 3}
    assert count_occurrences_1([2, 3, 4, 5, 2, 4, 5]) == {2: 2, 3: 1, 4: 2, 5: 2}
    assert count_occurrences_1([100, 100, 100, 200, 200]) == {100: 3, 200: 2}",100.0,0
"def intersection_of_lists(lst1, lst2):
    set1 = set(lst1)
    set2 = set(lst2)
    intersection = set1 & set2
    if not intersection:
        print(""No common elements found."")
    return list(intersection)","def test_intersection_of_lists():
    assert intersection_of_lists([1, 2, 3], [3, 4, 5]) == [3]
    assert intersection_of_lists([10, 20, 30], [20, 30, 40]) == [20, 30]
    assert intersection_of_lists([5, 6, 7], [8, 9, 10]) == []
    assert intersection_of_lists([1, 2, 3, 4], [4, 5, 6, 7]) == [4]
    assert intersection_of_lists([1, 1, 2, 2], [2, 2, 3, 3]) == [2]
    assert intersection_of_lists([100, 200, 300], [400, 500, 600]) == []
    assert intersection_of_lists([0, 1, 2], [2, 3, 4]) == [2]
    assert intersection_of_lists([10, 11, 12], [13, 14, 15]) == []
    assert intersection_of_lists([], [1, 2, 3]) == []
    assert intersection_of_lists([1, 2, 3], []) == []",100.0,0
"def divisible_by_any(lst, divisors):
    divisible = []
    for num in lst:
        for divisor in divisors:
            if num % divisor == 0:
                divisible.append(num)
                break
    if not divisible:
        print(""No numbers divisible by any divisor found."")
    return divisible","def test_divisible_by_any():
    assert divisible_by_any([10, 20, 30, 40], [2, 5]) == [10, 20, 30, 40]
    assert divisible_by_any([9, 18, 27, 36], [3]) == [9, 18, 27, 36]
    assert divisible_by_any([7, 14, 21], [2, 7]) == [7, 14, 21]
    assert divisible_by_any([11, 13, 17], [5, 10]) == []
    assert divisible_by_any([100, 200, 300], [2, 10]) == [100, 200, 300]
    assert divisible_by_any([8, 12, 16], [4]) == [8, 12, 16]
    assert divisible_by_any([15, 25, 35], [5]) == [15, 25, 35]
    assert divisible_by_any([1, 3, 5, 7], [2, 4]) == []
    assert divisible_by_any([100, 150, 200], [5]) == [100, 150, 200]
    assert divisible_by_any([], [2, 3]) == []",100.0,0
"def are_anagrams(s1, s2):
    if len(s1) != len(s2):
        print(""Strings are not of equal length."")
        return False
    char_count = {}
    for char in s1:
        char_count[char] = char_count.get(char, 0) + 1
    for char in s2:
        if char not in char_count or char_count[char] == 0:
            print(f""'{char}' is not in the first string or appears too many times."")
            return False
        char_count[char] -= 1
    return True","def test_are_anagrams():
    assert are_anagrams(""listen"", ""silent"") is True
    assert are_anagrams(""hello"", ""world"") is False
    assert are_anagrams(""evil"", ""vile"") is True
    assert are_anagrams(""fluster"", ""restful"") is True
    assert are_anagrams(""test"", ""TEST"") is False
    assert are_anagrams(""a"", ""a"") is True
    assert are_anagrams(""abc"", ""abcd"") is False
    assert are_anagrams("""", """") is True
    assert are_anagrams(""aabb"", ""abab"") is True
    assert are_anagrams(""aabb"", ""abac"") is False",100.0,0
"def intersection_of_sets(set1, set2):
    intersection = set1.intersection(set2)
    if not intersection:
        print(""The sets have no common elements."")
    return intersection","def test_intersection_of_sets():
    assert intersection_of_sets({1, 2, 3}, {3, 4, 5}) == {3}
    assert intersection_of_sets({1, 2, 3}, {4, 5, 6}) == set()
    assert intersection_of_sets({""a"", ""b""}, {""b"", ""c""}) == {""b""}
    assert intersection_of_sets({""a"", ""b"", ""c""}, {""a"", ""b"", ""c""}) == {""a"", ""b"", ""c""}
    assert intersection_of_sets({""x"", ""y""}, {""y"", ""z""}) == {""y""}
    assert intersection_of_sets({1}, {1}) == {1}
    assert intersection_of_sets(set(), {1, 2, 3}) == set()
    assert intersection_of_sets({1, 2, 3}, set()) == set()
    assert intersection_of_sets({""apple""}, {""banana""}) == set()
    assert intersection_of_sets({""dog""}, {""dog"", ""cat""}) == {""dog""}",100.0,0
"def remove_duplicate_tuples(lst):
    seen = set()
    result = []
    for item in lst:
        if item[0] not in seen:
            seen.add(item[0])
            result.append(item)
    return result","def test_remove_duplicate_tuples():
    assert remove_duplicate_tuples([(1, ""a""), (2, ""b""), (1, ""c"")]) == [(1, ""a""), (2, ""b"")]
    assert remove_duplicate_tuples([(1, ""a""), (1, ""b""), (1, ""c"")]) == [(1, ""a"")]
    assert remove_duplicate_tuples([(1, ""x""), (2, ""y""), (2, ""z"")]) == [(1, ""x""), (2, ""y"")]
    assert remove_duplicate_tuples([(3, ""a""), (4, ""b""), (5, ""c"")]) == [(3, ""a""), (4, ""b""), (5, ""c"")]
    assert remove_duplicate_tuples([(""a"", 1), (""b"", 2), (""a"", 3)]) == [(""a"", 1), (""b"", 2)]
    assert remove_duplicate_tuples([(""a"", 1), (""a"", 2), (""a"", 3), (""b"", 4)]) == [(""a"", 1), (""b"", 4)]
    assert remove_duplicate_tuples([]) == []
    assert remove_duplicate_tuples([(""x"", 1), (""y"", 2)]) == [(""x"", 1), (""y"", 2)]
    assert remove_duplicate_tuples([(""a"", 5), (""a"", 6), (""b"", 5)]) == [(""a"", 5), (""b"", 5)]",100.0,0
"def count_string_lengths(lst):
    length_dict = {}
    for s in lst:
        length_dict[s] = len(s)
    return length_dict","def test_count_string_lengths():
    assert count_string_lengths([""apple"", ""banana"", ""cherry""]) == {""apple"": 5, ""banana"": 6, ""cherry"": 6}
    assert count_string_lengths([""hello"", ""world""]) == {""hello"": 5, ""world"": 5}
    assert count_string_lengths([""a"", ""ab"", ""abc"", ""abcd""]) == {""a"": 1, ""ab"": 2, ""abc"": 3, ""abcd"": 4}
    assert count_string_lengths(["""", ""non-empty"", """"]) == {"""": 0, ""non-empty"": 9}
    assert count_string_lengths([]) == {}
    assert count_string_lengths([""short"", ""longer"", ""longest""]) == {""short"": 5, ""longer"": 6, ""longest"": 7}
    assert count_string_lengths([""test"", ""testing"", ""tests""]) == {""test"": 4, ""testing"": 7, ""tests"": 5}
    assert count_string_lengths([""x"", ""xx"", ""xxx"", ""xxxx""]) == {""x"": 1, ""xx"": 2, ""xxx"": 3, ""xxxx"": 4}
    assert count_string_lengths([""single"", ""word"", ""example""]) == {""single"": 6, ""word"": 4, ""example"": 7}
    assert count_string_lengths([""one"", ""two"", ""three"", ""four""]) == {""one"": 3, ""two"": 3, ""three"": 5, ""four"": 4}",100.0,0
"def most_frequent_in_dict(d):
    if not d:
        print(""Dictionary is empty."")
        return None
    max_key = max(d, key=d.get)
    return max_key, d[max_key]","def test_most_frequent_in_dict():
    assert most_frequent_in_dict(None) is None
    assert most_frequent_in_dict({""a"": 1, ""b"": 2, ""c"": 2}) == (""b"", 2)
    assert most_frequent_in_dict({""x"": 10, ""y"": 15, ""z"": 10}) == (""y"", 15)
    assert most_frequent_in_dict({""apple"": 3, ""banana"": 2, ""cherry"": 5}) == (""cherry"", 5)
    assert most_frequent_in_dict({""a"": 1, ""b"": 2, ""c"": 2, ""d"": 3}) == (""d"", 3)
    assert most_frequent_in_dict({""a"": 0, ""b"": 0, ""c"": 0}) == (""a"", 0)
    assert most_frequent_in_dict({""a"": 4}) == (""a"", 4)
    assert most_frequent_in_dict({}) is None
    assert most_frequent_in_dict({""x"": 5, ""y"": 5, ""z"": 5}) == (""x"", 5)
    assert most_frequent_in_dict({""p"": 10, ""q"": 12}) == (""q"", 12)
    assert most_frequent_in_dict({""cat"": 2, ""dog"": 3, ""rabbit"": 1}) == (""dog"", 3)",100.0,0
"def merge_dicts(d1, d2):
    merged = d1.copy()
    for key, value in d2.items():
        if key in merged:
            merged[key] += value
        else:
            merged[key] = value
    return merged","def test_merge_dicts():
    assert merge_dicts({""a"": 1, ""b"": 2}, {""b"": 3, ""c"": 4}) == {""a"": 1, ""b"": 5, ""c"": 4}
    assert merge_dicts({""x"": 5, ""y"": 6}, {""y"": 7, ""z"": 8}) == {""x"": 5, ""y"": 13, ""z"": 8}
    assert merge_dicts({""a"": 2}, {""a"": 3}) == {""a"": 5}
    assert merge_dicts({""apple"": 2, ""banana"": 3}, {""apple"": 4, ""cherry"": 5}) == {""apple"": 6, ""banana"": 3, ""cherry"": 5}
    assert merge_dicts({""a"": 1, ""b"": 2}, {}) == {""a"": 1, ""b"": 2}
    assert merge_dicts({}, {""a"": 1, ""b"": 2}) == {""a"": 1, ""b"": 2}
    assert merge_dicts({""x"": 1}, {""x"": 1}) == {""x"": 2}
    assert merge_dicts({""key1"": 10}, {""key2"": 20}) == {""key1"": 10, ""key2"": 20}
    assert merge_dicts({}, {}) == {}
    assert merge_dicts({""a"": 1}, {""b"": 2, ""a"": 3}) == {""a"": 4, ""b"": 2}",100.0,0
"def count_even_odd(lst):
    count = {""even"": 0, ""odd"": 0}
    for num in lst:
        if num % 2 == 0:
            count[""even""] += 1
        else:
            count[""odd""] += 1
    return count","def test_count_even_odd():
    assert count_even_odd([1, 2, 3, 4, 5]) == {""even"": 2, ""odd"": 3}
    assert count_even_odd([2, 4, 6]) == {""even"": 3, ""odd"": 0}
    assert count_even_odd([1, 3, 5]) == {""even"": 0, ""odd"": 3}
    assert count_even_odd([0, -2, -4, 1, 3]) == {""even"": 3, ""odd"": 2}
    assert count_even_odd([]) == {""even"": 0, ""odd"": 0}
    assert count_even_odd([2, 3, 5, 7]) == {""even"": 1, ""odd"": 3}
    assert count_even_odd([0, 2, 4, 6]) == {""even"": 4, ""odd"": 0}
    assert count_even_odd([10, 11, 12, 13, 14]) == {""even"": 3, ""odd"": 2}
    assert count_even_odd([1, 2, 3, 5, 6]) == {""even"": 2, ""odd"": 3}
    assert count_even_odd([1, 1, 1, 1]) == {""even"": 0, ""odd"": 4}",100.0,0
"def min_key_in_dict(d):
    if not d:
        print(""Dictionary is empty."")
        return None
    return min(d, key=d.get)","def test_min_key_in_dict():
    assert min_key_in_dict({""a"": 1, ""b"": 2, ""c"": 3}) == ""a""
    assert min_key_in_dict({""apple"": 10, ""banana"": 5, ""cherry"": 15}) == ""banana""
    assert min_key_in_dict({""x"": 1, ""y"": 0, ""z"": 2}) == ""y""
    assert min_key_in_dict({""a"": 100, ""b"": 50, ""c"": 150}) == ""b""
    assert min_key_in_dict({}) is None
    assert min_key_in_dict({""cat"": 5, ""dog"": 3, ""rabbit"": 8}) == ""dog""
    assert min_key_in_dict({""p"": 0, ""q"": 1}) == ""p""
    assert min_key_in_dict({""a"": -1, ""b"": 2}) == ""a""
    assert min_key_in_dict({""a"": -1, ""b"": -2}) == ""b""
    assert min_key_in_dict({""x"": 4, ""y"": 1, ""z"": 4}) == ""y""",100.0,0
"def list_to_dict(lst):
    result = {}
    for index, value in enumerate(lst):
        result[index] = value
    return result","def test_list_to_dict():
    assert list_to_dict([1, 2, 3]) == {0: 1, 1: 2, 2: 3}
    assert list_to_dict([""a"", ""b"", ""c""]) == {0: ""a"", 1: ""b"", 2: ""c""}
    assert list_to_dict([True, False, True]) == {0: True, 1: False, 2: True}
    assert list_to_dict([3.14, 2.71]) == {0: 3.14, 1: 2.71}
    assert list_to_dict([]) == {}
    assert list_to_dict([""apple"", ""banana"", ""cherry""]) == {0: ""apple"", 1: ""banana"", 2: ""cherry""}
    assert list_to_dict([10, 20, 30, 40]) == {0: 10, 1: 20, 2: 30, 3: 40}
    assert list_to_dict([1]) == {0: 1}
    assert list_to_dict([0, 0, 0]) == {0: 0, 1: 0, 2: 0}
    assert list_to_dict([""one"", ""two"", ""three""]) == {0: ""one"", 1: ""two"", 2: ""three""}",100.0,0
"def check_and_square(s):
    try:
        num = float(s)
        return num ** 2
    except ValueError:
        print(f""'{s}' is not a valid number."")
        return None","def test_check_and_square():
    assert check_and_square(""4"") == 16
    assert check_and_square(""-3"") == 9
    assert check_and_square(""2.5"") == 6.25
    assert check_and_square(""abc"") is None
    assert check_and_square(""0"") == 0
    assert check_and_square(""100"") == 10000
    assert check_and_square(""1.5"") == 2.25
    assert check_and_square(""-2"") == 4
    assert check_and_square(""1000"") == 1000000
    assert check_and_square("""") is None",100.0,0
"def merge_tuples(t1, t2):
    return tuple(sorted(set(t1 + t2)))","def test_merge_tuples():
    assert merge_tuples((1, 2), (2, 3)) == (1, 2, 3)
    assert merge_tuples((""a"", ""b""), (""b"", ""c"")) == (""a"", ""b"", ""c"")
    assert merge_tuples((1, 2, 3), (4, 5)) == (1, 2, 3, 4, 5)
    assert merge_tuples((1, 1), (1, 2)) == (1, 2)
    assert merge_tuples((""x"", ""y""), (""z"", ""y"")) == (""x"", ""y"", ""z"")
    assert merge_tuples((1, 1, 2), (2, 3)) == (1, 2, 3)
    assert merge_tuples((5, 5), (5, 6)) == (5, 6)
    assert merge_tuples((), ()) == ()
    assert merge_tuples((""a"", ""b""), (""a"", ""c"", ""d"")) == (""a"", ""b"", ""c"", ""d"")
    assert merge_tuples((""apple"", ""banana""), (""orange"", ""banana"")) == (""apple"", ""banana"", ""orange"")",100.0,0
"def unique_numbers(lst):
    unique = set()
    for num in lst:
        unique.add(num)
    return sorted(list(unique))","def test_unique_numbers():
    assert unique_numbers([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]
    assert unique_numbers([10, 10, 10]) == [10]
    assert unique_numbers([5, 7, 8, 5, 8]) == [5, 7, 8]
    assert unique_numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
    assert unique_numbers([0, 0, 1]) == [0, 1]
    assert unique_numbers([100, 200, 100, 300]) == [100, 200, 300]
    assert unique_numbers([1, 3, 2, 4, 3]) == [1, 2, 3, 4]
    assert unique_numbers([5, 6, 7, 8]) == [5, 6, 7, 8]
    assert unique_numbers([]) == []
    assert unique_numbers([1, 1, 1, 1]) == [1]",100.0,0
"def create_frequency_dict(lst):
    frequency_dict = {}
    for item in lst:
        if item in frequency_dict:
            frequency_dict[item] += 1
        else:
            frequency_dict[item] = 1
    return frequency_dict","def test_create_frequency_dict():
    assert create_frequency_dict([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}
    assert create_frequency_dict([""apple"", ""banana"", ""apple""]) == {""apple"": 2, ""banana"": 1}
    assert create_frequency_dict([1, 1, 2, 2, 3]) == {1: 2, 2: 2, 3: 1}
    assert create_frequency_dict([]) == {}
    assert create_frequency_dict([""a"", ""a"", ""b"", ""c"", ""b""]) == {""a"": 2, ""b"": 2, ""c"": 1}
    assert create_frequency_dict([5, 5, 5]) == {5: 3}
    assert create_frequency_dict([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}
    assert create_frequency_dict([1, 1, 1, 1]) == {1: 4}
    assert create_frequency_dict([9, 8, 7, 6]) == {9: 1, 8: 1, 7: 1, 6: 1}
    assert create_frequency_dict([1, 1, 1]) == {1: 3}",100.0,0
"def difference_of_lists(lst1, lst2):
    result = []
    for item in lst1:
        if item not in lst2:
            result.append(item)
    for item in lst2:
        if item not in lst1:
            result.append(item)
    return result","def test_difference_of_lists():
    assert difference_of_lists([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]
    assert difference_of_lists([1, 2], [2, 3]) == [1, 3]
    assert difference_of_lists([1, 2, 3], [1, 2, 3]) == []
    assert difference_of_lists([], [1, 2]) == [1, 2]
    assert difference_of_lists([5, 6, 7], [7, 8, 9]) == [5, 6, 8, 9]
    assert difference_of_lists([1], [1]) == []
    assert difference_of_lists([1, 2], [3, 4]) == [1, 2, 3, 4]
    assert difference_of_lists([1, 3, 5], [2, 4, 6]) == [1, 3, 5, 2, 4, 6]
    assert difference_of_lists([1, 2, 3], []) == [1, 2, 3]
    assert difference_of_lists([], []) == []",100.0,0
"def find_in_collection(lst, collection):
    result = []
    for item in lst:
        if item in collection:
            result.append(item)
    if not result:
        print(""No elements found in the collection."")
    return result","def test_find_in_collection():
    assert find_in_collection([1, 2, 3], {3, 4, 5}) == [3]
    assert find_in_collection([1, 2, 3], {4, 5, 6}) == []
    assert find_in_collection([""a"", ""b"", ""c""], {""b"", ""c"", ""d""}) == [""b"", ""c""]
    assert find_in_collection([1, 2], {1, 2, 3}) == [1, 2]
    assert find_in_collection([5, 6, 7], {7, 8}) == [7]
    assert find_in_collection([], {1, 2, 3}) == []
    assert find_in_collection([1, 2], set()) == []
    assert find_in_collection([1, 2, 3], {3, 4, 5}) == [3]
    assert find_in_collection([""apple"", ""banana""], {""banana"", ""orange""}) == [""banana""]
    assert find_in_collection([10, 20], {5, 10, 15}) == [10]",100.0,0
"def sum_of_duplicates(lst):
    count_dict = {}
    for item in lst:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    total = 0
    for key, value in count_dict.items():
        if value > 1:
            total += key
    if total == 0:
        print(""No duplicates found."")
    return total","def test_sum_of_duplicates():
    assert sum_of_duplicates([1, 2, 2, 3, 4, 4]) == 6
    assert sum_of_duplicates([5, 5, 5, 5]) == 5
    assert sum_of_duplicates([1, 1, 1]) == 1
    assert sum_of_duplicates([10, 20, 30]) == 0
    assert sum_of_duplicates([1, 2, 3, 4, 5]) == 0
    assert sum_of_duplicates([1, 2, 2, 3, 3, 3, 4]) == 5
    assert sum_of_duplicates([7, 8, 9, 9, 9]) == 9
    assert sum_of_duplicates([10, 10, 10]) == 10
    assert sum_of_duplicates([1, 2, 2, 3, 3]) == 5
    assert sum_of_duplicates([1, 1, 1, 1, 1]) == 1",100.0,0
"def unique_in_first(lst1, lst2):
    unique_elements = []
    for item in lst1:
        if item not in lst2:
            unique_elements.append(item)
    if not unique_elements:
        print(""No unique elements found in the first list."")
    return unique_elements","def test_unique_in_first():
    assert unique_in_first([1, 2, 3], [3, 4, 5]) == [1, 2]
    assert unique_in_first([1, 2, 3], [4, 5, 6]) == [1, 2, 3]
    assert unique_in_first([5, 6, 7], [7, 8, 9]) == [5, 6]
    assert unique_in_first([1, 2], [1, 2]) == []
    assert unique_in_first([1, 2, 3], []) == [1, 2, 3]
    assert unique_in_first([], [1, 2, 3]) == []
    assert unique_in_first([10, 20, 30], [20, 40, 60]) == [10, 30]
    assert unique_in_first([1, 1, 2], [1, 3]) == [2]
    assert unique_in_first([100, 200], [100, 300]) == [200]
    assert unique_in_first([1, 2, 3], [3]) == [1, 2]",100.0,0
"def lcm_1(a, b):
    if a == 0 or b == 0:
        print(""LCM is undefined for 0."")
        return None

    def gcd(x, y):
        while y:
            x, y = y, x % y
        return x

    return abs(a * b) // gcd(a, b)","def test_lcm_1():
    assert lcm_1(4, 5) == 20
    assert lcm_1(0, 5) is None
    assert lcm_1(6, 8) == 24
    assert lcm_1(9, 12) == 36
    assert lcm_1(3, 7) == 21
    assert lcm_1(10, 0) is None
    assert lcm_1(13, 17) == 221
    assert lcm_1(15, 25) == 75
    assert lcm_1(1, 1) == 1
    assert lcm_1(10, 20) == 20",100.0,0
"def filter_dict_by_value(d, threshold):
    result = {}
    for key, value in d.items():
        if value > threshold:
            result[key] = value
    if not result:
        print(""No elements above the threshold."")
    return result","def test_filter_dict_by_value():
    assert filter_dict_by_value({""apple"": 100, ""banana"": 50}, 1000) == {}
    assert filter_dict_by_value({""a"": 5, ""b"": 10, ""c"": 2}, 4) == {""a"": 5, ""b"": 10}
    assert filter_dict_by_value({""apple"": 5, ""banana"": 3}, 4) == {""apple"": 5}
    assert filter_dict_by_value({""x"": 1, ""y"": 2, ""z"": 3}, 2) == {""z"": 3}
    assert filter_dict_by_value({""a"": 1, ""b"": 2}, 2) == {}
    assert filter_dict_by_value({}, 2) == {}
    assert filter_dict_by_value({""apple"": 10, ""banana"": 20}, 15) == {""banana"": 20}
    assert filter_dict_by_value({""a"": 1, ""b"": 1, ""c"": 1}, 1) == {}
    assert filter_dict_by_value({""cat"": 5, ""dog"": 3}, 4) == {""cat"": 5}
    assert filter_dict_by_value({""cat"": 1, ""dog"": 0}, 0) == {""cat"": 1}
    assert filter_dict_by_value({""apple"": 100, ""banana"": 50}, 60) == {""apple"": 100}",100.0,0
"def reverse_dict(d):
    reversed_dict = {}
    for key, value in d.items():
        if value in reversed_dict:
            print(f""Duplicate value {value} found, skipping."")
        else:
            reversed_dict[value] = key
    return reversed_dict","def test_reverse_dict():
    assert reverse_dict({""a"": 1, ""b"": 2}) == {1: ""a"", 2: ""b""}
    assert reverse_dict({""x"": 10, ""y"": 20}) == {10: ""x"", 20: ""y""}
    assert reverse_dict({""apple"": 100, ""banana"": 200}) == {100: ""apple"", 200: ""banana""}
    assert reverse_dict({""cat"": 5, ""dog"": 3}) == {5: ""cat"", 3: ""dog""}
    assert reverse_dict({""one"": 1, ""two"": 2}) == {1: ""one"", 2: ""two""}
    assert reverse_dict({""x"": 1, ""y"": 1}) == {1: ""x""}
    assert reverse_dict({""key1"": ""value1"", ""key2"": ""value2""}) == {""value1"": ""key1"", ""value2"": ""key2""}
    assert reverse_dict({}) == {}
    assert reverse_dict({""p"": 0, ""q"": 0}) == {0: ""p""}
    assert reverse_dict({""a"": 10, ""b"": 10}) == {10: ""a""}",100.0,0
"def multiples_from_list(lst1, lst2):
    multiples = []
    for num in lst1:
        for divisor in lst2:
            if num % divisor == 0:
                multiples.append(num)
                break
    if not multiples:
        print(""No numbers are divisible by elements from the second list."")
    return multiples","def test_multiples_from_list():
    assert multiples_from_list([10, 20, 30], [2, 5]) == [10, 20, 30]
    assert multiples_from_list([11, 22, 33], [3, 7]) == [33]
    assert multiples_from_list([1, 2, 3], [4, 5]) == []
    assert multiples_from_list([6, 8, 10], [2]) == [6, 8, 10]
    assert multiples_from_list([9, 15, 25], [3, 5]) == [9, 15, 25]
    assert multiples_from_list([17, 19, 23], [4, 8]) == []
    assert multiples_from_list([12, 14, 18], [3, 6]) == [12, 18]
    assert multiples_from_list([5, 10, 20], [1]) == [5, 10, 20]
    assert multiples_from_list([], [2, 3]) == []",100.0,0
"def case_insensitive_char_frequency(s):
    freq = {}
    for char in s.lower():
        if char.isalpha():
            if char in freq:
                freq[char] += 1
            else:
                freq[char] = 1
    if not freq:
        print(""No alphabetical characters found."")
    return freq","def test_case_insensitive_char_frequency():
    assert case_insensitive_char_frequency(""Hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}
    assert case_insensitive_char_frequency(""AaBbCc"") == {'a': 2, 'b': 2, 'c': 2}
    assert case_insensitive_char_frequency(""Python!"") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert case_insensitive_char_frequency(""Nope"") == {'n': 1, 'o': 1, 'p': 1, 'e': 1}
    assert case_insensitive_char_frequency(""MixedCase"") == {'m': 1, 'i': 1, 'x': 1, 'e': 2, 'd': 1, 'c': 1, 'a': 1, 's': 1}
    assert case_insensitive_char_frequency(""12345"") == {}
    assert case_insensitive_char_frequency("""") == {}
    assert case_insensitive_char_frequency(""A"") == {'a': 1}
    assert case_insensitive_char_frequency(""ABaB"") == {'a': 2, 'b': 2}",100.0,0
"def count_unique_with_frequency(lst):
    frequency = {}
    for item in lst:
        if item in frequency:
            frequency[item] += 1
        else:
            frequency[item] = 1
    return frequency","def test_count_unique_with_frequency():
    assert count_unique_with_frequency([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}
    assert count_unique_with_frequency([""a"", ""b"", ""a"", ""c"", ""c"", ""c""]) == {""a"": 2, ""b"": 1, ""c"": 3}
    assert count_unique_with_frequency([5, 5, 5, 5, 5]) == {5: 5}
    assert count_unique_with_frequency([]) == {}
    assert count_unique_with_frequency([1, 2, 3]) == {1: 1, 2: 1, 3: 1}
    assert count_unique_with_frequency([0, 0, 1, 1, 1]) == {0: 2, 1: 3}
    assert count_unique_with_frequency([""x"", ""y"", ""z""]) == {""x"": 1, ""y"": 1, ""z"": 1}
    assert count_unique_with_frequency([1, ""1"", 2, ""2"", 2]) == {1: 1, ""1"": 1, 2: 2, ""2"": 1}
    assert count_unique_with_frequency([3, 3, 3]) == {3: 3}",100.0,0
"def count_consecutive_chars(s):
    if not s:
        print(""Empty string provided."")
        return {}
    count = {}
    current_char = s[0]
    current_count = 1
    for char in s[1:]:
        if char == current_char:
            current_count += 1
        else:
            if current_char in count:
                count[current_char] += current_count
            else:
                count[current_char] = current_count
            current_char = char
            current_count = 1
    if current_char in count:
        count[current_char] += current_count
    else:
        count[current_char] = current_count
    return count","def test_count_consecutive_chars():
    assert count_consecutive_chars(""aaabbcc"") == {'a': 3, 'b': 2, 'c': 2}
    assert count_consecutive_chars(""abcd"") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}
    assert count_consecutive_chars(""aaAAa"") == {'A': 2, 'a': 3}
    assert count_consecutive_chars("""") == {}
    assert count_consecutive_chars(""x"") == {'x': 1}
    assert count_consecutive_chars(""zzz"") == {'z': 3}
    assert count_consecutive_chars(""aabbccdd"") == {'a': 2, 'b': 2, 'c': 2, 'd': 2}
    assert count_consecutive_chars(""aaaAAA"") == {'a': 3, 'A': 3}
    assert count_consecutive_chars(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}
    assert count_consecutive_chars(""aaraaraarraarrr"") == {'a': 8, 'r': 7}",100.0,0
"def find_keys_in_set(s, d):
    result = []
    for item in s:
        if item in d:
            result.append(item)
    if not result:
        print(""No elements from the set found in the dictionary keys."")
    return sorted(result)","def test_find_keys_in_set():
    assert find_keys_in_set({1, 2, 3}, {1: ""one"", 2: ""two"", 4: ""four""}) == [1, 2]
    assert find_keys_in_set({""a"", ""b"", ""c""}, {""a"": ""alpha"", ""b"": ""beta""}) == [""a"", ""b""]
    assert find_keys_in_set({5, 6, 7}, {8: ""eight"", 9: ""nine""}) == []
    assert find_keys_in_set(set(), {""a"": 1, ""b"": 2}) == []
    assert find_keys_in_set({1, 2, 3}, {}) == []
    assert find_keys_in_set({1, 2}, {1: ""one"", 2: ""two""}) == [1, 2]
    assert find_keys_in_set({""x""}, {""x"": ""ex""}) == [""x""]
    assert find_keys_in_set({""y""}, {""z"": ""zee""}) == []
    assert find_keys_in_set({""hello"", ""world""}, {""hello"": ""greeting"", ""earth"": ""planet""}) == [""hello""]",100.0,0
"def find_prime_numbers(lst):
    primes = []
    for num in lst:
        if num < 2:
            continue
        is_prime = True
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes","def test_find_prime_numbers():
    assert find_prime_numbers([2, 3, 4, 5, 6]) == [2, 3, 5]
    assert find_prime_numbers([10, 11, 12, 13, 14]) == [11, 13]
    assert find_prime_numbers([1, 2]) == [2]
    assert find_prime_numbers([15, 16, 17, 18]) == [17]
    assert find_prime_numbers([]) == []
    assert find_prime_numbers([0, 1]) == []
    assert find_prime_numbers([19, 20, 21, 22]) == [19]
    assert find_prime_numbers([23, 24, 25, 26]) == [23]
    assert find_prime_numbers([2, 2, 3, 3]) == [2, 2, 3, 3]",100.0,0
"def split_digits_and_others(s):
    digits = []
    others = []
    for char in s:
        if char.isdigit():
            digits.append(char)
        else:
            others.append(char)
    return digits, others","def test_split_digits_and_others():
    assert split_digits_and_others(""123abc"") == (['1', '2', '3'], ['a', 'b', 'c'])
    assert split_digits_and_others(""1a2b3c"") == (['1', '2', '3'], ['a', 'b', 'c'])
    assert split_digits_and_others("""") == ([], [])
    assert split_digits_and_others(""123"") == (['1', '2', '3'], [])
    assert split_digits_and_others(""abc"") == ([], ['a', 'b', 'c'])
    assert split_digits_and_others(""1!2@3#"") == (['1', '2', '3'], ['!', '@', '#'])
    assert split_digits_and_others(""a1b2c3"") == (['1', '2', '3'], ['a', 'b', 'c'])
    assert split_digits_and_others(""456def"") == (['4', '5', '6'], ['d', 'e', 'f'])
    assert split_digits_and_others(""xyz789"") == (['7', '8', '9'], ['x', 'y', 'z'])",100.0,0
"def min_max_tuple(lst):
    if not lst:
        print(""List is empty."")
        return None
    return min(lst), max(lst)","def test_min_max_tuple():
    assert min_max_tuple([1, 2, 3]) == (1, 3)
    assert min_max_tuple([10, 5, 15]) == (5, 15)
    assert min_max_tuple([0, -1, 1]) == (-1, 1)
    assert min_max_tuple([-10, -5, -1]) == (-10, -1)
    assert min_max_tuple([1]) == (1, 1)
    assert min_max_tuple([]) is None
    assert min_max_tuple([100, 200, 300]) == (100, 300)
    assert min_max_tuple([-100, 0, 100]) == (-100, 100)
    assert min_max_tuple([7, 7, 7]) == (7, 7)",100.0,0
"def find_common_keys_with_different_values(d1, d2):
    common_keys = set(d1.keys()) & set(d2.keys())
    result = []
    for key in common_keys:
        if d1[key] != d2[key]:
            result.append(key)
    if not result:
        print(""No keys with different values found."")
    return result","def test_find_common_keys_with_different_values():
    assert find_common_keys_with_different_values({'a': 1, 'b': 2}, {'a': 2, 'b': 2}) == ['a']
    assert find_common_keys_with_different_values({'x': 1, 'y': 2}, {'y': 3, 'z': 4}) == ['y']
    assert find_common_keys_with_different_values({'k': 10, 'l': 20}, {'m': 30, 'n': 40}) == []
    assert find_common_keys_with_different_values({}, {}) == []
    assert find_common_keys_with_different_values({'a': 1, 'b': 1}, {'a': 1, 'b': 2}) == ['b']
    assert find_common_keys_with_different_values({'key1': 100, 'key2': 200}, {'key1': 300, 'key2': 200}) == ['key1']
    assert find_common_keys_with_different_values({'k1': 1, 'k2': 2}, {'k2': 3, 'k3': 4}) == ['k2']
    assert find_common_keys_with_different_values({'a': 1}, {'a': 2}) == ['a']
    assert find_common_keys_with_different_values({'x': 5}, {'y': 5}) == []",100.0,0
"def string_to_numbers(s):
    try:
        return [int(x) for x in s.split()]
    except ValueError:
        print(""String contains non-numeric values."")
        return []","def test_string_to_numbers():
    assert string_to_numbers(""1 2 3"") == [1, 2, 3]
    assert string_to_numbers(""10 20 30"") == [10, 20, 30]
    assert string_to_numbers(""4 5 6"") == [4, 5, 6]
    assert string_to_numbers(""a b c"") == []
    assert string_to_numbers(""123 abc 456"") == []
    assert string_to_numbers("""") == []
    assert string_to_numbers(""7 8 9"") == [7, 8, 9]
    assert string_to_numbers(""0"") == [0]
    assert string_to_numbers(""0 1 2"") == [0, 1, 2]",100.0,0
"def find_powers_of_two_in_string(s):
    numbers = []
    for word in s.split():
        try:
            num = int(word)
            if (num & (num - 1)) == 0 and num > 0:
                numbers.append(num)
        except ValueError:
            continue
    return numbers","def test_find_powers_of_two_in_string():
    assert find_powers_of_two_in_string(""1 2 3 4 5"") == [1, 2, 4]
    assert find_powers_of_two_in_string(""16 32 64"") == [16, 32, 64]
    assert find_powers_of_two_in_string(""7 9 11"") == []
    assert find_powers_of_two_in_string(""0 128 256"") == [128, 256]
    assert find_powers_of_two_in_string(""2 4 8 16 32"") == [2, 4, 8, 16, 32]
    assert find_powers_of_two_in_string(""1024"") == [1024]
    assert find_powers_of_two_in_string(""non-numeric 2 words"") == [2]
    assert find_powers_of_two_in_string("""") == []
    assert find_powers_of_two_in_string(""3 6 12"") == []",100.0,0
"def find_palindromes(lst):
    palindromes = []
    for word in lst:
        if word == word[::-1]:
            palindromes.append(word)
    return palindromes","def test_find_palindromes():
    assert find_palindromes([""radar"", ""hello"", ""level""]) == [""radar"", ""level""]
    assert find_palindromes([""world"", ""noon"", ""civic""]) == [""noon"", ""civic""]
    assert find_palindromes([""abc"", ""def"", ""ghi""]) == []
    assert find_palindromes([""madam"", ""racecar"", ""apple""]) == [""madam"", ""racecar""]
    assert find_palindromes([]) == []
    assert find_palindromes([""kayak"", ""refer""]) == [""kayak"", ""refer""]
    assert find_palindromes(["""", ""a"", ""bb""]) == ["""", ""a"", ""bb""]
    assert find_palindromes([""rotor"", ""deed""]) == [""rotor"", ""deed""]
    assert find_palindromes([""not"", ""a"", ""palindrome""]) == ['a']",100.0,0
"def merge_lists_no_duplicates(lst1, lst2):
    result = lst1.copy()
    for item in lst2:
        if item not in result:
            result.append(item)
        else:
            print(f""Duplicate item found: {item}"")
    return result","def test_merge_lists_no_duplicates():
    assert merge_lists_no_duplicates([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]
    assert merge_lists_no_duplicates([""a"", ""b""], [""b"", ""c""]) == [""a"", ""b"", ""c""]
    assert merge_lists_no_duplicates([], [1, 2, 3]) == [1, 2, 3]
    assert merge_lists_no_duplicates([1, 2, 3], []) == [1, 2, 3]
    assert merge_lists_no_duplicates([1], [1, 2, 3]) == [1, 2, 3]
    assert merge_lists_no_duplicates([""x"", ""y""], [""y"", ""z""]) == [""x"", ""y"", ""z""]
    assert merge_lists_no_duplicates([1, 1, 1], [1, 1, 1]) == [1, 1, 1]
    assert merge_lists_no_duplicates([4, 5, 6], [7, 8, 9]) == [4, 5, 6, 7, 8, 9]
    assert merge_lists_no_duplicates([10, 20], [20, 30, 40]) == [10, 20, 30, 40]",100.0,0
"def divisible_by_2_not_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 3 != 0:
            result.append(num)
    if not result:
        print(""No numbers divisible by 2 but not by 3 found."")
    return result","def test_divisible_by_2_not_3():
    assert divisible_by_2_not_3([2, 4, 6, 8]) == [2, 4, 8]
    assert divisible_by_2_not_3([12, 15, 20]) == [20]
    assert divisible_by_2_not_3([3, 5, 9]) == []
    assert divisible_by_2_not_3([18, 21, 24]) == []
    assert divisible_by_2_not_3([1, 2, 3]) == [2]
    assert divisible_by_2_not_3([10, 14, 22]) == [10, 14, 22]
    assert divisible_by_2_not_3([0, 6, 12]) == []
    assert divisible_by_2_not_3([7, 8, 9]) == [8]
    assert divisible_by_2_not_3([]) == []",100.0,0
"def find_even_numbers_in_string(s):
    result = []
    current_num = ''
    for char in s:
        if char.isdigit():
            current_num += char
        elif current_num:
            num = int(current_num)
            if num % 2 == 0:
                result.append(num)
            current_num = ''
    if current_num:
        num = int(current_num)
        if num % 2 == 0:
            result.append(num)
    return result","def test_find_even_numbers_in_string():
    assert find_even_numbers_in_string(""12 34 56"") == [12, 34, 56]
    assert find_even_numbers_in_string(""135 246 789"") == [246]
    assert find_even_numbers_in_string(""11 33 55"") == []
    assert find_even_numbers_in_string(""222 333 444"") == [222, 444]
    assert find_even_numbers_in_string(""2 4 6 8"") == [2, 4, 6, 8]
    assert find_even_numbers_in_string(""9"") == []
    assert find_even_numbers_in_string(""10 20 30"") == [10, 20, 30]
    assert find_even_numbers_in_string("""") == []
    assert find_even_numbers_in_string(""100 200"") == [100, 200]",100.0,0
"def find_non_prime_numbers(lst):
    non_primes = []
    for num in lst:
        if num < 2:
            non_primes.append(num)
        else:
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    non_primes.append(num)
                    break
    return non_primes","def test_find_non_prime_numbers():
    assert find_non_prime_numbers([1, 2, 3, 4, 5]) == [1, 4]
    assert find_non_prime_numbers([10, 11, 12, 13]) == [10, 12]
    assert find_non_prime_numbers([17, 19, 21, 23]) == [21]
    assert find_non_prime_numbers([24, 25, 26, 27]) == [24, 25, 26, 27]
    assert find_non_prime_numbers([29, 30, 31]) == [30]
    assert find_non_prime_numbers([2, 3, 5]) == []
    assert find_non_prime_numbers([4, 6, 8]) == [4, 6, 8]
    assert find_non_prime_numbers([]) == []
    assert find_non_prime_numbers([0, 1, 2]) == [0, 1]",100.0,0
"def unique_chars_ignore_spaces(s):
    unique_chars = {}
    for char in s:
        if char != ' ':
            if char not in unique_chars:
                unique_chars[char] = 1
            else:
                unique_chars[char] += 1
    return list(unique_chars.keys())","def test_unique_chars_ignore_spaces():
    assert unique_chars_ignore_spaces(""hello world"") == ['h', 'e', 'l', 'o', 'w', 'r', 'd']
    assert unique_chars_ignore_spaces(""a b c"") == ['a', 'b', 'c']
    assert unique_chars_ignore_spaces(""abc abc"") == ['a', 'b', 'c']
    assert unique_chars_ignore_spaces(""  "") == []
    assert unique_chars_ignore_spaces(""unique characters"") == ['u', 'n', 'i', 'q', 'e', 'c', 'h', 'a', 'r', 't', 's']
    assert unique_chars_ignore_spaces(""xyz 123"") == ['x', 'y', 'z', '1', '2', '3']
    assert unique_chars_ignore_spaces(""AAA"") == ['A']
    assert unique_chars_ignore_spaces(""alpha beta"") == ['a', 'l', 'p', 'h', 'b', 'e', 't']
    assert unique_chars_ignore_spaces(""ignore spaces"") == ['i', 'g', 'n', 'o', 'r', 'e', 's', 'p', 'a', 'c']",100.0,0
"def count_words_ignore_punctuation(s):
    word_count = 0
    current_word = ''
    for char in s:
        if char.isalnum():
            current_word += char
        elif current_word:
            word_count += 1
            current_word = ''
    if current_word:
        word_count += 1
    return word_count","def test_count_words_ignore_punctuation():
    assert count_words_ignore_punctuation(""hello world!"") == 2
    assert count_words_ignore_punctuation(""a b c"") == 3
    assert count_words_ignore_punctuation(""this, is a test."") == 4
    assert count_words_ignore_punctuation(""..."") == 0
    assert count_words_ignore_punctuation(""count these words!"") == 3
    assert count_words_ignore_punctuation(""punctuation, should be ignored."") == 4
    assert count_words_ignore_punctuation("""") == 0
    assert count_words_ignore_punctuation(""one two three"") == 3
    assert count_words_ignore_punctuation(""   "") == 0",100.0,0
"def find_squares(lst):
    squares = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num:
            squares.append(num)
    return squares","def test_find_squares():
    assert find_squares([1, 4, 9, 16, 25]) == [1, 4, 9, 16, 25]
    assert find_squares([2, 3, 5, 6, 7]) == []
    assert find_squares([36, 49, 64, 81]) == [36, 49, 64, 81]
    assert find_squares([10, 20, 30]) == []
    assert find_squares([100, 121, 144]) == [100, 121, 144]
    assert find_squares([]) == []
    assert find_squares([0, 1, 2, 3]) == [0, 1]
    assert find_squares([50, 60, 70, 80]) == []
    assert find_squares([9, 25, 36, 49]) == [9, 25, 36, 49]",100.0,0
"def word_frequency_in_string(s):
    word_count = {}
    current_word = ''
    for char in s:
        if char.isalnum():
            current_word += char
        elif current_word:
            if current_word in word_count:
                word_count[current_word] += 1
            else:
                word_count[current_word] = 1
            current_word = ''
    if current_word:
        if current_word in word_count:
            word_count[current_word] += 1
        else:
            word_count[current_word] = 1
    return word_count","def test_word_frequency_in_string():
    assert word_frequency_in_string(""hello world"") == {'hello': 1, 'world': 1}
    assert word_frequency_in_string(""hello hello world"") == {'hello': 2, 'world': 1}
    assert word_frequency_in_string(""test test test"") == {'test': 3}
    assert word_frequency_in_string(""a b a b c"") == {'a': 2, 'b': 2, 'c': 1}
    assert word_frequency_in_string(""one two three two one"") == {'one': 2, 'two': 2, 'three': 1}
    assert word_frequency_in_string(""punctuation should be ignored"") == {'punctuation': 1, 'should': 1, 'be': 1, 'ignored': 1}
    assert word_frequency_in_string(""the quick brown fox"") == {'the': 1, 'quick': 1, 'brown': 1, 'fox': 1}
    assert word_frequency_in_string(""hello world!"") == {'hello': 1, 'world': 1}
    assert word_frequency_in_string(""repeat repeat repeat repeat"") == {'repeat': 4}",100.0,0
"def find_sum_of_two_squares(lst):
    def is_sum_of_two_squares(n):
        for i in range(1, int(n ** 0.5) + 1):
            if (n - i ** 2) ** 0.5 == int((n - i ** 2) ** 0.5):
                return True
        return False

    result = []
    for num in lst:
        if is_sum_of_two_squares(num):
            result.append(num)
    return result","def test_find_sum_of_two_squares():
    assert find_sum_of_two_squares([1, 2, 3, 4, 5, 10, 25]) == [1, 2, 4, 5, 10, 25]
    assert find_sum_of_two_squares([0, 1, 2, 9, 16, 20, 25]) == [1, 2, 9, 16, 20, 25]
    assert find_sum_of_two_squares([3, 5, 7, 8, 10, 15, 50]) == [5, 8, 10, 50]",100.0,0
"def find_non_numeric_elements(lst):
    result = []
    for item in lst:
        if not any(char.isdigit() for char in item):
            result.append(item)
    return result","def test_find_non_numeric_elements():
    assert find_non_numeric_elements([""hello"", ""123"", ""world"", ""456""]) == [""hello"", ""world""]
    assert find_non_numeric_elements([""abc"", ""def"", ""456"", ""789""]) == [""abc"", ""def""]
    assert find_non_numeric_elements([""123"", ""456"", ""789""]) == []",100.0,0
"def find_odd_and_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 5 == 0:
            result.append(num)
    if not result:
        print(""No odd numbers divisible by 5 found."")
    return result","def test_find_odd_and_divisible_by_5():
    assert find_odd_and_divisible_by_5([5, 10, 15, 20, 25, 30]) == [5, 15, 25]
    assert find_odd_and_divisible_by_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5]
    assert find_odd_and_divisible_by_5([2, 4, 6, 8, 10]) == []",100.0,0
"def count_elements_above_threshold(d, threshold):
    count = 0
    for key, value in d.items():
        if value > threshold:
            count += 1
    return count","def test_count_elements_above_threshold():
    assert count_elements_above_threshold({""a"": 5, ""b"": 10, ""c"": 15}, 7) == 2
    assert count_elements_above_threshold({""a"": 1, ""b"": 2, ""c"": 3}, 2) == 1
    assert count_elements_above_threshold({""a"": 20, ""b"": 25, ""c"": 30}, 15) == 3",100.0,0
"def find_powers_of_three(lst):
    powers_of_three = []
    for num in lst:
        while num % 3 == 0 and num > 0:
            num //= 3
        if num == 1:
            powers_of_three.append(num)
    return powers_of_three","def test_find_powers_of_three():
    assert find_powers_of_three([1, 3, 9, 27, 81, 243]) == [1, 1, 1, 1, 1, 1]
    assert find_powers_of_three([1, 2, 4, 8, 16]) == [1]
    assert find_powers_of_three([1, 3, 9, 27, 81, 243]) == [1, 1, 1, 1, 1, 1]",100.0,0
"def find_numbers_greater_than_mean(s):
    nums = [int(x) for x in s.split() if x.isdigit()]
    mean = sum(nums) / len(nums) if nums else 0
    result = []
    for num in nums:
        if num > mean:
            result.append(num)
    return result","def test_find_numbers_greater_than_mean():
    assert find_numbers_greater_than_mean(""1 2 3 4 5 6 7 8 9"") == [6, 7, 8, 9]
    assert find_numbers_greater_than_mean(""10 20 30 40 50"") == [40, 50]
    assert find_numbers_greater_than_mean(""5 5 5 5 5"") == []",100.0,0
"def find_odd_and_not_prime(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True
    non_prime_odd = []
    for num in lst:
        if num % 2 != 0 and not is_prime(num):
            non_prime_odd.append(num)
    return non_prime_odd","def test_find_odd_and_not_prime():
    assert find_odd_and_not_prime([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 9, 15]
    assert find_odd_and_not_prime([2, 4, 6, 8, 10]) == []
    assert find_odd_and_not_prime([21, 33, 35, 39]) == [21, 33, 35, 39]",100.0,0
"def find_divisors_in_list(lst):
    divisors = []
    for i in range(len(lst)):
        for j in range(len(lst)):
            if i != j and lst[i] % lst[j] == 0:
                divisors.append(lst[i])
                break
    return divisors","def test_find_divisors_in_list():
    assert find_divisors_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert find_divisors_in_list([10, 20, 30, 40]) == [20, 30, 40]
    assert find_divisors_in_list([1, 3, 5, 7]) == [3, 5, 7]",100.0,0
"def find_non_multiples(lst1, lst2):
    non_multiples = []
    for num in lst1:
        if all(num % divisor != 0 for divisor in lst2):
            non_multiples.append(num)
    return non_multiples","def test_find_non_multiples():
    assert find_non_multiples([1, 2, 3, 4, 5, 6], [2, 3]) == [1, 5]
    assert find_non_multiples([10, 15, 20, 25], [5]) == []
    assert find_non_multiples([8, 16, 24], [4]) == []",100.0,0
"def find_common_elements(lst1, lst2):
    common_elements = []
    for item in lst1:
        if item in lst2:
            common_elements.append(item)
    if not common_elements:
        print(""No common elements found."")
    return common_elements","def test_find_common_elements():
    assert find_common_elements([1, 2, 3], [3, 4, 5]) == [3]
    assert find_common_elements([""a"", ""b"", ""c""], [""c"", ""d"", ""e""]) == [""c""]
    assert find_common_elements([1, 2, 3], [4, 5, 6]) == []",100.0,0
"def find_odd_square(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and num % 2 != 0:
            result.append(num)
    return result","def test_find_odd_square():
    assert find_odd_square([1, 2, 3, 4, 5, 9, 16, 25]) == [1, 9, 25]
    assert find_odd_square([2, 4, 6, 8, 10, 12, 14, 18]) == []
    assert find_odd_square([1, 5, 13, 15, 21, 22, 27, 28]) == [1]",100.0,0
"def find_elements_with_vowels(lst):
    vowels = 'aeiouAEIOU'
    result = []
    for item in lst:
        if any(char in vowels for char in item):
            result.append(item)
    return result","def test_find_elements_with_vowels():
    assert find_elements_with_vowels([""hello"", ""world"", ""sky"", ""tryst""]) == [""hello"", ""world""]
    assert find_elements_with_vowels([""rhythm"", ""gym"", ""sky""]) == []
    assert find_elements_with_vowels([""apple"", ""banana"", ""grape""]) == [""apple"", ""banana"", ""grape""]",100.0,0
"def find_not_divisible_by_2_and_3(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 3 != 0:
            result.append(num)
    if not result:
        print(""No numbers found that are not divisible by 2 or 3."")
        return []
    return result","def test_find_not_divisible_by_2_and_3():
    assert find_not_divisible_by_2_and_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 5, 7]
    assert find_not_divisible_by_2_and_3([2, 4, 6, 8, 10]) == []
    assert find_not_divisible_by_2_and_3([11, 13, 17, 19, 23, 25, 29]) == [11, 13, 17, 19, 23, 25, 29]",100.0,0
"def count_unique_chars_in_string(s):
    char_count = {}
    for char in s:
        if char.isalpha():
            if char not in char_count:
                char_count[char] = 1
            else:
                char_count[char] += 1
    if not char_count:
        print(""No alphabetical characters found."")
        return {}
    return char_count","def test_count_unique_chars_in_string():
    assert count_unique_chars_in_string(""hello world"") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}
    assert count_unique_chars_in_string(""abcdefg"") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}
    assert count_unique_chars_in_string(""1234 5678"") == {}",100.0,0
"def find_product_of_two_even_numbers(lst):
    result = []
    for num in lst:
        for i in range(2, num // 2 + 1, 2):
            if num % i == 0 and (num // i) % 2 == 0:
                result.append(num)
                break
    if not result:
        print(""No numbers found that are the product of two even numbers."")
        return []
    return result","def test_find_product_of_two_even_numbers():
    assert find_product_of_two_even_numbers([4, 8, 12, 16, 20]) == [4, 8, 12, 16, 20]
    assert find_product_of_two_even_numbers([1, 3, 5, 7, 9]) == []
    assert find_product_of_two_even_numbers([6, 10, 14, 18, 22]) == []",100.0,0
"def find_multiples_of_5_not_10(lst):
    result = []
    for num in lst:
        if num % 5 == 0 and num % 10 != 0:
            result.append(num)
    if not result:
        print(""No multiples of 5 that are not divisible by 10."")
    return result","def test_find_multiples_of_5_not_10():
    assert find_multiples_of_5_not_10([5, 10, 15, 20, 25, 30]) == [5, 15, 25]
    assert find_multiples_of_5_not_10([2, 4, 6, 8, 10]) == []
    assert find_multiples_of_5_not_10([1, 3, 7, 9, 11]) == []",100.0,0
"def find_double_digits_not_divisible_by_2(lst):
    result = []
    for num in lst:
        if 10 <= num <= 99 and num % 2 != 0:
            result.append(num)
    if not result:
        print(""No double-digit numbers found that are not divisible by 2."")
    return result","def test_find_double_digits_not_divisible_by_2():
    assert find_double_digits_not_divisible_by_2([10, 12, 14, 16, 18]) == []
    assert find_double_digits_not_divisible_by_2([11, 13, 15, 17, 19]) == [11, 13, 15, 17, 19]
    assert find_double_digits_not_divisible_by_2([21, 23, 25, 27, 29]) == [21, 23, 25, 27, 29]",100.0,0
"def find_common_numbers_in_strings(s1, s2):
    nums1 = {int(x) for x in s1.split() if x.isdigit()}
    nums2 = {int(x) for x in s2.split() if x.isdigit()}
    common = nums1 & nums2
    if not common:
        print(""No common numbers found between the two strings."")
        return set()
    return common","def test_find_common_numbers_in_strings():
    assert find_common_numbers_in_strings(""1 2 3 4 5"", ""3 4 5 6 7"") == {3, 4, 5}
    assert find_common_numbers_in_strings(""1 2 3 4 5"", ""6 7 8 9 10"") == set()
    assert find_common_numbers_in_strings(""10 20 30 40 50"", ""15 25 35 45 55"") == set()",100.0,0
"def find_divisible_by_7_not_11(lst):
    result = []
    for num in lst:
        if num % 7 == 0 and num % 11 != 0:
            result.append(num)
    if not result:
        print(""No numbers found divisible by 7 but not 11."")
    return result","def test_find_divisible_by_7_not_11():
    assert find_divisible_by_7_not_11([7, 14, 21, 28, 35, 42]) == [7, 14, 21, 28, 35, 42]
    assert find_divisible_by_7_not_11([11, 22, 33, 44, 55, 66]) == []
    assert find_divisible_by_7_not_11([49, 63, 77, 84]) == [49, 63, 84]",100.0,0
"def count_word_in_string(s, word):
    s = s.lower()
    word = word.lower()
    count = s.split().count(word)
    if count == 0:
        print(f""The word '{word}' was not found."")
        return 0
    return count","def test_count_word_in_string():
    assert count_word_in_string(""Hello world, hello universe"", ""hello"") == 2
    assert count_word_in_string(""Python is great. I love Python."", ""Python"") == 1
    assert count_word_in_string(""This is a test string."", ""python"") == 0",100.0,0
"def find_primes_not_multiples_of_3(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        if is_prime(num) and num % 3 != 0:
            result.append(num)
    if not result:
        print(""No prime numbers found that are not divisible by 3."")
    return result","def test_find_primes_not_multiples_of_3():
    assert find_primes_not_multiples_of_3([2, 3, 5, 6, 7, 9, 11, 12]) == [2, 5, 7, 11]
    assert find_primes_not_multiples_of_3([3, 6, 9, 12, 15]) == []
    assert find_primes_not_multiples_of_3([1, 2, 4, 5, 8, 10, 14]) == [2, 5]
    assert find_primes_not_multiples_of_3([7, 11, 13, 17, 19, 23]) == [7, 11, 13, 17, 19, 23]
    assert find_primes_not_multiples_of_3([]) == []
    assert find_primes_not_multiples_of_3([29, 31, 37, 41]) == [29, 31, 37, 41]
    assert find_primes_not_multiples_of_3([9, 27, 30]) == []
    assert find_primes_not_multiples_of_3([2, 3, 5, 9, 15, 21]) == [2, 5]
    assert find_primes_not_multiples_of_3([4, 6, 8, 10, 12, 14]) == []",100.0,0
"def find_even_numbers_divisible_by_4(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 4 == 0:
            result.append(num)
    if not result:
        print(""No even numbers divisible by 4 found."")
    return result","def test_find_even_numbers_divisible_by_4():
    assert find_even_numbers_divisible_by_4([4, 8, 12, 16, 20, 24]) == [4, 8, 12, 16, 20, 24]
    assert find_even_numbers_divisible_by_4([1, 2, 3, 5, 7, 11]) == []
    assert find_even_numbers_divisible_by_4([4, 5, 6, 7, 8, 9, 10, 11]) == [4, 8]
    assert find_even_numbers_divisible_by_4([32, 48, 64, 80, 96, 112]) == [32, 48, 64, 80, 96, 112]
    assert find_even_numbers_divisible_by_4([]) == []
    assert find_even_numbers_divisible_by_4([12, 14, 18, 20]) == [12, 20]
    assert find_even_numbers_divisible_by_4([3, 5, 7, 9, 11]) == []
    assert find_even_numbers_divisible_by_4([0, 4, 8, 16, 32]) == [0, 4, 8, 16, 32]
    assert find_even_numbers_divisible_by_4([2, 6, 10, 14]) == []",100.0,0
"def find_non_powers_of_two(lst):
    result = []
    for num in lst:
        if (num & (num - 1)) != 0:
            result.append(num)
    if not result:
        print(""No numbers found that are not powers of two."")
    return result","def test_find_non_powers_of_two():
    assert find_non_powers_of_two([1, 2, 3, 4, 5, 6, 7, 8]) == [3, 5, 6, 7]
    assert find_non_powers_of_two([8, 16, 32, 64, 128]) == []
    assert find_non_powers_of_two([3, 5, 6, 7, 10, 12]) == [3, 5, 6, 7, 10, 12]
    assert find_non_powers_of_two([1, 2, 4, 8, 16]) == []
    assert find_non_powers_of_two([]) == []
    assert find_non_powers_of_two([1024, 2048, 4096]) == []
    assert find_non_powers_of_two([1, 2, 4, 6, 8, 12, 18]) == [6, 12, 18]
    assert find_non_powers_of_two([10, 20, 30, 40]) == [10, 20, 30, 40]
    assert find_non_powers_of_two([7, 14, 21, 28]) == [7, 14, 21, 28]",100.0,0
"def count_numbers_greater_than_average(s):
    nums = [int(x) for x in s.split() if x.isdigit()]
    if not nums:
        print(""No numbers found in the string."")
        return 0
    average = sum(nums) / len(nums)
    count = sum(1 for num in nums if num > average)
    return count","def test_count_numbers_greater_than_average():
    assert count_numbers_greater_than_average(""1 2 3 4 5 6 7 8 9"") == 4
    assert count_numbers_greater_than_average(""10 20 30 40 50"") == 2
    assert count_numbers_greater_than_average(""5 5 5 5"") == 0
    assert count_numbers_greater_than_average(""100"") == 0
    assert count_numbers_greater_than_average("""") == 0
    assert count_numbers_greater_than_average(""10 15 20 25 30"") == 2
    assert count_numbers_greater_than_average(""7 14 21 28"") == 2
    assert count_numbers_greater_than_average(""3 6 9 12 15 18"") == 3
    assert count_numbers_greater_than_average(""0 1 2 3 4 5 6 7 8 9 10"") == 5",100.0,0
"def find_multiples_of_4_or_5_not_20(lst):
    result = []
    for num in lst:
        if (num % 4 == 0 or num % 5 == 0) and num % 20 != 0:
            result.append(num)
    if not result:
        print(""No numbers found that are divisible by 4 or 5, but not by 20."")
    return result","def test_find_multiples_of_4_or_5_not_20():
    assert find_multiples_of_4_or_5_not_20([4, 5, 8, 10, 12, 15, 16, 25, 40]) == [4, 5, 8, 10, 12, 15, 16, 25]
    assert find_multiples_of_4_or_5_not_20([20, 40, 60, 80, 100]) == []
    assert find_multiples_of_4_or_5_not_20([3, 6, 9, 11, 13, 17, 19]) == []
    assert find_multiples_of_4_or_5_not_20([25, 30, 35, 50]) == [25, 30, 35, 50]
    assert find_multiples_of_4_or_5_not_20([]) == []
    assert find_multiples_of_4_or_5_not_20([4, 8, 12, 16, 24]) == [4, 8, 12, 16, 24]
    assert find_multiples_of_4_or_5_not_20([5, 10, 15, 25]) == [5, 10, 15, 25]
    assert find_multiples_of_4_or_5_not_20([1, 2, 3, 7, 11]) == []
    assert find_multiples_of_4_or_5_not_20([9, 27, 33, 45]) == [45]",100.0,0
"def find_exact_divisors_of_100(lst):
    result = []
    for num in lst:
        if 100 % num == 0:
            result.append(num)
    if not result:
        print(""No numbers found that are exact divisors of 100."")
    return result","def test_find_exact_divisors_of_100():
    assert find_exact_divisors_of_100([1, 2, 4, 5, 10, 20, 25, 50, 100]) == [1, 2, 4, 5, 10, 20, 25, 50, 100]
    assert find_exact_divisors_of_100([3, 6, 9, 12, 15, 18, 21]) == []
    assert find_exact_divisors_of_100([4, 8, 16, 32, 64]) == [4]
    assert find_exact_divisors_of_100([50, 100]) == [50, 100]
    assert find_exact_divisors_of_100([]) == []
    assert find_exact_divisors_of_100([10, 20, 30, 40]) == [10, 20]
    assert find_exact_divisors_of_100([1, 25, 100]) == [1, 25, 100]
    assert find_exact_divisors_of_100([5, 15, 20]) == [5, 20]
    assert find_exact_divisors_of_100([7, 14, 21, 35, 70]) == []",100.0,0
"def find_odd_not_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 5 != 0:
            result.append(num)
    if not result:
        print(""No odd numbers found that are not divisible by 5."")
    return result","def test_find_odd_not_divisible_by_5():
    assert find_odd_not_divisible_by_5([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 7, 9, 11, 13, 17, 19]
    assert find_odd_not_divisible_by_5([5, 10, 15, 20, 25]) == []
    assert find_odd_not_divisible_by_5([2, 4, 6, 8, 10, 12]) == []
    assert find_odd_not_divisible_by_5([1, 2, 3, 4, 5]) == [1, 3]
    assert find_odd_not_divisible_by_5([]) == []
    assert find_odd_not_divisible_by_5([11, 12, 13, 14, 15, 16]) == [11, 13]
    assert find_odd_not_divisible_by_5([1, 21, 31, 41]) == [1, 21, 31, 41]
    assert find_odd_not_divisible_by_5([25, 30, 35, 40, 45, 50]) == []
    assert find_odd_not_divisible_by_5([33, 37, 39, 43, 47]) == [33, 37, 39, 43, 47]",100.0,0
"def find_multiples_of_2_or_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 3 != 0:
            result.append(num)
        elif num % 3 == 0 and num % 2 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are multiples of 2 or 3, but not both.""
    return result","def test_find_multiples_of_2_or_3():
    assert find_multiples_of_2_or_3([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 3, 4, 8, 9, 10]
    assert find_multiples_of_2_or_3([3, 6, 9, 12, 15, 18, 21]) == [3, 9, 15, 21]
    assert find_multiples_of_2_or_3([2, 4, 6, 8, 10, 12]) == [2, 4, 8, 10]
    assert find_multiples_of_2_or_3([1, 3, 5, 7, 9, 11]) == [3, 9]
    assert find_multiples_of_2_or_3([]) == 'No numbers found that are multiples of 2 or 3, but not both.'
    assert find_multiples_of_2_or_3([6, 12, 18, 24]) == 'No numbers found that are multiples of 2 or 3, but not both.'
    assert find_multiples_of_2_or_3([3, 6, 7, 9, 14]) == [3, 9, 14]
    assert find_multiples_of_2_or_3([2, 3, 5, 7]) == [2, 3]
    assert find_multiples_of_2_or_3([5, 10, 15, 20, 25, 30]) == [10, 15, 20]",100.0,0
"def find_odd_or_divisible_by_4(lst):
    result = []
    for num in lst:
        if num % 2 != 0 or num % 4 == 0:
            result.append(num)
    if not result:
        return ""No odd numbers or numbers divisible by 4 found.""
    return result","def test_find_odd_or_divisible_by_4():
    assert find_odd_or_divisible_by_4([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 4, 5, 7, 8, 9]
    assert find_odd_or_divisible_by_4([2, 4, 6, 8, 10]) == [4, 8]
    assert find_odd_or_divisible_by_4([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 3, 5, 7, 9, 11, 13, 15]
    assert find_odd_or_divisible_by_4([4, 8, 12, 16, 20]) == [4, 8, 12, 16, 20]
    assert find_odd_or_divisible_by_4([]) == 'No odd numbers or numbers divisible by 4 found.'
    assert find_odd_or_divisible_by_4([3, 5, 6, 7]) == [3, 5, 7]
    assert find_odd_or_divisible_by_4([10, 12, 14, 16]) == [12, 16]
    assert find_odd_or_divisible_by_4([2, 3, 4, 5]) == [3, 4, 5]
    assert find_odd_or_divisible_by_4([9, 10, 12, 15]) == [9, 12, 15]",100.0,0
"def find_even_squares(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and num % 2 == 0:
            result.append(num)
    if not result:
        return ""No even square numbers found.""
    return result","def test_find_even_squares():
    assert find_even_squares([4, 16, 25, 36, 49, 64, 81, 100]) == [4, 16, 36, 64, 100]
    assert find_even_squares([1, 3, 5, 7, 9]) == 'No even square numbers found.'
    assert find_even_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4]
    assert find_even_squares([9, 25, 49, 81, 121]) == 'No even square numbers found.'
    assert find_even_squares([]) == 'No even square numbers found.'
    assert find_even_squares([0, 4, 8, 12]) == [0, 4]
    assert find_even_squares([2, 6, 8, 10, 14, 18]) == 'No even square numbers found.'
    assert find_even_squares([4, 5, 6, 7, 8, 9]) == [4]
    assert find_even_squares([4, 16, 36, 64]) == [4, 16, 36, 64]",100.0,0
"def find_multiples_of_3_or_5_not_both(lst):
    result = []
    for num in lst:
        if (num % 3 == 0 or num % 5 == 0) and not (num % 3 == 0 and num % 5 == 0):
            result.append(num)
    if not result:
        return ""No numbers found that are multiples of 3 or 5 but not both.""
    return result","def test_find_multiples_of_3_or_5_not_both():
    assert find_multiples_of_3_or_5_not_both([3, 5, 6, 10, 15, 18, 20]) == [3, 5, 6, 10, 18, 20]
    assert find_multiples_of_3_or_5_not_both([15, 30, 45, 60]) == 'No numbers found that are multiples of 3 or 5 but not both.'
    assert find_multiples_of_3_or_5_not_both([1, 2, 4, 7]) == 'No numbers found that are multiples of 3 or 5 but not both.'
    assert find_multiples_of_3_or_5_not_both([3, 6, 9, 12, 18]) == [3, 6, 9, 12, 18]
    assert find_multiples_of_3_or_5_not_both([]) == 'No numbers found that are multiples of 3 or 5 but not both.'
    assert find_multiples_of_3_or_5_not_both([5, 10, 20, 25]) == [5, 10, 20, 25]
    assert find_multiples_of_3_or_5_not_both([7, 11, 13]) == 'No numbers found that are multiples of 3 or 5 but not both.'
    assert find_multiples_of_3_or_5_not_both([2, 4, 8, 16]) == 'No numbers found that are multiples of 3 or 5 but not both.'
    assert find_multiples_of_3_or_5_not_both([15, 25, 35, 45]) == [25, 35]",100.0,0
"def count_numbers_greater_than_mean(s):
    nums = [int(x) for x in s.split() if x.isdigit()]
    if not nums:
        return ""No numbers found in the string.""

    mean = sum(nums) / len(nums)
    count = len([num for num in nums if num > mean])
    if count == 0:
        return ""No numbers greater than the mean.""
    return count","def test_count_numbers_greater_than_mean():
    assert count_numbers_greater_than_mean(""1 2 3 4 5"") == 2
    assert count_numbers_greater_than_mean(""10 20 30 40"") == 2
    assert count_numbers_greater_than_mean(""5 5 5 5 5"") == ""No numbers greater than the mean.""
    assert count_numbers_greater_than_mean(""100"") == ""No numbers greater than the mean.""
    assert count_numbers_greater_than_mean("""") == ""No numbers found in the string.""
    assert count_numbers_greater_than_mean(""10 20 30"") == 1
    assert count_numbers_greater_than_mean(""1 1 1 1 1 2 2 2 2 2"") == 5
    assert count_numbers_greater_than_mean(""50 100 150 200"") == 2
    assert count_numbers_greater_than_mean(""6 7 8 9 10"") == 2",100.0,0
"def find_powers_of_2(lst):
    result = []
    for num in lst:
        if (num & (num - 1)) == 0:
            result.append(num)
    if not result:
        return ""No powers of 2 found.""
    return result","def test_find_powers_of_2():
    assert find_powers_of_2([1, 2, 3, 4, 5, 8, 16, 32, 64]) == [1, 2, 4, 8, 16, 32, 64]
    assert find_powers_of_2([7, 14, 21, 28]) == 'No powers of 2 found.'
    assert find_powers_of_2([2, 3, 6, 7, 9, 12]) == [2]
    assert find_powers_of_2([]) == 'No powers of 2 found.'
    assert find_powers_of_2([1024, 2048, 4096]) == [1024, 2048, 4096]
    assert find_powers_of_2([1, 4, 8, 16, 32]) == [1, 4, 8, 16, 32]
    assert find_powers_of_2([1, 2, 3, 4, 6, 7]) == [1, 2, 4]
    assert find_powers_of_2([5, 10, 20, 40]) == 'No powers of 2 found.'
    assert find_powers_of_2([64, 128, 256, 512]) == [64, 128, 256, 512]",100.0,0
"def find_even_and_divisible_by_8(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 8 == 0:
            result.append(num)
    if not result:
        return ""No even numbers divisible by 8 found.""
    return result","def test_find_even_and_divisible_by_8():
    assert find_even_and_divisible_by_8([8, 16, 24, 32, 40, 48, 56, 64]) == [8, 16, 24, 32, 40, 48, 56, 64]
    assert find_even_and_divisible_by_8([7, 14, 21, 28]) == 'No even numbers divisible by 8 found.'
    assert find_even_and_divisible_by_8([2, 4, 6, 10, 12, 14]) == 'No even numbers divisible by 8 found.'
    assert find_even_and_divisible_by_8([8, 16, 32, 40]) == [8, 16, 32, 40]
    assert find_even_and_divisible_by_8([]) == 'No even numbers divisible by 8 found.'
    assert find_even_and_divisible_by_8([80, 96, 112]) == [80, 96, 112]
    assert find_even_and_divisible_by_8([1, 3, 5, 7]) == 'No even numbers divisible by 8 found.'
    assert find_even_and_divisible_by_8([0, 8, 16, 24]) == [0, 8, 16, 24]
    assert find_even_and_divisible_by_8([9, 18, 27, 36]) == 'No even numbers divisible by 8 found.'",100.0,0
"def find_odd_and_divisible_by_3(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 3 == 0:
            result.append(num)
    if not result:
        return ""No odd numbers divisible by 3 found.""
    return result","def test_find_odd_and_divisible_by_3():
    assert find_odd_and_divisible_by_3([3, 6, 9, 12, 15, 18, 21, 24]) == [3, 9, 15, 21]
    assert find_odd_and_divisible_by_3([2, 4, 6, 8, 10, 12]) == 'No odd numbers divisible by 3 found.'
    assert find_odd_and_divisible_by_3([5, 10, 15, 20, 25, 30]) == [15]
    assert find_odd_and_divisible_by_3([1, 2, 3, 4, 5]) == [3]
    assert find_odd_and_divisible_by_3([]) == 'No odd numbers divisible by 3 found.'
    assert find_odd_and_divisible_by_3([9, 18, 27, 36]) == [9, 27]
    assert find_odd_and_divisible_by_3([3, 5, 7, 11, 13, 15]) == [3, 15]
    assert find_odd_and_divisible_by_3([21, 33, 45, 57]) == [21, 33, 45, 57]
    assert find_odd_and_divisible_by_3([8, 16, 32, 64]) == 'No odd numbers divisible by 3 found.'",100.0,0
"def find_non_even_or_not_multiples_of_7(lst):
    result = []
    for num in lst:
        if num % 2 != 0 or num % 7 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are not even or not divisible by 7.""
    return result","def test_find_non_even_or_not_multiples_of_7():
    assert find_non_even_or_not_multiples_of_7([2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 6, 7, 8, 9]
    assert find_non_even_or_not_multiples_of_7([7, 14, 21, 28]) == [7, 21]
    assert find_non_even_or_not_multiples_of_7([1, 2, 4, 8, 16, 32]) == [1, 2, 4, 8, 16, 32]
    assert find_non_even_or_not_multiples_of_7([2, 3, 5, 7]) == [2, 3, 5, 7]
    assert find_non_even_or_not_multiples_of_7([0, 7, 14, 21]) == [7, 21]
    assert find_non_even_or_not_multiples_of_7([9, 18, 27, 36]) == [9, 18, 27, 36]
    assert find_non_even_or_not_multiples_of_7([3, 7, 10, 13]) == [3, 7, 10, 13]
    assert find_non_even_or_not_multiples_of_7([2, 6, 14, 28]) == [2, 6]
    assert find_non_even_or_not_multiples_of_7([5, 10, 20, 25]) == [5, 10, 20, 25]
    assert find_non_even_or_not_multiples_of_7([28, 14]) == ""No numbers found that are not even or not divisible by 7.""",100.0,0
"def find_not_divisible_by_2_but_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 5 == 0:
            result.append(num)
    if not result:
        return ""No numbers found that are not divisible by 2 but divisible by 5.""
    return result","def test_find_not_divisible_by_2_but_divisible_by_5():
    assert find_not_divisible_by_2_but_divisible_by_5([5, 10, 15, 20, 25, 30]) == [5, 15, 25]
    assert find_not_divisible_by_2_but_divisible_by_5([2, 4, 6, 8, 10]) == 'No numbers found that are not divisible by 2 but divisible by 5.'
    assert find_not_divisible_by_2_but_divisible_by_5([1, 2, 3, 4, 5]) == [5]
    assert find_not_divisible_by_2_but_divisible_by_5([11, 13, 15, 17]) == [15]
    assert find_not_divisible_by_2_but_divisible_by_5([]) == 'No numbers found that are not divisible by 2 but divisible by 5.'
    assert find_not_divisible_by_2_but_divisible_by_5([21, 25, 29]) == [25]
    assert find_not_divisible_by_2_but_divisible_by_5([30, 35, 40, 45]) == [35, 45]
    assert find_not_divisible_by_2_but_divisible_by_5([7, 14, 21, 28]) == 'No numbers found that are not divisible by 2 but divisible by 5.'
    assert find_not_divisible_by_2_but_divisible_by_5([50, 75, 95]) == [75, 95]",100.0,0
"def find_multiples_of_3_5_or_7(lst):
    result = []
    for num in lst:
        if num % 3 == 0 or num % 5 == 0 or num % 7 == 0:
            result.append(num)
    if not result:
        return ""No numbers found that are multiples of 3, 5, or 7.""
    return result","def test_find_multiples_of_3_5_or_7():
    assert find_multiples_of_3_5_or_7([3, 5, 7, 9, 10, 14, 15, 21, 25, 30]) == [3, 5, 7, 9, 10, 14, 15, 21, 25, 30]
    assert find_multiples_of_3_5_or_7([1, 2, 4, 8, 11]) == 'No numbers found that are multiples of 3, 5, or 7.'
    assert find_multiples_of_3_5_or_7([3, 6, 12, 18]) == [3, 6, 12, 18]
    assert find_multiples_of_3_5_or_7([5, 10, 20, 25]) == [5, 10, 20, 25]
    assert find_multiples_of_3_5_or_7([7, 14, 28, 35]) == [7, 14, 28, 35]
    assert find_multiples_of_3_5_or_7([]) == 'No numbers found that are multiples of 3, 5, or 7.'
    assert find_multiples_of_3_5_or_7([9, 15, 21, 27, 33]) == [9, 15, 21, 27, 33]
    assert find_multiples_of_3_5_or_7([35, 45, 55, 65]) == [35, 45, 55, 65]
    assert find_multiples_of_3_5_or_7([50, 75, 100]) == [50, 75, 100]",100.0,0
"def find_even_not_divisible_by_4(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 4 != 0:
            result.append(num)
    if not result:
        return ""No even numbers found that are not divisible by 4.""
    return result","def test_find_even_not_divisible_by_4():
    assert find_even_not_divisible_by_4([2, 3, 4, 6, 8, 10, 12, 14, 16]) == [2, 6, 10, 14]
    assert find_even_not_divisible_by_4([4, 8, 12, 16, 20]) == 'No even numbers found that are not divisible by 4.'
    assert find_even_not_divisible_by_4([1, 3, 5, 7, 9]) == 'No even numbers found that are not divisible by 4.'
    assert find_even_not_divisible_by_4([10, 20, 30, 40]) == [10, 30]
    assert find_even_not_divisible_by_4([]) == 'No even numbers found that are not divisible by 4.'
    assert find_even_not_divisible_by_4([6, 18, 26]) == [6, 18, 26]
    assert find_even_not_divisible_by_4([14, 28, 44, 52]) == [14]
    assert find_even_not_divisible_by_4([32, 36, 48, 60]) == 'No even numbers found that are not divisible by 4.'
    assert find_even_not_divisible_by_4([22, 26, 38]) == [22, 26, 38]",100.0,0
"def find_multiples_of_3_or_5_not_15(lst):
    result = []
    for num in lst:
        if (num % 3 == 0 or num % 5 == 0) and num % 15 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are multiples of 3 or 5 but not 15.""
    return result","def test_find_multiples_of_3_or_5_not_15():
    assert find_multiples_of_3_or_5_not_15([3, 5, 9, 10, 12, 18, 20, 30, 33]) == [3, 5, 9, 10, 12, 18, 20, 33]
    assert find_multiples_of_3_or_5_not_15([15, 30, 45, 60]) == 'No numbers found that are multiples of 3 or 5 but not 15.'
    assert find_multiples_of_3_or_5_not_15([1, 2, 4, 7, 11]) == 'No numbers found that are multiples of 3 or 5 but not 15.'
    assert find_multiples_of_3_or_5_not_15([5, 10, 20, 25]) == [5, 10, 20, 25]
    assert find_multiples_of_3_or_5_not_15([3, 6, 9, 12]) == [3, 6, 9, 12]
    assert find_multiples_of_3_or_5_not_15([]) == 'No numbers found that are multiples of 3 or 5 but not 15.'
    assert find_multiples_of_3_or_5_not_15([27, 33, 39]) == [27, 33, 39]
    assert find_multiples_of_3_or_5_not_15([5, 25, 35]) == [5, 25, 35]
    assert find_multiples_of_3_or_5_not_15([9, 21, 27, 39]) == [9, 21, 27, 39]",100.0,0
"def find_difference_of_two_squares(lst):
    result = []
    for num in lst:
        for i in range(1, int(num ** 0.5) + 1):
            if (num + i ** 2) ** 0.5 == int((num + i ** 2) ** 0.5):
                result.append(num)
                break
    if not result:
        return ""No numbers found that are the difference of two squares.""
    return result","def test_find_difference_of_two_squares():
    assert find_difference_of_two_squares([1, 7, 8]) == [8]
    assert find_difference_of_two_squares([14, 15, 17]) == [15]
    assert find_difference_of_two_squares([2, 3, 5]) == [3, 5]
    assert find_difference_of_two_squares([16, 24, 35]) == [16, 24, 35]
    assert find_difference_of_two_squares([16, 24, 35]) == [16, 24, 35]
    assert find_difference_of_two_squares([]) == ""No numbers found that are the difference of two squares.""",100.0,0
"def find_sum_of_two_divisible_by_3(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if i % 3 == 0 and (num - i) % 3 == 0:
                result.append(num)
                break
    if not result:
        return ""No numbers found that are the sum of two numbers divisible by 3.""
    return result","def test_find_sum_of_two_divisible_by_3():
    assert find_sum_of_two_divisible_by_3([6, 15, 21]) == [6, 15, 21]
    assert find_sum_of_two_divisible_by_3([5, 7, 11]) == ""No numbers found that are the sum of two numbers divisible by 3.""
    assert find_sum_of_two_divisible_by_3([9, 18, 30]) == [9, 18, 30]
    assert find_sum_of_two_divisible_by_3([1, 2, 4]) == ""No numbers found that are the sum of two numbers divisible by 3.""",100.0,0
"def find_not_even_but_divisible_by_9(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 9 == 0:
            result.append(num)
    if not result:
        return ""No numbers found that are not even but divisible by 9.""
    return result","def test_find_not_even_but_divisible_by_9():
    assert find_not_even_but_divisible_by_9([9, 27, 45]) == [9, 27, 45]
    assert find_not_even_but_divisible_by_9([2, 4, 6]) == ""No numbers found that are not even but divisible by 9.""
    assert find_not_even_but_divisible_by_9([15, 33, 81]) == [81]
    assert find_not_even_but_divisible_by_9([12, 18, 24]) == ""No numbers found that are not even but divisible by 9.""",100.0,0
"def find_divisible_by_2(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 4 != 0:
            result.append(num)
    if not result:
        return ""No numbers.""
    return result","def test_find_divisible_by_2():
    assert find_divisible_by_2([4, 16, 28]) == 'No numbers.'
    assert find_divisible_by_2([1, 3, 5]) == 'No numbers.'
    assert find_divisible_by_2([20, 22, 32]) == [22]
    assert find_divisible_by_2([6, 7, 10]) == [6, 10]",100.0,0
"def find_divisible_by_2_or_3_not_6(lst):
    result = []
    for num in lst:
        if (num % 2 == 0 or num % 3 == 0) and num % 6 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are divisible by 2 or 3 but not 6.""
    return result","def test_find_divisible_by_2_or_3_not_6():
    assert find_divisible_by_2_or_3_not_6([2, 5, 8]) == [2, 8]
    assert find_divisible_by_2_or_3_not_6([4, 10, 14]) == [4, 10, 14]
    assert find_divisible_by_2_or_3_not_6([6, 12, 24]) == ""No numbers found that are divisible by 2 or 3 but not 6.""
    assert find_divisible_by_2_or_3_not_6([1, 7, 11]) == ""No numbers found that are divisible by 2 or 3 but not 6.""",100.0,0
"def find_divisors_of_12_not_even(lst):
    result = []
    for num in lst:
        if 12 % num == 0 and num % 2 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are divisors of 12 but not even.""
    return result","def test_find_divisors_of_12_not_even():
    assert find_divisors_of_12_not_even([1, 3, 6]) == [1, 3]
    assert find_divisors_of_12_not_even([2, 4, 8]) == ""No numbers found that are divisors of 12 but not even.""
    assert find_divisors_of_12_not_even([5, 7, 9]) == ""No numbers found that are divisors of 12 but not even.""
    assert find_divisors_of_12_not_even([12, 18, 24]) == ""No numbers found that are divisors of 12 but not even.""",100.0,0
"def find_divisors_of_6_not_12(lst):
    result = []
    for num in lst:
        if 6 % num == 0 and num != 12:
            result.append(num)
    if not result:
        return ""No numbers found that are divisors of 6 but not 12.""
    return result","def test_find_divisors_of_6_not_12():
    assert find_divisors_of_6_not_12([1, 3, 6]) == [1, 3, 6]
    assert find_divisors_of_6_not_12([2, 4, 8]) == [2]
    assert find_divisors_of_6_not_12([5, 9, 11]) == ""No numbers found that are divisors of 6 but not 12.""
    assert find_divisors_of_6_not_12([12, 18, 24]) == ""No numbers found that are divisors of 6 but not 12.""",100.0,0
"def find_squares_of_even_numbers(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 == 0:
            result.append(num)
    if not result:
        return ""No squares of even numbers found.""
    return result","def test_find_squares_of_even_numbers():
    assert find_squares_of_even_numbers([4, 16, 36]) == [4, 16, 36]
    assert find_squares_of_even_numbers([9, 25, 49]) == ""No squares of even numbers found.""
    assert find_squares_of_even_numbers([8, 18, 32]) == ""No squares of even numbers found.""
    assert find_squares_of_even_numbers([64, 100, 144]) == [64, 100, 144]",100.0,0
"def find_even_not_powers_of_2(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and (num & (num - 1)) != 0:
            result.append(num)
    if not result:
        return ""No even numbers found that are not powers of 2.""
    return result","def test_find_even_not_powers_of_2():
    assert find_even_not_powers_of_2([2, 3, 6, 9]) == [6]
    assert find_even_not_powers_of_2([4, 8, 16, 32]) == ""No even numbers found that are not powers of 2.""
    assert find_even_not_powers_of_2([18, 20, 22, 24]) == [18, 20, 22, 24]
    assert find_even_not_powers_of_2([1, 2, 4, 8]) == ""No even numbers found that are not powers of 2.""",100.0,0
"def find_not_even_and_not_divisible_by_9(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 9 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are neither even nor divisible by 9.""
    return result","def test_find_not_even_and_not_divisible_by_9():
    assert find_not_even_and_not_divisible_by_9([1, 3, 7, 11]) == [1, 3, 7, 11]
    assert find_not_even_and_not_divisible_by_9([2, 4, 8, 16]) == ""No numbers found that are neither even nor divisible by 9.""
    assert find_not_even_and_not_divisible_by_9([5, 15, 25, 35]) == [5, 15, 25, 35]
    assert find_not_even_and_not_divisible_by_9([18, 27, 36, 45]) == ""No numbers found that are neither even nor divisible by 9.""",100.0,0
"def find_multiples_of_3_and_5_not_7(lst):
    result = []
    for num in lst:
        if num % 3 == 0 and num % 5 == 0 and num % 7 != 0:
            result.append(num)
    if not result:
        return ""No numbers found that are divisible by 3 and 5 but not 7.""
    return result","def test_find_multiples_of_3_and_5_not_7():
    assert find_multiples_of_3_and_5_not_7([15, 30, 45]) == [15, 30, 45]
    assert find_multiples_of_3_and_5_not_7([21, 42, 63]) == ""No numbers found that are divisible by 3 and 5 but not 7.""
    assert find_multiples_of_3_and_5_not_7([35, 50, 55]) == ""No numbers found that are divisible by 3 and 5 but not 7.""
    assert find_multiples_of_3_and_5_not_7([75, 90, 105]) == [75, 90]",100.0,0
"def find_product_of_two_odd_numbers(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if num % i == 0 and (num // i) % 2 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_odd_numbers():
    assert find_product_of_two_odd_numbers([9, 15, 25]) == [9, 15, 25]
    assert find_product_of_two_odd_numbers([10, 16, 20]) is None
    assert find_product_of_two_odd_numbers([21, 27, 45]) == [21, 27, 45]
    assert find_product_of_two_odd_numbers([14, 18, 22]) is None",100.0,0
"def find_product_of_two_primes(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i):
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes():
    assert find_product_of_two_primes([6, 10, 14]) == [6, 10, 14]
    assert find_product_of_two_primes([8, 12, 18]) is None
    assert find_product_of_two_primes([15, 21, 35]) == [15, 21, 35]
    assert find_product_of_two_primes([20, 28, 30]) is None
    assert find_product_of_two_primes([]) is None",100.0,0
"def find_odd_not_power_of_2(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and (num & (num - 1)) != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_odd_not_power_of_2():
    assert find_odd_not_power_of_2([1, 3, 7]) == [3, 7]
    assert find_odd_not_power_of_2([2, 4, 8]) is None
    assert find_odd_not_power_of_2([9, 11, 13]) == [9, 11, 13]
    assert find_odd_not_power_of_2([16, 32, 64]) is None",100.0,0
"def find_divisible_by_6_not_9(lst):
    result = []
    for num in lst:
        if num % 6 == 0 and num % 9 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_6_not_9():
    assert find_divisible_by_6_not_9([6, 12, 24]) == [6, 12, 24]
    assert find_divisible_by_6_not_9([9, 18, 27]) is None
    assert find_divisible_by_6_not_9([30, 36, 42]) == [30, 42]
    assert find_divisible_by_6_not_9([45, 54, 63]) is None",100.0,0
"def find_divisors_of_24_not_8(lst):
    result = []
    for num in lst:
        if 24 % num == 0 and num % 8 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_24_not_8():
    assert find_divisors_of_24_not_8([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert find_divisors_of_24_not_8([8, 16, 24]) is None
    assert find_divisors_of_24_not_8([6, 12, 18]) == [6, 12]
    assert find_divisors_of_24_not_8([5, 10, 15]) is None",100.0,0
"def find_squares_of_odd_numbers(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_odd_numbers():
    assert find_squares_of_odd_numbers([9, 25, 49]) == [9, 25, 49]
    assert find_squares_of_odd_numbers([16, 36, 64]) is None
    assert find_squares_of_odd_numbers([81, 121, 169]) == [81, 121, 169]
    assert find_squares_of_odd_numbers([100, 144, 196]) is None",100.0,0
"def find_powers_of_2_not_even(lst):
    result = []
    for num in lst:
        if (num & (num - 1)) == 0 and num % 2 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_powers_of_2_not_even():
    assert find_powers_of_2_not_even([1, 3, 7]) == [1]
    assert find_powers_of_2_not_even([8, 16, 32]) is None
    assert find_powers_of_2_not_even([2, 4, 64]) is None
    assert find_powers_of_2_not_even([128, 256, 512]) is None",100.0,0
"def find_not_multiples_of_3_but_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 3 != 0 and num % 5 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_not_multiples_of_3_but_divisible_by_5():
    assert find_not_multiples_of_3_but_divisible_by_5([5, 10, 20]) == [5, 10, 20]
    assert find_not_multiples_of_3_but_divisible_by_5([9, 15, 21]) is None
    assert find_not_multiples_of_3_but_divisible_by_5([25, 35, 50]) == [25, 35, 50]
    assert find_not_multiples_of_3_but_divisible_by_5([6, 12, 18]) is None",100.0,0
"def find_divisors_of_15_not_3(lst):
    result = []
    for num in lst:
        if 15 % num == 0 and num % 3 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_15_not_3():
    assert find_divisors_of_15_not_3([1, 5, 15]) == [1, 5]
    assert find_divisors_of_15_not_3([3, 9, 12]) is None
    assert find_divisors_of_15_not_3([2, 4, 6]) is None
    assert find_divisors_of_15_not_3([7, 11, 13]) is None",100.0,0
"def find_powers_of_2_not_multiples_of_4(lst):
    result = []
    for num in lst:
        if (num & (num - 1)) == 0 and num % 4 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_powers_of_2_not_multiples_of_4():
    assert find_powers_of_2_not_multiples_of_4([1, 2, 3, 4, 8, 16]) == [1, 2]
    assert find_powers_of_2_not_multiples_of_4([32, 64, 128]) is None
    assert find_powers_of_2_not_multiples_of_4([3, 5, 7]) is None
    assert find_powers_of_2_not_multiples_of_4([1024, 256]) is None
    assert find_powers_of_2_not_multiples_of_4([2, 4, 8, 16]) == [2]
    assert find_powers_of_2_not_multiples_of_4([1, 3, 9, 5]) == [1]
    assert find_powers_of_2_not_multiples_of_4([0]) is None",100.0,0
"def find_odd_not_square(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and int(num ** 0.5) ** 2 != num:
            result.append(num)
    if not result:
        return None
    return result","def test_find_odd_not_square():
    assert find_odd_not_square([1, 2, 3, 5, 7, 9, 10]) == [3, 5, 7]
    assert find_odd_not_square([9, 1, 3, 11]) == [3, 11]
    assert find_odd_not_square([4, 16, 25]) is None
    assert find_odd_not_square([1, 3, 5, 7, 11]) == [3, 5, 7, 11]
    assert find_odd_not_square([25, 49, 81]) is None
    assert find_odd_not_square([4, 16, 64]) is None",100.0,0
"def find_squares_of_even_not_divisible_by_8(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 == 0 and num % 8 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_even_not_divisible_by_8():
    assert find_squares_of_even_not_divisible_by_8([4, 16, 64, 36, 49]) == [4, 36]
    assert find_squares_of_even_not_divisible_by_8([16, 64, 4, 81]) == [4]
    assert find_squares_of_even_not_divisible_by_8([1, 9, 25]) is None
    assert find_squares_of_even_not_divisible_by_8([100, 144]) == [100]
    assert find_squares_of_even_not_divisible_by_8([64, 256]) is None",100.0,0
"def find_divisors_of_6_not_2(lst):
    result = []
    for num in lst:
        if 6 % num == 0 and num != 2:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_6_not_2():
    assert find_divisors_of_6_not_2([1, 2, 3, 6]) == [1, 3, 6]
    assert find_divisors_of_6_not_2([6, 9, 12]) == [6]
    assert find_divisors_of_6_not_2([2, 3, 6]) == [3, 6]
    assert find_divisors_of_6_not_2([12, 3]) == [3]
    assert find_divisors_of_6_not_2([8, 10, 6]) == [6]
    assert find_divisors_of_6_not_2([18, 24, 30]) is None",100.0,0
"def find_divisors_of_48_not_16(lst):
    result = []
    for num in lst:
        if 48 % num == 0 and num % 16 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_48_not_16():
    assert find_divisors_of_48_not_16([1, 2, 3, 4, 6, 8]) == [1, 2, 3, 4, 6, 8]
    assert find_divisors_of_48_not_16([16, 8, 4, 24]) == [8, 4, 24]
    assert find_divisors_of_48_not_16([1, 2, 3, 6, 9]) == [1, 2, 3, 6]
    assert find_divisors_of_48_not_16([16, 48]) is None
    assert find_divisors_of_48_not_16([12, 16, 24]) == [12, 24]",100.0,0
"def find_divisors_of_20_not_even(lst):
    result = []
    for num in lst:
        if 20 % num == 0 and num % 2 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_20_not_even():
    assert find_divisors_of_20_not_even([1, 2, 5, 10]) == [1, 5]
    assert find_divisors_of_20_not_even([4, 6, 8]) is None
    assert find_divisors_of_20_not_even([5, 15, 30]) == [5]
    assert find_divisors_of_20_not_even([1, 2, 5]) == [1, 5]
    assert find_divisors_of_20_not_even([20, 10]) is None",100.0,0
"def find_divisible_by_2_not_4_or_8(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 4 != 0 and num % 8 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_2_not_4_or_8():
    assert find_divisible_by_2_not_4_or_8([2, 4, 8, 10]) == [2, 10]
    assert find_divisible_by_2_not_4_or_8([2, 6, 10, 14]) == [2, 6, 10, 14]
    assert find_divisible_by_2_not_4_or_8([1, 3, 5]) is None
    assert find_divisible_by_2_not_4_or_8([8, 16, 32]) is None
    assert find_divisible_by_2_not_4_or_8([100]) is None",100.0,0
"def find_squares_of_odd_not_7(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 7 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_odd_not_7():
    assert find_squares_of_odd_not_7([1, 9, 25, 49, 81]) == [1, 9, 25, 81]
    assert find_squares_of_odd_not_7([49, 121, 169]) == [121, 169]
    assert find_squares_of_odd_not_7([64, 256]) is None
    assert find_squares_of_odd_not_7([49, 121, 169]) == [121, 169]
    assert find_squares_of_odd_not_7([81, 25]) == [81, 25]",100.0,0
"def find_divisible_by_5_not_divisible_by_10(lst):
    result = []
    for num in lst:
        if num % 5 == 0 and num % 10 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_5_not_divisible_by_10():
    assert find_divisible_by_5_not_divisible_by_10([5, 10, 15, 20]) == [5, 15]
    assert find_divisible_by_5_not_divisible_by_10([25, 30, 35]) == [25, 35]
    assert find_divisible_by_5_not_divisible_by_10([1, 3, 6]) is None
    assert find_divisible_by_5_not_divisible_by_10([50, 100]) is None
    assert find_divisible_by_5_not_divisible_by_10([5, 15]) == [5, 15]",100.0,0
"def find_product_of_two_odd_numbers_not_divisible_by_3(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if num % i == 0 and (num // i) % 2 != 0 and num % 3 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_odd_numbers_not_divisible_by_3():
    assert find_product_of_two_odd_numbers_not_divisible_by_3([1, 9, 15, 35, 45]) == [35]
    assert find_product_of_two_odd_numbers_not_divisible_by_3([5, 7, 9, 11, 13]) == [5, 7, 11, 13]
    assert find_product_of_two_odd_numbers_not_divisible_by_3([9, 45, 63]) is None
    assert find_product_of_two_odd_numbers_not_divisible_by_3([21, 35]) == [35]
    assert find_product_of_two_odd_numbers_not_divisible_by_3([15, 33]) is None",100.0,0
"def find_even_not_divisible_by_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 3 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_even_not_divisible_by_3():
    assert find_even_not_divisible_by_3([2, 4, 6, 8, 10, 12]) == [2, 4, 8, 10]
    assert find_even_not_divisible_by_3([6, 12, 18]) is None
    assert find_even_not_divisible_by_3([2, 10, 4]) == [2, 10, 4]
    assert find_even_not_divisible_by_3([2, 4, 8]) == [2, 4, 8]
    assert find_even_not_divisible_by_3([18, 24]) is None",100.0,0
"def find_difference_of_two_even_numbers(lst):
    result = []
    for num in lst:
        for i in range(2, num // 2 + 1, 2):
            if (num - i) % 2 == 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_even_numbers():
    assert find_difference_of_two_even_numbers([4, 6, 8, 10, 12]) == [4, 6, 8, 10, 12]
    assert find_difference_of_two_even_numbers([2, 4, 6, 8]) == [4, 6, 8]
    assert find_difference_of_two_even_numbers([1, 3, 5]) is None
    assert find_difference_of_two_even_numbers([14, 18, 20]) == [14, 18, 20]
    assert find_difference_of_two_even_numbers([2, 6, 10]) == [6, 10]",100.0,0
"def find_divisors_of_18_not_9(lst):
    result = []
    for num in lst:
        if 18 % num == 0 and num % 9 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_18_not_9():
    assert find_divisors_of_18_not_9([1, 2, 3, 6]) == [1, 2, 3, 6]
    assert find_divisors_of_18_not_9([9, 12, 15]) is None
    assert find_divisors_of_18_not_9([18, 3, 6]) == [3, 6]
    assert find_divisors_of_18_not_9([1, 3, 9]) == [1, 3]
    assert find_divisors_of_18_not_9([6, 18]) == [6]",100.0,0
"def find_multiples_of_3_and_5_not_15(lst):
    result = []
    for num in lst:
        if num % 3 == 0 or num % 5 == 0 and num % 15 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_multiples_of_3_and_5_not_15():
    assert find_multiples_of_3_and_5_not_15([3, 5, 15, 30, 45]) == [3, 5, 15, 30, 45]
    assert find_multiples_of_3_and_5_not_15([4, 11, 7, 8]) is None
    assert find_multiples_of_3_and_5_not_15([6, 30, 60]) == [6, 30, 60]
    assert find_multiples_of_3_and_5_not_15([3, 15, 30]) == [3, 15, 30]
    assert find_multiples_of_3_and_5_not_15([45, 60]) == [45, 60]",100.0,0
"def find_product_of_two_primes_not_divisible_by_11(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 11 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_divisible_by_11():
    assert find_product_of_two_primes_not_divisible_by_11([6, 15, 35, 55]) == [6, 15, 35]
    assert find_product_of_two_primes_not_divisible_by_11([2, 3, 5, 7]) is None
    assert find_product_of_two_primes_not_divisible_by_11([11, 22]) is None
    assert find_product_of_two_primes_not_divisible_by_11([6, 33]) == [6]
    assert find_product_of_two_primes_not_divisible_by_11([6, 15, 35]) == [6, 15, 35]
    assert find_product_of_two_primes_not_divisible_by_11([6, 625, 342]) == [6]",100.0,0
"def find_squares_of_even_not_divisible_by_4(lst):
    result = []
    for num in lst:
        if (int(num ** 0.5) ** 2 == num or int(num ** 0.5) % 2 == 0) and num % 4 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_even_not_divisible_by_4():
    assert find_squares_of_even_not_divisible_by_4([4, 16, 36, 64, 100]) is None
    assert find_squares_of_even_not_divisible_by_4([64, 16, 4]) is None
    assert find_squares_of_even_not_divisible_by_4([25, 49, 121]) == [25, 49, 121]
    assert find_squares_of_even_not_divisible_by_4([144]) is None
    assert find_squares_of_even_not_divisible_by_4([2, 4, 6]) == [6]",100.0,0
"def find_multiples_of_5_and_6_not_10(lst):
    result = []
    for num in lst:
        if (num % 5 == 0 or num % 6 == 0) and num % 10 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_multiples_of_5_and_6_not_10():
    assert find_multiples_of_5_and_6_not_10([30, 60, 90, 120]) is None
    assert find_multiples_of_5_and_6_not_10([10, 15, 25]) == [15, 25]
    assert find_multiples_of_5_and_6_not_10([30, 50, 75]) == [75]
    assert find_multiples_of_5_and_6_not_10([5, 6, 15]) == [5, 6, 15]
    assert find_multiples_of_5_and_6_not_10([90]) is None",100.0,0
"def find_difference_of_two_even_not_divisible_by_4(lst):
    result = []
    for num in lst:
        for i in range(2, num // 2 + 1, 2):
            if (num - i) % 2 == 0 and num % 4 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_even_not_divisible_by_4():
    assert find_difference_of_two_even_not_divisible_by_4([4, 8, 12, 16]) is None
    assert find_difference_of_two_even_not_divisible_by_4([10, 14, 18]) == [10, 14, 18]
    assert find_difference_of_two_even_not_divisible_by_4([2, 4, 6]) == [6]
    assert find_difference_of_two_even_not_divisible_by_4([24, 28, 32]) is None
    assert find_difference_of_two_even_not_divisible_by_4([10, 20]) == [10]",100.0,0
"def find_product_of_two_primes_not_7(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 7 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_7():
    assert find_product_of_two_primes_not_7([6, 10, 14, 15]) == [6, 10, 15]
    assert find_product_of_two_primes_not_7([5, 13, 17]) is None
    assert find_product_of_two_primes_not_7([7, 11]) is None
    assert find_product_of_two_primes_not_7([6, 15, 21]) == [6, 15]
    assert find_product_of_two_primes_not_7([3, 5, 15]) == [15]
    assert find_product_of_two_primes_not_7([3, 270, 150]) is None",100.0,0
"def find_difference_of_two_odd(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if (num - i) % 3 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_odd():
    assert find_difference_of_two_odd([5, 7, 9, 11]) == [5, 7, 9, 11]
    assert find_difference_of_two_odd([1, 3, 5, 7]) == [3, 5, 7]
    assert find_difference_of_two_odd([3, 9, 15]) == [3, 9, 15]
    assert find_difference_of_two_odd([5, 15, 25]) == [5, 15, 25]
    assert find_difference_of_two_odd([1, 1, 1]) is None
    assert find_difference_of_two_odd([]) is None",100.0,0
"def find_product_of_two_odd_not_5(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if num % i == 0 and (num // i) % 2 != 0 and num % 5 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_odd_not_5():
    assert find_product_of_two_odd_not_5([15, 21, 35, 45]) == [21]
    assert find_product_of_two_odd_not_5([10, 5, 7, 9]) == [7, 9]
    assert find_product_of_two_odd_not_5([27, 49, 77, 99]) == [27, 49, 77, 99]
    assert find_product_of_two_odd_not_5([]) is None
    assert find_product_of_two_odd_not_5([9, 25, 49, 63]) == [9, 49, 63]
    assert find_product_of_two_odd_not_5([1, 1, 1, 1, 1, 1]) is None",100.0,0
"def find_divisors_of_36_not_9(lst):
    result = []
    for num in lst:
        if 36 % num == 0 and num % 9 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_36_not_9():
    assert find_divisors_of_36_not_9([1, 2, 3, 4, 6, 9, 12, 18]) == [1, 2, 3, 4, 6, 12]
    assert find_divisors_of_36_not_9([5, 7, 10]) is None
    assert find_divisors_of_36_not_9([36, 6, 4]) == [6, 4]
    assert find_divisors_of_36_not_9([18, 3, 9]) == [3]
    assert find_divisors_of_36_not_9([8, 2, 6]) == [2, 6]
    assert find_divisors_of_36_not_9([1, 36, 12, 2]) == [1, 12, 2]",100.0,0
"def find_odd_and_divisible_by_5_not_10(lst):
    result = []
    for num in lst:
        if num % 2 != 0 and num % 5 == 0 and num % 10 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_odd_and_divisible_by_5_not_10():
    assert find_odd_and_divisible_by_5_not_10([5, 15, 25, 35, 10]) == [5, 15, 25, 35]
    assert find_odd_and_divisible_by_5_not_10([5, 10, 20]) == [5]
    assert find_odd_and_divisible_by_5_not_10([35, 55, 75]) == [35, 55, 75]
    assert find_odd_and_divisible_by_5_not_10([10, 30, 50]) is None
    assert find_odd_and_divisible_by_5_not_10([25, 15, 5]) == [25, 15, 5]
    assert find_odd_and_divisible_by_5_not_10([35, 45, 100, 90]) == [35, 45]",100.0,0
"def find_divisible_by_6(lst):
    result = []
    for num in lst:
        if num % 6 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_6():
    assert find_divisible_by_6([6, 12, 18, 24, 36]) == [6, 12, 18, 24, 36]
    assert find_divisible_by_6([3, 6, 9, 12]) == [6, 12]
    assert find_divisible_by_6([36, 42, 48]) == [36, 42, 48]
    assert find_divisible_by_6([54, 60, 72]) == [54, 60, 72]
    assert find_divisible_by_6([5, 10, 79]) is None
    assert find_divisible_by_6([9, 18, 72]) == [18, 72]",100.0,0
"def find_divisors_of_30_not_5(lst):
    result = []
    for num in lst:
        if 30 % num == 0 and num % 5 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_30_not_5():
    assert find_divisors_of_30_not_5([1, 2, 3, 5, 6, 10, 15, 30]) == [1, 2, 3, 6]
    assert find_divisors_of_30_not_5([7, 11, 13]) is None
    assert find_divisors_of_30_not_5([30, 12, 6]) == [6]
    assert find_divisors_of_30_not_5([9, 12, 4]) is None
    assert find_divisors_of_30_not_5([15, 3]) == [3]
    assert find_divisors_of_30_not_5([10, 12, 18]) is None",100.0,0
"def find_product_of_two_primes_not_6(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 6 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_6():
    assert find_product_of_two_primes_not_6([6, 10, 15, 77]) == [10, 15, 77]
    assert find_product_of_two_primes_not_6([2, 3, 5, 7]) is None
    assert find_product_of_two_primes_not_6([21, 35, 77]) == [21, 35, 77]
    assert find_product_of_two_primes_not_6([199, 235, 569]) == [235]
    assert find_product_of_two_primes_not_6([11, 13, 17]) is None
    assert find_product_of_two_primes_not_6([8, 9, 14, 21]) == [9, 14, 21]",100.0,0
"def find_even_and_divisible_by_7(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 7 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_even_and_divisible_by_7():
    assert find_even_and_divisible_by_7([14, 28, 70]) == [14, 28, 70]
    assert find_even_and_divisible_by_7([7, 35, 49]) is None
    assert find_even_and_divisible_by_7([21, 49, 21]) is None
    assert find_even_and_divisible_by_7([12, 24, 42]) == [42]
    assert find_even_and_divisible_by_7([]) is None
    assert find_even_and_divisible_by_7([2, 4, 12, 16]) is None",100.0,0
"def find_difference_of_two_odd_not_5(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if num % 5 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_odd_not_5():
    assert find_difference_of_two_odd_not_5([9, 15, 25, 35]) == [9]
    assert find_difference_of_two_odd_not_5([3, 5, 7, 11]) == [3, 7, 11]
    assert find_difference_of_two_odd_not_5([10, 5, 7, 9]) == [7, 9]
    assert find_difference_of_two_odd_not_5([21, 35, 49]) == [21, 49]
    assert find_difference_of_two_odd_not_5([5, 25]) is None
    assert find_difference_of_two_odd_not_5([15, 25, 35]) is None",100.0,0
"def find_squares_of_odd_not_divisible_by_5(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 5 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_odd_not_divisible_by_5():
    assert find_squares_of_odd_not_divisible_by_5([1, 9, 25, 49, 81]) == [1, 9, 49, 81]
    assert find_squares_of_odd_not_divisible_by_5([4, 16, 64]) is None
    assert find_squares_of_odd_not_divisible_by_5([25, 49, 121]) == [49, 121]
    assert find_squares_of_odd_not_divisible_by_5([49, 81]) == [49, 81]
    assert find_squares_of_odd_not_divisible_by_5([100, 121, 169]) == [121, 169]
    assert find_squares_of_odd_not_divisible_by_5([64, 169, 81]) == [169, 81]",100.0,0
"def find_product_of_two_primes_not_divisible_by_3(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 3 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_divisible_by_3():
    assert find_product_of_two_primes_not_divisible_by_3([6, 10, 15, 77]) == [10, 77]
    assert find_product_of_two_primes_not_divisible_by_3([2, 3, 5, 7, 11]) is None
    assert find_product_of_two_primes_not_divisible_by_3([30, 42, 49, 35]) == [49, 35]
    assert find_product_of_two_primes_not_divisible_by_3([10, 14, 26, 77]) == [10, 14, 26, 77]
    assert find_product_of_two_primes_not_divisible_by_3([2, 5, 7, 11, 13]) is None
    assert find_product_of_two_primes_not_divisible_by_3([9, 15, 21]) is None
    assert find_product_of_two_primes_not_divisible_by_3([657, 1234, 6754]) == [1234]",100.0,0
"def find_divisors_of_40_not_even(lst):
    result = []
    for num in lst:
        if 40 % num == 0 and num % 2 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_40_not_even():
    assert find_divisors_of_40_not_even([1, 2, 4, 5, 8, 10, 20, 40]) == [1, 5]
    assert find_divisors_of_40_not_even([1, 3, 5, 7, 9, 11]) == [1, 5]
    assert find_divisors_of_40_not_even([5, 3, 1]) == [5, 1]
    assert find_divisors_of_40_not_even([2, 4, 8]) is None
    assert find_divisors_of_40_not_even([5, 1, 20]) == [5, 1]
    assert find_divisors_of_40_not_even([15, 7, 9]) is None",100.0,0
"def find_difference_of_two_even_not_5(lst):
    result = []
    for num in lst:
        for i in range(2, num // 2 + 1, 2):
            if (num - i) % 2 == 0 and num % 5 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_even_not_5():
    assert find_difference_of_two_even_not_5([6, 10, 14, 20, 4, 8]) == [6, 14, 4, 8]
    assert find_difference_of_two_even_not_5([2, 4, 6, 8]) == [4, 6, 8]
    assert find_difference_of_two_even_not_5([10, 12, 16, 18]) == [12, 16, 18]
    assert find_difference_of_two_even_not_5([30, 50, 60]) is None
    assert find_difference_of_two_even_not_5([40, 60, 80]) is None
    assert find_difference_of_two_even_not_5([5, 15, 25]) is None",100.0,0
"def find_product_of_two_odd_not_divisible_by_7(lst):
    result = []
    for num in lst:
        for i in range(1, num // 2 + 1, 2):
            if num % i == 0 and (num // i) % 2 != 0 and num % 7 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_odd_not_divisible_by_7():
    assert find_product_of_two_odd_not_divisible_by_7([9, 15, 21, 35]) == [9, 15]
    assert find_product_of_two_odd_not_divisible_by_7([7, 11, 13, 25]) == [11, 13, 25]
    assert find_product_of_two_odd_not_divisible_by_7([3, 5, 9, 15]) == [3, 5, 9, 15]
    assert find_product_of_two_odd_not_divisible_by_7([49, 77, 35]) is None
    assert find_product_of_two_odd_not_divisible_by_7([21, 25, 45, 49]) == [25, 45]
    assert find_product_of_two_odd_not_divisible_by_7([5, 15, 30, 45]) == [5, 15, 45]",100.0,0
"def find_divisible_by_4(lst):
    result = []
    for num in lst:
        if num % 4 == 0 and num % 8 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_4():
    assert find_divisible_by_4([4, 8, 12, 16, 20, 24]) == [4, 12, 20]
    assert find_divisible_by_4([2, 4, 8, 10, 20]) == [4, 20]
    assert find_divisible_by_4([64, 8, 32]) is None
    assert find_divisible_by_4([6, 10, 14, 22]) is None
    assert find_divisible_by_4([5, 7, 9, 11, 13]) is None
    assert find_divisible_by_4([4, 12]) == [4, 12]",100.0,0
"def find_squares_of_odd_not_9(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 9 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_odd_not_9():
    assert find_squares_of_odd_not_9([1, 9, 25, 49, 81]) == [1, 25, 49]
    assert find_squares_of_odd_not_9([1, 9, 25]) == [1, 25]
    assert find_squares_of_odd_not_9([9, 81, 729]) is None
    assert find_squares_of_odd_not_9([1, 4, 16]) == [1]
    assert find_squares_of_odd_not_9([1, 25, 49, 81]) == [1, 25, 49]
    assert find_squares_of_odd_not_9([49, 121, 225]) == [49, 121]",100.0,0
"def find_difference_of_two_primes(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if is_prime(i) and is_prime(num - i):
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_primes():
    assert find_difference_of_two_primes([10, 15, 20, 23]) == [10, 15, 20]
    assert find_difference_of_two_primes([3, 5, 7, 9]) == [5, 7, 9]
    assert find_difference_of_two_primes([10, 5, 8, 13]) == [10, 5, 8, 13]
    assert find_difference_of_two_primes([2, 7, 11]) == [7]
    assert find_difference_of_two_primes([11, 1030, 1024, 13]) == [1030, 1024, 13]
    assert find_difference_of_two_primes([5, 10, 12]) == [5, 10, 12]
    assert find_difference_of_two_primes([2, 77, 11]) is None",100.0,0
"def find_product_of_two_primes_not_5(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        for i in range(1, num // 2 + 1):
            if num % i == 0 and is_prime(i) and is_prime(num // i) and num % 5 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_primes_not_5():
    assert find_product_of_two_primes_not_5([6, 10, 15, 35]) == [6]
    assert find_product_of_two_primes_not_5([15, 25, 35, 77]) == [77]
    assert find_product_of_two_primes_not_5([2, 3, 7, 11]) is None
    assert find_product_of_two_primes_not_5([5, 7, 3]) is None
    assert find_product_of_two_primes_not_5([5, 7, 11, 9]) == [9]
    assert find_product_of_two_primes_not_5([9, 25, 49]) == [9, 49]
    assert find_product_of_two_primes_not_5([4, 6, 8, 9, 14, 21]) == [4, 6, 9, 14, 21]",100.0,0
"def find_divisible_by_2_and_5_not_10(lst):
    result = []
    for num in lst:
        if (num % 2 == 0 or num % 5 == 0) and num % 10 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_2_and_5_not_10():
    assert find_divisible_by_2_and_5_not_10([10, 20, 30, 40]) is None
    assert find_divisible_by_2_and_5_not_10([5, 15, 25]) == [5, 15, 25]
    assert find_divisible_by_2_and_5_not_10([10, 25]) == [25]
    assert find_divisible_by_2_and_5_not_10([5, 50, 75]) == [5, 75]
    assert find_divisible_by_2_and_5_not_10([10, 15, 30]) == [15]
    assert find_divisible_by_2_and_5_not_10([5, 20]) == [5]",100.0,0
"def find_difference_of_two_even_not_divisible_by_6(lst):
    result = []
    for num in lst:
        for i in range(2, num // 2 + 1, 2):
            if (num - i) % 2 == 0 and num % 6 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_difference_of_two_even_not_divisible_by_6():
    assert find_difference_of_two_even_not_divisible_by_6([6, 12, 20, 30, 40]) == [20, 40]
    assert find_difference_of_two_even_not_divisible_by_6([4, 8, 10]) == [4, 8, 10]
    assert find_difference_of_two_even_not_divisible_by_6([8, 14, 20, 40]) == [8, 14, 20, 40]
    assert find_difference_of_two_even_not_divisible_by_6([6, 8, 10]) == [8, 10]
    assert find_difference_of_two_even_not_divisible_by_6([2, 4, 8]) == [4, 8]
    assert find_difference_of_two_even_not_divisible_by_6([6, 30]) is None",100.0,0
"def find_product_of_two_odd_not_divisible_by_4(lst):
    result = []
    for num in lst:
        for i in range(1, int(num ** 0.5) + 1):
            if num % i == 0 and i % 2 != 0 and (num // i) % 2 != 0 and num % 5 != 0:
                result.append(num)
                break
    if not result:
        return None
    return result","def test_find_product_of_two_odd_not_divisible_by_4():
    assert find_product_of_two_odd_not_divisible_by_4([9, 15, 35, 45]) == [9]
    assert find_product_of_two_odd_not_divisible_by_4([3, 7, 11, 13, 17]) == [3, 7, 11, 13, 17]
    assert find_product_of_two_odd_not_divisible_by_4([5, 32, 8]) is None
    assert find_product_of_two_odd_not_divisible_by_4([5, 64, 20]) is None
    assert find_product_of_two_odd_not_divisible_by_4([7, 9, 15]) == [7, 9]
    assert find_product_of_two_odd_not_divisible_by_4([9, 15, 25, 35]) == [9]",100.0,0
"def find_multiples_of_6_not_12(lst):
    result = []
    for num in lst:
        if num % 6 == 0 and num % 12 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_multiples_of_6_not_12():
    assert find_multiples_of_6_not_12([6, 12, 18, 24, 30]) == [6, 18, 30]
    assert find_multiples_of_6_not_12([1, 2, 3, 4, 5]) is None
    assert find_multiples_of_6_not_12([12, 24, 36]) is None
    assert find_multiples_of_6_not_12([-6, -12, -18, -30]) == [-6, -18, -30]
    assert find_multiples_of_6_not_12([]) is None
    assert find_multiples_of_6_not_12([6, 36, 60]) == [6]
    assert find_multiples_of_6_not_12([60]) is None
    assert find_multiples_of_6_not_12([60, 70, 80]) is None
    assert find_multiples_of_6_not_12([13, 18, 22]) == [18]",100.0,0
"def find_even_not_divisible_by_5(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 5 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_even_not_divisible_by_5():
    assert find_even_not_divisible_by_5([10, 20, 30, 40, 50]) is None
    assert find_even_not_divisible_by_5([1, 2, 3, 4, 5]) == [2, 4]
    assert find_even_not_divisible_by_5([6, 12, 18, 24, 30]) == [6, 12, 18, 24]
    assert find_even_not_divisible_by_5([-10, -20, -30, -40, -50]) is None
    assert find_even_not_divisible_by_5([-1, -2, -3, -4, -5]) == [-2, -4]
    assert find_even_not_divisible_by_5([15, 25, 35, 45]) is None
    assert find_even_not_divisible_by_5([0, 1, 2, 3, 4, 5]) == [2, 4]
    assert find_even_not_divisible_by_5([6, 7, 8, 9, 10]) == [6, 8]
    assert find_even_not_divisible_by_5([15, 20, 25, 30, 35]) is None",100.0,0
"def find_squares_of_odd_not_divisible_by_3(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num and int(num ** 0.5) % 2 != 0 and num % 3 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_squares_of_odd_not_divisible_by_3():
    assert find_squares_of_odd_not_divisible_by_3([1, 4, 9, 16, 25, 36, 49]) == [1, 25, 49]
    assert find_squares_of_odd_not_divisible_by_3([2, 3, 5, 7, 11]) is None
    assert find_squares_of_odd_not_divisible_by_3([1, 25, 49, 81]) == [1, 25, 49]
    assert find_squares_of_odd_not_divisible_by_3([1, 4, 9, 16, 25, 36, 49]) == [1, 25, 49]
    assert find_squares_of_odd_not_divisible_by_3([1, 3, 5, 7, 9, 11]) == [1]
    assert find_squares_of_odd_not_divisible_by_3([25, 49, 81, 100]) == [25, 49]
    assert find_squares_of_odd_not_divisible_by_3([36, 45, 54, 63, 72]) is None
    assert find_squares_of_odd_not_divisible_by_3([10, 20, 30, 40, 50]) is None
    assert find_squares_of_odd_not_divisible_by_3([100, 121, 144, 169]) == [121, 169]",100.0,0
"def find_divisors_of_50_not_prime(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    for num in lst:
        if 50 % num == 0 and not is_prime(num):
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisors_of_50_not_prime():
    assert find_divisors_of_50_not_prime([1, 2, 5, 10, 25, 50]) == [1, 10, 25, 50]
    assert find_divisors_of_50_not_prime([2, 3, 5, 7, 11, 13]) is None
    assert find_divisors_of_50_not_prime([4, 6, 8, 10, 12]) == [10]
    assert find_divisors_of_50_not_prime([-1, -2, -5, -10, -25, -50]) == [-1, -2, -5, -10, -25, -50]
    assert find_divisors_of_50_not_prime([1, 2, 3, 4, 5]) == [1]
    assert find_divisors_of_50_not_prime([50, 100, 150, 200]) == [50]
    assert find_divisors_of_50_not_prime([7, 8, 9, 10, 11]) == [10]
    assert find_divisors_of_50_not_prime([13, 17, 19, 23]) is None
    assert find_divisors_of_50_not_prime([25, 30, 35, 40]) == [25]",100.0,0
"def find_divisible_by_3_and_4_not_7(lst):
    result = []
    for num in lst:
        if num % 3 == 0 and num % 4 == 0 and num % 7 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_3_and_4_not_7():
    assert find_divisible_by_3_and_4_not_7([12, 24, 36, 48, 60]) == [12, 24, 36, 48, 60]
    assert find_divisible_by_3_and_4_not_7([1, 2, 3, 4, 5]) is None
    assert find_divisible_by_3_and_4_not_7([21, 28, 35, 42, 49]) is None
    assert find_divisible_by_3_and_4_not_7([-12, -24, -36, -48, -60]) == [-12, -24, -36, -48, -60]
    assert find_divisible_by_3_and_4_not_7([6, 18, 30, 42, 54]) is None
    assert find_divisible_by_3_and_4_not_7([84, 96, 108, 120]) == [96, 108, 120]
    assert find_divisible_by_3_and_4_not_7([36, 48, 54, 72]) == [36, 48, 72]
    assert find_divisible_by_3_and_4_not_7([27, 33, 39, 45]) is None
    assert find_divisible_by_3_and_4_not_7([12, 24, 36]) == [12, 24, 36]",100.0,0
"def find_intersection_of_sets(lst1, lst2):
    result = set(lst1) & set(lst2)
    if not result:
        return None
    return sorted(list(result))","def test_find_intersection_of_sets():
    assert find_intersection_of_sets([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]
    assert find_intersection_of_sets([1, 2, 3], [4, 5, 6]) is None
    assert find_intersection_of_sets([7, 8, 9], [7, 8, 9]) == [7, 8, 9]
    assert find_intersection_of_sets([], [1, 2, 3]) is None
    assert find_intersection_of_sets([1, 2, 3], []) is None
    assert find_intersection_of_sets([0, 1, 2], [2, 3, 4]) == [2]
    assert find_intersection_of_sets([-1, -2, -3], [-3, -4, -5]) == [-3]
    assert find_intersection_of_sets([10, 11, 12], [12, 13, 14]) == [12]
    assert find_intersection_of_sets([15, 16, 17], [18, 19, 20]) is None",100.0,0
"def find_symmetric_difference(lst1, lst2):
    result = set(lst1) ^ set(lst2)
    if not result:
        return None
    return sorted(list(result))","def test_find_symmetric_difference():
    assert find_symmetric_difference([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]
    assert find_symmetric_difference([7, 8, 9], [7, 8, 9]) is None
    assert find_symmetric_difference([10, 20, 30], [30, 40, 50]) == [10, 20, 40, 50]
    assert find_symmetric_difference([], [1, 2, 3]) == [1, 2, 3]
    assert find_symmetric_difference([1, 2, 3], []) == [1, 2, 3]
    assert find_symmetric_difference([-1, -2, -3], [-3, -4, -5]) == [-5, -4, -2, -1]
    assert find_symmetric_difference([10, 11, 12], [12, 13, 14]) == [10, 11, 13, 14]
    assert find_symmetric_difference([15, 16, 17], [18, 19, 20]) == [15, 16, 17, 18, 19, 20]
    assert find_symmetric_difference([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",100.0,0
"def find_keys_in_dicts(dict1, dict2):
    result = [key for key in dict1 if dict1[key] in dict2]
    if not result:
        return None
    return result","def test_find_keys_in_dicts():
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {2: 'a', 4: 'b', 6: 'c'}) == [1, 3, 5]
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {7: 'a', 8: 'b', 9: 'c'}) is None
    assert find_keys_in_dicts({}, {2: 'a', 4: 'b', 6: 'c'}) is None
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {}) is None
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {4: 'b'}) == [3]
    assert find_keys_in_dicts({1: 2, 3: 4, 5: 6}, {6: 'c'}) == [5]
    assert find_keys_in_dicts({1: 2, 3: 4}, {4: 'b', 2: 'a'}) == [1, 3]
    assert find_keys_in_dicts({7: 8, 9: 10}, {8: 'd', 10: 'e'}) == [7, 9]
    assert find_keys_in_dicts({11: 12, 13: 14}, {14: 'g', 12: 'f'}) == [11, 13]",100.0,0
"def find_in_list_not_in_tuple(lst, tpl):
    result = [x for x in lst if x not in tpl]
    if not result:
        return None
    return result","def test_find_in_list_not_in_tuple():
    assert find_in_list_not_in_tuple([1, 2, 3, 4, 5], (4, 5, 6, 7)) == [1, 2, 3]
    assert find_in_list_not_in_tuple([1, 2, 3], (1, 2, 3)) is None
    assert find_in_list_not_in_tuple([4, 5, 6], (1, 2, 3)) == [4, 5, 6]
    assert find_in_list_not_in_tuple([], (1, 2, 3)) is None
    assert find_in_list_not_in_tuple([1, 2, 3], ()) == [1, 2, 3]
    assert find_in_list_not_in_tuple([1, 3, 5], (2, 4, 6)) == [1, 3, 5]
    assert find_in_list_not_in_tuple([-1, -2, -3], (-3, -4, -5)) == [-1, -2]
    assert find_in_list_not_in_tuple([10, 20, 30], (20, 30, 40)) == [10]
    assert find_in_list_not_in_tuple([15, 25, 35], (10, 20, 30)) == [15, 25, 35]",100.0,0
"def find_pairs_with_first_greater(lst):
    result = [(a, b) for a in lst for b in lst if a > b]
    if not result:
        return None
    return result","def test_find_pairs_with_first_greater():
    assert find_pairs_with_first_greater([1, 2, 3]) == [(2, 1), (3, 1), (3, 2)]
    assert find_pairs_with_first_greater([3, 1, 2]) == [(3, 1), (3, 2), (2, 1)]
    assert find_pairs_with_first_greater([1, 1, 1]) is None
    assert find_pairs_with_first_greater([]) is None
    assert find_pairs_with_first_greater([5, 5, 5]) is None
    assert find_pairs_with_first_greater([4, 5, 6]) == [(5, 4), (6, 4), (6, 5)]
    assert find_pairs_with_first_greater([10, 20, 30]) == [(20, 10), (30, 10), (30, 20)]
    assert find_pairs_with_first_greater([-1, 0, 1]) == [(0, -1), (1, -1), (1, 0)]
    assert find_pairs_with_first_greater([10, 20, 30, 40]) == [(20, 10), (30, 10), (30, 20), (40, 10), (40, 20), (40, 30)]",100.0,0
"def find_tuples_without_negatives(lst):
    result = [tpl for tpl in lst if all(x >= 0 for x in tpl)]
    if not result:
        return None
    return result","def test_find_tuples_without_negatives():
    assert find_tuples_without_negatives([(1, 2), (-1, 2), (3, 4)]) == [(1, 2), (3, 4)]
    assert find_tuples_without_negatives([(1, 2, -3), (-4, 5, 6), (7, 8, 9)]) == [(7, 8, 9)]
    assert find_tuples_without_negatives([(0, 1, 2)]) == [(0, 1, 2)]
    assert find_tuples_without_negatives([(-1, -2, -3)]) is None
    assert find_tuples_without_negatives([]) is None
    assert find_tuples_without_negatives([(1, 1), (0, 0), (-1, -1)]) == [(1, 1), (0, 0)]
    assert find_tuples_without_negatives([(1,), (-1,)]) == [(1,)]
    assert find_tuples_without_negatives([(0, 0, 0)]) == [(0, 0, 0)]
    assert find_tuples_without_negatives([(-5, -4, -3)]) is None",100.0,0
"def find_keys_with_odd_values(dict_data):
    result = [key for key, value in dict_data.items() if value % 2 != 0]
    if not result:
        return None
    return result","def test_find_keys_with_odd_values():
    assert find_keys_with_odd_values({1: 2, 3: 4, 5: 6}) is None
    assert find_keys_with_odd_values({1: 1, 3: 3, 5: 5}) == [1, 3, 5]
    assert find_keys_with_odd_values({1: 2, 3: 3, 5: 6}) == [3]
    assert find_keys_with_odd_values({}) is None
    assert find_keys_with_odd_values({1: 2, 2: 4, 3: 6}) is None
    assert find_keys_with_odd_values({1: 3, 2: 5, 3: 7}) == [1, 2, 3]
    assert find_keys_with_odd_values({4: 5, 6: 7}) == [4, 6]
    assert find_keys_with_odd_values({8: 9, 10: 11}) == [8, 10]
    assert find_keys_with_odd_values({12: 13, 14: 15}) == [12, 14]",100.0,0
"def find_product_of_two_not_divisible_by_2(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            product = lst[i] * lst[j]
            if product % 2 != 0:
                result.append(product)
    if not result:
        return None
    return result","def test_find_product_of_two_not_divisible_by_2():
    assert find_product_of_two_not_divisible_by_2([1, 2, 3, 4, 5]) == [3, 5, 15]
    assert find_product_of_two_not_divisible_by_2([2, 4, 6]) is None
    assert find_product_of_two_not_divisible_by_2([1, 3, 5, 7]) == [3, 5, 7, 15, 21, 35]
    assert find_product_of_two_not_divisible_by_2([0, 1, 2, 3]) == [3]
    assert find_product_of_two_not_divisible_by_2([-1, -3, -5]) == [3, 5, 15]
    assert find_product_of_two_not_divisible_by_2([-2, -4, -6]) is None
    assert find_product_of_two_not_divisible_by_2([1, -1, 3, -3]) == [-1, 3, -3, -3, 3, -9]
    assert find_product_of_two_not_divisible_by_2([1]) is None
    assert find_product_of_two_not_divisible_by_2([2]) is None",100.0,0
"def find_in_set_not_in_list(s, lst):
    result = sorted(list(s - set(lst)))
    if not result:
        return None
    return result","def test_find_in_set_not_in_list():
    assert find_in_set_not_in_list({1, 2, 3}, [2, 3, 4]) == [1]
    assert find_in_set_not_in_list({1, 2, 3}, [1, 2, 3]) is None
    assert find_in_set_not_in_list({4, 5, 6}, [1, 2, 3]) == [4, 5, 6]
    assert find_in_set_not_in_list({0, 1, 2}, [2, 3, 4]) == [0, 1]
    assert find_in_set_not_in_list({-1, -2, -3}, [-3, -4, -5]) == [-2, -1]
    assert find_in_set_not_in_list({10, 20, 30}, [20, 30, 40]) == [10]
    assert find_in_set_not_in_list({15, 25, 35}, [10, 20, 30]) == [15, 25, 35]
    assert find_in_set_not_in_list({1, 2, 3}, []) == [1, 2, 3]
    assert find_in_set_not_in_list(set(), [1, 2, 3]) is None",100.0,0
"def find_keys_not_divisible_by_3(dict_data):
    result = [key for key in dict_data if key % 3 != 0]
    if not result:
        return None
    return result","def test_find_keys_not_divisible_by_3():
    assert find_keys_not_divisible_by_3({1: 'a', 3: 'b', 6: 'c'}) == [1]
    assert find_keys_not_divisible_by_3({3: 'a', 6: 'b', 9: 'c'}) is None
    assert find_keys_not_divisible_by_3({1: 'a', 2: 'b', 4: 'c'}) == [1, 2, 4]
    assert find_keys_not_divisible_by_3({0: 'a', 3: 'b', 6: 'c'}) is None
    assert find_keys_not_divisible_by_3({7: 'a', 8: 'b', 10: 'c'}) == [7, 8, 10]
    assert find_keys_not_divisible_by_3({5: 'a', 7: 'b', 11: 'c'}) == [5, 7, 11]
    assert find_keys_not_divisible_by_3({12: 'a', 15: 'b', 18: 'c'}) is None
    assert find_keys_not_divisible_by_3({2: 'a', 4: 'b', 5: 'c'}) == [2, 4, 5]
    assert find_keys_not_divisible_by_3({11: 'a', 14: 'b', 17: 'c'}) == [11, 14, 17]",100.0,0
"def find_numbers_with_sum_divisible_by_4(lst1, lst2):
    result = []
    for num1 in lst1:
        for num2 in lst2:
            if (num1 + num2) % 4 == 0:
                result.append((num1, num2))
    if not result:
        return None
    return result","def test_find_numbers_with_sum_divisible_by_4():
    assert find_numbers_with_sum_divisible_by_4([1, 2, 3], [4, 5, 6]) == [(2, 6), (3, 5)]
    assert find_numbers_with_sum_divisible_by_4([1, 2, 3], [7, 8, 9]) == [(1, 7), (3, 9)]
    assert find_numbers_with_sum_divisible_by_4([4, 5, 6], [1, 2, 3]) == [(5, 3), (6, 2)]
    assert find_numbers_with_sum_divisible_by_4([0, 1, 2], [2, 3, 4]) == [(0, 4), (1, 3), (2, 2)]
    assert find_numbers_with_sum_divisible_by_4([5, 6, 7], [3, 4, 5]) == [(5, 3), (7, 5)]
    assert find_numbers_with_sum_divisible_by_4([], []) is None
    assert find_numbers_with_sum_divisible_by_4([], [1, 2, 3]) is None
    assert find_numbers_with_sum_divisible_by_4([112, 3, 45], []) is None",100.0,0
"def find_unique_in_one_list(lst1, lst2):
    result = list(set(lst1) ^ set(lst2))
    if not result:
        return None
    return result","def test_find_unique_in_one_list():
    assert find_unique_in_one_list([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]
    assert find_unique_in_one_list([7, 8, 9], [7, 8, 9]) is None
    assert find_unique_in_one_list([10, 20, 30], [30, 40, 50]) == [40, 10, 50, 20]
    assert find_unique_in_one_list([], [1, 2, 3]) == [1, 2, 3]
    assert find_unique_in_one_list([1, 2, 3], []) == [1, 2, 3]
    assert find_unique_in_one_list([-1, -2, -3], [-3, -4, -5]) == [-2, -5, -4, -1]
    assert find_unique_in_one_list([10, 11, 12], [12, 13, 14]) == [10, 11, 13, 14]
    assert find_unique_in_one_list([15, 16, 17], [18, 19, 20]) == [15, 16, 17, 18, 19, 20]",100.0,0
"def find_pairs_with_sum_divisible_by_5(lst):
    result = [(a, b) for a in lst for b in lst if (a + b) % 5 == 0]
    if not result:
        return None
    return result","def test_find_pairs_with_sum_divisible_by_5():
    assert find_pairs_with_sum_divisible_by_5([1, 2, 3]) == [(2, 3), (3, 2)]
    assert find_pairs_with_sum_divisible_by_5([3, 1, 4]) == [(1, 4), (4, 1)]
    assert find_pairs_with_sum_divisible_by_5([7, 2, 5, 0]) == [(5, 5), (5, 0), (0, 5), (0, 0)]
    assert find_pairs_with_sum_divisible_by_5([-2, -4]) is None
    assert find_pairs_with_sum_divisible_by_5([1, 21, 7]) is None
    assert find_pairs_with_sum_divisible_by_5([2, 7, 9]) is None",100.0,0
"def find_tuples_without_even_numbers(lst):
    result = [tpl for tpl in lst if all(x % 2 != 0 for x in tpl)]
    if not result:
        return None
    return result","def test_find_tuples_without_even_numbers():
    assert find_tuples_without_even_numbers([(1, 3, 5), (2, 4, 6), (7, 9, 11)]) == [(1, 3, 5), (7, 9, 11)]
    assert find_tuples_without_even_numbers([(1, 2), (3, 4), (5, 6)]) is None
    assert find_tuples_without_even_numbers([(1, 3), (5, 7), (9, 11)]) == [(1, 3), (5, 7), (9, 11)]
    assert find_tuples_without_even_numbers([(0, 2, 4), (6, 8, 10)]) is None
    assert find_tuples_without_even_numbers([(1, 3, 5)]) == [(1, 3, 5)]
    assert find_tuples_without_even_numbers([(-1, -3), (-5, -7)]) == [(-1, -3), (-5, -7)]
    assert find_tuples_without_even_numbers([(-2, -4), (-6, -8)]) is None
    assert find_tuples_without_even_numbers([(5, -5), (7, -7)]) == [(5, -5), (7, -7)]
    assert find_tuples_without_even_numbers([(1,), (3,)]) == [(1,), (3,)]",100.0,0
"def find_integers_in_strings(lst):
    result = []
    for s in lst:
        try:
            num = int(s)
            result.append(num)
        except ValueError:
            continue
    if not result:
        return None
    return result","def test_find_integers_in_strings():
    assert find_integers_in_strings(['1', '2', '3']) == [1, 2, 3]
    assert find_integers_in_strings(['a', 'b', 'c']) is None
    assert find_integers_in_strings(['1', 'b', '3']) == [1, 3]
    assert find_integers_in_strings(['123', '456', '789']) == [123, 456, 789]
    assert find_integers_in_strings(['1a', 'b2', '3c']) is None
    assert find_integers_in_strings(['']) is None
    assert find_integers_in_strings(['1', '0', '-3']) == [1, 0, -3]
    assert find_integers_in_strings(['0']) == [0]
    assert find_integers_in_strings(['-1', '-2', '-3']) == [-1, -2, -3]",100.0,0
"def find_divisible_by_7_and_8_not_56(lst):
    result = []
    for num in lst:
        if (num % 7 == 0 or num % 8 == 0) and num % 56 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_7_and_8_not_56():
    assert find_divisible_by_7_and_8_not_56([7, 8, 14, 16, 56, 112]) == [7, 8, 14, 16]
    assert find_divisible_by_7_and_8_not_56([1, 2, 3, 4, 5]) is None
    assert find_divisible_by_7_and_8_not_56([]) is None
    assert find_divisible_by_7_and_8_not_56([49, 64, 9, 21, 32]) == [49, 64, 21, 32]",100.0,0
"def find_odd_keys_in_dict(dict_data):
    result = [key for key in dict_data if key % 2 != 0]
    if not result:
        return None
    return result","def test_find_odd_keys_in_dict():
    assert find_odd_keys_in_dict({1: 'a', 2: 'b', 3: 'c'}) == [1, 3]
    assert find_odd_keys_in_dict({4: 'd', 6: 'e'}) is None
    assert find_odd_keys_in_dict({}) is None
    assert find_odd_keys_in_dict({1: 'a', 5: 'b', 8: 'c'}) == [1, 5]",100.0,0
"def find_even_in_tuple_not_in_list(tpl, lst):
    result = [x for x in tpl if x % 2 == 0 and x not in lst]
    if not result:
        return None
    return result","def test_find_even_in_tuple_not_in_list():
    assert find_even_in_tuple_not_in_list((2, 4, 6, 8), [3, 5, 7]) == [2, 4, 6, 8]
    assert find_even_in_tuple_not_in_list((2, 4, 6, 8), [2, 4, 6, 8]) is None
    assert find_even_in_tuple_not_in_list((), [1, 2, 3]) is None
    assert find_even_in_tuple_not_in_list((10, 12, 14), [1, 3, 7]) == [10, 12, 14]",100.0,0
"def find_divisors_of_100_not_prime(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = [num for num in lst if 100 % num == 0 and not is_prime(num)]
    if not result:
        return None
    return result","def test_find_divisors_of_100_not_prime():
    assert find_divisors_of_100_not_prime([1, 2, 4, 5, 10, 20, 25, 50]) == [1, 4, 10, 20, 25, 50]
    assert find_divisors_of_100_not_prime([2, 5, 7, 11]) is None
    assert find_divisors_of_100_not_prime([10, 20, 30]) == [10, 20]
    assert find_divisors_of_100_not_prime([100, 200]) == [100]",100.0,0
"def find_in_list_not_in_set(lst, s):
    result = [x for x in lst if x not in s]
    if not result:
        return None
    return result","def test_find_in_list_not_in_set():
    assert find_in_list_not_in_set([1, 2, 3], {2}) == [1, 3]
    assert find_in_list_not_in_set([1, 2, 3], {1, 2, 3}) is None
    assert find_in_list_not_in_set([], {1, 2, 3}) is None
    assert find_in_list_not_in_set([4, 5, 6], {1, 2, 3}) == [4, 5, 6]",100.0,0
"def find_sum_of_two_lists(lst1, lst2):
    result = [a + b for a in lst1 for b in lst2]
    if not result:
        return None
    return result","def test_find_sum_of_two_lists():
    assert find_sum_of_two_lists([1, 2], [3, 4]) == [4, 5, 5, 6]
    assert find_sum_of_two_lists([], [1, 2, 3]) is None
    assert find_sum_of_two_lists([1, 2], []) is None
    assert find_sum_of_two_lists([0, 0], [0, 0]) == [0, 0, 0, 0]",100.0,0
"def find_difference_of_two_lists(lst1, lst2):
    result = [a - b for a in lst1 for b in lst2]
    if not result:
        return None
    return result","def test_find_difference_of_two_lists():
    assert find_difference_of_two_lists([5, 6], [2, 3]) == [3, 2, 4, 3]
    assert find_difference_of_two_lists([], [1, 2, 3]) is None
    assert find_difference_of_two_lists([1, 2], []) is None
    assert find_difference_of_two_lists([10, 20], [5, 15]) == [5, -5, 15, 5]",100.0,0
"def find_odd_in_tuple_not_in_list(tpl, lst):
    result = [x for x in tpl if x % 2 != 0 and x not in lst]
    if not result:
        return None
    return result","def test_find_odd_in_tuple_not_in_list():
    assert find_odd_in_tuple_not_in_list((1, 3, 5, 7), [2, 4, 6]) == [1, 3, 5, 7]
    assert find_odd_in_tuple_not_in_list((1, 2, 3, 4), [1, 3]) is None
    assert find_odd_in_tuple_not_in_list((), [1, 2, 3]) is None
    assert find_odd_in_tuple_not_in_list((9, 11, 13), [2, 4, 6]) == [9, 11, 13]",100.0,0
"def find_divisible_by_5_and_6_not_12(lst):
    result = []
    for num in lst:
        if num % 5 == 0 and num % 6 == 0 and num % 12 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_5_and_6_not_12():
    assert find_divisible_by_5_and_6_not_12([30, 60, 90]) == [30, 90]
    assert find_divisible_by_5_and_6_not_12([12, 24, 36]) is None
    assert find_divisible_by_5_and_6_not_12([]) is None
    assert find_divisible_by_5_and_6_not_12([15, 45, 75]) is None",100.0,0
"def find_odd_not_divisible_by_5_2(lst):
    result = [num for num in lst if num % 2 != 0 and num % 5 != 0]
    if not result:
        return None
    return result","def test_find_odd_not_divisible_by_5_2():
    assert find_odd_not_divisible_by_5_2([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 7, 9]
    assert find_odd_not_divisible_by_5_2([10, 20, 30]) is None
    assert find_odd_not_divisible_by_5_2([15, 25, 35]) is None
    assert find_odd_not_divisible_by_5_2([2, 4, 6, 8, 12]) is None",100.0,0
"def find_even_in_list_and_tuple(lst, tpl):
    result = [x for x in lst if x % 2 == 0 and x in tpl]
    if not result:
        return None
    return result","def test_find_even_in_list_and_tuple():
    assert find_even_in_list_and_tuple([2, 4, 6], (4, 6, 8)) == [4, 6]
    assert find_even_in_list_and_tuple([1, 3, 5], (2, 4, 6)) is None
    assert find_even_in_list_and_tuple([], (2, 4, 6)) is None
    assert find_even_in_list_and_tuple([2, 4, 6], (1, 3, 5)) is None",100.0,0
"def find_product_of_two_numbers(lst):
    result = [a * b for a in lst for b in lst]
    if not result:
        return None
    return result","def test_find_product_of_two_numbers():
    assert find_product_of_two_numbers([1, 2, 3]) == [1, 2, 3, 2, 4, 6, 3, 6, 9]
    assert find_product_of_two_numbers([0, 1, 2]) == [0, 0, 0, 0, 1, 2, 0, 2, 4]
    assert find_product_of_two_numbers([1]) == [1]
    assert find_product_of_two_numbers([]) is None",100.0,0
"def find_in_set_not_in_list_2(s, lst):
    result = [x for x in s if x not in lst]
    if not result:
        return None
    return result","def test_find_in_set_not_in_list_2():
    assert find_in_set_not_in_list_2({1, 2, 3}, [2, 3, 4]) == [1]
    assert find_in_set_not_in_list_2({2, 3, 4}, [2, 3, 4]) is None
    assert find_in_set_not_in_list_2({1, 5, 7}, [2, 3, 4]) == [1, 5, 7]
    assert find_in_set_not_in_list_2(set(), [2, 3, 4]) is None",100.0,0
"def find_difference_between_lists(lst1, lst2):
    result = [a - b for a in lst1 for b in lst2]
    if not result:
        return None
    return result","def test_find_difference_between_lists():
    assert find_difference_between_lists([5, 6], [2, 3]) == [3, 2, 4, 3]
    assert find_difference_between_lists([], [1, 2, 3]) is None
    assert find_difference_between_lists([1, 2], []) is None
    assert find_difference_between_lists([10, 20], [5, 15]) == [5, -5, 15, 5]",100.0,0
"def find_unique_in_one_list_not_both(lst1, lst2):
    result = [x for x in lst1 if x not in lst2] + [x for x in lst2 if x not in lst1]
    if not result:
        return None
    return result","def test_find_unique_in_one_list_not_both():
    assert find_unique_in_one_list_not_both([1, 2, 3], [3, 4, 5]) == [1, 2, 4, 5]
    assert find_unique_in_one_list_not_both([1, 2, 3], [1, 2, 3]) is None
    assert find_unique_in_one_list_not_both([], [3, 4, 5]) == [3, 4, 5]
    assert find_unique_in_one_list_not_both([1, 2, 3], []) == [1, 2, 3]",100.0,0
"def find_even_and_divisible_by_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0:
            if num % 3 == 0:
                result.append(num)
    if not result:
        return None
    return result","def test_find_even_and_divisible_by_3():
    assert find_even_and_divisible_by_3([6, 12, 18]) == [6, 12, 18]
    assert find_even_and_divisible_by_3([1, 2, 3]) is None
    assert find_even_and_divisible_by_3([]) is None
    assert find_even_and_divisible_by_3([5, 7, 10]) is None",100.0,0
"def find_squares_not_divisible_by_5(lst):
    result = []
    for num in lst:
        if int(num ** 0.5) ** 2 == num:
            if num % 5 != 0:
                result.append(num)
    if not result:
        return None
    return result","def test_find_squares_not_divisible_by_5():
    assert find_squares_not_divisible_by_5([1, 4, 9, 16, 25, 36]) == [1, 4, 9, 16, 36]
    assert find_squares_not_divisible_by_5([25, 50, 75]) is None
    assert find_squares_not_divisible_by_5([]) is None
    assert find_squares_not_divisible_by_5([100, 144, 169]) == [144, 169]",100.0,0
"def find_divisible_by_7_and_8_not_56_2(lst):
    result = []
    for num in lst:
        if num % 7 == 0:
            if num % 8 == 0:
                if num % 56 == 0:
                    result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_7_and_8_not_56_2():
    assert find_divisible_by_7_and_8_not_56_2([7, 8, 14, 16, 56, 112]) == [56, 112]
    assert find_divisible_by_7_and_8_not_56_2([1, 2, 3, 4, 5]) is None
    assert find_divisible_by_7_and_8_not_56_2([]) is None
    assert find_divisible_by_7_and_8_not_56_2([56, 112, 21, 32]) == [56, 112]",100.0,0
"def find_in_list_and_tuple(lst, tpl):
    result = []
    for num in lst:
        if num in tpl:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_list_and_tuple():
    assert find_in_list_and_tuple([1, 2, 3], (3, 4, 5)) == [3]
    assert find_in_list_and_tuple([1, 2, 3], (1, 2, 3)) == [1, 2, 3]
    assert find_in_list_and_tuple([], (1, 2, 3)) is None
    assert find_in_list_and_tuple([1, 2, 3], ()) is None",100.0,0
"def find_sum_of_two_not_divisible_by_4(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if (lst[i] + lst[j]) % 4 != 0:
                result.append(lst[i] + lst[j])
    if not result:
        return None
    return result","def test_find_sum_of_two_not_divisible_by_4():
    assert find_sum_of_two_not_divisible_by_4([1, 2, 3, 4]) == [3, 5, 5, 6, 7]
    assert find_sum_of_two_not_divisible_by_4([4, 8, 12]) is None
    assert find_sum_of_two_not_divisible_by_4([]) is None
    assert find_sum_of_two_not_divisible_by_4([3, 6, 9]) == [9, 15]",100.0,0
"def find_in_both_lists(lst1, lst2):
    result = []
    for num in lst1:
        if num in lst2:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_both_lists():
    assert find_in_both_lists([1, 2, 3], [3, 4, 5]) == [3]
    assert find_in_both_lists([1, 2, 3], [4, 5, 6]) is None
    assert find_in_both_lists([], [1, 2, 3]) is None
    assert find_in_both_lists([1, 2, 3], []) is None
    assert find_in_both_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3]
    assert find_in_both_lists([-1, -2, -3], [-3, -4, -5]) == [-3]
    assert find_in_both_lists([0, 2, 4], [4, 0, 6]) == [0, 4]
    assert find_in_both_lists([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [3.3]
    assert find_in_both_lists([""a"", ""b"", ""c""], [""c"", ""d"", ""e""]) == [""c""]",100.0,0
"def find_not_in_list(lst1, lst2):
    result = []
    for num in lst1:
        if num not in lst2:
            result.append(num)
    if not result:
        return None
    return result","def test_find_not_in_list():
    assert find_not_in_list([1, 2, 3], [3, 4, 5]) == [1, 2]
    assert find_not_in_list([1, 2, 3], [1, 2, 3]) is None
    assert find_not_in_list([], [1, 2, 3]) is None
    assert find_not_in_list([1, 2, 3], []) == [1, 2, 3]
    assert find_not_in_list([-1, -2, -3], [-3, -4, -5]) == [-1, -2]
    assert find_not_in_list([0, 2, 4], [4, 0, 6]) == [2]
    assert find_not_in_list([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [1.1, 2.2]
    assert find_not_in_list([""a"", ""b"", ""c""], [""c"", ""d"", ""e""]) == [""a"", ""b""]",100.0,0
"def find_product_not_divisible_by_7(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            product = lst[i] * lst[j]
            if product % 7 != 0:
                result.append(product)
    if not result:
        return None
    return result","def test_find_product_not_divisible_by_7():
    assert find_product_not_divisible_by_7([7, 14, 21]) is None
    assert find_product_not_divisible_by_7([1, 7, 14]) is None
    assert find_product_not_divisible_by_7([]) is None
    assert find_product_not_divisible_by_7([2, 3]) == [6]
    assert find_product_not_divisible_by_7([3, 5]) == [15]
    assert find_product_not_divisible_by_7([1, 2, 3, 4]) == [2, 3, 4, 6, 8, 12]",100.0,0
"def find_product_of_two_odds(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] % 2 != 0 and lst[j] % 2 != 0:
                result.append(lst[i] * lst[j])
    if not result:
        return None
    return result","def test_find_product_of_two_odds():
    assert find_product_of_two_odds([1, 3, 5, 7]) == [3, 5, 7, 15, 21, 35]
    assert find_product_of_two_odds([2, 4, 6]) is None
    assert find_product_of_two_odds([1, 2, 3, 4]) == [3]
    assert find_product_of_two_odds([]) is None
    assert find_product_of_two_odds([9, 7]) == [63]
    assert find_product_of_two_odds([11, 15, 19]) == [165, 209, 285]",100.0,0
"def find_sum_of_two_odds(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] % 2 != 0 and lst[j] % 2 != 0:
                result.append(lst[i] + lst[j])
    if not result:
        return None
    return result","def test_find_sum_of_two_odds():
    assert find_sum_of_two_odds([1, 3, 5, 7]) == [4, 6, 8, 8, 10, 12]
    assert find_sum_of_two_odds([2, 4, 6]) is None
    assert find_sum_of_two_odds([1, 2, 3, 4]) == [4]
    assert find_sum_of_two_odds([]) is None
    assert find_sum_of_two_odds([9, 7]) == [16]
    assert find_sum_of_two_odds([11, 15, 19]) == [26, 30, 34]",100.0,0
"def find_even_in_tuple(tpl):
    result = []
    for num in tpl:
        if num % 2 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_even_in_tuple():
    assert find_even_in_tuple((1, 2, 3, 4, 5)) == [2, 4]
    assert find_even_in_tuple((1, 3, 5)) is None
    assert find_even_in_tuple((2, 4, 6, 8)) == [2, 4, 6, 8]
    assert find_even_in_tuple(()) is None
    assert find_even_in_tuple((1, 3, 4)) == [4]
    assert find_even_in_tuple((2, 0, -2, -4)) == [2, 0, -2, -4]
    assert find_even_in_tuple((7, 8, 10)) == [8, 10]",100.0,0
"def find_product_not_divisible_by_5(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            product = lst[i] * lst[j]
            if product % 5 != 0:
                result.append(product)
    if not result:
        return None
    return result","def test_find_product_not_divisible_by_5():
    assert find_product_not_divisible_by_5([1, 2, 3, 4]) == [2, 3, 4, 6, 8, 12]
    assert find_product_not_divisible_by_5([5, 10, 15]) is None
    assert find_product_not_divisible_by_5([1, 5, 10]) is None
    assert find_product_not_divisible_by_5([]) is None
    assert find_product_not_divisible_by_5([2, 3]) == [6]
    assert find_product_not_divisible_by_5([3, 4, 7]) == [12, 21, 28]
    assert find_product_not_divisible_by_5([11, 3, 2]) == [33, 22, 6]",100.0,0
"def find_keys_in_dict_not_in_other(dict1, dict2):
    result = []
    for key in dict1:
        if key not in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_keys_in_dict_not_in_other():
    assert find_keys_in_dict_not_in_other({""a"": 1, ""b"": 2, ""c"": 3}, {""b"": 4, ""d"": 5}) == [""a"", ""c""]
    assert find_keys_in_dict_not_in_other({""a"": 1}, {""a"": 2}) is None
    assert find_keys_in_dict_not_in_other({}, {""a"": 2}) is None
    assert find_keys_in_dict_not_in_other({""a"": 1, ""b"": 2}, {}) == [""a"", ""b""]
    assert find_keys_in_dict_not_in_other({""x"": 9, ""y"": 8}, {""y"": 7}) == [""x""]
    assert find_keys_in_dict_not_in_other({""k"": 11}, {""m"": 13}) == [""k""]",100.0,0
"def find_difference_in_tuple(tpl):
    result = []
    for i in range(len(tpl)):
        for j in range(i + 1, len(tpl)):
            result.append(abs(tpl[i] - tpl[j]))
    if not result:
        return None
    return result","def test_find_difference_in_tuple():
    assert find_difference_in_tuple((1, 2, 3)) == [1, 2, 1]
    assert find_difference_in_tuple((1, 1, 1)) == [0, 0, 0]
    assert find_difference_in_tuple((4, 6, 8)) == [2, 4, 2]
    assert find_difference_in_tuple(()) is None
    assert find_difference_in_tuple((3,)) is None
    assert find_difference_in_tuple((10, 5, 1)) == [5, 9, 4]",100.0,0
"def find_difference_between_lists_2(lst1, lst2):
    result = []
    for num1 in lst1:
        for num2 in lst2:
            result.append(abs(num1 - num2))
    if not result:
        return None
    return result","def test_find_difference_between_lists_2():
    assert find_difference_between_lists_2([1, 2, 3], [4, 5, 6]) == [3, 4, 5, 2, 3, 4, 1, 2, 3]
    assert find_difference_between_lists_2([1, 1, 1], [1, 1, 1]) == [0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert find_difference_between_lists_2([10, 20], [1, 2]) == [9, 8, 19, 18]
    assert find_difference_between_lists_2([5], [3]) == [2]
    assert find_difference_between_lists_2([], [1, 2, 3]) is None
    assert find_difference_between_lists_2([1, 2, 3], []) is None
    assert find_difference_between_lists_2([], []) is None",100.0,0
"def find_odd_in_one_list(lst1, lst2):
    result = []
    for num in lst1:
        if num % 2 != 0 and num not in lst2:
            result.append(num)
    for num in lst2:
        if num % 2 != 0 and num not in lst1:
            result.append(num)
    if not result:
        return None
    return result","def test_find_odd_in_one_list():
    assert find_odd_in_one_list([1, 2, 3], [3, 4, 5]) == [1, 5]
    assert find_odd_in_one_list([1, 3, 5], [1, 3, 5]) is None
    assert find_odd_in_one_list([], [1, 3, 5]) == [1, 3, 5]
    assert find_odd_in_one_list([1, 2, 4], []) == [1]
    assert find_odd_in_one_list([-1, -2, -3], [-3, -4, -5]) == [-1, -5]
    assert find_odd_in_one_list([0, 2, 4], [4, 0, 6]) is None
    assert find_odd_in_one_list([1, 2, 3], [1, 4, 3]) is None
    assert find_odd_in_one_list([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [1.1, 2.2, 4.4, 5.5]",100.0,0
"def find_sum_of_two_from_one_list(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            result.append(lst[i] + lst[j])
    if not result:
        return None
    return result","def test_find_sum_of_two_from_one_list():
    assert find_sum_of_two_from_one_list([1, 2, 3, 4]) == [3, 4, 5, 5, 6, 7]
    assert find_sum_of_two_from_one_list([1, 1, 1]) == [2, 2, 2]
    assert find_sum_of_two_from_one_list([]) is None
    assert find_sum_of_two_from_one_list([0, 2, 4]) == [2, 4, 6]
    assert find_sum_of_two_from_one_list([-1, -2, -3]) == [-3, -4, -5]
    assert find_sum_of_two_from_one_list([1.1, 2.2, 3.3]) == [3.3000000000000003, 4.4, 5.5]
    assert find_sum_of_two_from_one_list([0, 0, 0]) == [0, 0, 0]",100.0,0
"def find_common_not_in_both_lists(lst1, lst2):
    result = []
    for num in lst1:
        if num in lst2:
            if num not in result:
                result.append(num)
    if not result:
        return None
    return result","def test_find_common_not_in_both_lists():
    assert find_common_not_in_both_lists([1, 2, 3], [3, 4, 5]) == [3]
    assert find_common_not_in_both_lists([1, 2, 3], [4, 5, 6]) is None
    assert find_common_not_in_both_lists([], [1, 2, 3]) is None
    assert find_common_not_in_both_lists([1, 2, 3], []) is None
    assert find_common_not_in_both_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3]
    assert find_common_not_in_both_lists([-1, -2, -3], [-3, -4, -5]) == [-3]
    assert find_common_not_in_both_lists([0, 2, 4], [4, 0, 6]) == [0, 4]
    assert find_common_not_in_both_lists([1.1, 2.2, 3.3], [3.3, 4.4, 5.5]) == [3.3]
    assert find_common_not_in_both_lists([""a"", ""b"", ""c""], [""c"", ""d"", ""e""]) == [""c""]",100.0,0
"def find_sum_of_elements_from_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a + b)
    if not result:
        return None
    return result","def test_find_sum_of_elements_from_two_lists():
    assert find_sum_of_elements_from_two_lists([1, 2, 3], [4, 5, 6]) == [5, 7, 9]
    assert find_sum_of_elements_from_two_lists([1, 1, 1], [1, 1, 1]) == [2, 2, 2]
    assert find_sum_of_elements_from_two_lists([], [1, 2, 3]) is None
    assert find_sum_of_elements_from_two_lists([1, 2, 3], []) is None
    assert find_sum_of_elements_from_two_lists([1, 2, 3], [1, 2, 3]) == [2, 4, 6]
    assert find_sum_of_elements_from_two_lists([-1, -2, -3], [-3, -4, -5]) == [-4, -6, -8]
    assert find_sum_of_elements_from_two_lists([0, 2, 4], [4, 0, 6]) == [4, 2, 10]",100.0,0
"def find_difference_of_elements_from_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a - b)
    if not result:
        return None
    return result","def test_find_difference_of_elements_from_two_lists():
    assert find_difference_of_elements_from_two_lists([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]
    assert find_difference_of_elements_from_two_lists([1, 1, 1], [1, 1, 1]) == [0, 0, 0]
    assert find_difference_of_elements_from_two_lists([], [1, 2, 3]) is None
    assert find_difference_of_elements_from_two_lists([1, 2, 3], []) is None
    assert find_difference_of_elements_from_two_lists([1, 2, 3], [1, 2, 3]) == [0, 0, 0]
    assert find_difference_of_elements_from_two_lists([-1, -2, -3], [-3, -4, -5]) == [2, 2, 2]
    assert find_difference_of_elements_from_two_lists([0, 2, 4], [4, 0, 6]) == [-4, 2, -2]",100.0,0
"def square_numbers(lst):
    result = list(map(lambda x: x ** 2, lst))
    if not result:
        return None
    return result","def test_square_numbers():
    assert square_numbers([1, 2, 3, 4]) == [1, 4, 9, 16]
    assert square_numbers([0, 1, -1, 2]) == [0, 1, 1, 4]
    assert square_numbers([5, 6, 7]) == [25, 36, 49]
    assert square_numbers([-5, -6, -7]) == [25, 36, 49]
    assert square_numbers([]) is None
    assert square_numbers([1]) == [1]
    assert square_numbers([2.2, 3.3]) == [4.840000000000001, 10.889999999999999]",100.0,0
"def find_divisible_by_3_not_5(lst):
    result = []
    for num in lst:
        if num % 3 == 0 and num % 5 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_3_not_5():
    assert find_divisible_by_3_not_5([3, 6, 9, 12, 15]) == [3, 6, 9, 12]
    assert find_divisible_by_3_not_5([5, 10, 15]) is None
    assert find_divisible_by_3_not_5([1, 2, 4, 5]) is None
    assert find_divisible_by_3_not_5([]) is None
    assert find_divisible_by_3_not_5([3, 5, 7, 11]) == [3]
    assert find_divisible_by_3_not_5([6, 9, 18]) == [6, 9, 18]
    assert find_divisible_by_3_not_5([-3, -6, -9]) == [-3, -6, -9]
    assert find_divisible_by_3_not_5([21, 25, 30]) == [21]
    assert find_divisible_by_3_not_5([0, 3, 6, 15, 30]) == [3, 6]",100.0,0
"def find_unique_in_one_list_3(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        if a != b:
            result.append(a)
            result.append(b)
    if not result:
        return None
    return result","def test_find_unique_in_one_list_3():
    assert find_unique_in_one_list_3([1, 2, 3], [3, 2, 1]) == [1, 3, 3, 1]
    assert find_unique_in_one_list_3([1, 1, 1], [1, 1, 1]) is None
    assert find_unique_in_one_list_3([], [1, 2, 3]) is None
    assert find_unique_in_one_list_3([1, 2, 3], []) is None
    assert find_unique_in_one_list_3([1, 2, 3], [4, 5, 6]) == [1, 4, 2, 5, 3, 6]
    assert find_unique_in_one_list_3([-1, -2, -3], [-3, -2, -1]) == [-1, -3, -3, -1]
    assert find_unique_in_one_list_3([0, 2, 4], [4, 2, 0]) == [0, 4, 4, 0]",100.0,0
"def find_in_list_not_in_tuple_2(lst, tpl):
    result = []
    for num in lst:
        if num not in tpl:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_list_not_in_tuple_2():
    assert find_in_list_not_in_tuple_2([1, 2, 3], (3, 4, 5)) == [1, 2]
    assert find_in_list_not_in_tuple_2([1, 2, 3], (1, 2, 3)) is None
    assert find_in_list_not_in_tuple_2([], (1, 2, 3)) is None
    assert find_in_list_not_in_tuple_2([1, 2, 3], ()) == [1, 2, 3]
    assert find_in_list_not_in_tuple_2([-1, -2, -3], (-3, -4, -5)) == [-1, -2]
    assert find_in_list_not_in_tuple_2([0, 2, 4], (4, 0, 6)) == [2]
    assert find_in_list_not_in_tuple_2([1.1, 2.2, 3.3], (3.3, 4.4, 5.5)) == [1.1, 2.2]
    assert find_in_list_not_in_tuple_2([""a"", ""b"", ""c""], (""c"", ""d"", ""e"")) == [""a"", ""b""]
    assert find_in_list_not_in_tuple_2([""a"", ""b"", ""c""], (""a"", ""b"", ""c"")) is None",100.0,0
"def find_cubes(lst):
    result = list(map(lambda x: x ** 3, lst))
    if not result:
        return None
    return result","def test_find_cubes():
    assert find_cubes([1, 2, 3]) == [1, 8, 27]
    assert find_cubes([-1, -2, -3]) == [-1, -8, -27]
    assert find_cubes([0, 2, 4]) == [0, 8, 64]
    assert find_cubes([]) is None
    assert find_cubes([1, 1, 1]) == [1, 1, 1]
    assert find_cubes([2]) == [8]
    assert find_cubes([3, 5, 7]) == [27, 125, 343]
    assert find_cubes([-4, -6, -8]) == [-64, -216, -512]
    assert find_cubes([1.1, 2.2]) == [1.3310000000000004, 10.648000000000003]",100.0,0
"def find_divisible_by_2_and_3(lst):
    result = []
    for num in lst:
        if num % 2 == 0 and num % 3 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_2_and_3():
    assert find_divisible_by_2_and_3([6, 12, 18]) == [6, 12, 18]
    assert find_divisible_by_2_and_3([7, 14, 21]) is None
    assert find_divisible_by_2_and_3([2, 4, 8]) is None
    assert find_divisible_by_2_and_3([3, 9, 15]) is None
    assert find_divisible_by_2_and_3([6]) == [6]
    assert find_divisible_by_2_and_3([1, 2, 3]) is None
    assert find_divisible_by_2_and_3([]) is None",100.0,0
"def find_powers_of_numbers(lst, power):
    result = list(map(lambda x: x ** power, lst))
    if not result:
        return None
    return result","def test_find_powers_of_numbers():
    assert find_powers_of_numbers([2, 3], 2) == [4, 9]
    assert find_powers_of_numbers([1, 2, 3], 3) == [1, 8, 27]
    assert find_powers_of_numbers([], 2) is None
    assert find_powers_of_numbers([0], 5) == [0]
    assert find_powers_of_numbers([2], 0) == [1]
    assert find_powers_of_numbers([-2, -3], 2) == [4, 9]
    assert find_powers_of_numbers([2], 1) == [2]",100.0,0
"def find_difference_between_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(abs(a - b))
    if not result:
        return None
    return result","def test_find_difference_between_two_lists():
    assert find_difference_between_two_lists([1, 3, 5], [1, 2, 3]) == [0, 1, 2]
    assert find_difference_between_two_lists([4, 6], [2, 3]) == [2, 3]
    assert find_difference_between_two_lists([], []) is None
    assert find_difference_between_two_lists([1], [0]) == [1]
    assert find_difference_between_two_lists([0], [1]) == [1]
    assert find_difference_between_two_lists([1], [-1]) == [2]
    assert find_difference_between_two_lists([2, 3, 4], [5, 3, 1]) == [3, 0, 3]",100.0,0
"def find_keys_in_both_dicts(dict1, dict2):
    result = []
    for key in dict1:
        if key in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_keys_in_both_dicts():
    assert find_keys_in_both_dicts({""a"": 1, ""b"": 2}, {""b"": 3, ""c"": 4}) == [""b""]
    assert find_keys_in_both_dicts({""a"": 1, ""b"": 2}, {""d"": 3, ""e"": 4}) is None
    assert find_keys_in_both_dicts({""a"": 1}, {""a"": 4}) == [""a""]
    assert find_keys_in_both_dicts({}, {""a"": 4}) is None
    assert find_keys_in_both_dicts({""a"": 1, ""b"": 2}, {}) is None
    assert find_keys_in_both_dicts({}, {}) is None
    assert find_keys_in_both_dicts({""a"": 1, ""b"": 2, ""c"": 3}, {""c"": 4, ""d"": 5, ""a"": 0}) == [""a"", ""c""]",100.0,0
"def find_product_of_elements_from_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a * b)
    if not result:
        return None
    return result","def test_find_product_of_elements_from_two_lists():
    assert find_product_of_elements_from_two_lists([1, 2], [3, 4]) == [3, 8]
    assert find_product_of_elements_from_two_lists([5, 6], [0, 7]) == [0, 42]
    assert find_product_of_elements_from_two_lists([1], [1]) == [1]
    assert find_product_of_elements_from_two_lists([0], [2]) == [0]
    assert find_product_of_elements_from_two_lists([2], [0]) == [0]
    assert find_product_of_elements_from_two_lists([], []) is None
    assert find_product_of_elements_from_two_lists([2, 3], [4, 1]) == [8, 3]",100.0,0
"def find_keys_in_dict_not_in_list(d, lst):
    result = []
    for key in d:
        if key not in lst:
            result.append(key)
    if not result:
        return None
    return result","def test_find_keys_in_dict_not_in_list():
    assert find_keys_in_dict_not_in_list({""a"": 1, ""b"": 2}, [""a""]) == [""b""]
    assert find_keys_in_dict_not_in_list({""a"": 1, ""b"": 2}, [""a"", ""b""]) is None
    assert find_keys_in_dict_not_in_list({}, [""a""]) is None
    assert find_keys_in_dict_not_in_list({""a"": 1}, []) == [""a""]
    assert find_keys_in_dict_not_in_list({""a"": 1, ""b"": 2}, []) == [""a"", ""b""]
    assert find_keys_in_dict_not_in_list({""a"": 1, ""b"": 2}, [""c""]) == [""a"", ""b""]
    assert find_keys_in_dict_not_in_list({""a"": 1}, [""a"", ""b""]) is None",100.0,0
"def find_powers_of_numbers_in_list(lst, power):
    result = []
    for num in lst:
        result.append(num ** power)
    if not result:
        return None
    return result","def test_find_powers_of_numbers_in_list():
    assert find_powers_of_numbers_in_list([2, 3], 2) == [4, 9]
    assert find_powers_of_numbers_in_list([1, 2, 3], 3) == [1, 8, 27]
    assert find_powers_of_numbers_in_list([], 2) is None
    assert find_powers_of_numbers_in_list([0], 5) == [0]
    assert find_powers_of_numbers_in_list([2], 0) == [1]
    assert find_powers_of_numbers_in_list([-2, -3], 2) == [4, 9]
    assert find_powers_of_numbers_in_list([2], 1) == [2]",100.0,0
"def find_elements_in_both_sets(set1, set2):
    result = list(set1 & set2)
    if not result:
        return None
    return result","def test_find_elements_in_both_sets():
    assert find_elements_in_both_sets({1, 2, 3}, {2, 3, 4}) == [2, 3]
    assert find_elements_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_elements_in_both_sets(set(), {1, 2, 3}) is None
    assert find_elements_in_both_sets({1}, {1}) == [1]
    assert find_elements_in_both_sets({1, 2, 3}, {1}) == [1]
    assert find_elements_in_both_sets(set(), set()) is None
    assert find_elements_in_both_sets({0, 1, 2}, {2, 0, 3}) == [0, 2]",100.0,0
"def find_diff_between_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(abs(a - b))
    if not result:
        return None
    return result","def test_find_diff_between_lists():
    assert find_diff_between_lists([1, 2, 3], [4, 5, 6]) == [3, 3, 3]
    assert find_diff_between_lists([7, 8, 9], [1, 2, 3]) == [6, 6, 6]
    assert find_diff_between_lists([0], [0]) == [0]
    assert find_diff_between_lists([], []) is None
    assert find_diff_between_lists([1], [0]) == [1]
    assert find_diff_between_lists([0], [1]) == [1]
    assert find_diff_between_lists([2, 3, 4], [5, 3, 1]) == [3, 0, 3]",100.0,0
"def find_sum_of_two_lists_2(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a + b)
    if not result:
        return None
    return result","def test_find_sum_of_two_lists_2():
    assert find_sum_of_two_lists_2([1, 2, 3], [4, 5, 6]) == [5, 7, 9]
    assert find_sum_of_two_lists_2([7, 8, 9], [1, 2, 3]) == [8, 10, 12]
    assert find_sum_of_two_lists_2([0], [0]) == [0]
    assert find_sum_of_two_lists_2([], []) is None
    assert find_sum_of_two_lists_2([1], [0]) == [1]
    assert find_sum_of_two_lists_2([0], [1]) == [1]
    assert find_sum_of_two_lists_2([2, 3, 4], [5, 3, 1]) == [7, 6, 5]",100.0,0
"def find_in_tuple_not_in_list(tpl, lst):
    result = []
    for num in tpl:
        if num not in lst:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_tuple_not_in_list():
    assert find_in_tuple_not_in_list((1, 2, 3), [2, 3, 4]) == [1]
    assert find_in_tuple_not_in_list((5, 6), [6, 7]) == [5]
    assert find_in_tuple_not_in_list((), [1, 2]) is None
    assert find_in_tuple_not_in_list((1,), [1]) is None
    assert find_in_tuple_not_in_list((1,), []) == [1]
    assert find_in_tuple_not_in_list((1, 2, 3), (2, 4)) == [1, 3]
    assert find_in_tuple_not_in_list((1, 2), (1, 2, 3)) is None",100.0,0
"def find_divisible_by_10_not_20(lst):
    result = []
    for num in lst:
        if num % 10 == 0 and num % 20 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_10_not_20():
    assert find_divisible_by_10_not_20([10, 20, 30, 40]) == [10, 30]
    assert find_divisible_by_10_not_20([5, 10, 15, 25]) == [10]
    assert find_divisible_by_10_not_20([1, 2, 3, 4]) is None
    assert find_divisible_by_10_not_20([20, 40, 60]) is None
    assert find_divisible_by_10_not_20([10, 50, 70]) == [10, 50, 70]
    assert find_divisible_by_10_not_20([]) is None
    assert find_divisible_by_10_not_20([30, 50, 90]) == [30, 50, 90]",100.0,0
"def find_sum_from_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a + b)
    if not result:
        return None
    return result","def test_find_sum_from_two_lists():
    assert find_sum_from_two_lists([1, 2], [3, 4]) == [4, 6]
    assert find_sum_from_two_lists([5, 6], [1, 2]) == [6, 8]
    assert find_sum_from_two_lists([], []) is None
    assert find_sum_from_two_lists([1], [1]) == [2]
    assert find_sum_from_two_lists([0], [0]) == [0]
    assert find_sum_from_two_lists([2, 3], [4, 5]) == [6, 8]
    assert find_sum_from_two_lists([5, 5], [5, 5]) == [10, 10]",100.0,0
"def find_common_elements_in_sets(set1, set2):
    result = list(set1 & set2)
    if not result:
        return None
    return result","def test_find_common_elements_in_sets():
    assert find_common_elements_in_sets({1, 2, 3}, {3, 4, 5}) == [3]
    assert find_common_elements_in_sets({6, 7}, {7, 8}) == [7]
    assert find_common_elements_in_sets(set(), {1, 2}) is None
    assert find_common_elements_in_sets({1}, {1}) == [1]
    assert find_common_elements_in_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_common_elements_in_sets(set(), set()) is None
    assert find_common_elements_in_sets({0, 1, 2}, {2, 3, 0}) == [0, 2]",100.0,0
"def find_product_in_list(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            result.append(lst[i] * lst[j])
    if not result:
        return None
    return result","def test_find_product_in_list():
    assert find_product_in_list([1, 2, 3]) == [2, 3, 6]
    assert find_product_in_list([4, 5]) == [20]
    assert find_product_in_list([]) is None
    assert find_product_in_list([0, 1]) == [0]
    assert find_product_in_list([1]) is None
    assert find_product_in_list([1, 2]) == [2]
    assert find_product_in_list([2, 3, 4]) == [6, 8, 12]",100.0,0
"def find_in_list_not_in_dict(lst, d):
    result = []
    for num in lst:
        if num not in d:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_list_not_in_dict():
    assert find_in_list_not_in_dict([1, 2, 3], {3: ""a"", 4: ""b""}) == [1, 2]
    assert find_in_list_not_in_dict([5, 6], {5: ""x"", 7: ""y""}) == [6]
    assert find_in_list_not_in_dict([], {1: ""a""}) is None
    assert find_in_list_not_in_dict([1], {1: ""a""}) is None
    assert find_in_list_not_in_dict([1], {}) == [1]
    assert find_in_list_not_in_dict([1, 2, 3], {}) == [1, 2, 3]
    assert find_in_list_not_in_dict([1, 2], {3: ""b"", 4: ""c""}) == [1, 2]",100.0,0
"def merge_dicts_2(dict1, dict2):
    result = dict1.copy()
    result.update(dict2)
    if not result:
        return None
    return result","def test_merge_dicts_2():
    assert merge_dicts_2({""a"": 1}, {""b"": 2}) == {""a"": 1, ""b"": 2}
    assert merge_dicts_2({}, {""c"": 3}) == {""c"": 3}
    assert merge_dicts_2({""d"": 4}, {}) == {""d"": 4}
    assert merge_dicts_2({}, {}) is None
    assert merge_dicts_2({""a"": 1}, {""a"": 2}) == {""a"": 2}
    assert merge_dicts_2({""a"": 1, ""b"": 2}, {""c"": 3}) == {""a"": 1, ""b"": 2, ""c"": 3}
    assert merge_dicts_2({""x"": 0}, {""y"": -1}) == {""x"": 0, ""y"": -1}",100.0,0
"def find_in_one_set_not_other(set1, set2):
    result = set1.symmetric_difference(set2)
    if not result:
        return None
    return list(result)","def test_find_in_one_set_not_other():
    assert find_in_one_set_not_other({1, 2}, {2, 3}) == [1, 3]
    assert find_in_one_set_not_other({5, 6}, {6, 7}) == [5, 7]
    assert find_in_one_set_not_other(set(), {1, 2}) == [1, 2]
    assert find_in_one_set_not_other({1}, {1}) is None
    assert find_in_one_set_not_other({1}, set()) == [1]
    assert find_in_one_set_not_other(set(), set()) is None
    assert find_in_one_set_not_other({1, 2, 3}, {4, 5, 6}) == [1, 2, 3, 4, 5, 6]",100.0,0
"def find_division_from_two_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        if b != 0:
            result.append(a / b)
    if not result:
        return None
    return result","def test_find_division_from_two_lists():
    assert find_division_from_two_lists([1, 2], [1, 2]) == [1, 1]
    assert find_division_from_two_lists([4, 6], [2, 3]) == [2, 2]
    assert find_division_from_two_lists([], []) is None
    assert find_division_from_two_lists([1], [1]) == [1]
    assert find_division_from_two_lists([5], [0]) is None
    assert find_division_from_two_lists([1, 2], [0, 1]) == [2]
    assert find_division_from_two_lists([0, 1], [1, 2]) == [0, 0.5]",100.0,0
"def find_common_less_in_one_list(lst1, lst2):
    result = []
    for num in lst1:
        if num in lst2 and lst1.count(num) < lst2.count(num):
            result.append(num)
    if not result:
        return None
    return result","def test_find_common_less_in_one_list():
    assert find_common_less_in_one_list([1, 2, 3], [2, 3, 3]) == [3]
    assert find_common_less_in_one_list([4, 5, 6], [5, 6, 7]) is None
    assert find_common_less_in_one_list([], []) is None
    assert find_common_less_in_one_list([1], [1]) is None
    assert find_common_less_in_one_list([1, 2, 3], [1, 2, 2, 3]) == [2]",100.0,0
"def find_in_first_not_in_second(lst1, lst2):
    result = []
    for num in lst1:
        if num not in lst2:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_first_not_in_second():
    assert find_in_first_not_in_second([1, 2, 3], [2, 3, 4]) == [1]
    assert find_in_first_not_in_second([1, 2, 3], [1, 2, 3]) is None
    assert find_in_first_not_in_second([1, 2, 3, 4, 5], [4, 5]) == [1, 2, 3]
    assert find_in_first_not_in_second([], [1, 2, 3]) is None
    assert find_in_first_not_in_second([1, 2, 3], []) == [1, 2, 3]",100.0,0
"def find_common_elements_diff_index(lst1, lst2):
    result = []
    for i, num1 in enumerate(lst1):
        for j, num2 in enumerate(lst2):
            if num1 == num2 and i != j:
                result.append(num1)
    if not result:
        return None
    return sorted(set(result))","def test_find_common_elements_diff_index():
    assert find_common_elements_diff_index([1, 2, 3], [3, 2, 1]) == [1, 3]
    assert find_common_elements_diff_index([1, 2, 3], [1, 2, 3]) is None
    assert find_common_elements_diff_index([1, 2, 2, 3], [2, 3, 1, 2]) == [1, 2, 3]
    assert find_common_elements_diff_index([], [1, 2, 3]) is None
    assert find_common_elements_diff_index([1, 2, 3], []) is None",100.0,0
"def add_values_of_dicts(dict1, dict2):
    result = {}
    for key in dict1:
        if key in dict2:
            result[key] = dict1[key] + dict2[key]
    if not result:
        return None
    return result","def test_add_values_of_dicts():
    assert add_values_of_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'b': 5}
    assert add_values_of_dicts({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) is None
    assert add_values_of_dicts({'a': 1, 'b': 2, 'c': 3}, {'b': 2, 'c': 3}) == {'b': 4, 'c': 6}
    assert add_values_of_dicts({}, {'a': 1, 'b': 2}) is None
    assert add_values_of_dicts({'a': 1, 'b': 2}, {}) is None",100.0,0
"def find_more_in_one_set(set1, set2):
    result = []
    for num in set1:
        if num in set2 and num % 3 == 0:
            result.append(num)
    if not result:
        return None
    return sorted(result)","def test_find_more_in_one_set():
    assert find_more_in_one_set({1, 2, 3}, {1, 2}) is None
    assert find_more_in_one_set({1, 2, 2, 3}, {1, 2}) is None
    assert find_more_in_one_set({1, 2, 2, 3, 3}, {2, 3}) == [3]
    assert find_more_in_one_set({1, 2}, {3, 1}) is None
    assert find_more_in_one_set({1, 21, 1, 2}, {21, 2}) == [21]",100.0,0
"def multiply_numbers_by_two(lst):
    result = []
    for num in lst:
        result.append(num * 2)
    if not result:
        return None
    return result","def test_multiply_numbers_by_two():
    assert multiply_numbers_by_two([1, 2, 3]) == [2, 4, 6]
    assert multiply_numbers_by_two([0, -1, -2]) == [0, -2, -4]
    assert multiply_numbers_by_two([10, 100, 1000]) == [20, 200, 2000]
    assert multiply_numbers_by_two([]) is None
    assert multiply_numbers_by_two([1]) == [2]",100.0,0
"def sum_dict_values(dict1, dict2):
    result = {}
    for key in dict1:
        if key in dict2:
            result[key] = dict1[key] + dict2[key]
    if not result:
        return None
    return result","def test_sum_dict_values():
    assert sum_dict_values({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'b': 5}
    assert sum_dict_values({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) is None
    assert sum_dict_values({'a': 1, 'b': 2, 'c': 3}, {'b': 2, 'c': 3}) == {'b': 4, 'c': 6}
    assert sum_dict_values({}, {'a': 1, 'b': 2}) is None
    assert sum_dict_values({'a': 1, 'b': 2}, {}) is None",100.0,0
"def find_squares_2(lst):
    result = []
    for num in lst:
        result.append(num ** 2)
    if not result:
        return None
    return result","def test_find_squares_2():
    assert find_squares_2([1, 2, 3]) == [1, 4, 9]
    assert find_squares_2([0, -1, -2]) == [0, 1, 4]
    assert find_squares_2([10, 100, 1000]) == [100, 10000, 1000000]
    assert find_squares_2([]) is None
    assert find_squares_2([1]) == [1]",100.0,0
"def find_difference_of_sets(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_difference_of_sets():
    assert find_difference_of_sets({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_difference_of_sets({1, 2, 3}, {1, 2, 3}) is None
    assert find_difference_of_sets({1, 2, 3, 4}, {3, 4}) == [1, 2]
    assert find_difference_of_sets({1, 2}, {3, 4}) == [1, 2]
    assert find_difference_of_sets(set(), {1, 2, 3}) is None",100.0,0
"def find_sum_list_set(lst, s):
    result = []
    for num in lst:
        if num in s:
            result.append(num + 1)
    if not result:
        return None
    return result","def test_find_sum_list_set():
    assert find_sum_list_set([1, 2, 3], {2, 3, 4}) == [3, 4]
    assert find_sum_list_set([1, 2, 3], {1, 2, 3}) == [2, 3, 4]
    assert find_sum_list_set([1, 2, 3, 4], {4, 5}) == [5]
    assert find_sum_list_set([], {1, 2, 3}) is None
    assert find_sum_list_set([1, 2, 3], set()) is None",100.0,0
"def find_in_set_not_in_other_set(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return result","def test_find_in_set_not_in_other_set():
    assert find_in_set_not_in_other_set({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_in_set_not_in_other_set({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_set_not_in_other_set({1, 2, 3, 4}, {3, 4}) == [1, 2]
    assert find_in_set_not_in_other_set({1, 2}, {3, 4}) == [1, 2]
    assert find_in_set_not_in_other_set(set(), {1, 2, 3}) is None",100.0,0
"def divide_elements_of_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        if b != 0:
            result.append(a / b)
    if not result:
        return None
    return result","def test_divide_elements_of_lists():
    assert divide_elements_of_lists([4, 9, 16], [2, 3, 4]) == [2, 3, 4]
    assert divide_elements_of_lists([4, 9, 16], [2, 0, 4]) == [2, 4]
    assert divide_elements_of_lists([1, 2, 3], [0, 1, 1]) == [2, 3]
    assert divide_elements_of_lists([], [1, 2, 3]) is None
    assert divide_elements_of_lists([1, 2, 3], []) is None",100.0,0
"def find_in_both_sets_not_in_one(set1, set2):
    result = list(set1 & set2 ^ (set1 | set2))
    if not result:
        return None
    return sorted(result)","def test_find_in_both_sets_not_in_one():
    assert find_in_both_sets_not_in_one({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]
    assert find_in_both_sets_not_in_one({1, 2}, {2, 3}) == [1, 3]
    assert find_in_both_sets_not_in_one({1, 2, 3}, {4, 5, 6}) == [1, 2, 3, 4, 5, 6]
    assert find_in_both_sets_not_in_one({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_both_sets_not_in_one(set(), set()) is None",100.0,0
"def subtract_set_from_list(lst, s):
    result = []
    for num in lst:
        if num not in s:
            result.append(num)
    if not result:
        return None
    return result","def test_subtract_set_from_list():
    assert subtract_set_from_list([1, 2, 3], {2, 3, 4}) == [1]
    assert subtract_set_from_list([1, 2, 3], {1, 2, 3}) is None
    assert subtract_set_from_list([1, 2, 3, 4], {4, 5}) == [1, 2, 3]
    assert subtract_set_from_list([], {1, 2, 3}) is None
    assert subtract_set_from_list([1, 2, 3], set()) == [1, 2, 3]",100.0,0
"def find_sum_of_tuples(tpl1, tpl2):
    result = []
    for a, b in zip(tpl1, tpl2):
        result.append(a + b)
    if not result:
        return None
    return result","def test_find_sum_of_tuples():
    assert find_sum_of_tuples((1, 2, 3), (4, 5, 6)) == [5, 7, 9]
    assert find_sum_of_tuples((1, 2), (1, 2, 3)) == [2, 4]
    assert find_sum_of_tuples((0, 0, 0), (0, 0, 0)) == [0, 0, 0]
    assert find_sum_of_tuples((), ()) is None
    assert find_sum_of_tuples((1, 2, 3), ()) is None",100.0,0
"def find_in_one_set_not_other_2(set1, set2):
    result = list(set1 ^ set2)
    if not result:
        return None
    return result","def test_find_in_one_set_not_other_2():
    assert find_in_one_set_not_other_2({1, 2, 3}, {2, 3, 4}) == [1, 4]
    assert find_in_one_set_not_other_2({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_one_set_not_other_2({1, 2, 3, 4}, {3, 4}) == [1, 2]
    assert find_in_one_set_not_other_2({1, 2}, {3, 4}) == [1, 2, 3, 4]
    assert find_in_one_set_not_other_2(set(), {1, 2, 3}) == [1, 2, 3]",100.0,0
"def find_divisible_by_4_not_8(lst):
    result = []
    for num in lst:
        if num % 4 == 0 and num % 8 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_4_not_8():
    assert find_divisible_by_4_not_8([4, 8, 16]) == [4]
    assert find_divisible_by_4_not_8([0, 8, 16]) is None
    assert find_divisible_by_4_not_8([4, 12, 20]) == [4, 12, 20]
    assert find_divisible_by_4_not_8([]) is None
    assert find_divisible_by_4_not_8([3, 5, 7]) is None",100.0,0
"def find_keys_in_dict1_not_in_dict2(dict1, dict2):
    result = []
    for key in dict1:
        if key not in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_keys_in_dict1_not_in_dict2():
    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['a']
    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) is None
    assert find_keys_in_dict1_not_in_dict2({'a': 1, 'b': 2, 'c': 3}, {'b': 3}) == ['a', 'c']
    assert find_keys_in_dict1_not_in_dict2({}, {'a': 1}) is None
    assert find_keys_in_dict1_not_in_dict2({'a': 1}, {}) == ['a']",100.0,0
"def multiply_by_two(lst):
    result = []
    for num in lst:
        result.append(num * 2)
    if not result:
        return None
    return result","def test_multiply_by_two():
    assert multiply_by_two([1, 2, 3]) == [2, 4, 6]
    assert multiply_by_two([0, -1, -2]) == [0, -2, -4]
    assert multiply_by_two([10, 100, 1000]) == [20, 200, 2000]
    assert multiply_by_two([]) is None
    assert multiply_by_two([1]) == [2]",100.0,0
"def subtract_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a - b)
    if not result:
        return None
    return result","def test_subtract_lists():
    assert subtract_lists([4, 9, 16], [2, 3, 4]) == [2, 6, 12]
    assert subtract_lists([4, 9, 16], [2, 0, 4]) == [2, 9, 12]
    assert subtract_lists([1, 2, 3], [0, 1, 1]) == [1, 1, 2]
    assert subtract_lists([], [1, 2, 3]) is None
    assert subtract_lists([1, 2, 3], []) is None",100.0,0
"def find_common_in_dicts(dict1, dict2):
    result = []
    for key in dict1:
        if key in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_common_in_dicts():
    assert find_common_in_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['b']
    assert find_common_in_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == ['a', 'b']
    assert find_common_in_dicts({'a': 1, 'b': 2, 'c': 3}, {'b': 3}) == ['b']
    assert find_common_in_dicts({}, {'a': 1}) is None
    assert find_common_in_dicts({'a': 1}, {}) is None",100.0,0
"def sum_list_3(lst):
    return sum(lst) if lst else None","def test_sum_list_3():
    assert sum_list_3([1, 2, 3]) == 6
    assert sum_list_3([]) is None
    assert sum_list_3([0]) == 0",100.0,0
"def find_divisible_by_3_not_9(lst):
    result = []
    for num in lst:
        if num % 3 == 0 and num % 9 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_3_not_9():
    assert find_divisible_by_3_not_9([3, 6, 9]) == [3, 6]
    assert find_divisible_by_3_not_9([9, 18, 27]) is None
    assert find_divisible_by_3_not_9([]) is None",100.0,0
"def find_divisible_by_5_or_7(lst):
    result = []
    for num in lst:
        if num % 5 == 0 or num % 7 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_5_or_7():
    assert find_divisible_by_5_or_7([5, 10, 7, 14, 21]) == [5, 10, 7, 14, 21]
    assert find_divisible_by_5_or_7([1, 2, 3]) is None
    assert find_divisible_by_5_or_7([]) is None",100.0,0
"def find_in_dicts(dict1, dict2):
    result = []
    for key in dict1:
        if key in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_in_dicts():
    assert find_in_dicts({'a': 1, 'b': 2}, {'a': 3, 'c': 4}) == ['a']
    assert find_in_dicts({'a': 1}, {'b': 2}) is None
    assert find_in_dicts({}, {'a': 1}) is None",100.0,0
"def find_divisible_by_3_or_5(lst):
    result = []
    for num in lst:
        if num % 3 == 0 or num % 5 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_3_or_5():
    assert find_divisible_by_3_or_5([3, 5, 15, 30]) == [3, 5, 15, 30]
    assert find_divisible_by_3_or_5([1, 2, 4]) is None
    assert find_divisible_by_3_or_5([]) is None",100.0,0
"def find_divisible_by_4_not_6(lst):
    result = []
    for num in lst:
        if num % 4 == 0 and num % 6 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_4_not_6():
    assert find_divisible_by_4_not_6([4, 8, 12, 24]) == [4, 8]
    assert find_divisible_by_4_not_6([6, 12, 18]) is None
    assert find_divisible_by_4_not_6([]) is None",100.0,0
"def find_divisible_by_5_not_10(lst):
    result = []
    for num in lst:
        if num % 5 == 0 and num % 10 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_5_not_10():
    assert find_divisible_by_5_not_10([5, 15, 20]) == [5, 15]
    assert find_divisible_by_5_not_10([10, 20, 30]) is None
    assert find_divisible_by_5_not_10([]) is None",100.0,0
"def find_powers_of_list(lst, power):
    result = []
    for num in lst:
        result.append(num ** power)
    if not result:
        return None
    return result","def test_find_powers_of_list():
    assert find_powers_of_list([2, 3, 4], 2) == [4, 9, 16]
    assert find_powers_of_list([1, 0, -1], 3) == [1, 0, -1]
    assert find_powers_of_list([], 2) is None",100.0,0
"def find_divisible_by_6_not_12(lst):
    result = []
    for num in lst:
        if num % 6 == 0 and num % 12 != 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_6_not_12():
    assert find_divisible_by_6_not_12([6, 18, 12, 24]) == [6, 18]
    assert find_divisible_by_6_not_12([12, 24, 36]) is None
    assert find_divisible_by_6_not_12([]) is None",100.0,0
"def find_divisible_by_4_or_5(lst):
    result = []
    for num in lst:
        if num % 4 == 0 or num % 5 == 0:
            result.append(num)
    if not result:
        return None
    return result","def test_find_divisible_by_4_or_5():
    assert find_divisible_by_4_or_5([4, 5, 8, 10]) == [4, 5, 8, 10]
    assert find_divisible_by_4_or_5([1, 2, 3]) is None
    assert find_divisible_by_4_or_5([]) is None",100.0,0
"def find_in_list_not_in_another(lst1, lst2):
    result = []
    for num in lst1:
        if num not in lst2:
            result.append(num)
    if not result:
        return None
    return result","def test_find_in_list_not_in_another():
    assert find_in_list_not_in_another([1, 2, 3], [2, 3, 4]) == [1]
    assert find_in_list_not_in_another([5, 6, 7], [5, 6, 7]) is None
    assert find_in_list_not_in_another([], [1, 2, 3]) is None",100.0,0
"def find_unique_keys_in_dict(dict1, dict2):
    result = []
    for key in dict1:
        if key not in dict2:
            result.append(key)
    if not result:
        return None
    return result","def test_find_unique_keys_in_dict():
    assert find_unique_keys_in_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == ['a']
    assert find_unique_keys_in_dict({'a': 1}, {'a': 2}) is None
    assert find_unique_keys_in_dict({}, {'a': 1}) is None",100.0,0
"def multiply_lists(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a * b)
    if not result:
        return None
    return result","def test_multiply_lists():
    assert multiply_lists([1, 2, 3], [4, 5, 6]) == [4, 10, 18]
    assert multiply_lists([1, 2], [3, 4, 5]) == [3, 8]
    assert multiply_lists([], [1, 2, 3]) is None",100.0,0
"def subtract_lists_v2(lst1, lst2):
    result = []
    for a, b in zip(lst1, lst2):
        result.append(a - b)
    if not result:
        return None
    return result","def test_subtract_lists_v2():
    assert subtract_lists_v2([5, 6, 7], [1, 2, 3]) == [4, 4, 4]
    assert subtract_lists_v2([10, 20], [5, 5]) == [5, 15]
    assert subtract_lists_v2([], [1, 2]) is None",100.0,0
"def find_in_set_not_other(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_in_set_not_other():
    assert find_in_set_not_other({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_in_set_not_other({5, 6, 7}, {5, 6, 7}) is None
    assert find_in_set_not_other(set(), {1, 2, 3}) is None",100.0,0
"def find_common_in_sets(set1, set2):
    result = list(set1 & set2)
    if not result:
        return None
    return sorted(result)","def test_find_common_in_sets():
    assert find_common_in_sets({1, 2, 3}, {2, 3, 4}) == [2, 3]
    assert find_common_in_sets({1, 2}, {3, 4}) is None
    assert find_common_in_sets(set(), {1, 2, 3}) is None",100.0,0
"def find_divisible_by_2_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 2 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_2_in_both_sets():
    assert find_divisible_by_2_in_both_sets({2, 4, 6}, {4, 6, 8}) == [4, 6]
    assert find_divisible_by_2_in_both_sets({1, 3, 5}, {2, 4, 6}) is None
    assert find_divisible_by_2_in_both_sets(set(), {2, 4, 6}) is None",100.0,0
"def find_not_divisible_by_3_in_both_sets(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 3 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_not_divisible_by_3_in_both_sets():
    assert find_not_divisible_by_3_in_both_sets({1, 2, 4}, {2, 4, 5}) == [2, 4]
    assert find_not_divisible_by_3_in_both_sets({3, 6, 9}, {3, 6, 9}) is None
    assert find_not_divisible_by_3_in_both_sets(set(), {1, 2, 3}) is None",100.0,0
"def find_in_one_set_not_other_v2(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_in_one_set_not_other_v2():
    assert find_in_one_set_not_other_v2({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_in_one_set_not_other_v2({5, 6, 7}, {5, 6, 7}) is None
    assert find_in_one_set_not_other_v2(set(), {1, 2, 3}) is None",100.0,0
"def find_divisible_by_2_or_5_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 2 == 0 or num % 5 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_2_or_5_in_both_sets():
    assert find_divisible_by_2_or_5_in_both_sets({10, 15, 20}, {5, 10, 20}) == [10, 20]
    assert find_divisible_by_2_or_5_in_both_sets({1, 3, 7}, {2, 4, 8}) is None
    assert find_divisible_by_2_or_5_in_both_sets(set(), {1, 2, 3}) is None",100.0,0
"def find_not_divisible_by_2_or_3_in_both_sets(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 2 == 0 or num % 3 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_not_divisible_by_2_or_3_in_both_sets():
    assert find_not_divisible_by_2_or_3_in_both_sets({1, 2, 3, 5, 7}, {5, 7, 9, 11}) == [5, 7]
    assert find_not_divisible_by_2_or_3_in_both_sets({1, 3, 5, 7}, {2, 4, 6, 8}) is None
    assert find_not_divisible_by_2_or_3_in_both_sets(set(), set()) is None
    assert find_not_divisible_by_2_or_3_in_both_sets({10, 15, 25}, {10, 25, 35}) == [25]
    assert find_not_divisible_by_2_or_3_in_both_sets({5, 8, 11, 14}, {3, 6, 9, 12}) is None
    assert find_not_divisible_by_2_or_3_in_both_sets({1, 2, 4, 5, 10}, {5, 10, 11, 20}) == [5]
    assert find_not_divisible_by_2_or_3_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_not_divisible_by_2_or_3_in_both_sets({4, 5, 6}, {4, 5, 6}) == [5]
    assert find_not_divisible_by_2_or_3_in_both_sets({1, 9, 13}, {2, 9, 13}) == [13]",100.0,0
"def find_divisible_by_4_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 4 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_4_in_both_sets():
    assert find_divisible_by_4_in_both_sets({4, 8, 12, 16}, {4, 8, 16, 20}) == [4, 8, 16]
    assert find_divisible_by_4_in_both_sets({1, 2, 3}, {5, 7, 11}) is None
    assert find_divisible_by_4_in_both_sets({32, 48, 64}, {32, 64, 96}) == [32, 64]
    assert find_divisible_by_4_in_both_sets({1, 4, 6, 8}, {2, 4, 8, 16}) == [4, 8]
    assert find_divisible_by_4_in_both_sets({16, 32, 48}, {24, 32, 48}) == [32, 48]
    assert find_divisible_by_4_in_both_sets({3, 6, 9}, {12, 15, 18}) is None
    assert find_divisible_by_4_in_both_sets({4, 5, 6}, {7, 8, 9}) is None
    assert find_divisible_by_4_in_both_sets({4, 8, 12}, {16, 20, 24}) is None
    assert find_divisible_by_4_in_both_sets({8, 12, 16}, {8, 16, 20}) == [8, 16]",100.0,0
"def find_in_set_not_other_v2(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_in_set_not_other_v2():
    assert find_in_set_not_other_v2({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_in_set_not_other_v2({4, 5, 6}, {1, 2, 3}) == [4, 5, 6]
    assert find_in_set_not_other_v2(set(), {1, 2, 3}) is None
    assert find_in_set_not_other_v2({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_set_not_other_v2({1, 3, 5}, {2, 4, 6}) == [1, 3, 5]
    assert find_in_set_not_other_v2({10, 20, 30}, {20, 40, 60}) == [10, 30]
    assert find_in_set_not_other_v2({7, 8, 9}, {7, 8, 9}) is None
    assert find_in_set_not_other_v2({5, 6, 7}, {7, 8, 9}) == [5, 6]
    assert find_in_set_not_other_v2({0, 1, 2}, {0, 2, 4}) == [1]",100.0,0
"def find_in_any_set(set1, set2):
    result = list(set1 | set2)
    if not result:
        return None
    return sorted(result)","def test_find_in_any_set():
    assert find_in_any_set({1, 2, 3}, {3, 4, 5}) == [1, 2, 3, 4, 5]
    assert find_in_any_set({1, 3, 5}, {2, 4, 6}) == [1, 2, 3, 4, 5, 6]
    assert find_in_any_set(set(), set()) is None
    assert find_in_any_set({1, 2, 3}, {4, 5, 6}) == [1, 2, 3, 4, 5, 6]
    assert find_in_any_set({7, 8, 9}, {10, 11, 12}) == [7, 8, 9, 10, 11, 12]
    assert find_in_any_set({1, 2}, {2, 3}) == [1, 2, 3]
    assert find_in_any_set({1, 3, 5}, {1, 3, 5}) == [1, 3, 5]
    assert find_in_any_set({1, 4, 7}, {2, 5, 8}) == [1, 2, 4, 5, 7, 8]
    assert find_in_any_set({1}, set()) == [1]",100.0,0
"def find_divisible_by_7_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 7 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_7_in_both_sets():
    assert find_divisible_by_7_in_both_sets({7, 14, 21}, {14, 21, 28}) == [14, 21]
    assert find_divisible_by_7_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_7_in_both_sets({7, 14, 21, 28}, {7, 21, 35, 49}) == [7, 21]
    assert find_divisible_by_7_in_both_sets({7, 14, 28}, {14, 21, 35}) == [14]
    assert find_divisible_by_7_in_both_sets({14, 21, 28}, {14, 21, 28}) == [14, 21, 28]
    assert find_divisible_by_7_in_both_sets({7, 14}, {21, 28}) is None
    assert find_divisible_by_7_in_both_sets({2, 3, 5}, {7, 11, 13}) is None
    assert find_divisible_by_7_in_both_sets({14, 21, 35}, {14, 21, 35}) == [14, 21, 35]
    assert find_divisible_by_7_in_both_sets({1, 7, 14}, {7, 14, 21}) == [7, 14]",100.0,0
"def find_difference_in_sets(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_difference_in_sets():
    assert find_difference_in_sets({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_difference_in_sets({4, 5, 6}, {1, 2, 3}) == [4, 5, 6]
    assert find_difference_in_sets(set(), {1, 2, 3}) is None
    assert find_difference_in_sets({1, 2, 3}, {1, 2, 3}) is None
    assert find_difference_in_sets({1, 3, 5}, {2, 4, 6}) == [1, 3, 5]
    assert find_difference_in_sets({10, 20, 30}, {20, 40, 60}) == [10, 30]
    assert find_difference_in_sets({7, 8, 9}, {7, 8, 9}) is None",100.0,0
"def find_not_divisible_by_2_in_both_sets(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 2 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_not_divisible_by_2_in_both_sets():
    assert find_not_divisible_by_2_in_both_sets({1, 2, 3, 5}, {3, 5, 7, 9}) == [3, 5]
    assert find_not_divisible_by_2_in_both_sets({2, 4, 6, 8}, {1, 3, 5, 7}) is None
    assert find_not_divisible_by_2_in_both_sets({1, 3, 5, 7}, {3, 5, 9, 11}) == [3, 5]
    assert find_not_divisible_by_2_in_both_sets({10, 15, 25}, {10, 25, 35}) == [25]
    assert find_not_divisible_by_2_in_both_sets(set(), {1, 3, 5}) is None
    assert find_not_divisible_by_2_in_both_sets({1, 3, 5}, {6, 8, 10}) is None
    assert find_not_divisible_by_2_in_both_sets({3, 5, 7}, {1, 3, 7}) == [3, 7]
    assert find_not_divisible_by_2_in_both_sets({5, 9, 13}, {5, 9, 17}) == [5, 9]
    assert find_not_divisible_by_2_in_both_sets({2, 4, 6}, {3, 5, 7}) is None",100.0,0
"def find_common_in_three_sets(set1, set2, set3):
    result = list(set1 & set2 & set3)
    if not result:
        return None
    return sorted(result)","def test_find_common_in_three_sets():
    assert find_common_in_three_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [3]
    assert find_common_in_three_sets({1, 2, 3}, {3, 4, 5}, {5, 6, 7}) is None
    assert find_common_in_three_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [30]
    assert find_common_in_three_sets({5, 10, 15}, {15, 20, 25}, {15, 30, 45}) == [15]
    assert find_common_in_three_sets({1, 1, 1}, {2, 2, 2}, {3, 3, 3}) is None
    assert find_common_in_three_sets({4, 8, 12}, {8, 12, 16}, {12, 16, 20}) == [12]
    assert find_common_in_three_sets({1, 3, 5}, {1, 3, 5}, {1, 3, 5}) == [1, 3, 5]
    assert find_common_in_three_sets(set(), {1, 2, 3}, {1, 2, 3}) is None
    assert find_common_in_three_sets({2, 4, 6}, {4, 6, 8}, {6, 8, 10}) == [6]",100.0,0
"def find_difference_in_three_sets(set1, set2, set3):
    result = list(set1 - set2 - set3)
    if not result:
        return None
    return sorted(result)","def test_find_difference_in_three_sets():
    assert find_difference_in_three_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [1]
    assert find_difference_in_three_sets({1, 2, 3}, {1, 2, 3}, {1, 2, 3}) is None
    assert find_difference_in_three_sets({5, 10, 15}, {10, 15, 20}, {15, 20, 25}) == [5]
    assert find_difference_in_three_sets({7, 14, 21}, {14, 21, 28}, {21, 28, 35}) == [7]
    assert find_difference_in_three_sets({2, 3, 4}, {4, 5, 6}, {6, 7, 8}) == [2, 3]
    assert find_difference_in_three_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [10]
    assert find_difference_in_three_sets({1, 3, 5}, {2, 4, 6}, {3, 6, 9}) == [1, 5]
    assert find_difference_in_three_sets({1, 2}, {2, 3}, {3, 4}) == [1]
    assert find_difference_in_three_sets(set(), {1, 2, 3}, {1, 2, 3}) is None",100.0,0
"def find_diff_in_sets_v2(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_diff_in_sets_v2():
    assert find_diff_in_sets_v2({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_diff_in_sets_v2({4, 5, 6}, {1, 2, 3}) == [4, 5, 6]
    assert find_diff_in_sets_v2(set(), {1, 2, 3}) is None
    assert find_diff_in_sets_v2({1, 2, 3}, {1, 2, 3}) is None
    assert find_diff_in_sets_v2({1, 3, 5}, {2, 4, 6}) == [1, 3, 5]
    assert find_diff_in_sets_v2({10, 20, 30}, {20, 40, 60}) == [10, 30]
    assert find_diff_in_sets_v2({7, 8, 9}, {7, 8, 9}) is None
    assert find_diff_in_sets_v2({5, 6, 7}, {7, 8, 9}) == [5, 6]
    assert find_diff_in_sets_v2({0, 1, 2}, {0, 2, 4}) == [1]",100.0,0
"def find_not_divisible_by_5_in_both_sets(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 5 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_not_divisible_by_5_in_both_sets():
    assert find_not_divisible_by_5_in_both_sets({1, 2, 3, 10, 15}, {2, 3, 20, 25}) == [2, 3]
    assert find_not_divisible_by_5_in_both_sets({5, 10, 15}, {5, 10, 15}) is None
    assert find_not_divisible_by_5_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_not_divisible_by_5_in_both_sets({10, 20, 30}, {40, 50, 60}) is None
    assert find_not_divisible_by_5_in_both_sets({1, 3, 7, 11}, {7, 11, 13, 17}) == [7, 11]
    assert find_not_divisible_by_5_in_both_sets(set(), set()) is None
    assert find_not_divisible_by_5_in_both_sets({1, 2, 3}, {5, 10, 15}) is None
    assert find_not_divisible_by_5_in_both_sets({5, 6, 7}, {5, 6, 7}) == [6, 7]
    assert find_not_divisible_by_5_in_both_sets({4, 5, 6}, {4, 6, 7}) == [4, 6]",100.0,0
"def find_divisible_by_3_or_6_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 3 == 0 or num % 6 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_3_or_6_in_both_sets():
    assert find_divisible_by_3_or_6_in_both_sets({3, 6, 9, 12}, {6, 9, 12, 18}) == [6, 9, 12]
    assert find_divisible_by_3_or_6_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_3_or_6_in_both_sets({2, 4, 6, 8}, {3, 5, 9, 12}) is None
    assert find_divisible_by_3_or_6_in_both_sets({2, 4, 5}, {1, 2, 5}) is None
    assert find_divisible_by_3_or_6_in_both_sets({6, 7, 8}, {9, 10, 11}) is None
    assert find_divisible_by_3_or_6_in_both_sets(set(), set()) is None
    assert find_divisible_by_3_or_6_in_both_sets({3, 6, 9}, {1, 2, 3}) == [3]
    assert find_divisible_by_3_or_6_in_both_sets({4, 5, 6}, {6, 7, 8}) == [6]
    assert find_divisible_by_3_or_6_in_both_sets({10, 20, 30}, {10, 30, 40}) == [30]",100.0,0
"def find_common_in_sets_divisible_by_3(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 3 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_common_in_sets_divisible_by_3():
    assert find_common_in_sets_divisible_by_3({3, 6, 9}, {3, 9, 12}) == [3, 9]
    assert find_common_in_sets_divisible_by_3({2, 4, 5}, {1, 2, 3}) is None
    assert find_common_in_sets_divisible_by_3({5, 6, 7}, {5, 6, 9}) == [6]
    assert find_common_in_sets_divisible_by_3({2, 4, 6}, {2, 4, 6}) == [6]
    assert find_common_in_sets_divisible_by_3({3, 6, 9}, {6, 9, 12}) == [6, 9]
    assert find_common_in_sets_divisible_by_3(set(), set()) is None
    assert find_common_in_sets_divisible_by_3({1, 2, 3}, {1, 2, 4}) is None
    assert find_common_in_sets_divisible_by_3({2, 5, 8}, {3, 5, 7}) is None
    assert find_common_in_sets_divisible_by_3({1, 2, 3}, {3, 6, 9}) == [3]",100.0,0
"def find_divisible_by_6_not_12_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 6 == 0 and num % 12 != 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_6_not_12_in_both_sets():
    assert find_divisible_by_6_not_12_in_both_sets({6, 18, 24}, {6, 18, 30}) == [6, 18]
    assert find_divisible_by_6_not_12_in_both_sets({2, 4, 6}, {1, 2, 3}) is None
    assert find_divisible_by_6_not_12_in_both_sets({12, 18, 24}, {12, 18, 24}) == [18]
    assert find_divisible_by_6_not_12_in_both_sets({6, 12, 18}, {6, 18, 24}) == [6, 18]
    assert find_divisible_by_6_not_12_in_both_sets({1, 3, 5}, {6, 9, 12}) is None
    assert find_divisible_by_6_not_12_in_both_sets(set(), set()) is None
    assert find_divisible_by_6_not_12_in_both_sets({2, 4, 6}, {2, 4, 6}) == [6]
    assert find_divisible_by_6_not_12_in_both_sets({1, 2, 4}, {2, 4, 6}) is None
    assert find_divisible_by_6_not_12_in_both_sets({3, 6, 9}, {6, 9, 12}) == [6]",100.0,0
"def find_not_in_both_sets(set1, set2):
    result = list(set1 ^ set2)
    if not result:
        return None
    return sorted(result)","def test_find_not_in_both_sets():
    assert find_not_in_both_sets({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]
    assert find_not_in_both_sets({1, 2, 3}, {1, 2, 3}) is None
    assert find_not_in_both_sets({4, 5, 6}, {4, 6, 7}) == [5, 7]
    assert find_not_in_both_sets({2, 3, 4}, {1, 2, 3}) == [1, 4]
    assert find_not_in_both_sets({10, 20, 30}, {20, 30, 40}) == [10, 40]
    assert find_not_in_both_sets(set(), set()) is None
    assert find_not_in_both_sets({1, 2, 4}, {2, 3, 4}) == [1, 3]
    assert find_not_in_both_sets({2, 3, 5}, {3, 5, 7}) == [2, 7]
    assert find_not_in_both_sets({7, 8, 9}, {8, 9, 10}) == [7, 10]",100.0,0
"def find_difference_between_three_sets(set1, set2, set3):
    result = list(set1 - set2 - set3)
    if not result:
        return None
    return sorted(result)","def test_find_difference_between_three_sets():
    assert find_difference_between_three_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [1]
    assert find_difference_between_three_sets({1, 2, 3}, {1, 2, 3}, {1, 2, 3}) is None
    assert find_difference_between_three_sets({5, 10, 15}, {10, 15, 20}, {15, 20, 25}) == [5]
    assert find_difference_between_three_sets({7, 14, 21}, {14, 21, 28}, {21, 28, 35}) == [7]
    assert find_difference_between_three_sets({2, 3, 4}, {4, 5, 6}, {6, 7, 8}) == [2, 3]
    assert find_difference_between_three_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [10]
    assert find_difference_between_three_sets({1, 3, 5}, {2, 4, 6}, {3, 6, 9}) == [1, 5]
    assert find_difference_between_three_sets({1, 2}, {2, 3}, {3, 4}) == [1]
    assert find_difference_between_three_sets(set(), {1, 2, 3}, {1, 2, 3}) is None",100.0,0
"def find_divisible_by_2_not_3_in_both_sets(set1, set2):
    result = list((set1 & set2) & {num for num in range(1, 101) if num % 2 == 0 and num % 3 != 0})
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_2_not_3_in_both_sets():
    assert find_divisible_by_2_not_3_in_both_sets({2, 4, 6}, {2, 4, 8}) == [2, 4]
    assert find_divisible_by_2_not_3_in_both_sets({1, 3, 5}, {2, 4, 6}) is None
    assert find_divisible_by_2_not_3_in_both_sets({8, 10, 12}, {6, 8, 10}) == [8, 10]
    assert find_divisible_by_2_not_3_in_both_sets({4, 5, 6}, {1, 2, 4}) == [4]
    assert find_divisible_by_2_not_3_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_2_not_3_in_both_sets({2, 4, 6}, {3, 5, 7}) is None
    assert find_divisible_by_2_not_3_in_both_sets({2, 4, 6}, {4, 6, 8}) == [4]
    assert find_divisible_by_2_not_3_in_both_sets({1, 4, 5}, {2, 3, 4}) == [4]
    assert find_divisible_by_2_not_3_in_both_sets({8, 10, 12}, {14, 16, 18}) is None",100.0,0
"def find_common_not_divisible_by_4(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 4 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_common_not_divisible_by_4():
    assert find_common_not_divisible_by_4({1, 2, 3, 8, 12}, {2, 3, 12, 16}) == [2, 3]
    assert find_common_not_divisible_by_4({2, 4, 6}, {4, 6, 8}) == [6]
    assert find_common_not_divisible_by_4({1, 2, 3}, {4, 5, 6}) is None
    assert find_common_not_divisible_by_4({1, 3, 5}, {1, 3, 7}) == [1, 3]
    assert find_common_not_divisible_by_4({4, 8, 12}, {4, 12, 16}) is None
    assert find_common_not_divisible_by_4({3, 6, 9}, {6, 9, 12}) == [6, 9]
    assert find_common_not_divisible_by_4(set(), {1, 2, 3}) is None
    assert find_common_not_divisible_by_4({1, 2, 3}, {1, 2, 3}) == [1, 2, 3]
    assert find_common_not_divisible_by_4({5, 6, 7}, {6, 7, 8}) == [6, 7]",100.0,0
"def find_unique_in_sets(set1, set2):
    result = list(set1 ^ set2)
    if not result:
        return None
    return sorted(result)","def test_find_unique_in_sets():
    assert find_unique_in_sets({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]
    assert find_unique_in_sets({1, 2, 3}, {1, 2, 3}) is None
    assert find_unique_in_sets({4, 5, 6}, {4, 6, 7}) == [5, 7]
    assert find_unique_in_sets({2, 3, 4}, {1, 2, 3}) == [1, 4]
    assert find_unique_in_sets({10, 20, 30}, {20, 30, 40}) == [10, 40]
    assert find_unique_in_sets(set(), set()) is None
    assert find_unique_in_sets({1, 2, 4}, {2, 3, 4}) == [1, 3]
    assert find_unique_in_sets({2, 3, 5}, {3, 5, 7}) == [2, 7]
    assert find_unique_in_sets({7, 8, 9}, {8, 9, 10}) == [7, 10]",100.0,0
"def find_common_in_all_sets(set1, set2, set3):
    result = list(set1 & set2 & set3)
    if not result:
        return None
    return sorted(result)","def test_find_common_in_all_sets():
    assert find_common_in_all_sets({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == [3]
    assert find_common_in_all_sets({1, 2, 3}, {3, 4, 5}, {5, 6, 7}) is None
    assert find_common_in_all_sets({10, 20, 30}, {20, 30, 40}, {30, 40, 50}) == [30]
    assert find_common_in_all_sets({5, 10, 15}, {15, 20, 25}, {15, 30, 45}) == [15]
    assert find_common_in_all_sets({1, 1, 1}, {2, 2, 2}, {3, 3, 3}) is None
    assert find_common_in_all_sets({4, 8, 12}, {8, 12, 16}, {12, 16, 20}) == [12]
    assert find_common_in_all_sets({1, 3, 5}, {1, 3, 5}, {1, 3, 5}) == [1, 3, 5]
    assert find_common_in_all_sets(set(), {1, 2, 3}, {1, 2, 3}) is None
    assert find_common_in_all_sets({2, 4, 6}, {4, 6, 8}, {6, 8, 10}) == [6]",100.0,0
"def find_in_both_sets_not_divisible_by_3(set1, set2):
    result = list((set1 & set2) - {num for num in range(1, 101) if num % 3 == 0})
    if not result:
        return None
    return sorted(result)","def test_find_in_both_sets_not_divisible_by_3():
    assert find_in_both_sets_not_divisible_by_3({1, 2, 3, 6, 9}, {2, 3, 5, 6}) == [2]
    assert find_in_both_sets_not_divisible_by_3({1, 2, 4}, {3, 4, 5, 6}) == [4]
    assert find_in_both_sets_not_divisible_by_3({3, 6, 9}, {12, 15}) is None
    assert find_in_both_sets_not_divisible_by_3(set(), {1, 2, 4}) is None
    assert find_in_both_sets_not_divisible_by_3({1, 2, 3}, set()) is None
    assert find_in_both_sets_not_divisible_by_3({2, 4, 6}, {2, 8, 10}) == [2]
    assert find_in_both_sets_not_divisible_by_3({1, 7, 9, 10}, {3, 7, 10}) == [7, 10]
    assert find_in_both_sets_not_divisible_by_3({1, 5, 12}, {4, 5, 6, 12}) == [5]
    assert find_in_both_sets_not_divisible_by_3({8, 12, 15, 20}, {5, 8, 15, 25}) == [8]",100.0,0
"def find_unique_in_one_set(set1, set2):
    result = list(set1 ^ set2)
    if not result:
        return None
    return sorted(result)","def test_find_unique_in_one_set():
    assert find_unique_in_one_set({1, 2, 3}, {2, 3, 4}) == [1, 4]
    assert find_unique_in_one_set({1, 3}, {2, 4}) == [1, 2, 3, 4]
    assert find_unique_in_one_set({1, 2, 3}, {1, 2, 3}) is None
    assert find_unique_in_one_set(set(), {1, 2, 3}) == [1, 2, 3]
    assert find_unique_in_one_set({1, 2, 3}, set()) == [1, 2, 3]
    assert find_unique_in_one_set({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]
    assert find_unique_in_one_set({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]
    assert find_unique_in_one_set({9, 10}, {11, 12}) == [9, 10, 11, 12]
    assert find_unique_in_one_set({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]",100.0,0
"def find_in_set_not_other_v3(set1, set2):
    result = []
    for elem in set1:
        if elem not in set2:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_set_not_other_v3():
    assert find_in_set_not_other_v3({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_in_set_not_other_v3({1, 3}, {2, 4}) == [1, 3]
    assert find_in_set_not_other_v3({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_set_not_other_v3(set(), {1, 2, 3}) is None
    assert find_in_set_not_other_v3({1, 2, 3}, set()) == [1, 2, 3]
    assert find_in_set_not_other_v3({1, 2, 3, 5}, {2, 3, 4, 5}) == [1]
    assert find_in_set_not_other_v3({1, 6, 7}, {2, 3, 6}) == [1, 7]
    assert find_in_set_not_other_v3({9, 10}, {11, 12}) == [9, 10]
    assert find_in_set_not_other_v3({7, 8, 9}, {8, 10, 11}) == [7, 9]",100.0,0
"def find_common_divisible_by_3(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_common_divisible_by_3():
    assert find_common_divisible_by_3({1, 2, 3}, {2, 3, 4}) == [3]
    assert find_common_divisible_by_3({3, 6, 9}, {6, 12, 18}) == [6]
    assert find_common_divisible_by_3({3, 6, 9}, {3, 6, 9}) == [3, 6, 9]
    assert find_common_divisible_by_3({1, 2, 4}, {5, 7, 8}) is None
    assert find_common_divisible_by_3(set(), {3, 6, 9}) is None
    assert find_common_divisible_by_3({3, 6, 9}, set()) is None
    assert find_common_divisible_by_3({1, 3, 5, 9}, {9, 12, 15}) == [9]
    assert find_common_divisible_by_3({6, 12}, {3, 6, 9}) == [6]
    assert find_common_divisible_by_3({4, 8, 12}, {3, 9, 12}) == [12]",100.0,0
"def find_in_one_set_not_other_v3(set1, set2):
    result = []
    for elem in set1 | set2:
        if (elem in set1) != (elem in set2):
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_one_set_not_other_v3():
    assert find_in_one_set_not_other_v3({1, 2, 3}, {2, 3, 4}) == [1, 4]
    assert find_in_one_set_not_other_v3({1, 3}, {2, 4}) == [1, 2, 3, 4]
    assert find_in_one_set_not_other_v3({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_one_set_not_other_v3(set(), {1, 2, 3}) == [1, 2, 3]
    assert find_in_one_set_not_other_v3({1, 2, 3}, set()) == [1, 2, 3]
    assert find_in_one_set_not_other_v3({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]
    assert find_in_one_set_not_other_v3({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]
    assert find_in_one_set_not_other_v3({9, 10}, {11, 12}) == [9, 10, 11, 12]
    assert find_in_one_set_not_other_v3({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]",100.0,0
"def find_divisible_by_2_not_4_in_both_sets(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 2 == 0 and elem % 4 != 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_2_not_4_in_both_sets():
    assert find_divisible_by_2_not_4_in_both_sets({1, 2, 4}, {2, 3, 4}) == [2]
    assert find_divisible_by_2_not_4_in_both_sets({2, 6, 10}, {4, 6, 10}) == [6, 10]
    assert find_divisible_by_2_not_4_in_both_sets({1, 3, 5}, {7, 9, 11}) is None
    assert find_divisible_by_2_not_4_in_both_sets({1, 2}, {2, 3}) == [2]
    assert find_divisible_by_2_not_4_in_both_sets(set(), {2, 4, 6}) is None
    assert find_divisible_by_2_not_4_in_both_sets({2, 4, 6}, set()) is None
    assert find_divisible_by_2_not_4_in_both_sets({2, 3, 8}, {2, 4, 8}) == [2]
    assert find_divisible_by_2_not_4_in_both_sets({1, 2, 6}, {2, 5, 6}) == [2, 6]
    assert find_divisible_by_2_not_4_in_both_sets({4, 8, 10}, {2, 4, 8}) is None",100.0,0
"def find_in_both_sets_not_divisible_by_5(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_both_sets_not_divisible_by_5():
    assert find_in_both_sets_not_divisible_by_5({1, 2, 5, 10}, {2, 3, 5}) == [2]
    assert find_in_both_sets_not_divisible_by_5({5, 15, 25}, {10, 20, 30}) is None
    assert find_in_both_sets_not_divisible_by_5({1, 2, 3, 4, 5}, {3, 5, 7, 9}) == [3]
    assert find_in_both_sets_not_divisible_by_5({5, 10, 15}, {2, 4, 6}) is None
    assert find_in_both_sets_not_divisible_by_5(set(), {1, 2, 3}) is None
    assert find_in_both_sets_not_divisible_by_5({1, 2, 4}, set()) is None
    assert find_in_both_sets_not_divisible_by_5({1, 2, 3, 7}, {2, 3, 7}) == [2, 3, 7]
    assert find_in_both_sets_not_divisible_by_5({1, 8, 12}, {4, 8, 12}) == [8, 12]
    assert find_in_both_sets_not_divisible_by_5({6, 7, 8}, {7, 8, 9}) == [7, 8]",100.0,0
"def find_in_both_sets_divisible_by_3(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_both_sets_divisible_by_3():
    assert find_in_both_sets_divisible_by_3({1, 2, 3}, {3, 4, 5}) == [3]
    assert find_in_both_sets_divisible_by_3({6, 9, 12}, {9, 12, 18}) == [9, 12]
    assert find_in_both_sets_divisible_by_3({3, 6, 9}, {3, 6, 9}) == [3, 6, 9]
    assert find_in_both_sets_divisible_by_3({1, 4, 5}, {7, 8, 10}) is None
    assert find_in_both_sets_divisible_by_3(set(), {1, 2, 3}) is None
    assert find_in_both_sets_divisible_by_3({1, 2, 3}, set()) is None
    assert find_in_both_sets_divisible_by_3({1, 3, 6, 9}, {3, 6, 9}) == [3, 6, 9]
    assert find_in_both_sets_divisible_by_3({4, 8, 12}, {6, 12, 18}) == [12]
    assert find_in_both_sets_divisible_by_3({2, 3, 5, 6}, {1, 2, 3, 6}) == [3, 6]",100.0,0
"def find_unique_in_sets_v2(set1, set2):
    result = []
    for elem in set1 ^ set2:
        result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_unique_in_sets_v2():
    assert find_unique_in_sets_v2({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]
    assert find_unique_in_sets_v2({1, 3}, {2, 4}) == [1, 2, 3, 4]
    assert find_unique_in_sets_v2({1, 2, 3}, {1, 2, 3}) is None
    assert find_unique_in_sets_v2(set(), {1, 2, 3}) == [1, 2, 3]
    assert find_unique_in_sets_v2({1, 2, 3}, set()) == [1, 2, 3]
    assert find_unique_in_sets_v2({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]
    assert find_unique_in_sets_v2({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]
    assert find_unique_in_sets_v2({9, 10}, {11, 12}) == [9, 10, 11, 12]
    assert find_unique_in_sets_v2({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]",100.0,0
"def find_in_first_set_not_second_divisible_by_7(set1, set2):
    result = []
    for elem in set1 - set2:
        if elem % 7 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_first_set_not_second_divisible_by_7():
    assert find_in_first_set_not_second_divisible_by_7({7, 14, 21}, {1, 2, 3}) == [7, 14, 21]
    assert find_in_first_set_not_second_divisible_by_7({7, 14}, {14, 28}) == [7]
    assert find_in_first_set_not_second_divisible_by_7({1, 2, 3}, {3, 7, 14}) is None
    assert find_in_first_set_not_second_divisible_by_7({7, 14, 28}, set()) == [7, 14, 28]
    assert find_in_first_set_not_second_divisible_by_7(set(), {1, 2, 3}) is None
    assert find_in_first_set_not_second_divisible_by_7({7, 49, 70}, {7, 14, 49}) == [70]
    assert find_in_first_set_not_second_divisible_by_7({1, 2, 7}, {3, 5, 9}) == [7]
    assert find_in_first_set_not_second_divisible_by_7({14, 21, 28}, {14, 28, 35}) == [21]
    assert find_in_first_set_not_second_divisible_by_7({7, 21, 35}, {35, 42, 49}) == [7, 21]",100.0,0
"def find_divisible_by_6_not_12_in_both_sets_2(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 6 == 0 and elem % 12 != 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_6_not_12_in_both_sets_2():
    assert find_divisible_by_6_not_12_in_both_sets_2({6, 12, 18}, {6, 18, 30}) == [6, 18]
    assert find_divisible_by_6_not_12_in_both_sets_2({12, 24, 36}, {24, 36, 48}) is None
    assert find_divisible_by_6_not_12_in_both_sets_2({6, 12, 18}, {12, 24, 36}) is None
    assert find_divisible_by_6_not_12_in_both_sets_2(set(), {6, 18, 24}) is None
    assert find_divisible_by_6_not_12_in_both_sets_2({6, 18, 24}, set()) is None
    assert find_divisible_by_6_not_12_in_both_sets_2({6, 12, 18}, {6, 12, 18}) == [6, 18]
    assert find_divisible_by_6_not_12_in_both_sets_2({18, 24, 30}, {6, 18, 30}) == [18, 30]
    assert find_divisible_by_6_not_12_in_both_sets_2({6, 30, 48}, {12, 18, 30}) == [30]
    assert find_divisible_by_6_not_12_in_both_sets_2({1, 2, 3, 6}, {6, 9, 12, 18}) == [6]",100.0,0
"def find_in_one_set_not_other_divisible_by_5(set1, set2):
    result = []
    for elem in set1 ^ set2:
        if elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_one_set_not_other_divisible_by_5():
    assert find_in_one_set_not_other_divisible_by_5({5, 10, 15}, {10, 20, 30}) == [5, 15, 20, 30]
    assert find_in_one_set_not_other_divisible_by_5({1, 2, 5}, {5, 10, 15}) == [10, 15]
    assert find_in_one_set_not_other_divisible_by_5({5, 10}, {5, 10}) is None
    assert find_in_one_set_not_other_divisible_by_5(set(), {5, 10, 15}) == [5, 10, 15]
    assert find_in_one_set_not_other_divisible_by_5({5, 10, 15}, set()) == [5, 10, 15]
    assert find_in_one_set_not_other_divisible_by_5({1, 5, 9}, {2, 5, 10}) == [10]
    assert find_in_one_set_not_other_divisible_by_5({6, 7, 8}, {5, 10, 15}) == [5, 10, 15]
    assert find_in_one_set_not_other_divisible_by_5({5, 12, 20}, {20, 30, 40}) == [5, 30, 40]
    assert find_in_one_set_not_other_divisible_by_5({3, 6, 9}, {3, 6, 9}) is None",100.0,0
"def find_common_in_sets_divisible_by_4(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 4 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_common_in_sets_divisible_by_4():
    assert find_common_in_sets_divisible_by_4({4, 8, 12}, {8, 12, 16}) == [8, 12]
    assert find_common_in_sets_divisible_by_4({16, 32, 48}, {32, 48, 64}) == [32, 48]
    assert find_common_in_sets_divisible_by_4({4, 8, 12}, {4, 8, 12}) == [4, 8, 12]
    assert find_common_in_sets_divisible_by_4({2, 6, 10}, {3, 6, 9}) is None
    assert find_common_in_sets_divisible_by_4(set(), {4, 8, 12}) is None
    assert find_common_in_sets_divisible_by_4({4, 8, 12}, set()) is None
    assert find_common_in_sets_divisible_by_4({8, 12, 24}, {12, 24, 36}) == [12, 24]
    assert find_common_in_sets_divisible_by_4({16, 32, 64}, {8, 16, 32}) == [16, 32]
    assert find_common_in_sets_divisible_by_4({1, 2, 4}, {2, 4, 8}) == [4]",100.0,0
"def find_divisible_by_3_in_both_sets(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_3_in_both_sets():
    assert find_divisible_by_3_in_both_sets({3, 6, 9}, {6, 9, 12}) == [6, 9]
    assert find_divisible_by_3_in_both_sets({3, 9, 15}, {3, 9, 15}) == [3, 9, 15]
    assert find_divisible_by_3_in_both_sets({6, 12, 18}, {18, 24, 30}) == [18]
    assert find_divisible_by_3_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_3_in_both_sets(set(), {3, 6, 9}) is None
    assert find_divisible_by_3_in_both_sets({3, 6, 9}, set()) is None
    assert find_divisible_by_3_in_both_sets({3, 12, 15}, {12, 15, 18}) == [12, 15]
    assert find_divisible_by_3_in_both_sets({6, 9, 12}, {9, 12, 15}) == [9, 12]
    assert find_divisible_by_3_in_both_sets({6, 9, 18}, {6, 12, 18}) == [6, 18]",100.0,0
"def find_difference_in_sets_v2(set1, set2):
    result = []
    for elem in set1 - set2:
        result.append(elem)
    for elem in set2 - set1:
        result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_difference_in_sets_v2():
    assert find_difference_in_sets_v2({1, 2, 3}, {2, 3, 4}) == [1, 4]
    assert find_difference_in_sets_v2({1, 3}, {2, 4}) == [1, 2, 3, 4]
    assert find_difference_in_sets_v2({1, 2, 3}, {1, 2, 3}) is None
    assert find_difference_in_sets_v2(set(), {1, 2, 3}) == [1, 2, 3]
    assert find_difference_in_sets_v2({1, 2, 3}, set()) == [1, 2, 3]
    assert find_difference_in_sets_v2({1, 2, 3, 5}, {2, 3, 4, 5}) == [1, 4]
    assert find_difference_in_sets_v2({1, 6, 7}, {2, 3, 6}) == [1, 2, 3, 7]
    assert find_difference_in_sets_v2({9, 10}, {11, 12}) == [9, 10, 11, 12]
    assert find_difference_in_sets_v2({7, 8, 9}, {8, 10, 11}) == [7, 9, 10, 11]",100.0,0
"def find_divisible_by_4_in_both_sets_2(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 4 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_4_in_both_sets_2():
    assert find_divisible_by_4_in_both_sets_2({4, 8, 12}, {8, 12, 16}) == [8, 12]
    assert find_divisible_by_4_in_both_sets_2({16, 32, 48}, {32, 48, 64}) == [32, 48]
    assert find_divisible_by_4_in_both_sets_2({4, 8, 12}, {4, 8, 12}) == [4, 8, 12]
    assert find_divisible_by_4_in_both_sets_2({2, 6, 10}, {3, 6, 9}) is None
    assert find_divisible_by_4_in_both_sets_2(set(), {4, 8, 12}) is None
    assert find_divisible_by_4_in_both_sets_2({4, 8, 12}, set()) is None
    assert find_divisible_by_4_in_both_sets_2({8, 12, 24}, {12, 24, 36}) == [12, 24]
    assert find_divisible_by_4_in_both_sets_2({16, 32, 64}, {8, 16, 32}) == [16, 32]
    assert find_divisible_by_4_in_both_sets_2({1, 2, 4}, {2, 4, 8}) == [4]",100.0,0
"def find_unique_not_divisible_by_3(set1, set2):
    result = []
    for elem in set1 - set2:
        if elem % 3 != 0:
            result.append(elem)
    for elem in set2 - set1:
        if elem % 3 != 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_unique_not_divisible_by_3():
    assert find_unique_not_divisible_by_3({1, 2, 3, 4}, {4, 5, 6, 7}) == [1, 2, 5, 7]
    assert find_unique_not_divisible_by_3({9, 18, 27}, {3, 6, 9}) is None
    assert find_unique_not_divisible_by_3({7, 10, 14}, {1, 7, 10}) == [1, 14]
    assert find_unique_not_divisible_by_3(set(), {3, 6, 9}) is None
    assert find_unique_not_divisible_by_3({3, 6, 9}, set()) is None
    assert find_unique_not_divisible_by_3({1, 4, 7}, {2, 5, 8}) == [1, 2, 4, 5, 7, 8]
    assert find_unique_not_divisible_by_3({10, 20, 30}, {30, 40, 50}) == [10, 20, 40, 50]
    assert find_unique_not_divisible_by_3({2, 3, 4}, {5, 6, 7}) == [2, 4, 5, 7]
    assert find_unique_not_divisible_by_3({15, 21, 27}, {3, 9, 21}) is None",100.0,0
"def find_divisible_by_5_in_both_sets(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_5_in_both_sets():
    assert find_divisible_by_5_in_both_sets({5, 10, 15}, {10, 15, 20}) == [10, 15]
    assert find_divisible_by_5_in_both_sets({25, 30, 35}, {35, 40, 45}) == [35]
    assert find_divisible_by_5_in_both_sets({50, 55}, {55, 60}) == [55]
    assert find_divisible_by_5_in_both_sets({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_5_in_both_sets(set(), {5, 10, 15}) is None
    assert find_divisible_by_5_in_both_sets({5, 10, 15}, set()) is None
    assert find_divisible_by_5_in_both_sets({20, 25, 30}, {25, 35, 40}) == [25]
    assert find_divisible_by_5_in_both_sets({10, 20, 30}, {10, 40, 50}) == [10]
    assert find_divisible_by_5_in_both_sets({15, 45}, {5, 15, 25}) == [15]",100.0,0
"def find_in_both_sets_not_divisible_by_2(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_both_sets_not_divisible_by_2():
    assert find_in_both_sets_not_divisible_by_2({1, 3, 5}, {3, 5, 7}) == [3, 5]
    assert find_in_both_sets_not_divisible_by_2({11, 13, 15}, {13, 15, 17}) == [13, 15]
    assert find_in_both_sets_not_divisible_by_2({19, 21, 23}, {21, 23, 25}) == [21, 23]
    assert find_in_both_sets_not_divisible_by_2({2, 4, 6}, {8, 10, 12}) is None
    assert find_in_both_sets_not_divisible_by_2(set(), {1, 3, 5}) is None
    assert find_in_both_sets_not_divisible_by_2({1, 3, 5}, set()) is None
    assert find_in_both_sets_not_divisible_by_2({7, 9, 11}, {11, 13, 15}) == [11]
    assert find_in_both_sets_not_divisible_by_2({5, 7, 9}, {7, 9, 11}) == [7, 9]
    assert find_in_both_sets_not_divisible_by_2({3, 6, 9}, {3, 9, 12}) == [3, 9]",100.0,0
"def find_difference_between_sets(set1, set2):
    result = list(set1 - set2)
    if not result:
        return None
    return sorted(result)","def test_find_difference_between_sets():
    assert find_difference_between_sets({1, 2, 3}, {2, 3, 4}) == [1]
    assert find_difference_between_sets({5, 6, 7}, {6, 8, 9}) == [5, 7]
    assert find_difference_between_sets({1, 2, 3}, {1, 2, 3}) is None
    assert find_difference_between_sets(set(), {1, 2, 3}) is None
    assert find_difference_between_sets({1, 2, 3}, set()) == [1, 2, 3]
    assert find_difference_between_sets({7, 8, 9}, {8, 9, 10}) == [7]
    assert find_difference_between_sets({3, 6, 9}, {6, 9, 12}) == [3]
    assert find_difference_between_sets({15, 18, 21}, {18, 21, 24}) == [15]
    assert find_difference_between_sets({2, 4, 6}, {4, 6, 8}) == [2]",100.0,0
"def find_unique_elements_in_sets(set1, set2):
    result = list(set1 ^ set2)
    if not result:
        return None
    return sorted(result)","def test_find_unique_elements_in_sets():
    assert find_unique_elements_in_sets({1, 2, 3}, {3, 4, 5}) == [1, 2, 4, 5]
    assert find_unique_elements_in_sets({1, 2, 3}, {1, 2, 3}) is None
    assert find_unique_elements_in_sets({1}, {2}) == [1, 2]
    assert find_unique_elements_in_sets(set(), {1, 2, 3}) == [1, 2, 3]
    assert find_unique_elements_in_sets({1, 2, 3}, set()) == [1, 2, 3]
    assert find_unique_elements_in_sets(set(), set()) is None",100.0,0
"def find_divisible_by_2_in_both_sets_2(set1, set2):
    result = []
    for elem in set1 & set2:
        if elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_2_in_both_sets_2():
    assert find_divisible_by_2_in_both_sets_2({2, 4, 6}, {4, 6, 8}) == [4, 6]
    assert find_divisible_by_2_in_both_sets_2({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_2_in_both_sets_2({1, 3, 5}, {7, 9, 11}) is None
    assert find_divisible_by_2_in_both_sets_2({2, 4, 6, 8}, {4, 8, 10}) == [4, 8]
    assert find_divisible_by_2_in_both_sets_2({2, 4, 6}, {1, 3, 5}) is None
    assert find_divisible_by_2_in_both_sets_2({2}, {2}) == [2]",100.0,0
"def find_in_first_set_not_second(set1, set2):
    result = []
    for elem in set1 - set2:
        result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_in_first_set_not_second():
    assert find_in_first_set_not_second({1, 2, 3}, {3, 4, 5}) == [1, 2]
    assert find_in_first_set_not_second({1, 2, 3}, {1, 2, 3}) is None
    assert find_in_first_set_not_second({1}, {2}) == [1]
    assert find_in_first_set_not_second(set(), {1, 2, 3}) is None
    assert find_in_first_set_not_second({1, 2, 3}, set()) == [1, 2, 3]
    assert find_in_first_set_not_second({1, 2, 3}, {2}) == [1, 3]",100.0,0
"def find_divisible_by_5_in_one_set(set1, set2):
    result = []
    for elem in set1:
        if elem % 5 == 0 and elem not in set2:
            result.append(elem)
    if not result:
        return None
    return sorted(result)","def test_find_divisible_by_5_in_one_set():
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {10, 20, 30}) == [5, 15]
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {5, 10, 15}) is None
    assert find_divisible_by_5_in_one_set({1, 2, 3}, {4, 5, 6}) is None
    assert find_divisible_by_5_in_one_set({10, 20, 30}, {5, 15, 25}) == [10, 20, 30]
    assert find_divisible_by_5_in_one_set({5, 10, 15}, {2, 4, 6}) == [5, 10, 15]
    assert find_divisible_by_5_in_one_set({1, 2, 3}, {3, 4, 5}) is None",100.0,0
"def is_stack_empty(stack):
    if len(stack) == 0:
        return True
    return False","def test_is_stack_empty():
    assert is_stack_empty([]) is True
    assert is_stack_empty([1, 2, 3]) is False
    assert is_stack_empty([0]) is False
    assert is_stack_empty(['a', 'b']) is False
    assert is_stack_empty([None]) is False
    assert is_stack_empty([False]) is False",100.0,0
"def fill_stack_until_limit(stack, limit):
    while len(stack) < limit:
        stack.append(len(stack) + 1)
    return stack","def test_fill_stack_until_limit():
    assert fill_stack_until_limit([], 3) == [1, 2, 3]
    assert fill_stack_until_limit([1, 2], 4) == [1, 2, 3, 4]
    assert fill_stack_until_limit([1], 1) == [1]
    assert fill_stack_until_limit([], 0) == []
    assert fill_stack_until_limit([1, 2, 3], 2) == [1, 2, 3]
    assert fill_stack_until_limit([], 5) == [1, 2, 3, 4, 5]",100.0,0
"def fill_stack_up_to_n(stack, n):
    for i in range(1, n + 1):
        stack.append(i)
    return stack","def test_fill_stack_up_to_n():
    assert fill_stack_up_to_n([], 3) == [1, 2, 3]
    assert fill_stack_up_to_n([1, 2], 4) == [1, 2, 1, 2, 3, 4]
    assert fill_stack_up_to_n([1], 1) == [1, 1]
    assert fill_stack_up_to_n([], 0) == []
    assert fill_stack_up_to_n([1, 2, 3], 2) == [1, 2, 3, 1, 2]
    assert fill_stack_up_to_n([], 5) == [1, 2, 3, 4, 5]",100.0,0
"def is_stack_palindrome(stack):
    def reverse_stack(stack):
        reversed_stack = []
        while stack:
            reversed_stack.append(stack.pop())
        return reversed_stack
    original = list(stack)
    reversed_stack = reverse_stack(stack)
    if original == reversed_stack:
        return True
    return False","def test_is_stack_palindrome():
    assert is_stack_palindrome([1, 2, 1]) is True
    assert is_stack_palindrome([1, 2, 2, 1]) is True
    assert is_stack_palindrome([1, 2, 3]) is False
    assert is_stack_palindrome([1]) is True
    assert is_stack_palindrome([]) is True
    assert is_stack_palindrome([1, 2, 3, 2, 1]) is True",100.0,0
"def pop_until_greater_than_x(stack, x):
    popped_elements = []
    while stack:
        elem = stack.pop()
        if elem > x:
            popped_elements.append(elem)
            break
        popped_elements.append(elem)
    if not popped_elements:
        return None
    return popped_elements","def test_pop_until_greater_than_x():
    assert pop_until_greater_than_x([1, 2, 3, 4, 5], 3) == [5]
    assert pop_until_greater_than_x([5, 4, 3, 2, 1], 3) == [1, 2, 3, 4]
    assert pop_until_greater_than_x([1, 2, 3], 5) == [3, 2, 1]
    assert pop_until_greater_than_x([], 3) is None
    assert pop_until_greater_than_x([1, 2, 3], 0) == [3]
    assert pop_until_greater_than_x([5, 6, 7], 4) == [7]",100.0,0
"def pop_elements_less_than_y(stack, y):
    result = []
    while stack:
        elem = stack.pop()
        if elem < y:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_less_than_y():
    assert pop_elements_less_than_y([1, 2, 3, 4, 5], 3) == [2, 1]
    assert pop_elements_less_than_y([5, 4, 3, 2, 1], 3) == [1, 2]
    assert pop_elements_less_than_y([1, 2, 3], 5) == [3, 2, 1]
    assert pop_elements_less_than_y([], 3) is None
    assert pop_elements_less_than_y([1, 2, 3], 0) is None
    assert pop_elements_less_than_y([5, 6, 7], 4) is None",100.0,0
"def remove_odds_from_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_odds_from_stack():
    assert remove_odds_from_stack([1, 2, 3, 4, 5]) == [4, 2]
    assert remove_odds_from_stack([1, 3, 5]) is None
    assert remove_odds_from_stack([2, 4, 6]) == [6, 4, 2]
    assert remove_odds_from_stack([]) is None
    assert remove_odds_from_stack([1, 2, 3]) == [2]
    assert remove_odds_from_stack([5, 4, 3, 2, 1]) == [2, 4]",100.0,0
"def pop_until_sum_exceeds_x(stack, x):
    popped_elements = []
    current_sum = 0
    while stack and current_sum <= x:
        elem = stack.pop()
        popped_elements.append(elem)
        current_sum += elem
    if not popped_elements:
        return None
    return popped_elements","def test_pop_until_sum_exceeds_x():
    assert pop_until_sum_exceeds_x([1, 2, 3, 4, 5], 10) == [5, 4, 3]
    assert pop_until_sum_exceeds_x([5, 4, 3, 2, 1], 7) == [1, 2, 3, 4]
    assert pop_until_sum_exceeds_x([], 3) is None
    assert pop_until_sum_exceeds_x([1, 2, 3], 1) == [3]
    assert pop_until_sum_exceeds_x([5, 6, 7], 4) == [7]
    assert pop_until_sum_exceeds_x([1, 2, 3], 5) == [3, 2, 1]",100.0,0
"def pop_elements_divisible_by_3(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_divisible_by_3():
    assert pop_elements_divisible_by_3([1, 2, 3, 4, 5, 6, 9]) == [9, 6, 3]
    assert pop_elements_divisible_by_3([1, 2, 4, 5]) is None
    assert pop_elements_divisible_by_3([3, 6, 9]) == [9, 6, 3]
    assert pop_elements_divisible_by_3([]) is None
    assert pop_elements_divisible_by_3([3]) == [3]
    assert pop_elements_divisible_by_3([1, 2, 3]) == [3]",100.0,0
"def pop_min_element(stack):
    if not stack:
        return None
    min_elem = min(stack)
    stack.remove(min_elem)
    return min_elem","def test_pop_min_element():
    assert pop_min_element([1, 2, 3, 4, 5]) == 1
    assert pop_min_element([5, 4, 3, 2, 1]) == 1
    assert pop_min_element([]) is None
    assert pop_min_element([1]) == 1
    assert pop_min_element([5, 3, 9, 7]) == 3
    assert pop_min_element([2, 2, 2, 2]) == 2",100.0,0
"def double_stack_values(stack):
    new_stack = []
    while stack:
        elem = stack.pop()
        new_stack.append(elem * 2)
    return new_stack","def test_double_stack_values():
    assert double_stack_values([1, 2, 3]) == [6, 4, 2]
    assert double_stack_values([0, 1, 2]) == [4, 2, 0]
    assert double_stack_values([]) == []
    assert double_stack_values([2, 4, 6]) == [12, 8, 4]
    assert double_stack_values([5, 5, 5]) == [10, 10, 10]
    assert double_stack_values([-1, -2, -3]) == [-6, -4, -2]",100.0,0
"def pop_until_even(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 == 0:
            result.append(elem)
            break
        result.append(elem)
    if not result:
        return None
    return result","def test_pop_until_even():
    assert pop_until_even([1, 3, 5, 2, 7]) == [7, 2]
    assert pop_until_even([2, 4, 6, 1]) == [1, 6]
    assert pop_until_even([1, 1, 1, 1]) == [1, 1, 1, 1]
    assert pop_until_even([]) is None
    assert pop_until_even([2, 4, 6, 8]) == [8]
    assert pop_until_even([3, 3, 3, 3]) == [3, 3, 3, 3]",100.0,0
"def pop_prime_numbers(stack):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    result = []
    while stack:
        elem = stack.pop()
        if is_prime(elem):
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_prime_numbers():
    assert pop_prime_numbers([1, 2, 3, 4, 5, 6, 7]) == [7, 5, 3, 2]
    assert pop_prime_numbers([1, 1, 1, 1]) is None
    assert pop_prime_numbers([2, 3, 5, 7]) == [7, 5, 3, 2]
    assert pop_prime_numbers([]) is None
    assert pop_prime_numbers([4, 6, 8, 9]) is None
    assert pop_prime_numbers([11, 13, 17]) == [17, 13, 11]",100.0,0
"def pop_until_divisible_by_4(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 4 == 0:
            result.append(elem)
            break
        result.append(elem)
    if not result:
        return None
    return result","def test_pop_until_divisible_by_4():
    assert pop_until_divisible_by_4([1, 2, 3, 4, 5]) == [5, 4]
    assert pop_until_divisible_by_4([4, 3, 2, 1]) == [1, 2, 3, 4]
    assert pop_until_divisible_by_4([1, 1, 1, 1]) == [1, 1, 1, 1]
    assert pop_until_divisible_by_4([]) is None
    assert pop_until_divisible_by_4([2, 2, 2, 4]) == [4]
    assert pop_until_divisible_by_4([4]) == [4]",100.0,0
"def remove_non_divisible_by_2(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_non_divisible_by_2():
    assert remove_non_divisible_by_2([1, 2, 3, 4, 5]) == [4, 2]
    assert remove_non_divisible_by_2([1, 3, 5]) is None
    assert remove_non_divisible_by_2([2, 4, 6]) == [6, 4, 2]
    assert remove_non_divisible_by_2([]) is None
    assert remove_non_divisible_by_2([1, 2, 3]) == [2]
    assert remove_non_divisible_by_2([5, 4, 3, 2, 1]) == [2, 4]",100.0,0
"def remove_even_from_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_even_from_stack():
    assert remove_even_from_stack([1, 2, 3, 4, 5]) == [5, 3, 1]
    assert remove_even_from_stack([2, 4, 6, 8]) is None
    assert remove_even_from_stack([1, 3, 5, 7]) == [7, 5, 3, 1]
    assert remove_even_from_stack([]) is None
    assert remove_even_from_stack([1]) == [1]
    assert remove_even_from_stack([4, 3, 2, 1]) == [1, 3]",100.0,0
"def pop_elements_greater_than_x(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem > x:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_greater_than_x():
    assert pop_elements_greater_than_x([1, 3, 5, 7, 9], 4) == [9, 7, 5]
    assert pop_elements_greater_than_x([2, 4, 6, 8], 10) is None
    assert pop_elements_greater_than_x([10, 20, 30], 15) == [30, 20]
    assert pop_elements_greater_than_x([], 5) is None
    assert pop_elements_greater_than_x([-5, -2, -1, 0], -3) == [0, -1, -2]
    assert pop_elements_greater_than_x([5, 5, 5, 5, 5], 5) is None
    assert pop_elements_greater_than_x([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]
    assert pop_elements_greater_than_x([1, 2, 3, 4, 5], 5) is None
    assert pop_elements_greater_than_x([100], 10) == [100]",100.0,0
"def find_even_in_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_find_even_in_stack():
    assert find_even_in_stack([1, 2, 3, 4, 5, 6]) == [6, 4, 2]
    assert find_even_in_stack([1, 3, 5, 7]) is None
    assert find_even_in_stack([0, 2, 4, 6, 8]) == [8, 6, 4, 2, 0]
    assert find_even_in_stack([-2, -4, -6, -8]) == [-8, -6, -4, -2]
    assert find_even_in_stack([1]) is None
    assert find_even_in_stack([2]) == [2]
    assert find_even_in_stack([]) is None
    assert find_even_in_stack([1, 3, 5, 7, 10]) == [10]
    assert find_even_in_stack([2, 2, 2, 2]) == [2, 2, 2, 2]",100.0,0
"def remove_divisible_by_5_from_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_divisible_by_5_from_stack():
    assert remove_divisible_by_5_from_stack([1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == [1]
    assert remove_divisible_by_5_from_stack([5, 10, 15, 20, 25]) is None
    assert remove_divisible_by_5_from_stack([1, 2, 3, 4]) == [4, 3, 2, 1]
    assert remove_divisible_by_5_from_stack([0, 5, 10]) is None
    assert remove_divisible_by_5_from_stack([1, 2, 3, 6, 7, 11]) == [11, 7, 6, 3, 2, 1]
    assert remove_divisible_by_5_from_stack([]) is None
    assert remove_divisible_by_5_from_stack([1, 2, 3, 4, 6]) == [6, 4, 3, 2, 1]
    assert remove_divisible_by_5_from_stack([25]) is None
    assert remove_divisible_by_5_from_stack([1, 10, 100]) == [1]",100.0,0
"def remove_max_from_stack(stack):
    if not stack:
        return None
    max_elem = max(stack)
    stack.remove(max_elem)
    return max_elem","def test_remove_max_from_stack():
    assert remove_max_from_stack([1, 2, 3, 4, 5]) == 5
    assert remove_max_from_stack([5, 4, 3, 2, 1]) == 5
    assert remove_max_from_stack([1]) == 1
    assert remove_max_from_stack([-5, -10, -1, -3]) == -1
    assert remove_max_from_stack([100, 200, 300, 400]) == 400
    assert remove_max_from_stack([0]) == 0
    assert remove_max_from_stack([3, 3, 3, 3]) == 3
    assert remove_max_from_stack([10, 20, 30, 40, 50]) == 50
    assert remove_max_from_stack([]) is None",100.0,0
"def pop_elements_not_divisible_by_3(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 3 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_not_divisible_by_3():
    assert pop_elements_not_divisible_by_3([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [8, 7, 5, 4, 2, 1]
    assert pop_elements_not_divisible_by_3([3, 6, 9]) is None
    assert pop_elements_not_divisible_by_3([1, 4, 7, 10]) == [10, 7, 4, 1]
    assert pop_elements_not_divisible_by_3([3, 3, 3, 3]) is None
    assert pop_elements_not_divisible_by_3([10, 11, 12, 13, 14, 15]) == [14, 13, 11, 10]
    assert pop_elements_not_divisible_by_3([3]) is None
    assert pop_elements_not_divisible_by_3([1]) == [1]
    assert pop_elements_not_divisible_by_3([]) is None
    assert pop_elements_not_divisible_by_3([9, 18, 27, 36, 45]) is None",100.0,0
"def pop_until_sum_exceeds(stack, x):
    result = []
    total = 0
    while stack:
        elem = stack.pop()
        result.append(elem)
        total += elem
        if total > x:
            break
    if not result:
        return None
    return result","def test_pop_until_sum_exceeds():
    assert pop_until_sum_exceeds([1, 2, 3, 4, 5], 7) == [5, 4]
    assert pop_until_sum_exceeds([5, 5, 5, 5, 5], 15) == [5, 5, 5, 5]
    assert pop_until_sum_exceeds([10, 20, 30], 25) == [30]
    assert pop_until_sum_exceeds([], 5) is None
    assert pop_until_sum_exceeds([1, 1, 1, 1, 1], 0) == [1]
    assert pop_until_sum_exceeds([3, 6, 9], 15) == [9, 6, 3]
    assert pop_until_sum_exceeds([10, 10, 10], 5) == [10]
    assert pop_until_sum_exceeds([5], 10) == [5]
    assert pop_until_sum_exceeds([3, 3, 3], 7) == [3, 3, 3]",100.0,0
"def pop_elements_less_than_average(stack):
    result = []
    if not stack:
        return None
    average = sum(stack) / len(stack)
    while stack:
        elem = stack.pop()
        if elem < average:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_less_than_average():
    assert pop_elements_less_than_average([1, 2, 3, 4, 5]) == [2, 1]
    assert pop_elements_less_than_average([5, 5, 5, 5]) is None
    assert pop_elements_less_than_average([1, 3, 5, 7]) == [3, 1]
    assert pop_elements_less_than_average([10, 20, 30, 40, 50]) == [20, 10]
    assert pop_elements_less_than_average([]) is None
    assert pop_elements_less_than_average([1]) is None
    assert pop_elements_less_than_average([2, 4, 6, 8]) == [4, 2]
    assert pop_elements_less_than_average([-10, -20, -30]) == [-30]
    assert pop_elements_less_than_average([1, 2, 3, 4, 5, 5, 5, 5]) == [3, 2, 1]",100.0,0
"def pop_unique_elements(stack):
    result = []
    element_count = {}
    while stack:
        elem = stack.pop()
        element_count[elem] = element_count.get(elem, 0) + 1

    for elem in element_count:
        if element_count[elem] == 1:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_unique_elements():
    assert pop_unique_elements([1, 1, 2, 2, 3]) == [3]
    assert pop_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    assert pop_unique_elements([1, 1, 2, 2, 3, 3, 4, 4]) is None
    assert pop_unique_elements([5]) == [5]
    assert pop_unique_elements([]) is None
    assert pop_unique_elements([2, 2, 2, 2]) is None
    assert pop_unique_elements([3, 1, 4, 1, 5, 9]) == [9, 5, 4, 3]
    assert pop_unique_elements([1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8]) == [8, 6, 3, 1]
    assert pop_unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == [6]",100.0,0
"def pop_elements_divisible_by_5(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_divisible_by_5():
    assert pop_elements_divisible_by_5([5, 10, 15, 20, 25]) == [25, 20, 15, 10, 5]
    assert pop_elements_divisible_by_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 5]
    assert pop_elements_divisible_by_5([1, 2, 3, 4, 6, 7, 8, 9]) is None
    assert pop_elements_divisible_by_5([0, 5, 10, 15]) == [15, 10, 5, 0]
    assert pop_elements_divisible_by_5([1, 2, 3, 4]) is None
    assert pop_elements_divisible_by_5([5]) == [5]
    assert pop_elements_divisible_by_5([25, 30, 35, 40, 45]) == [45, 40, 35, 30, 25]
    assert pop_elements_divisible_by_5([10, 20, 30, 40, 50]) == [50, 40, 30, 20, 10]
    assert pop_elements_divisible_by_5([12, 17, 22, 27]) is None",100.0,0
"def pop_elements_greater_than_x_reverse(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem > x:
            result.append(elem)
    if not result:
        return None
    return result[::-1]","def test_pop_elements_greater_than_x_reverse():
    assert pop_elements_greater_than_x_reverse([1, 2, 3, 4, 5], 3) == [4, 5]
    assert pop_elements_greater_than_x_reverse([10, 20, 30, 40, 50], 25) == [30, 40, 50]
    assert pop_elements_greater_than_x_reverse([5, 5, 5, 5], 5) is None
    assert pop_elements_greater_than_x_reverse([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6]
    assert pop_elements_greater_than_x_reverse([1], 0) == [1]
    assert pop_elements_greater_than_x_reverse([2], 1) == [2]
    assert pop_elements_greater_than_x_reverse([7, 8, 9, 10], 8) == [9, 10]
    assert pop_elements_greater_than_x_reverse([11, 22, 33, 44], 15) == [22, 33, 44]
    assert pop_elements_greater_than_x_reverse([1, 2, 3, 4, 5, 6, 7, 8, 9], 20) is None",100.0,0
"def remove_less_than_x(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem >= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_less_than_x():
    assert remove_less_than_x([1, 3, 5, 7, 9], 4) == [9, 7, 5]
    assert remove_less_than_x([2, 4, 6, 8], 10) is None
    assert remove_less_than_x([10, 20, 30], 15) == [30, 20]
    assert remove_less_than_x([], 5) is None
    assert remove_less_than_x([-5, -2, -1, 0], -3) == [0, -1, -2]
    assert remove_less_than_x([5, 5, 5, 5, 5], 5) == [5, 5, 5, 5, 5]
    assert remove_less_than_x([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]
    assert remove_less_than_x([1, 2, 3, 4, 5], 5) == [5]
    assert remove_less_than_x([100], 10) == [100]",100.0,0
"def find_min_in_stack(stack):
    if not stack:
        return None
    min_elem = min(stack)
    return min_elem","def test_find_min_in_stack():
    assert find_min_in_stack([1, 2, 3, 4, 5]) == 1
    assert find_min_in_stack([5, 4, 3, 2, 1]) == 1
    assert find_min_in_stack([1]) == 1
    assert find_min_in_stack([-5, -10, -1, -3]) == -10
    assert find_min_in_stack([100, 200, 300, 400]) == 100
    assert find_min_in_stack([0]) == 0
    assert find_min_in_stack([3, 3, 3, 3]) == 3
    assert find_min_in_stack([10, 20, 30, 40, 50]) == 10
    assert find_min_in_stack([]) is None",100.0,0
"def pop_until_divisible_by_6(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 6 == 0:
            result.append(elem)
            break
        result.append(elem)
    if not result:
        return None
    return result","def test_pop_until_divisible_by_6():
    assert pop_until_divisible_by_6([1, 2, 3, 4, 5, 6]) == [6]
    assert pop_until_divisible_by_6([1, 2, 3, 4, 5, 12]) == [12]
    assert pop_until_divisible_by_6([6, 7, 8, 9]) == [9, 8, 7, 6]
    assert pop_until_divisible_by_6([12, 14, 15, 18]) == [18]
    assert pop_until_divisible_by_6([7, 5, 11]) == [11, 5, 7]
    assert pop_until_divisible_by_6([]) is None
    assert pop_until_divisible_by_6([12, 24, 36, 48]) == [48]
    assert pop_until_divisible_by_6([1, 3, 5, 7]) == [7, 5, 3, 1]
    assert pop_until_divisible_by_6([2, 8, 10, 11]) == [11, 10, 8, 2]",100.0,0
"def find_even_divisible_by_4(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 == 0 and elem % 4 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_find_even_divisible_by_4():
    assert find_even_divisible_by_4([1, 2, 3, 4, 5, 6, 8, 12, 16]) == [16, 12, 8, 4]
    assert find_even_divisible_by_4([5, 7, 11, 13]) is None
    assert find_even_divisible_by_4([4, 8, 12]) == [12, 8, 4]
    assert find_even_divisible_by_4([0, 4, 8, 16, 32]) == [32, 16, 8, 4, 0]
    assert find_even_divisible_by_4([1, 3, 5, 7]) is None
    assert find_even_divisible_by_4([4]) == [4]
    assert find_even_divisible_by_4([]) is None
    assert find_even_divisible_by_4([4, 4, 4, 4]) == [4, 4, 4, 4]
    assert find_even_divisible_by_4([6, 10, 14, 18]) is None",100.0,0
"def pop_odd_elements(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_odd_elements():
    assert pop_odd_elements([1, 2, 3, 4, 5, 6]) == [5, 3, 1]
    assert pop_odd_elements([1, 3, 5, 7]) == [7, 5, 3, 1]
    assert pop_odd_elements([2, 4, 6, 8]) is None
    assert pop_odd_elements([0, 1, 2, 3]) == [3, 1]
    assert pop_odd_elements([]) is None
    assert pop_odd_elements([1]) == [1]
    assert pop_odd_elements([2]) is None
    assert pop_odd_elements([5, 5, 5]) == [5, 5, 5]
    assert pop_odd_elements([1, 2, 3, 4, 5]) == [5, 3, 1]",100.0,0
"def remove_less_than_x_v2(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem < x:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_less_than_x_v2():
    assert remove_less_than_x_v2([1, 3, 5, 7, 9], 4) == [3, 1]
    assert remove_less_than_x_v2([2, 4, 6, 8], 10) == [8, 6, 4, 2]
    assert remove_less_than_x_v2([10, 20, 30], 15) == [10]
    assert remove_less_than_x_v2([], 5) is None
    assert remove_less_than_x_v2([-5, -2, -1, 0], -3) == [-5]
    assert remove_less_than_x_v2([5, 5, 5, 5, 5], 5) is None
    assert remove_less_than_x_v2([1, 2, 3, 4, 5], 0) is None
    assert remove_less_than_x_v2([1, 2, 3, 4, 5], 5) == [4, 3, 2, 1]
    assert remove_less_than_x_v2([100], 10) is None",100.0,0
"def find_square_numbers_in_stack(stack):
    result = []
    while stack:
        elem = stack.pop()
        if (elem ** 0.5).is_integer():
            result.append(elem)
    if not result:
        return None
    return result","def test_find_square_numbers_in_stack():
    assert find_square_numbers_in_stack([1, 2, 3, 4, 9, 16]) == [16, 9, 4, 1]
    assert find_square_numbers_in_stack([1, 3, 5, 7]) == [1]
    assert find_square_numbers_in_stack([0, 4, 9, 16, 25]) == [25, 16, 9, 4, 0]
    assert find_square_numbers_in_stack([10, 20, 30, 40]) is None
    assert find_square_numbers_in_stack([1]) == [1]
    assert find_square_numbers_in_stack([2]) is None
    assert find_square_numbers_in_stack([4, 4, 4]) == [4, 4, 4]
    assert find_square_numbers_in_stack([9, 16, 25]) == [25, 16, 9]
    assert find_square_numbers_in_stack([2, 3, 5, 7]) is None",100.0,0
"def find_max_in_stack(stack):
    if not stack:
        return None
    max_elem = max(stack)
    return max_elem","def test_find_max_in_stack():
    assert find_max_in_stack([1, 2, 3, 4, 5]) == 5
    assert find_max_in_stack([5, 4, 3, 2, 1]) == 5
    assert find_max_in_stack([1]) == 1
    assert find_max_in_stack([-5, -10, -1, -3]) == -1
    assert find_max_in_stack([100, 200, 300, 400]) == 400
    assert find_max_in_stack([0]) == 0
    assert find_max_in_stack([3, 3, 3, 3]) == 3
    assert find_max_in_stack([10, 20, 30, 40, 50]) == 50
    assert find_max_in_stack([]) is None",100.0,0
"def pop_elements_divisible_by_7(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 7 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_divisible_by_7():
    assert pop_elements_divisible_by_7([7, 14, 21, 28, 35]) == [35, 28, 21, 14, 7]
    assert pop_elements_divisible_by_7([1, 2, 3, 4, 5, 6, 7]) == [7]
    assert pop_elements_divisible_by_7([1, 2, 3, 4, 5, 6, 8, 9]) is None
    assert pop_elements_divisible_by_7([0, 7, 14, 21]) == [21, 14, 7, 0]
    assert pop_elements_divisible_by_7([1, 3, 5, 11]) is None
    assert pop_elements_divisible_by_7([7]) == [7]
    assert pop_elements_divisible_by_7([14, 28, 42, 56]) == [56, 42, 28, 14]
    assert pop_elements_divisible_by_7([21, 35, 49, 63, 77]) == [77, 63, 49, 35, 21]
    assert pop_elements_divisible_by_7([5, 10, 20, 25]) is None",100.0,0
"def find_greater_than_x_divisible_by_2(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem > x and elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_find_greater_than_x_divisible_by_2():
    assert find_greater_than_x_divisible_by_2([1, 2, 3, 4, 5], 3) == [4]
    assert find_greater_than_x_divisible_by_2([10, 20, 30, 40, 50], 25) == [50, 40, 30]
    assert find_greater_than_x_divisible_by_2([5, 5, 5, 5], 5) is None
    assert find_greater_than_x_divisible_by_2([1, 2, 3, 4, 5, 6], 3) == [6, 4]
    assert find_greater_than_x_divisible_by_2([1], 0) is None
    assert find_greater_than_x_divisible_by_2([2], 1) == [2]
    assert find_greater_than_x_divisible_by_2([7, 8, 9, 10], 8) == [10]
    assert find_greater_than_x_divisible_by_2([11, 22, 33, 44], 15) == [44, 22]
    assert find_greater_than_x_divisible_by_2([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [8, 6]",100.0,0
"def remove_not_divisible_by_4(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 4 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_not_divisible_by_4():
    assert remove_not_divisible_by_4([8, 15, 3, 4]) == [3, 15]
    assert remove_not_divisible_by_4([16, 2, 12]) == [2]
    assert remove_not_divisible_by_4([4, 8, 16, 32]) is None
    assert remove_not_divisible_by_4([]) is None
    assert remove_not_divisible_by_4([5, 7, 11]) == [11, 7, 5]
    assert remove_not_divisible_by_4([4, 15, 20, 8, 3, 12]) == [3, 15]
    assert remove_not_divisible_by_4([-4, -8, 0]) is None
    assert remove_not_divisible_by_4([9, 17, 21]) == [21, 17, 9]
    assert remove_not_divisible_by_4([-1, -2, -5, -6]) == [-6, -5, -2, -1]",100.0,0
"def pop_elements_divisible_by_10(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 10 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_divisible_by_10():
    assert pop_elements_divisible_by_10([20, 5, 30, 7, 10]) == [10, 30, 20]
    assert pop_elements_divisible_by_10([4, 2, 12]) is None
    assert pop_elements_divisible_by_10([40, 50, 60]) == [60, 50, 40]
    assert pop_elements_divisible_by_10([]) is None
    assert pop_elements_divisible_by_10([10, 20, 30, 5, 1]) == [30, 20, 10]
    assert pop_elements_divisible_by_10([0, 100, 200]) == [200, 100, 0]
    assert pop_elements_divisible_by_10([5, 7, 15]) is None
    assert pop_elements_divisible_by_10([-10, -20, -5]) == [-20, -10]
    assert pop_elements_divisible_by_10([9, 19, 29]) is None",100.0,0
"def find_divisible_by_3_and_5(stack):
    result = []
    while stack:
        elem = stack.pop()
        if elem % 3 == 0 and elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_find_divisible_by_3_and_5():
    assert find_divisible_by_3_and_5([30, 45, 60, 10, 15]) == [15, 60, 45, 30]
    assert find_divisible_by_3_and_5([3, 5, 9, 10]) is None
    assert find_divisible_by_3_and_5([75, 90, 105]) == [105, 90, 75]
    assert find_divisible_by_3_and_5([]) is None
    assert find_divisible_by_3_and_5([15, 30, 45, 5, 10]) == [45, 30, 15]
    assert find_divisible_by_3_and_5([0, 60, 120]) == [120, 60, 0]
    assert find_divisible_by_3_and_5([4, 2, 6]) is None
    assert find_divisible_by_3_and_5([-15, -30, -5]) == [-30, -15]
    assert find_divisible_by_3_and_5([9, 21, 27]) is None",100.0,0
"def remove_greater_than_x(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem <= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_remove_greater_than_x():
    assert remove_greater_than_x([8, 12, 15, 4], 10) == [4, 8]
    assert remove_greater_than_x([16, 2, 5, 12], 7) == [5, 2]
    assert remove_greater_than_x([4, 8, 16, 3], 8) == [3, 8, 4]
    assert remove_greater_than_x([], 10) is None
    assert remove_greater_than_x([5, 7, 11], 15) == [11, 7, 5]
    assert remove_greater_than_x([4, 15, 20, 8], 10) == [8, 4]
    assert remove_greater_than_x([-4, -8, 0], -1) == [-8, -4]
    assert remove_greater_than_x([9, 17, 21], 10) == [9]
    assert remove_greater_than_x([-1, -2, -5, -6], -3) == [-6, -5]",100.0,0
"def pop_elements_greater_than_x_even(stack, x):
    result = []
    while stack:
        elem = stack.pop()
        if elem > x and elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_pop_elements_greater_than_x_even():
    assert pop_elements_greater_than_x_even([8, 10, 12, 4], 9) == [12, 10]
    assert pop_elements_greater_than_x_even([16, 3, 5, 14], 12) == [14, 16]
    assert pop_elements_greater_than_x_even([4, 8, 16, 3], 6) == [16, 8]
    assert pop_elements_greater_than_x_even([], 5) is None
    assert pop_elements_greater_than_x_even([5, 7, 11], 10) is None
    assert pop_elements_greater_than_x_even([4, 15, 20, 8], 15) == [20]
    assert pop_elements_greater_than_x_even([-4, -8, 0], -3) == [0]
    assert pop_elements_greater_than_x_even([9, 17, 21], 15) is None
    assert pop_elements_greater_than_x_even([-1, -2, -5, -6], -4) == [-2]",100.0,0
"def process_queue_until_sum_exceeds(queue, x):
    result = []
    total = 0
    while queue:
        elem = queue.pop(0)
        result.append(elem)
        total += elem
        if total > x:
            break
    if not result:
        return None
    return result","def test_process_queue_until_sum_exceeds():
    assert process_queue_until_sum_exceeds([3, 5, 2, 7], 8) == [3, 5, 2]
    assert process_queue_until_sum_exceeds([16, 3, 5, 12], 14) == [16]
    assert process_queue_until_sum_exceeds([4, 8, 1, 3], 7) == [4, 8]
    assert process_queue_until_sum_exceeds([], 5) is None
    assert process_queue_until_sum_exceeds([5, 7, 1], 10) == [5, 7]
    assert process_queue_until_sum_exceeds([4, 2, 5, 8], 6) == [4, 2, 5]
    assert process_queue_until_sum_exceeds([-4, -8, 10], -5) == [-4]
    assert process_queue_until_sum_exceeds([9, 1, 2], 10) == [9, 1, 2]
    assert process_queue_until_sum_exceeds([-1, -2, -3, -4], -1) == [-1, -2, -3, -4]",100.0,0
"def process_queue_less_than_average(queue):
    result = []
    if not queue:
        return None
    average = sum(queue) / len(queue)
    while queue:
        elem = queue.pop(0)
        if elem < average:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_less_than_average():
    assert process_queue_less_than_average([3, 5, 2, 7]) == [3, 2]
    assert process_queue_less_than_average([16, 3, 5, 12]) == [3, 5]
    assert process_queue_less_than_average([4, 8, 1, 3]) == [1, 3]
    assert process_queue_less_than_average([]) is None
    assert process_queue_less_than_average([77, 77, 77]) is None
    assert process_queue_less_than_average([4, 2, 5, 8]) == [4, 2]
    assert process_queue_less_than_average([-4, -8, 0]) == [-8]
    assert process_queue_less_than_average([9, 1, 2]) == [1, 2]
    assert process_queue_less_than_average([-1, -2, -3, -4]) == [-3, -4]",100.0,0
"def process_queue_unique_elements(queue):
    result = []
    element_count = {}
    while queue:
        elem = queue.pop(0)
        element_count[elem] = element_count.get(elem, 0) + 1

    for elem in element_count:
        if element_count[elem] == 1:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_unique_elements():
    assert process_queue_unique_elements([3, 5, 2, 7, 5, 3]) == [2, 7]
    assert process_queue_unique_elements([16, 3, 5, 12, 16]) == [3, 5, 12]
    assert process_queue_unique_elements([4, 8, 1, 4, 3, 8]) == [1, 3]
    assert process_queue_unique_elements([]) is None
    assert process_queue_unique_elements([5, 7, 1, 7, 5]) == [1]
    assert process_queue_unique_elements([4, 8, 4, 8, 1]) == [1]
    assert process_queue_unique_elements([10, 20, 30, 40, 20]) == [10, 30, 40]
    assert process_queue_unique_elements([5, 10, 5, 15, 20]) == [10, 15, 20]
    assert process_queue_unique_elements([9, 19, 9, 21, 21]) == [19]",100.0,0
"def process_queue_divisible_by_5(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_5():
    assert process_queue_divisible_by_5([3, 5, 10, 7, 25]) == [5, 10, 25]
    assert process_queue_divisible_by_5([1, 2, 3, 4]) is None
    assert process_queue_divisible_by_5([50, 5, 10, 20]) == [50, 5, 10, 20]
    assert process_queue_divisible_by_5([]) is None
    assert process_queue_divisible_by_5([5, 10, 15]) == [5, 10, 15]
    assert process_queue_divisible_by_5([0, 100, 200]) == [0, 100, 200]
    assert process_queue_divisible_by_5([1, 3, 7]) is None
    assert process_queue_divisible_by_5([-5, -10, -15]) == [-5, -10, -15]
    assert process_queue_divisible_by_5([25, 30, 35, 40]) == [25, 30, 35, 40]",100.0,0
"def process_queue_greater_than_x(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem > x:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_greater_than_x():
    assert process_queue_greater_than_x([8, 12, 15, 4], 10) == [12, 15]
    assert process_queue_greater_than_x([16, 2, 5, 12], 7) == [16, 12]
    assert process_queue_greater_than_x([4, 8, 16, 3], 8) == [16]
    assert process_queue_greater_than_x([], 10) is None
    assert process_queue_greater_than_x([5, 7, 11], 5) == [7, 11]
    assert process_queue_greater_than_x([4, 15, 20, 8], 10) == [15, 20]
    assert process_queue_greater_than_x([-4, -8, 0], -1) == [0]
    assert process_queue_greater_than_x([9, 17, 21], 10) == [17, 21]
    assert process_queue_greater_than_x([-1, -2, -5, -6], -3) == [-1, -2]",100.0,0
"def process_queue_divisible_by_2_not_4(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 2 == 0 and elem % 4 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_2_not_4():
    assert process_queue_divisible_by_2_not_4([2, 4, 6, 8, 10, 12]) == [2, 6, 10]
    assert process_queue_divisible_by_2_not_4([4, 8, 12, 16]) is None
    assert process_queue_divisible_by_2_not_4([2, 6, 10]) == [2, 6, 10]
    assert process_queue_divisible_by_2_not_4([]) is None
    assert process_queue_divisible_by_2_not_4([1, 3, 5, 7]) is None
    assert process_queue_divisible_by_2_not_4([14, 18, 20, 24]) == [14, 18]
    assert process_queue_divisible_by_2_not_4([-2, -4, -6, -8]) == [-2, -6]
    assert process_queue_divisible_by_2_not_4([9, 13, 17]) is None
    assert process_queue_divisible_by_2_not_4([3, 6, 9, 12]) == [6]",100.0,0
"def process_queue_divisible_by_7(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 7 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_7():
    assert process_queue_divisible_by_7([7, 14, 21, 5, 10]) == [7, 14, 21]
    assert process_queue_divisible_by_7([1, 2, 3, 4]) is None
    assert process_queue_divisible_by_7([28, 35, 42, 49]) == [28, 35, 42, 49]
    assert process_queue_divisible_by_7([]) is None
    assert process_queue_divisible_by_7([7, 14, 21]) == [7, 14, 21]
    assert process_queue_divisible_by_7([0, 70, 140]) == [0, 70, 140]
    assert process_queue_divisible_by_7([1, 3, 7]) == [7]
    assert process_queue_divisible_by_7([-7, -14, -21]) == [-7, -14, -21]
    assert process_queue_divisible_by_7([35, 70, 105]) == [35, 70, 105]",100.0,0
"def process_queue_odd_elements(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_odd_elements():
    assert process_queue_odd_elements([1, 2, 3, 4, 5]) == [1, 3, 5]
    assert process_queue_odd_elements([2, 4, 6, 8]) is None
    assert process_queue_odd_elements([1, 3, 5, 7]) == [1, 3, 5, 7]
    assert process_queue_odd_elements([]) is None
    assert process_queue_odd_elements([1, 3, 5]) == [1, 3, 5]
    assert process_queue_odd_elements([2, 4, 6]) is None
    assert process_queue_odd_elements([7, 14, 21]) == [7, 21]
    assert process_queue_odd_elements([-1, -3, -5]) == [-1, -3, -5]
    assert process_queue_odd_elements([5, 10, 15, 20]) == [5, 15]",100.0,0
"def process_queue_square_numbers(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if (elem ** 0.5).is_integer():
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_square_numbers():
    assert process_queue_square_numbers([1, 2, 3, 4, 5, 9, 16]) == [1, 4, 9, 16]
    assert process_queue_square_numbers([2, 3, 5, 7]) is None
    assert process_queue_square_numbers([4, 9, 16, 25, 36]) == [4, 9, 16, 25, 36]
    assert process_queue_square_numbers([]) is None
    assert process_queue_square_numbers([1, 4, 9]) == [1, 4, 9]
    assert process_queue_square_numbers([2, 3, 6]) is None
    assert process_queue_square_numbers([7, 14, 21]) is None
    assert process_queue_square_numbers([1, 4, 9]) == [1, 4, 9]
    assert process_queue_square_numbers([25, 49, 81]) == [25, 49, 81]",100.0,0
"def process_queue_divisible_by_3_or_5(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 3 == 0 or elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_3_or_5():
    assert process_queue_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 9]) == [3, 5, 6, 9]
    assert process_queue_divisible_by_3_or_5([1, 2, 4, 7, 8]) is None
    assert process_queue_divisible_by_3_or_5([15, 30, 45, 60]) == [15, 30, 45, 60]
    assert process_queue_divisible_by_3_or_5([]) is None
    assert process_queue_divisible_by_3_or_5([3, 6, 9]) == [3, 6, 9]
    assert process_queue_divisible_by_3_or_5([5, 10, 15]) == [5, 10, 15]
    assert process_queue_divisible_by_3_or_5([7, 14, 21]) == [21]
    assert process_queue_divisible_by_3_or_5([-3, -6, -9]) == [-3, -6, -9]
    assert process_queue_divisible_by_3_or_5([12, 18, 24]) == [12, 18, 24]",100.0,0
"def process_queue_divisible_by_3_not_6(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 3 == 0 and elem % 6 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_divisible_by_3_not_6():
    assert process_queue_divisible_by_3_not_6([3, 6, 9, 12, 15]) == [3, 9, 15]
    assert process_queue_divisible_by_3_not_6([6, 12, 18]) is None
    assert process_queue_divisible_by_3_not_6([3, 9, 15, 21]) == [3, 9, 15, 21]
    assert process_queue_divisible_by_3_not_6([]) is None
    assert process_queue_divisible_by_3_not_6([3, 6, 9]) == [3, 9]
    assert process_queue_divisible_by_3_not_6([12, 15, 18]) == [15]
    assert process_queue_divisible_by_3_not_6([4, 8, 14]) is None
    assert process_queue_divisible_by_3_not_6([3, 27, 9]) == [3, 27, 9]
    assert process_queue_divisible_by_3_not_6([12, 24, 36]) is None",100.0,0
"def process_queue_remove_less_than_x(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem >= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_remove_less_than_x():
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 3) == [3, 4, 5]
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 6) is None
    assert process_queue_remove_less_than_x([], 3) is None
    assert process_queue_remove_less_than_x([1, 2, 3, 4, 5], 5) == [5]
    assert process_queue_remove_less_than_x([5, 10, 15], 10) == [10, 15]
    assert process_queue_remove_less_than_x([7, 14, 21], 15) == [21]
    assert process_queue_remove_less_than_x([-1, -3, 5], 0) == [5]
    assert process_queue_remove_less_than_x([3, 6, 9], 7) == [9]",100.0,0
"def process_queue_less_than_x(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem < x:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_less_than_x():
    assert process_queue_less_than_x([1, 2, 3, 4, 5], 3) == [1, 2]
    assert process_queue_less_than_x([1, 2, 3, 4, 5], 1) is None
    assert process_queue_less_than_x([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]
    assert process_queue_less_than_x([], 3) is None
    assert process_queue_less_than_x([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]
    assert process_queue_less_than_x([5, 10, 15], 10) == [5]
    assert process_queue_less_than_x([7, 14, 21], 15) == [7, 14]
    assert process_queue_less_than_x([-1, -3, 5], 0) == [-1, -3]
    assert process_queue_less_than_x([3, 6, 9], 7) == [3, 6]",100.0,0
"def process_queue_min_element(queue):
    if not queue:
        return None
    min_elem = min(queue)
    queue.remove(min_elem)
    return min_elem","def test_process_queue_min_element():
    assert process_queue_min_element([1, 2, 3, 4, 5]) == 1
    assert process_queue_min_element([5, 4, 3, 2, 1]) == 1
    assert process_queue_min_element([-1, -2, -3, -4, -5]) == -5
    assert process_queue_min_element([0]) == 0
    assert process_queue_min_element([]) is None
    assert process_queue_min_element([10, 20, 5, 30]) == 5
    assert process_queue_min_element([7, 14, 21, 2]) == 2
    assert process_queue_min_element([3, 3, 3]) == 3
    assert process_queue_min_element([-1, 1, -2, 2]) == -2",100.0,0
"def process_queue_remove_greater_than_x(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem <= x:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_remove_greater_than_x():
    assert process_queue_remove_greater_than_x([1, 2, 3, 4, 5], 3) == [1, 2, 3]
    assert process_queue_remove_greater_than_x([5, 10, 15], 10) == [5, 10]
    assert process_queue_remove_greater_than_x([7, 14, 21], 15) == [7, 14]
    assert process_queue_remove_greater_than_x([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]
    assert process_queue_remove_greater_than_x([], 3) is None
    assert process_queue_remove_greater_than_x([-1, -3, 5], 0) == [-1, -3]
    assert process_queue_remove_greater_than_x([3, 6, 9], 7) == [3, 6]
    assert process_queue_remove_greater_than_x([10, 20, 30], 25) == [10, 20]
    assert process_queue_remove_greater_than_x([8, 12, 15, 4], 10) == [8, 4]",100.0,0
"def process_queue_max_element(queue):
    if not queue:
        return None
    max_elem = max(queue)
    queue.remove(max_elem)
    return max_elem","def test_process_queue_max_element():
    assert process_queue_max_element([1, 2, 3, 4, 5]) == 5
    assert process_queue_max_element([10, 9, 8, 7, 6]) == 10
    assert process_queue_max_element([-1, -2, -3, -4, -5]) == -1
    assert process_queue_max_element([]) is None
    assert process_queue_max_element([1, 1, 1, 1, 1]) == 1
    assert process_queue_max_element([4, 5, 6, 7, 4]) == 7",100.0,0
"def process_queue_remove_divisible_by_4(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 4 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_remove_divisible_by_4():
    assert process_queue_remove_divisible_by_4([4, 8, 12, 16]) is None
    assert process_queue_remove_divisible_by_4([1, 2, 3, 5, 7]) == [1, 2, 3, 5, 7]
    assert process_queue_remove_divisible_by_4([4, 5, 6, 8, 9]) == [5, 6, 9]
    assert process_queue_remove_divisible_by_4([]) is None
    assert process_queue_remove_divisible_by_4([0, 4, 8, 4, 16]) is None
    assert process_queue_remove_divisible_by_4([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]",100.0,0
"def process_queue_greater_than_x_and_divisible_by_2(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem > x and elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_greater_than_x_and_divisible_by_2():
    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 2) == [4]
    assert process_queue_greater_than_x_and_divisible_by_2([10, 9, 8, 7, 6], 5) == [10, 8, 6]
    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 6) is None
    assert process_queue_greater_than_x_and_divisible_by_2([], 1) is None
    assert process_queue_greater_than_x_and_divisible_by_2([1, 2, 3, 4, 5], 0) == [2, 4]
    assert process_queue_greater_than_x_and_divisible_by_2([1, 3, 5, 7, 9], 4) is None",100.0,0
"def process_queue_greater_than_x_and_divisible_by_3(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem > x and elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_greater_than_x_and_divisible_by_3():
    assert process_queue_greater_than_x_and_divisible_by_3([1, 2, 3, 4, 5, 6], 2) == [3, 6]
    assert process_queue_greater_than_x_and_divisible_by_3([9, 8, 7, 6, 5], 5) == [9, 6]
    assert process_queue_greater_than_x_and_divisible_by_3([1, 2, 3, 4, 5], 3) is None
    assert process_queue_greater_than_x_and_divisible_by_3([], 1) is None
    assert process_queue_greater_than_x_and_divisible_by_3([1, 3, 6, 9], 0) == [3, 6, 9]
    assert process_queue_greater_than_x_and_divisible_by_3([2, 4, 8], 4) is None",100.0,0
"def process_queue_less_than_x_not_divisible_by_5(queue, x):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem < x and elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_less_than_x_not_divisible_by_5():
    assert process_queue_less_than_x_not_divisible_by_5([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]
    assert process_queue_less_than_x_not_divisible_by_5([10, 9, 8, 7, 6], 8) == [7, 6]
    assert process_queue_less_than_x_not_divisible_by_5([15, 25, 35, 45], 50) is None
    assert process_queue_less_than_x_not_divisible_by_5([], 10) is None
    assert process_queue_less_than_x_not_divisible_by_5([0, 1, 2, 3], 4) == [1, 2, 3]
    assert process_queue_less_than_x_not_divisible_by_5([5, 10, 15], 20) is None",100.0,0
"def process_queue_even_and_divisible_by_4(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 2 == 0 and elem % 4 == 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_even_and_divisible_by_4():
    assert process_queue_even_and_divisible_by_4([4, 8, 12, 16, 20]) == [4, 8, 12, 16, 20]
    assert process_queue_even_and_divisible_by_4([1, 2, 3, 4, 5]) == [4]
    assert process_queue_even_and_divisible_by_4([5, 6, 7, 8, 9]) == [8]
    assert process_queue_even_and_divisible_by_4([1, 3, 5, 7]) is None
    assert process_queue_even_and_divisible_by_4([0, 4, 8, 12]) == [0, 4, 8, 12]
    assert process_queue_even_and_divisible_by_4([2, 6, 10, 14]) is None",100.0,0
"def process_queue_not_divisible_by_3_and_5(queue):
    result = []
    while queue:
        elem = queue.pop(0)
        if elem % 3 != 0 and elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return result","def test_process_queue_not_divisible_by_3_and_5():
    assert process_queue_not_divisible_by_3_and_5([1, 2, 3, 4, 5]) == [1, 2, 4]
    assert process_queue_not_divisible_by_3_and_5([9, 8, 7, 6, 5]) == [8, 7]
    assert process_queue_not_divisible_by_3_and_5([15, 25, 35, 45]) is None
    assert process_queue_not_divisible_by_3_and_5([4, 8, 14, 22]) == [4, 8, 14, 22]
    assert process_queue_not_divisible_by_3_and_5([3, 5, 9, 15]) is None",100.0,0
"def find_elements_greater_than_x(tpl, x):
    result = []
    for elem in tpl:
        if elem > x:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_elements_greater_than_x():
    assert find_elements_greater_than_x((1, 2, 3, 4, 5), 3) == (4, 5)
    assert find_elements_greater_than_x((10, 9, 8, 7, 6), 8) == (10, 9)
    assert find_elements_greater_than_x((-1, -2, -3, -4, -5), -3) == (-1, -2)
    assert find_elements_greater_than_x((), 1) is None
    assert find_elements_greater_than_x((1, 2, 3, 4, 5), 5) is None
    assert find_elements_greater_than_x((4, 5, 6, 7, 4), 6) == (7,)",100.0,0
"def find_even_elements_in_tuple(tpl):
    result = []
    for elem in tpl:
        if elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_even_elements_in_tuple():
    assert find_even_elements_in_tuple((1, 2, 3, 4, 5)) == (2, 4)
    assert find_even_elements_in_tuple((10, 9, 8, 7, 6)) == (10, 8, 6)
    assert find_even_elements_in_tuple((-1, -2, -3, -4, -5)) == (-2, -4)
    assert find_even_elements_in_tuple((1, 3, 5)) is None
    assert find_even_elements_in_tuple((2, 4, 6, 8)) == (2, 4, 6, 8)
    assert find_even_elements_in_tuple(()) is None",100.0,0
"def find_elements_less_than_average(tpl):
    result = []
    if not tpl:
        return None
    average = sum(tpl) / len(tpl)
    for elem in tpl:
        if elem < average:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_elements_less_than_average():
    assert find_elements_less_than_average((1, 2, 3, 4, 5)) == (1, 2)
    assert find_elements_less_than_average((10, 9, 8, 7, 6)) == (7, 6)
    assert find_elements_less_than_average((1, 1, 1, 1, 1)) is None
    assert find_elements_less_than_average((2, 4, 6, 8, 10)) == (2, 4)
    assert find_elements_less_than_average(()) is None
    assert find_elements_less_than_average((-1, -2, -3, -4, -5)) == (-4, -5)
    assert find_elements_less_than_average((5, 10, 15, 20, 25)) == (5, 10)",100.0,0
"def find_elements_greater_than_x_divisible_by_5(tpl, x):
    result = []
    for elem in tpl:
        if elem > x and elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_elements_greater_than_x_divisible_by_5():
    assert find_elements_greater_than_x_divisible_by_5((1, 5, 10, 15, 20), 10) == (15, 20)
    assert find_elements_greater_than_x_divisible_by_5((25, 30, 35, 40, 45), 20) == (25, 30, 35, 40, 45)
    assert find_elements_greater_than_x_divisible_by_5((5, 10, 15), 20) is None
    assert find_elements_greater_than_x_divisible_by_5((), 5) is None
    assert find_elements_greater_than_x_divisible_by_5((5, 10, 15, 20, 25), 0) == (5, 10, 15, 20, 25)
    assert find_elements_greater_than_x_divisible_by_5((1, 2, 3, 4), 3) is None",100.0,0
"def find_unique_elements_in_tuple(tpl):
    result = []
    element_count = {}
    for elem in tpl:
        element_count[elem] = element_count.get(elem, 0) + 1
    for elem in element_count:
        if element_count[elem] == 1:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_unique_elements_in_tuple():
    assert find_unique_elements_in_tuple((1, 2, 2, 3, 4, 4)) == (1, 3)
    assert find_unique_elements_in_tuple((5, 5, 5, 5, 5, 5)) is None
    assert find_unique_elements_in_tuple((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)
    assert find_unique_elements_in_tuple(()) is None
    assert find_unique_elements_in_tuple((6, 7, 8, 9, 10, 10, 11)) == (6, 7, 8, 9, 11)
    assert find_unique_elements_in_tuple((2, 2, 2, 3, 3, 3, 4, 4)) is None",100.0,0
"def find_divisible_by_3_and_4(tpl):
    result = []
    for elem in tpl:
        if elem % 3 == 0 and elem % 4 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_3_and_4():
    assert find_divisible_by_3_and_4((12, 24, 36, 48)) == (12, 24, 36, 48)
    assert find_divisible_by_3_and_4((6, 9, 12, 18, 24)) == (12, 24)
    assert find_divisible_by_3_and_4((3, 6, 9, 15)) is None
    assert find_divisible_by_3_and_4(()) is None
    assert find_divisible_by_3_and_4((3, 4, 5, 6, 7)) is None
    assert find_divisible_by_3_and_4((3, 12, 24, 36, 45)) == (12, 24, 36)",100.0,0
"def find_odd_elements_in_tuple(tpl):
    result = []
    for elem in tpl:
        if elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_odd_elements_in_tuple():
    assert find_odd_elements_in_tuple((1, 2, 3, 4, 5)) == (1, 3, 5)
    assert find_odd_elements_in_tuple((10, 9, 8, 7, 6)) == (9, 7)
    assert find_odd_elements_in_tuple((-1, -2, -3, -4, -5)) == (-1, -3, -5)
    assert find_odd_elements_in_tuple((2, 4, 6)) is None
    assert find_odd_elements_in_tuple((1, 3, 5, 7)) == (1, 3, 5, 7)
    assert find_odd_elements_in_tuple(()) is None",100.0,0
"def find_min_in_tuple(tpl):
    if not tpl:
        return None
    return min(tpl)","def test_find_min_in_tuple():
    assert find_min_in_tuple((1, 2, 3, 4, 5)) == 1
    assert find_min_in_tuple((10, 9, 8, 7, 6)) == 6
    assert find_min_in_tuple((-1, -2, -3, -4, -5)) == -5
    assert find_min_in_tuple(()) is None
    assert find_min_in_tuple((5, 5, 5, 5, 5)) == 5
    assert find_min_in_tuple((3, 4, 2, 1, 5)) == 1",100.0,0
"def find_max_in_tuple(tpl):
    if not tpl:
        return None
    return max(tpl)","def test_find_max_in_tuple():
    assert find_max_in_tuple((1, 2, 3, 4, 5)) == 5
    assert find_max_in_tuple((10, 9, 8, 7, 6)) == 10
    assert find_max_in_tuple((-1, -2, -3, -4, -5)) == -1
    assert find_max_in_tuple(()) is None
    assert find_max_in_tuple((5, 5, 5, 5, 5)) == 5
    assert find_max_in_tuple((3, 4, 2, 1, 5)) == 5",100.0,0
"def find_divisible_by_2_or_5(tpl):
    result = []
    for elem in tpl:
        if elem % 2 == 0 or elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_2_or_5():
    assert find_divisible_by_2_or_5((1, 2, 3, 4, 5)) == (2, 4, 5)
    assert find_divisible_by_2_or_5((10, 9, 8, 7, 6)) == (10, 8, 6)
    assert find_divisible_by_2_or_5((1, 3, 7, 11, 13)) is None
    assert find_divisible_by_2_or_5(()) is None
    assert find_divisible_by_2_or_5((20, 25, 30, 35, 40)) == (20, 25, 30, 35, 40)
    assert find_divisible_by_2_or_5((1, 5, 10, 15, 20)) == (5, 10, 15, 20)",100.0,0
"def find_divisible_by_57(tpl):
    result = []
    for elem in tpl:
        if elem % 57 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_57():
    assert find_divisible_by_57((6, 12, 18, 24, 57)) == (57,)
    assert find_divisible_by_57((5, 10, 15, 20, 25)) is None
    assert find_divisible_by_57((1, 2, 3, 4, 5)) is None
    assert find_divisible_by_57(()) is None
    assert find_divisible_by_57((6, 114, 24)) == (114,)
    assert find_divisible_by_57((12, 228, 456, 60)) == (228, 456)",100.0,0
"def find_square_numbers_in_tuple(tpl):
    result = []
    for elem in tpl:
        if (elem ** 0.5).is_integer():
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_square_numbers_in_tuple():
    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5)) == (1, 4)
    assert find_square_numbers_in_tuple((10, 9, 8, 7, 6)) == (9,)
    assert find_square_numbers_in_tuple((1, 2, 3, 4, 5)) == (1, 4)
    assert find_square_numbers_in_tuple((4, 9, 16, 25, 36)) == (4, 9, 16, 25, 36)
    assert find_square_numbers_in_tuple(()) is None
    assert find_square_numbers_in_tuple((1, 4, 9, 16, 25, 36, 49)) == (1, 4, 9, 16, 25, 36, 49)",100.0,0
"def find_greater_than_x_not_divisible_by_3(tpl, x):
    result = []
    for elem in tpl:
        if elem > x and elem % 3 != 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_greater_than_x_not_divisible_by_3():
    assert find_greater_than_x_not_divisible_by_3((1, 2, 3, 4, 5), 2) == (4, 5)
    assert find_greater_than_x_not_divisible_by_3((10, 9, 8, 7, 6), 5) == (10, 8, 7)
    assert find_greater_than_x_not_divisible_by_3((1, 2, 3, 4, 5), 6) is None
    assert find_greater_than_x_not_divisible_by_3((), 1) is None
    assert find_greater_than_x_not_divisible_by_3((4, 5, 6, 7, 8, 9), 3) == (4, 5, 7, 8)
    assert find_greater_than_x_not_divisible_by_3((1, 1, 1, 1, 1), 1) is None",100.0,0
"def find_greater_than_x_divisible_by_3(tpl, x):
    result = []
    for elem in tpl:
        if elem > x and elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_greater_than_x_divisible_by_3():
    assert find_greater_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 5) == (6, 9, 12)
    assert find_greater_than_x_divisible_by_3((1, 2, 3, 4, 5), 2) == (3,)
    assert find_greater_than_x_divisible_by_3((10, 11, 15, 18), 16) == (18,)
    assert find_greater_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 12) is None
    assert find_greater_than_x_divisible_by_3((1, 2, 3, 4, 5), 5) is None
    assert find_greater_than_x_divisible_by_3((0, 3, 6, 9, 12), 10) == (12,)
    assert find_greater_than_x_divisible_by_3((3,), 0) == (3,)
    assert find_greater_than_x_divisible_by_3((), 0) is None
    assert find_greater_than_x_divisible_by_3((3, 5, 7, 9), 8) == (9,)",100.0,0
"def find_not_divisible_by_4_and_5(tpl):
    result = []
    for elem in tpl:
        if elem % 4 != 0 and elem % 5 != 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_not_divisible_by_4_and_5():
    assert find_not_divisible_by_4_and_5((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 6, 7, 9)
    assert find_not_divisible_by_4_and_5((4, 5, 8, 10, 12, 15, 16, 20)) is None
    assert find_not_divisible_by_4_and_5((4, 8, 12, 16, 20)) is None
    assert find_not_divisible_by_4_and_5((5, 10, 15, 25)) is None
    assert find_not_divisible_by_4_and_5((2, 3, 6, 7, 9)) == (2, 3, 6, 7, 9)
    assert find_not_divisible_by_4_and_5((1, 4, 5, 8, 10)) == (1,)
    assert find_not_divisible_by_4_and_5((),) is None
    assert find_not_divisible_by_4_and_5((20, 25, 30, 35, 40)) is None
    assert find_not_divisible_by_4_and_5((9, 14, 21, 33)) == (9, 14, 21, 33)",100.0,0
"def find_less_than_x_divisible_by_3(tpl, x):
    result = []
    for elem in tpl:
        if elem < x and elem % 3 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_less_than_x_divisible_by_3():
    assert find_less_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 10) == (3, 6, 9)
    assert find_less_than_x_divisible_by_3((1, 2, 3, 4, 5), 6) == (3,)
    assert find_less_than_x_divisible_by_3((10, 11, 15, 18), 20) == (15, 18)
    assert find_less_than_x_divisible_by_3((1, 2, 3, 6, 9, 12), 2) is None
    assert find_less_than_x_divisible_by_3((1, 2, 3, 4, 5), 1) is None
    assert find_less_than_x_divisible_by_3((0, 3, 6, 9, 12), 9) == (0, 3, 6)
    assert find_less_than_x_divisible_by_3((3,), 4) == (3,)
    assert find_less_than_x_divisible_by_3((), 3) is None
    assert find_less_than_x_divisible_by_3((3, 5, 7, 9), 10) == (3, 9)",100.0,0
"def find_divisible_by_2_and_5(tpl):
    result = []
    for elem in tpl:
        if elem % 2 == 0 and elem % 5 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_2_and_5():
    assert find_divisible_by_2_and_5((1, 2, 5, 10, 12, 15, 20)) == (10, 20)
    assert find_divisible_by_2_and_5((10, 20, 30, 40, 50)) == (10, 20, 30, 40, 50)
    assert find_divisible_by_2_and_5((5, 15, 25, 35)) is None
    assert find_divisible_by_2_and_5((2, 4, 6, 8)) is None
    assert find_divisible_by_2_and_5((0, 10, 20, 25)) == (0, 10, 20)
    assert find_divisible_by_2_and_5((5, 10, 15)) == (10,)
    assert find_divisible_by_2_and_5((),) is None
    assert find_divisible_by_2_and_5((30, 35, 40, 50)) == (30, 40, 50)
    assert find_divisible_by_2_and_5((25, 50, 75, 100)) == (50, 100)",100.0,0
"def find_not_square_numbers_in_tuple(tpl):
    result = []
    for elem in tpl:
        if not (elem ** 0.5).is_integer():
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_not_square_numbers_in_tuple():
    assert find_not_square_numbers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (2, 3, 5, 6, 7, 8, 10)
    assert find_not_square_numbers_in_tuple((4, 9, 16, 25, 36)) is None
    assert find_not_square_numbers_in_tuple((2, 3, 5, 6, 7, 8, 10)) == (2, 3, 5, 6, 7, 8, 10)
    assert find_not_square_numbers_in_tuple((4, 8, 12, 16, 20)) == (8, 12, 20)
    assert find_not_square_numbers_in_tuple((4, 5, 6, 7, 9)) == (5, 6, 7)
    assert find_not_square_numbers_in_tuple((),) is None
    assert find_not_square_numbers_in_tuple((1, 3, 7, 11, 12)) == (3, 7, 11, 12)
    assert find_not_square_numbers_in_tuple((4, 16, 25, 36)) is None
    assert find_not_square_numbers_in_tuple((5, 10, 15, 20)) == (5, 10, 15, 20)",100.0,0
"def find_divisible_by_2_and_7(tpl):
    result = []
    for elem in tpl:
        if elem % 2 == 0 and elem % 7 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_divisible_by_2_and_7():
    assert find_divisible_by_2_and_7((1, 2, 7, 14, 21, 28, 35, 42)) == (14, 28, 42)
    assert find_divisible_by_2_and_7((14, 28, 42, 56, 70, 84)) == (14, 28, 42, 56, 70, 84)
    assert find_divisible_by_2_and_7((1, 3, 5, 7, 9, 11)) is None
    assert find_divisible_by_2_and_7((2, 4, 8, 16)) is None
    assert find_divisible_by_2_and_7((0, 7, 14, 28)) == (0, 14, 28)
    assert find_divisible_by_2_and_7((7, 14, 21)) == (14,)
    assert find_divisible_by_2_and_7((),) is None
    assert find_divisible_by_2_and_7((7, 14, 35, 42)) == (14, 42)
    assert find_divisible_by_2_and_7((28, 56, 84, 112)) == (28, 56, 84, 112)",100.0,0
"def find_less_than_x_odd(tpl, x):
    result = []
    for elem in tpl:
        if elem < x and elem % 2 != 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_less_than_x_odd():
    assert find_less_than_x_odd((1, 2, 3, 6, 9, 12), 10) == (1, 3, 9)
    assert find_less_than_x_odd((1, 2, 3, 4, 5), 6) == (1, 3, 5)
    assert find_less_than_x_odd((10, 11, 15, 18), 16) == (11, 15)
    assert find_less_than_x_odd((1, 2, 3, 6, 9, 12), 2) == (1,)
    assert find_less_than_x_odd((1, 2, 3, 4, 5), 1) is None
    assert find_less_than_x_odd((0, 3, 6, 9, 12), 9) == (3,)
    assert find_less_than_x_odd((3,), 4) == (3,)
    assert find_less_than_x_odd((), 3) is None
    assert find_less_than_x_odd((3, 5, 7, 9), 8) == (3, 5, 7)",100.0,0
"def find_greater_than_x_even(tpl, x):
    result = []
    for elem in tpl:
        if elem > x and elem % 2 == 0:
            result.append(elem)
    if not result:
        return None
    return tuple(result)","def test_find_greater_than_x_even():
    assert find_greater_than_x_even((1, 2, 3, 6, 9, 12), 5) == (6, 12)
    assert find_greater_than_x_even((1, 2, 3, 4, 5), 2) == (4,)
    assert find_greater_than_x_even((10, 11, 14, 18), 13) == (14, 18)
    assert find_greater_than_x_even((1, 2, 3, 6, 9, 12), 12) is None
    assert find_greater_than_x_even((1, 2, 3, 4, 5), 5) is None
    assert find_greater_than_x_even((0, 3, 6, 8, 12), 7) == (8, 12)
    assert find_greater_than_x_even((4,), 3) == (4,)
    assert find_greater_than_x_even((), 3) is None
    assert find_greater_than_x_even((3, 5, 7, 9), 8) is None",100.0,0
"def unique_elements_from_list(lst):
    if not lst:
        return None
    unique_elements = set(lst)
    return tuple(unique_elements)","def test_unique_elements_from_list():
    assert unique_elements_from_list([1, 2, 2, 3, 4, 4, 5]) == (1, 2, 3, 4, 5)
    assert unique_elements_from_list([1, 1, 1, 1, 1]) == (1,)
    assert unique_elements_from_list([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)
    assert unique_elements_from_list([]) is None
    assert unique_elements_from_list([1, 2, 3, 4, 4, 5, 5]) == (1, 2, 3, 4, 5)
    assert unique_elements_from_list([3, 3, 3, 2, 1, 1]) == (1, 2, 3)
    assert unique_elements_from_list([10, 9, 9, 10]) == (9, 10)
    assert unique_elements_from_list([5]) == (5,)
    assert unique_elements_from_list([4, 5, 6, 6, 7]) == (4, 5, 6, 7)",100.0,0
"def intersection_of_lists_2(lst1, lst2):
    result = list(set(lst1) & set(lst2))
    if not result:
        return None
    return result","def test_intersection_of_lists_2():
    assert intersection_of_lists_2([1, 2, 3], [3, 4, 5]) == [3]
    assert intersection_of_lists_2([1, 2, 2, 3], [3, 3, 4]) == [3]
    assert intersection_of_lists_2([1, 2, 3], [4, 5, 6]) is None
    assert intersection_of_lists_2([], [1, 2, 3]) is None
    assert intersection_of_lists_2([1, 2, 3], []) is None
    assert intersection_of_lists_2([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4]
    assert intersection_of_lists_2([5, 6, 7], [7, 8, 9]) == [7]
    assert intersection_of_lists_2([1, 1, 2, 2], [2, 2, 3, 3]) == [2]
    assert intersection_of_lists_2([9, 8, 7], [7, 6, 5]) == [7]",100.0,0
"def merge_dicts_no_common_keys(d1, d2):
    if any(k in d2 for k in d1):
        return None
    merged_dict = {**d1, **d2}
    return merged_dict","def test_merge_dicts_no_common_keys():
    assert merge_dicts_no_common_keys({""a"": 1, ""b"": 2}, {""c"": 3, ""d"": 4}) == {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4}
    assert merge_dicts_no_common_keys({""a"": 1}, {""b"": 2, ""c"": 3}) == {""a"": 1, ""b"": 2, ""c"": 3}
    assert merge_dicts_no_common_keys({""a"": 1, ""b"": 2}, {""b"": 3, ""d"": 4}) is None
    assert merge_dicts_no_common_keys({}, {""a"": 1, ""b"": 2}) == {""a"": 1, ""b"": 2}
    assert merge_dicts_no_common_keys({""a"": 1, ""b"": 2}, {}) == {""a"": 1, ""b"": 2}
    assert merge_dicts_no_common_keys({}, {}) == {}
    assert merge_dicts_no_common_keys({""a"": 1, ""b"": 2}, {""c"": 2, ""d"": 3}) == {""a"": 1, ""b"": 2, ""c"": 2, ""d"": 3}
    assert merge_dicts_no_common_keys({""a"": 1}, {""a"": 2}) is None
    assert merge_dicts_no_common_keys({""a"": 1, ""b"": 2}, {""a"": 2, ""c"": 3}) is None",100.0,0
"def reverse_string_3(s):
    if not s:
        return None
    return s[::-1]","def test_reverse_string_3():
    assert reverse_string_3(""hello"") == ""olleh""
    assert reverse_string_3(""world"") == ""dlrow""
    assert reverse_string_3("""") is None
    assert reverse_string_3(""a"") == ""a""
    assert reverse_string_3(""ab"") == ""ba""
    assert reverse_string_3(""abc"") == ""cba""
    assert reverse_string_3(""racecar"") == ""racecar""
    assert reverse_string_3(""Python"") == ""nohtyP""
    assert reverse_string_3(""12345"") == ""54321""",100.0,0
"def divisors_of_x(x):
    if x <= 0:
        return None
    divisors = []
    for i in range(2, x):
        if x % i == 0:
            divisors.append(i)
    if not divisors:
        return None
    return divisors","def test_divisors_of_x():
    assert divisors_of_x(6) == [2, 3]
    assert divisors_of_x(12) == [2, 3, 4, 6]
    assert divisors_of_x(1) is None
    assert divisors_of_x(0) is None
    assert divisors_of_x(-5) is None
    assert divisors_of_x(17) is None
    assert divisors_of_x(100) == [2, 4, 5, 10, 20, 25, 50]
    assert divisors_of_x(25) == [5]
    assert divisors_of_x(2) is None",100.0,0
"def count_elements_in_list(lst):
    if not lst:
        return None
    count_dict = {}
    for elem in lst:
        count_dict[elem] = count_dict.get(elem, 0) + 1
    return count_dict","def test_count_elements_in_list():
    assert count_elements_in_list([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}
    assert count_elements_in_list([1, 1, 1, 1, 1]) == {1: 5}
    assert count_elements_in_list([]) is None
    assert count_elements_in_list([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}
    assert count_elements_in_list([3, 3, 3]) == {3: 3}
    assert count_elements_in_list([""a"", ""b"", ""a"", ""c"", ""a"", ""b"", ""a""]) == {""a"": 4, ""b"": 2, ""c"": 1}
    assert count_elements_in_list([None, None, None]) == {None: 3}
    assert count_elements_in_list([True, False, True, True]) == {True: 3, False: 1}
    assert count_elements_in_list([1, ""1"", 1, ""1"", 1]) == {1: 3, ""1"": 2}",100.0,0
"def list_to_dict_2(lst):
    if not lst or len(lst) % 2 != 0:
        return None
    return dict(zip(lst[::2], lst[1::2]))","def test_list_to_dict_2():
    assert list_to_dict_2([""a"", 1, ""b"", 2, ""c"", 3]) == {""a"": 1, ""b"": 2, ""c"": 3}
    assert list_to_dict_2([""key1"", ""value1"", ""key2"", ""value2""]) == {""key1"": ""value1"", ""key2"": ""value2""}
    assert list_to_dict_2([]) is None
    assert list_to_dict_2([""a"", 1, ""b"", 2, ""c""]) is None
    assert list_to_dict_2([""a"", 1]) == {""a"": 1}
    assert list_to_dict_2([""one"", 1, ""two"", 2, ""three"", 3]) == {""one"": 1, ""two"": 2, ""three"": 3}
    assert list_to_dict_2([1, 2, 3, 4, 5, 6]) == {1: 2, 3: 4, 5: 6}
    assert list_to_dict_2([""apple"", ""red"", ""banana"", ""yellow""]) == {""apple"": ""red"", ""banana"": ""yellow""}
    assert list_to_dict_2([""name"", ""Alice"", ""age"", 30]) == {""name"": ""Alice"", ""age"": 30}",100.0,0
"def count_even_and_odd(lst):
    if not lst:
        return None
    even_count = 0
    odd_count = 0
    for num in lst:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return {""even"": even_count, ""odd"": odd_count}","def test_count_even_and_odd():
    assert count_even_and_odd([1, 2, 3, 4, 5, 6]) == {""even"": 3, ""odd"": 3}
    assert count_even_and_odd([1, 3, 5, 7]) == {""even"": 0, ""odd"": 4}
    assert count_even_and_odd([2, 4, 6, 8]) == {""even"": 4, ""odd"": 0}
    assert count_even_and_odd([]) is None
    assert count_even_and_odd([1, 1, 1, 1]) == {""even"": 0, ""odd"": 4}
    assert count_even_and_odd([2, 2, 2, 2]) == {""even"": 4, ""odd"": 0}
    assert count_even_and_odd([1]) == {""even"": 0, ""odd"": 1}
    assert count_even_and_odd([2]) == {""even"": 1, ""odd"": 0}
    assert count_even_and_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {""even"": 5, ""odd"": 5}",100.0,0
"def extract_vowels_from_string(s):
    if not s:
        return None
    vowels = ""aeiouAEIOU""
    result = [ch for ch in s if ch in vowels]
    if not result:
        return None
    return ''.join(result)","def test_extract_vowels_from_string():
    assert extract_vowels_from_string(""hello"") == ""eo""
    assert extract_vowels_from_string(""world"") == ""o""
    assert extract_vowels_from_string("""") is None
    assert extract_vowels_from_string(""a"") == ""a""
    assert extract_vowels_from_string(""bcdfg"") is None
    assert extract_vowels_from_string(""AEIOU"") == ""AEIOU""
    assert extract_vowels_from_string(""Python Programming"") == 'ooai'
    assert extract_vowels_from_string(""abcdefghijklmnopqrstuvwxyz"") == ""aeiou""
    assert extract_vowels_from_string(""HELLO WORLD"") == ""EOO""",100.0,0
"def merge_sorted_lists(lst1, lst2):
    if not lst1 and not lst2:
        return None
    return sorted(lst1 + lst2)","def test_merge_sorted_lists():
    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
    assert merge_sorted_lists([], []) is None
    assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]
    assert merge_sorted_lists([], [4, 5, 6]) == [4, 5, 6]
    assert merge_sorted_lists([0], [0]) == [0, 0]
    assert merge_sorted_lists([10, 20], [5, 15, 25]) == [5, 10, 15, 20, 25]
    assert merge_sorted_lists([-1, -2], [-3, -4]) == [-4, -3, -2, -1]",100.0,0
"def is_palindrome_2(s):
    if not s:
        return None
    return s == s[::-1]","def test_is_palindrome_2():
    assert is_palindrome_2('racecar') is True
    assert is_palindrome_2('') is None
    assert is_palindrome_2('madam') is True
    assert is_palindrome_2('python') is False
    assert is_palindrome_2('Aibohphobia') is False
    assert is_palindrome_2('step on no pets') is True
    assert is_palindrome_2('Was it a car or a cat I saw') is False
    assert is_palindrome_2('civic') is True",100.0,0
"def gcd_of_two_numbers(a, b):
    if a <= 0 or b <= 0:
        return None
    while b:
        a, b = b, a % b
    return a","def test_gcd_of_two_numbers():
    assert gcd_of_two_numbers(48, 18) == 6
    assert gcd_of_two_numbers(0, 10) is None
    assert gcd_of_two_numbers(15, 0) is None
    assert gcd_of_two_numbers(-5, 10) is None
    assert gcd_of_two_numbers(5, -10) is None
    assert gcd_of_two_numbers(36, 6) == 6
    assert gcd_of_two_numbers(101, 103) == 1
    assert gcd_of_two_numbers(56, 98) == 14
    assert gcd_of_two_numbers(14, 28) == 14",100.0,0
"def prime_numbers_up_to_x(x):
    if x < 2:
        return None
    primes = []
    for num in range(2, x + 1):
        is_prime = True
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes","def test_prime_numbers_up_to_x():
    assert prime_numbers_up_to_x(10) == [2, 3, 5, 7]
    assert prime_numbers_up_to_x(2) == [2]
    assert prime_numbers_up_to_x(1) is None
    assert prime_numbers_up_to_x(0) is None
    assert prime_numbers_up_to_x(-5) is None
    assert prime_numbers_up_to_x(11) == [2, 3, 5, 7, 11]",100.0,0
"def factorial_of_number(n):
    if n < 0:
        return None
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    return factorial","def test_factorial_of_number():
    assert factorial_of_number(5) == 120
    assert factorial_of_number(0) == 1
    assert factorial_of_number(-1) is None
    assert factorial_of_number(3) == 6
    assert factorial_of_number(1) == 1
    assert factorial_of_number(4) == 24",100.0,0
"def count_words_in_string(s):
    if not s:
        return None
    return len(s.split())","def test_count_words_in_string():
    assert count_words_in_string(""Hello world"") == 2
    assert count_words_in_string("""") is None
    assert count_words_in_string(""A quick brown fox jumps over the lazy dog"") == 9
    assert count_words_in_string("" "") == 0
    assert count_words_in_string(""Testing, one, two, three."") == 4",100.0,0
"def find_all_indices_of_element(lst, element):
    if not lst:
        return None
    indices = [i for i, x in enumerate(lst) if x == element]
    if not indices:
        return None
    return indices","def test_find_all_indices_of_element():
    assert find_all_indices_of_element([1, 2, 3, 2, 1], 2) == [1, 3]
    assert find_all_indices_of_element([1, 2, 3, 4, 5], 6) is None
    assert find_all_indices_of_element([], 1) is None
    assert find_all_indices_of_element([1, 1, 1, 1], 1) == [0, 1, 2, 3]
    assert find_all_indices_of_element([""a"", ""b"", ""a""], ""a"") == [0, 2]",100.0,0
"def square_numbers_from_list(lst):
    if not lst:
        return None
    squares = [x for x in lst if (x ** 0.5).is_integer()]
    if not squares:
        return None
    return squares","def test_square_numbers_from_list():
    assert square_numbers_from_list([1, 2, 3, 4, 5, 9]) == [1, 4, 9]
    assert square_numbers_from_list([]) is None
    assert square_numbers_from_list([10, 15, 20]) is None
    assert square_numbers_from_list([0, 1, 16, 25]) == [0, 1, 16, 25]
    assert square_numbers_from_list([1, 4, 9]) == [1, 4, 9]",100.0,0
"def greater_than_average(lst):
    if not lst:
        return None
    average = sum(lst) / len(lst)
    result = [x for x in lst if x > average]
    if not result:
        return None
    return result","def test_greater_than_average():
    assert greater_than_average([1, 2, 3, 4, 5]) == [4, 5]
    assert greater_than_average([10, 20, 30, 40, 50]) == [40, 50]
    assert greater_than_average([]) is None
    assert greater_than_average([5, 5, 5, 5]) is None
    assert greater_than_average([1, 2, 3, 3, 4]) == [3, 3, 4]",100.0,0
"def sort_strings_by_length(lst):
    if not lst:
        return None
    return sorted(lst, key=len)","def test_sort_strings_by_length():
    assert sort_strings_by_length([""a"", ""aaa"", ""aa""]) == [""a"", ""aa"", ""aaa""]
    assert sort_strings_by_length([""short"", ""longer"", ""longest""]) == [""short"", ""longer"", ""longest""]
    assert sort_strings_by_length([]) is None
    assert sort_strings_by_length([""same"", ""size""]) == [""same"", ""size""]
    assert sort_strings_by_length([""one"", ""three"", ""four""]) == [""one"", ""four"", ""three""]",100.0,0
"def sum_of_elements(lst):
    if not lst:
        return None
    return sum(lst)","def test_sum_of_elements():
    assert sum_of_elements([1, 2, 3, 4, 5]) == 15
    assert sum_of_elements([]) is None
    assert sum_of_elements([10, 20, 30, 40]) == 100
    assert sum_of_elements([0, 0, 0, 0]) == 0
    assert sum_of_elements([-1, -2, -3, -4]) == -10",100.0,0
"def longest_string(lst):
    if not lst:
        return None
    return max(lst, key=len)","def test_longest_string():
    assert longest_string([""a"", ""aa"", ""aaa""]) == ""aaa""
    assert longest_string([""short"", ""longer"", ""longest""]) == ""longest""
    assert longest_string([]) is None
    assert longest_string([""same"", ""size""]) == ""same""
    assert longest_string([""one"", ""three"", ""four""]) == ""three""",100.0,0
"def difference_between_sets(set1, set2):
    if not set1 or not set2:
        return None
    return set1 - set2","def test_difference_between_sets():
    assert difference_between_sets({1, 2, 3}, {2, 3, 4}) == {1}
    assert difference_between_sets(set(), {1, 2, 3}) is None
    assert difference_between_sets({1, 2, 3}, set()) is None
    assert difference_between_sets({1, 2, 3}, {1, 2, 3}) == set()
    assert difference_between_sets({1, 2}, {3, 4}) == {1, 2}",100.0,0
"def union_of_lists(lst1, lst2):
    if not lst1 and not lst2:
        return None
    return sorted(list(set(lst1) | set(lst2)))","def test_union_of_lists():
    assert union_of_lists([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]
    assert union_of_lists([], [1, 2, 3]) == [1, 2, 3]
    assert union_of_lists([1, 2, 3], []) == [1, 2, 3]
    assert union_of_lists([], []) is None
    assert union_of_lists([1, 1, 1], [2, 2, 2]) == [1, 2]",100.0,0
"def intersection_of_lists_3(lst1, lst2):
    if not lst1 and not lst2:
        return None
    return sorted(list(set(lst1) & set(lst2)))","def test_intersection_of_lists_3():
    assert intersection_of_lists_3([1, 2, 3], [2, 3, 4]) == [2, 3]
    assert intersection_of_lists_3([], [1, 2, 3]) == []
    assert intersection_of_lists_3([1, 2, 3], []) == []
    assert intersection_of_lists_3([], []) is None
    assert intersection_of_lists_3([1, 2, 2], [2, 2, 3]) == [2]",100.0,0
"def is_digit(s):
    if not s:
        return None
    return s.isdigit()","def test_is_digit():
    assert is_digit(""123"") is True
    assert is_digit(""abc"") is False
    assert is_digit("""") is None
    assert is_digit(""123abc"") is False
    assert is_digit(""0"") is True",100.0,0
"def extract_letters_from_string(s):
    if not s:
        return None
    result = ''.join([ch for ch in s if ch.isalpha()])
    return result","def test_extract_letters_from_string():
    assert extract_letters_from_string(""abc123"") == ""abc""
    assert extract_letters_from_string("""") is None
    assert extract_letters_from_string(""123"") == """"
    assert extract_letters_from_string(""a1b2c3"") == ""abc""
    assert extract_letters_from_string(""!@#"") == """"",100.0,0
"def find_all_strings_in_list(lst):
    if not lst:
        return None
    return [x for x in lst if isinstance(x, str)]","def test_find_all_strings_in_list():
    assert find_all_strings_in_list([1, ""a"", 2, ""b""]) == [""a"", ""b""]
    assert find_all_strings_in_list([]) is None
    assert find_all_strings_in_list([1, 2, 3]) == []
    assert find_all_strings_in_list([""a"", ""b"", ""c""]) == [""a"", ""b"", ""c""]
    assert find_all_strings_in_list([1, ""one"", 2, ""two""]) == [""one"", ""two""]",100.0,0
"def all_unique(lst):
    if not lst:
        return None
    return len(lst) == len(set(lst))","def test_all_unique():
    assert all_unique([1, 2, 3]) is True
    assert all_unique([1, 1, 1]) is False
    assert all_unique([]) is None
    assert all_unique([""a"", ""b"", ""c""]) is True
    assert all_unique([""a"", ""b"", ""a""]) is False",100.0,0
"def join_elements_with_separator(lst, separator):
    if not lst:
        return None
    return separator.join(lst)","def test_join_elements_with_separator():
    assert join_elements_with_separator([""a"", ""b"", ""c""], ""-"") == ""a-b-c""
    assert join_elements_with_separator([], ""-"") is None
    assert join_elements_with_separator([""one""], ""-"") == ""one""
    assert join_elements_with_separator([""a"", ""b"", ""c""], """") == ""abc""
    assert join_elements_with_separator([""1"", ""2"", ""3""], "", "") == ""1, 2, 3""",100.0,0
"def difference_between_lists(lst1, lst2):
    if not lst1 and not lst2:
        return None
    return sorted(list(set(lst1) - set(lst2)))","def test_difference_between_lists():
    assert difference_between_lists([1, 2, 3], [2, 3, 4]) == [1]
    assert difference_between_lists([], [1, 2, 3]) == []
    assert difference_between_lists([1, 2, 3], []) == [1, 2, 3]
    assert difference_between_lists([], []) is None
    assert difference_between_lists([1, 2, 3, 4], [3, 4]) == [1, 2]",100.0,0
"def count_non_overlapping_substring(s, substring):
    if not s or not substring:
        return None
    count = 0
    i = 0
    while i < len(s):
        i = s.find(substring, i)
        if i == -1:
            break
        count += 1
        i += len(substring)
    return count","def test_count_non_overlapping_substring():
    assert count_non_overlapping_substring(""ababab"", ""ab"") == 3
    assert count_non_overlapping_substring("""", ""a"") is None
    assert count_non_overlapping_substring(""aaaa"", ""aa"") == 2
    assert count_non_overlapping_substring(""abc"", ""d"") == 0
    assert count_non_overlapping_substring(""abcdef"", ""abc"") == 1",100.0,0
"def find_words_starting_with(s, letter):
    if not s or not letter:
        return None
    words = s.split()
    result = [word for word in words if word[0].lower() == letter.lower()]
    return result if result else None","def test_find_words_starting_with():
    assert find_words_starting_with(""apple banana apricot berry"", ""a"") == [""apple"", ""apricot""]
    assert find_words_starting_with("""", ""a"") is None
    assert find_words_starting_with(""apple banana apricot berry"", ""b"") == [""banana"", ""berry""]
    assert find_words_starting_with(""apple banana apricot berry"", ""c"") is None
    assert find_words_starting_with(""cat cow car"", ""c"") == [""cat"", ""cow"", ""car""]",100.0,0
"def are_anagrams_2(s1, s2):
    if not s1 or not s2:
        return None
    return sorted(s1) == sorted(s2)","def test_are_anagrams_2():
    assert are_anagrams_2(""listen"", ""silent"") is True
    assert are_anagrams_2(""triangle"", ""integral"") is True
    assert are_anagrams_2(""apple"", ""pale"") is False
    assert are_anagrams_2("""", """") is None
    assert are_anagrams_2(None, ""test"") is None
    assert are_anagrams_2(""test"", None) is None",100.0,0
"def extract_numbers_from_string_2(s):
    if not s:
        return None
    numbers = []
    current_number = []
    for ch in s:
        if ch.isdigit():
            current_number.append(ch)
        elif current_number:
            numbers.append(''.join(current_number))
            current_number = []
    if current_number:
        numbers.append(''.join(current_number))
    return numbers if numbers else None","def test_extract_numbers_from_string_2():
    assert extract_numbers_from_string_2(""abc123xyz456"") == [""123"", ""456""]
    assert extract_numbers_from_string_2(""no numbers here"") is None
    assert extract_numbers_from_string_2("""") is None
    assert extract_numbers_from_string_2(None) is None
    assert extract_numbers_from_string_2(""123"") == [""123""]
    assert extract_numbers_from_string_2(""abc123"") == [""123""]
    assert extract_numbers_from_string_2(""123abc"") == [""123""]",100.0,0
"def is_palindrome_with_spaces(s):
    if not s:
        return None
    clean_s = ''.join(s.split()).lower()
    return clean_s == clean_s[::-1]","def test_is_palindrome_with_spaces():
    assert is_palindrome_with_spaces(""A man a plan a canal Panama"") is True
    assert is_palindrome_with_spaces(""race car"") is True
    assert is_palindrome_with_spaces(""hello world"") is False
    assert is_palindrome_with_spaces("""") is None
    assert is_palindrome_with_spaces(None) is None
    assert is_palindrome_with_spaces(""Was it a car or a cat I saw"") is True",100.0,0
"def count_vowels_and_consonants(s):
    if not s:
        return None
    vowels = ""aeiouAEIOU""
    consonants = 0
    vowels_count = 0
    for ch in s:
        if ch.isalpha():
            if ch in vowels:
                vowels_count += 1
            else:
                consonants += 1
    if vowels_count == 0 and consonants == 0:
        return None
    return {""vowels"": vowels_count, ""consonants"": consonants}","def test_count_vowels_and_consonants():
    assert count_vowels_and_consonants(""hello"") == {""vowels"": 2, ""consonants"": 3}
    assert count_vowels_and_consonants(""a"") == {""vowels"": 1, ""consonants"": 0}
    assert count_vowels_and_consonants(""bcdfg"") == {""vowels"": 0, ""consonants"": 5}
    assert count_vowels_and_consonants(""12345"") is None
    assert count_vowels_and_consonants("""") is None
    assert count_vowels_and_consonants(None) is None",100.0,0
"def remove_spaces_and_reverse(s):
    if not s:
        return None
    no_spaces = s.replace("" "", """")
    return no_spaces[::-1]","def test_remove_spaces_and_reverse():
    assert remove_spaces_and_reverse(""hello world"") == ""dlrowolleh""
    assert remove_spaces_and_reverse("" "") == """"
    assert remove_spaces_and_reverse(""a b c d e f"") == ""fedcba""
    assert remove_spaces_and_reverse("""") is None
    assert remove_spaces_and_reverse(None) is None",100.0,0
"def longest_unique_substring(s):
    if not s:
        return None
    max_len = 0
    max_substring = """"
    for i in range(len(s)):
        seen = set()
        for j in range(i, len(s)):
            if s[j] in seen:
                break
            seen.add(s[j])
        if len(seen) > max_len:
            max_len = len(seen)
            max_substring = s[i:i + max_len]
    return max_substring if max_len > 0 else None","def test_longest_unique_substring():
    assert longest_unique_substring(""abcabcbb"") == ""abc""
    assert longest_unique_substring(""bbbbb"") == ""b""
    assert longest_unique_substring(""pwwkew"") == ""wke""
    assert longest_unique_substring("""") is None
    assert longest_unique_substring(None) is None
    assert longest_unique_substring(""abcdef"") == ""abcdef""",100.0,0
"def longest_common_prefix(s1, s2):
    if not s1 or not s2:
        return None
    prefix = []
    for i in range(min(len(s1), len(s2))):
        if s1[i] == s2[i]:
            prefix.append(s1[i])
        else:
            break
    return ''.join(prefix) if prefix else None","def test_longest_common_prefix():
    assert longest_common_prefix(""flower"", ""flow"") == ""flow""
    assert longest_common_prefix(""dog"", ""racecar"") is None
    assert longest_common_prefix("""", """") is None
    assert longest_common_prefix(None, ""test"") is None
    assert longest_common_prefix(""test"", None) is None
    assert longest_common_prefix(""interspecies"", ""interstellar"") == ""inters""",100.0,0
"def count_repeating_words(s):
    if not s:
        return None
    words = s.split()
    word_count = {}
    for word in words:
        word_count[word.lower()] = word_count.get(word.lower(), 0) + 1
    return {word: count for word, count in word_count.items() if count > 1}","def test_count_repeating_words():
    assert count_repeating_words(""hello Hello world world"") == {""hello"": 2, ""world"": 2}
    assert count_repeating_words(""one two three"") == {}
    assert count_repeating_words("""") is None
    assert count_repeating_words(None) is None
    assert count_repeating_words(""repeat repeat repeat"") == {""repeat"": 3}",100.0,0
"def longest_word_in_string(s):
    if not s:
        return None
    words = s.split()
    return max(words, key=len) if words else None","def test_longest_word_in_string():
    assert longest_word_in_string(""hello world"") == ""hello""
    assert longest_word_in_string(""a abc ab"") == ""abc""
    assert longest_word_in_string("""") is None
    assert longest_word_in_string(None) is None
    assert longest_word_in_string(""single"") == ""single""",100.0,0
"def extract_substrings_of_length_n(s, n):
    if not s or n <= 0:
        return None
    return [s[i:i + n] for i in range(len(s) - n + 1)]","def test_extract_substrings_of_length_n():
    assert extract_substrings_of_length_n(""abcdefg"", 3) == [""abc"", ""bcd"", ""cde"", ""def"", ""efg""]
    assert extract_substrings_of_length_n(""hello"", 2) == [""he"", ""el"", ""ll"", ""lo""]
    assert extract_substrings_of_length_n("""", 2) is None
    assert extract_substrings_of_length_n(""a"", 2) == []
    assert extract_substrings_of_length_n(""test"", 0) is None
    assert extract_substrings_of_length_n(None, 2) is None",100.0,0
"def remove_words_starting_with(s, letter):
    if not s or not letter:
        return None
    words = s.split()
    filtered_words = [word for word in words if not word.lower().startswith(letter.lower())]
    return ' '.join(filtered_words) if filtered_words else None","def test_remove_words_starting_with():
    assert remove_words_starting_with(""hello world happy day"", ""h"") == ""world day""
    assert remove_words_starting_with(""apple banana cherry"", ""b"") == ""apple cherry""
    assert remove_words_starting_with(""alpha beta gamma"", ""a"") == ""beta gamma""
    assert remove_words_starting_with("""", ""a"") is None
    assert remove_words_starting_with(None, ""a"") is None
    assert remove_words_starting_with(""test string"", """") is None
    assert remove_words_starting_with(""test string"", None) is None",100.0,0
"def replace_spaces_with_underscores(s):
    if not s:
        return None
    return s.replace("" "", ""_"")","def test_replace_spaces_with_underscores():
    assert replace_spaces_with_underscores(""hello world"") == ""hello_world""
    assert replace_spaces_with_underscores("" a b c "") == ""_a_b_c_""
    assert replace_spaces_with_underscores("""") is None
    assert replace_spaces_with_underscores(None) is None
    assert replace_spaces_with_underscores(""nospace"") == ""nospace""",100.0,0
"def sort_letters_in_string(s):
    if not s:
        return None
    letters = [ch for ch in s if ch.isalpha()]
    letters.sort()
    return ''.join(letters)","def test_sort_letters_in_string():
    assert sort_letters_in_string(""dcba"") == ""abcd""
    assert sort_letters_in_string(""hello"") == ""ehllo""
    assert sort_letters_in_string(""h3el1lo2"") == ""ehllo""
    assert sort_letters_in_string("""") is None
    assert sort_letters_in_string(None) is None",100.0,0
"def remove_numbers_from_string(s):
    if not s:
        return None
    return ''.join([ch for ch in s if not ch.isdigit()])","def test_remove_numbers_from_string():
    assert remove_numbers_from_string(""a1b2c3"") == ""abc""
    assert remove_numbers_from_string(""123"") == """"
    assert remove_numbers_from_string(""abc"") == ""abc""
    assert remove_numbers_from_string("""") is None
    assert remove_numbers_from_string(None) is None",100.0,0
"def find_case_sensitive_occurrences(s, substring):
    if not s or not substring:
        return None
    indices = []
    i = 0
    while i < len(s):
        i = s.find(substring, i)
        if i == -1:
            break
        indices.append(i)
        i += 1
    return indices if indices else None","def test_find_case_sensitive_occurrences():
    assert find_case_sensitive_occurrences(""Test test TEST"", ""test"") == [5]
    assert find_case_sensitive_occurrences(""abcabcabc"", ""abc"") == [0, 3, 6]
    assert find_case_sensitive_occurrences(""Hello world"", ""o"") == [4, 7]
    assert find_case_sensitive_occurrences("""", ""test"") is None
    assert find_case_sensitive_occurrences(None, ""test"") is None
    assert find_case_sensitive_occurrences(""Test"", """") is None
    assert find_case_sensitive_occurrences(""Test"", None) is None",100.0,0
"def remove_vowels_from_string(s):
    if not s:
        return None
    vowels = ""aeiouAEIOU""
    return ''.join([ch for ch in s if ch not in vowels])","def test_remove_vowels_from_string():
    assert remove_vowels_from_string(""hello"") == ""hll""
    assert remove_vowels_from_string(""aeiou"") == """"
    assert remove_vowels_from_string(""bcdfg"") == ""bcdfg""
    assert remove_vowels_from_string("""") is None
    assert remove_vowels_from_string(None) is None",100.0,0
"def levenshtein_distance(s1, s2):
    if not s1 or not s2:
        return None
    len_s1, len_s2 = len(s1), len(s2)
    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]
    for i in range(len_s1 + 1):
        for j in range(len_s2 + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])
    return dp[len_s1][len_s2]","def test_levenshtein_distance():
    assert levenshtein_distance(""kitten"", ""sitting"") == 3
    assert levenshtein_distance(""flaw"", ""lawn"") == 2
    assert levenshtein_distance("""", ""abc"") is None
    assert levenshtein_distance(""abc"", """") is None
    assert levenshtein_distance(None, ""abc"") is None
    assert levenshtein_distance(""abc"", None) is None",100.0,0
"def fixed_length_substrings(s, length):
    if not s or length <= 0:
        return None
    return [s[i:i + length] for i in range(len(s) - length + 1)]","def test_fixed_length_substrings():
    assert fixed_length_substrings(""abcdef"", 2) == [""ab"", ""bc"", ""cd"", ""de"", ""ef""]
    assert fixed_length_substrings(""abcdef"", 3) == [""abc"", ""bcd"", ""cde"", ""def""]
    assert fixed_length_substrings("""", 2) is None
    assert fixed_length_substrings(""abc"", 0) is None
    assert fixed_length_substrings(None, 2) is None",100.0,0
"def remove_duplicates_from_string(s):
    if not s:
        return None
    return ''.join(sorted(set(s), key=s.index))","def test_remove_duplicates_from_string():
    assert remove_duplicates_from_string(""aabbcc"") == ""abc""
    assert remove_duplicates_from_string(""abcabc"") == ""abc""
    assert remove_duplicates_from_string(""abc"") == ""abc""
    assert remove_duplicates_from_string("""") is None
    assert remove_duplicates_from_string(None) is None",100.0,0
"def average_of_floats(lst):
    def sum_of_floats(lst):
        total = 0.0
        for num in lst:
            if isinstance(num, (int, float)):
                total += num
            else:
                return None
        return total
    if not lst:
        return None
    total = sum_of_floats(lst)
    if total is None:
        return None
    return total / len(lst)","def test_average_of_floats():
    assert average_of_floats([1.0, 2.0, 3.0]) == 2.0
    assert average_of_floats([1, 2, 3, 4]) == 2.5
    assert average_of_floats([1.0]) == 1.0
    assert average_of_floats([]) is None
    assert average_of_floats(None) is None
    assert average_of_floats([1.0, ""a"", 3.0]) is None
    assert average_of_floats([""a"", ""b"", ""c""]) is None",100.0,0
"def max_float(lst):
    if not lst:
        return None
    max_val = float('-inf')
    for num in lst:
        if isinstance(num, (int, float)) and num > max_val:
            max_val = num
    return max_val if max_val != float('-inf') else None","def test_max_float():
    assert max_float([1.2, 3.4, 5.6]) == 5.6
    assert max_float([-1.1, -2.2, -3.3]) == -1.1
    assert max_float([]) is None
    assert max_float([1, 2, 3.3, 'a', 0]) == 3.3
    assert max_float([1.1, -2, 0]) == 1.1",100.0,0
"def min_float(lst):
    if not lst:
        return None
    min_val = float('inf')
    for num in lst:
        if isinstance(num, (int, float)) and num < min_val:
            min_val = num
    return min_val if min_val != float('inf') else None","def test_min_float():
    assert min_float([1.2, 3.4, 5.6]) == 1.2
    assert min_float([-1.1, -2.2, -3.3]) == -3.3
    assert min_float([]) is None
    assert min_float([1, 2, 3.3, 'a', 0]) == 0
    assert min_float([1.1, -2, 0]) == -2",100.0,0
"def is_positive_float(x):
    if not isinstance(x, (int, float)):
        return None
    return x > 0","def test_is_positive_float():
    assert is_positive_float(5.5) is True
    assert is_positive_float(-3.2) is False
    assert is_positive_float(0) is False
    assert is_positive_float('a') is None
    assert is_positive_float(None) is None",100.0,0
"def difference_between_floats(x, y):
    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):
        return None
    return abs(x - y)","def test_difference_between_floats():
    assert difference_between_floats(5.5, 3.2) == 2.3
    assert difference_between_floats(-3.2, 5.5) == 8.7
    assert difference_between_floats(0, 0) == 0
    assert difference_between_floats('a', 3.2) is None
    assert difference_between_floats(5.5, None) is None",100.0,0
"def product_of_floats(lst):
    if not lst:
        return None
    product = 1.0
    for num in lst:
        if isinstance(num, (int, float)):
            product *= num
        else:
            return None
    return product","def test_product_of_floats():
    assert product_of_floats([1.2, 3.4, 5.6]) == pytest.approx(22.848)
    assert product_of_floats([-1.1, -2.2, -3.3]) == pytest.approx(-7.986)
    assert product_of_floats([]) is None
    assert product_of_floats([1, 2, 3, 'a', 0]) is None
    assert product_of_floats([1.1, -2, 3]) == pytest.approx(-6.6)",100.0,0
"def divide_floats(x, y):
    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):
        return None
    if y == 0:
        return None
    return x / y","def test_divide_floats():
    assert divide_floats(6.6, 3.3) == 2.0
    assert divide_floats(-6.6, 3.3) == -2.0
    assert divide_floats(6.6, 0) is None
    assert divide_floats('a', 3.3) is None
    assert divide_floats(6.6, None) is None",100.0,0
"def square_root(x):
    if not isinstance(x, (int, float)) or x < 0:
        return None
    return x ** 0.5","def test_square_root():
    assert square_root(4) == 2.0
    assert square_root(9) == 3.0
    assert square_root(-4) is None
    assert square_root('a') is None
    assert square_root(None) is None",100.0,0
"def round_to_nearest_integer(x):
    if not isinstance(x, (int, float)):
        return None
    return round(x)","def test_round_to_nearest_integer():
    assert round_to_nearest_integer(4.4) == 4
    assert round_to_nearest_integer(4.5) == 4
    assert round_to_nearest_integer(4.6) == 5
    assert round_to_nearest_integer(-4.5) == -4
    assert round_to_nearest_integer('a') is None",100.0,0
"def divisible_by_x(lst, x):
    if not isinstance(x, (int, float)) or x == 0 or not lst:
        return None
    result = []
    for num in lst:
        if isinstance(num, (int, float)) and num % x == 0:
            result.append(num)
    return result if result else None","def test_divisible_by_x():
    assert divisible_by_x([10, 20, 30], 10) == [10, 20, 30]
    assert divisible_by_x([10, 21, 30], 10) == [10, 30]
    assert divisible_by_x([10, 21, 33], 0) is None
    assert divisible_by_x(['a', 21, 33], 7) == [21]
    assert divisible_by_x([], 2) is None",100.0,0
"def exponentiation_of_float(x, n):
    if not isinstance(x, (int, float)) or not isinstance(n, (int, float)):
        return None
    return x ** n","def test_exponentiation_of_float():
    assert exponentiation_of_float(2, 3) == 8
    assert exponentiation_of_float(-2, 3) == -8
    assert exponentiation_of_float(2, -3) == 0.125
    assert exponentiation_of_float('a', 3) is None
    assert exponentiation_of_float(2, 'b') is None",100.0,0
"def factorial_of_float(x):
    if not isinstance(x, int) or x < 0:
        return None
    factorial = 1
    for i in range(1, x + 1):
        factorial *= i
    return factorial","def test_factorial_of_float():
    assert factorial_of_float(5) == 120
    assert factorial_of_float(0) == 1
    assert factorial_of_float(-1) is None
    assert factorial_of_float(3) == 6
    assert factorial_of_float('a') is None",100.0,0
"def median_of_floats(lst):
    if not lst:
        return None
    lst = [x for x in lst if isinstance(x, (int, float))]
    lst.sort()
    n = len(lst)
    if n == 0:
        return None
    if n % 2 == 1:
        return lst[n // 2]
    else:
        return (lst[n // 2 - 1] + lst[n // 2]) / 2","def test_median_of_floats():
    assert median_of_floats([1, 2, 3]) == 2
    assert median_of_floats([1, 2, 3, 4]) == 2.5
    assert median_of_floats([]) is None
    assert median_of_floats([1, 'a', 3]) == 2
    assert median_of_floats([-1, -2, -3]) == -2
    assert median_of_floats(['a', 'b', 'c']) is None",100.0,0
"def prime_floats(lst):
    if not lst:
        return None

    def is_prime(x):
        if x < 2:
            return False
        for i in range(2, int(x ** 0.5) + 1):
            if x % i == 0:
                return False
        return True

    result = [x for x in lst if isinstance(x, int) and is_prime(x)]
    return result if result else None","def test_prime_floats():
    assert prime_floats([2, 3, 4, 5]) == [2, 3, 5]
    assert prime_floats([2.2, 3.3, 5.5]) is None
    assert prime_floats([]) is None
    assert prime_floats([-2, -3, -5]) is None
    assert prime_floats([11, 13, 15]) == [11, 13]",100.0,0
"def numbers_in_range(x, y):
    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):
        return None
    return [i for i in range(int(x), int(y) + 1)]","def test_numbers_in_range():
    assert numbers_in_range(1, 5) == [1, 2, 3, 4, 5]
    assert numbers_in_range(5, 5) == [5]
    assert numbers_in_range('a', 5) is None
    assert numbers_in_range(1, 'b') is None
    assert numbers_in_range(10, 1) == []",100.0,0
"def geometric_progression(a, r, n):
    if not isinstance(a, (int, float)) or not isinstance(r, (int, float)) or not isinstance(n, int) or n <= 0:
        return None
    result = [a * (r ** i) for i in range(n)]
    return result if result else None","def test_geometric_progression():
    assert geometric_progression(2, 3, 4) == [2, 6, 18, 54]
    assert geometric_progression(1, 2, 5) == [1, 2, 4, 8, 16]
    assert geometric_progression(1, 1, 5) == [1, 1, 1, 1, 1]
    assert geometric_progression(1, 2, 0) is None
    assert geometric_progression('a', 2, 5) is None",100.0,0
"def sum_of_geometric_progression(a, r, n):
    if not isinstance(a, (int, float)) or not isinstance(r, (int, float)) or not isinstance(n, int) or n <= 0:
        return None
    if r == 1:
        return a * n
    return a * (1 - r ** n) / (1 - r)","def test_sum_of_geometric_progression():
    assert sum_of_geometric_progression(2, 3, 4) == 80
    assert sum_of_geometric_progression(1, 2, 5) == 31
    assert sum_of_geometric_progression(1, 1, 5) == 5
    assert sum_of_geometric_progression(1, 2, 0) is None
    assert sum_of_geometric_progression('a', 2, 5) is None",100.0,0
"def square_of_float(x):
    if not isinstance(x, (int, float)):
        return None
    return x * x","def test_square_of_float():
    assert square_of_float(2) == 4
    assert square_of_float(-3) == 9
    assert square_of_float(0) == 0
    assert square_of_float('a') is None
    assert square_of_float(None) is None",100.0,0
"def sum_of_arithmetic_progression(a, d, n):
    if not isinstance(a, (int, float)) or not isinstance(d, (int, float)) or not isinstance(n, int) or n <= 0:
        return None
    return n * (2 * a + (n - 1) * d) / 2","def test_sum_of_arithmetic_progression():
    assert sum_of_arithmetic_progression(2, 3, 4) == 26
    assert sum_of_arithmetic_progression(1, 1, 5) == 15
    assert sum_of_arithmetic_progression(0, 0, 5) == 0
    assert sum_of_arithmetic_progression('a', 1, 5) is None
    assert sum_of_arithmetic_progression(1, 1, -5) is None",100.0,0
"def non_zero_floats(lst):
    if not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and x != 0]","def test_non_zero_floats():
    assert non_zero_floats([1.2, 0, 3.4, 5.6]) == [1.2, 3.4, 5.6]
    assert non_zero_floats([-1.1, 0, -3.3]) == [-1.1, -3.3]
    assert non_zero_floats([]) is None
    assert non_zero_floats([0, 0, 0]) == []
    assert non_zero_floats([1.1, 'a', 3.3, 0]) == [1.1, 3.3]",100.0,0
"def squares_greater_than(lst, value):
    if not isinstance(value, (int, float)) or not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and x ** 2 > value]","def test_squares_greater_than():
    assert squares_greater_than([1, 2, 3], 4) == [3]
    assert squares_greater_than([-3, 1, 4], 9) == [4]
    assert squares_greater_than([], 4) is None
    assert squares_greater_than([3, 'a', 4], 9) == [4]
    assert squares_greater_than([4, 5, 6], 16) == [5, 6]",100.0,0
"def less_than_value(lst, value):
    if not isinstance(value, (int, float)) or not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and x < value]","def test_less_than_value():
    assert less_than_value([1, 2, 3, 4], 3) == [1, 2]
    assert less_than_value([5, 6, 7], 10) == [5, 6, 7]
    assert less_than_value([], 5) is None
    assert less_than_value([1, 2, ""three""], 3) == [1, 2]
    assert less_than_value([1, 2], ""three"") is None
    assert less_than_value([1, 2, 3.5], 3.5) == [1, 2]",100.0,0
"def sum_of_squares_2(lst):
    if not lst:
        return None
    return sum(x ** 2 for x in lst if isinstance(x, (int, float)))","def test_sum_of_squares_2():
    assert sum_of_squares_2([1, 2, 3]) == 14
    assert sum_of_squares_2([]) is None
    assert sum_of_squares_2([2, -2, 2.5]) == 14.25
    assert sum_of_squares_2([""one"", 2, 3]) == 13
    assert sum_of_squares_2([0, -2, 5]) == 29
    assert sum_of_squares_2([3.5]) == 12.25",100.0,0
"def positive_max_min_difference(lst):
    if not lst:
        return None
    positive_numbers = [x for x in lst if isinstance(x, (int, float)) and x > 0]
    if not positive_numbers:
        return None
    return max(positive_numbers) - min(positive_numbers)","def test_positive_max_min_difference():
    assert positive_max_min_difference([1, 2, 3]) == 2
    assert positive_max_min_difference([-1, -2, -3]) is None
    assert positive_max_min_difference([1, -1, 2, 3]) == 2
    assert positive_max_min_difference([0, 2, 5, 3]) == 3
    assert positive_max_min_difference([]) is None
    assert positive_max_min_difference([""one"", 2, 3]) == 1",100.0,0
"def negative_max_min_difference(lst):
    if not lst:
        return None
    negative_numbers = [x for x in lst if isinstance(x, (int, float)) and x < 0]
    if not negative_numbers:
        return None
    return max(negative_numbers) - min(negative_numbers)","def test_negative_max_min_difference():
    assert negative_max_min_difference([-1, -2, -3]) == 2
    assert negative_max_min_difference([1, 2, 3]) is None
    assert negative_max_min_difference([-1, 1, -2, -3]) == 2
    assert negative_max_min_difference([0, -2, -5, -3]) == 3
    assert negative_max_min_difference([]) is None
    assert negative_max_min_difference([""minus one"", -2, -3]) == 1",100.0,0
"def sum_of_divisible_by_x(lst, x):
    if not isinstance(x, (int, float)) or x == 0 or not lst:
        return None
    return sum(x for x in lst if isinstance(x, (int, float)) and x % x == 0)","def test_sum_of_divisible_by_x():
    assert sum_of_divisible_by_x([1, 2, 3, 4], 2) == 10
    assert sum_of_divisible_by_x([1, 3, 5, 7], 2) == 16
    assert sum_of_divisible_by_x([], 2) is None
    assert sum_of_divisible_by_x([1, 2, ""three""], 2) == 3
    assert sum_of_divisible_by_x([1, 2, 3], ""two"") is None
    assert sum_of_divisible_by_x([4, 8, 12], 4) == 24",100.0,0
"def cubes(lst):
    if not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and round(x ** (1 / 3), 6) ** 3 == x]","def test_cubes():
    assert cubes([1, 8, 27]) == [1, 8, 27]
    assert cubes([]) is None
    assert cubes([1, 2, 3, 8]) == [1, 8]
    assert cubes([""one"", 8, 27]) == [8, 27]
    assert cubes([8, 8]) == [8, 8]
    assert cubes([27.0]) == [27.0]",100.0,0
"def sum_of_two_squares_3(lst):
    if not lst:
        return None
    result = []
    for x in lst:
        if isinstance(x, (int, float)):
            for i in range(int(x ** 0.5) + 1):
                for j in range(int(x ** 0.5) + 1):
                    if i ** 2 + j ** 2 == x:
                        result.append(x)
                        break
    return result if result else None","def test_sum_of_two_squares_3():
    assert sum_of_two_squares_3([5, 4, 10, 13]) == [5, 5, 4, 4, 10, 10, 13, 13]
    assert sum_of_two_squares_3([]) is None
    assert sum_of_two_squares_3([8, 1, 2]) == [8, 1, 1, 2]
    assert sum_of_two_squares_3([1, 2, ""three""]) == [1, 1, 2]
    assert sum_of_two_squares_3([5, 25]) == [5, 5, 25, 25, 25, 25]
    assert sum_of_two_squares_3([0, 3, 9]) == [0, 9, 9]",100.0,0
"def is_power_of_two(x):
    if not isinstance(x, (int, float)) or x <= 0:
        return False
    return (x & (x - 1)) == 0","def test_is_power_of_two():
    assert is_power_of_two(1) is True
    assert is_power_of_two(2) is True
    assert is_power_of_two(3) is False
    assert is_power_of_two(16) is True
    assert is_power_of_two(-2) is False
    assert is_power_of_two(4) is True",100.0,0
"def integers_in_float_list(lst):
    if not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and x.is_integer()]","def test_integers_in_float_list():
    assert integers_in_float_list([1.0, 2.0, 3.5, 4]) == [1.0, 2.0, 4]
    assert integers_in_float_list([]) is None
    assert integers_in_float_list([1.1, 2.2, 3.3]) == []
    assert integers_in_float_list([1, 2, ""three""]) == [1, 2]
    assert integers_in_float_list([0.0, 2.0, 5]) == [0.0, 2.0, 5]
    assert integers_in_float_list([4, 4.0]) == [4, 4.0]",100.0,0
"def sum_of_products_of_primes(lst):
    if not lst:
        return None

    def is_prime(x):
        if x < 2:
            return False
        for i in range(2, int(x ** 0.5) + 1):
            if x % i == 0:
                return False
        return True

    result = []
    for num in lst:
        if isinstance(num, (int, float)):
            for i in range(1, int(num ** 0.5) + 1):
                if num % i == 0 and is_prime(i) and is_prime(num // i):
                    result.append(num)
                    break
    return sum(result) if result else None","def test_sum_of_products_of_primes():
    assert sum_of_products_of_primes([6, 10, 15, 21]) == 52
    assert sum_of_products_of_primes([]) is None
    assert sum_of_products_of_primes([1, 2, 3]) is None
    assert sum_of_products_of_primes([""six"", 10, 15]) == 25
    assert sum_of_products_of_primes([6, 10]) == 16
    assert sum_of_products_of_primes([25.0, 49]) == 74
    assert sum_of_products_of_primes([1025, 34, 234]) == 34",100.0,0
"def difference_of_two_squares(lst):
    if not lst:
        return None
    result = []
    for num in lst:
        if isinstance(num, int) and num > 0:
            for a in range(1, int(num ** 0.5) + 1):
                if num % a == 0:
                    b = num // a
                    if (a + b) % 2 == 0 and (b - a) % 2 == 0:
                        result.append(num)
                        break
    return result if result else None","def test_difference_of_two_squares():
    assert difference_of_two_squares([3, 4, 5, 7]) == [3, 4, 5, 7]
    assert difference_of_two_squares([]) is None
    assert difference_of_two_squares([1, 2, 4]) == [1, 4]
    assert difference_of_two_squares([4, 8, 12, 16, 25, 0]) == [4, 8, 12, 16, 25]
    assert difference_of_two_squares([""two"", 4, 5]) == [4, 5]
    assert difference_of_two_squares([10]) is None",100.0,0
"def cubes_of_numbers(lst):
    if not lst:
        return None
    return [x for x in lst if isinstance(x, (int, float)) and round(x ** (1 / 3), 6) ** 3 == x]","def test_cubes_of_numbers():
    assert cubes_of_numbers([1, 8, 27]) == [1, 8, 27]
    assert cubes_of_numbers([]) is None
    assert cubes_of_numbers([1, 2, 3, 8]) == [1, 8]
    assert cubes_of_numbers([""one"", 8, 27]) == [8, 27]
    assert cubes_of_numbers([5, 8]) == [8]
    assert cubes_of_numbers([27.0]) == [27.0]",100.0,0
"def average_of_squares(lst):
    if not lst:
        return None
    return sum(x ** 2 for x in lst if isinstance(x, (int, float))) / len(lst)","def test_average_of_squares():
    assert average_of_squares([1, 2, 3]) == 4.666666666666667
    assert average_of_squares([]) is None
    assert average_of_squares([2, 2, 2.5]) == 4.75
    assert average_of_squares([""one"", 2, 3]) == 4.333333333333333
    assert average_of_squares([0, -2, 5]) == 9.666666666666666
    assert average_of_squares([3.5]) == 12.25",100.0,0
"def factorial_2(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial_2(n - 1)","def test_factorial_2():
    assert factorial_2(5) == 120
    assert factorial_2(0) == 1
    assert factorial_2(2) == 2
    assert factorial_2(4) == 24",100.0,0
"def sum_to_n(n):
    if n <= 0:
        return 0
    return n + sum_to_n(n - 1)","def test_sum_to_n():
    assert sum_to_n(5) == 15
    assert sum_to_n(0) == 0
    assert sum_to_n(1) == 1
    assert sum_to_n(-1) == 0
    assert sum_to_n(10) == 55
    assert sum_to_n(2) == 3",100.0,0
"def fibonacci_2(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return fibonacci_2(n - 1) + fibonacci_2(n - 2)","def test_fibonacci_2():
    assert fibonacci_2(0) == 0
    assert fibonacci_2(1) == 1
    assert fibonacci_2(2) == 1
    assert fibonacci_2(3) == 2
    assert fibonacci_2(4) == 3
    assert fibonacci_2(5) == 5",100.0,0
"def power_2(base, exp):
    if exp <= 0:
        return 1
    return base * power_2(base, exp - 1)","def test_power_2():
    assert power_2(2, 3) == 8
    assert power_2(5, 0) == 1
    assert power_2(2, -1) == 1
    assert power_2(3, 2) == 9
    assert power_2(4, 3) == 64
    assert power_2(-2, 3) == -8",100.0,0
"def recursive_sum(lst):
    if not lst:
        return 0
    return lst[0] + recursive_sum(lst[1:])","def test_recursive_sum():
    assert recursive_sum([1, 2, 3]) == 6
    assert recursive_sum([]) == 0
    assert recursive_sum([2, -2, 2.5]) == 2.5
    assert recursive_sum([0, -2, 5]) == 3
    assert recursive_sum([3.5]) == 3.5",100.0,0
"def recursive_product(lst):
    if not lst:
        return 1
    return lst[0] * recursive_product(lst[1:])","def test_recursive_product():
    assert recursive_product([1, 2, 3]) == 6
    assert recursive_product([]) == 1
    assert recursive_product([2, -2, 2.5]) == -10
    assert recursive_product([""one"", 2, 3]) == 'oneoneoneoneoneone'
    assert recursive_product([0, -2, 5]) == 0
    assert recursive_product([3.5]) == 3.5",100.0,0
"def recursive_max(lst):
    if len(lst) == 1:
        return lst[0]
    else:
        sub_max = recursive_max(lst[1:])
        return lst[0] if lst[0] > sub_max else sub_max","def test_recursive_max():
    assert recursive_max([1, 2, 3]) == 3
    assert recursive_max([3, 2, 1]) == 3
    assert recursive_max([-1, -2, -3]) == -1
    assert recursive_max([2, 0, 4, 3]) == 4
    assert recursive_max([5]) == 5
    assert recursive_max([3.5, 2.5, 1.5]) == 3.5",100.0,0
"def recursive_min(lst):
    if len(lst) == 1:
        return lst[0]
    else:
        sub_min = recursive_min(lst[1:])
        return lst[0] if lst[0] < sub_min else sub_min","def test_recursive_min():
    assert recursive_min([5]) == 5
    assert recursive_min([3, 1, 4, 1, 5, 9]) == 1
    assert recursive_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1
    assert recursive_min([0, -1, -2, -3, -4]) == -4
    assert recursive_min([-3, -1, -4, -2, -5]) == -5
    assert recursive_min([1, 2, 3, 4, 5]) == 1
    assert recursive_min([100, 99, 98, 97]) == 97
    assert recursive_min([10, 20, 30, 40]) == 10
    assert recursive_min([42, 23, 34, 45, 56]) == 23",100.0,0
"def reverse_string_2(s):
    if len(s) == 0:
        return s
    return s[-1] + reverse_string_2(s[:-1])","def test_reverse_string_2():
    assert reverse_string_2('') == ''
    assert reverse_string_2('hello') == 'olleh'
    assert reverse_string_2('python') == 'nohtyp'
    assert reverse_string_2('a') == 'a'
    assert reverse_string_2('racecar') == 'racecar'
    assert reverse_string_2('level') == 'level'
    assert reverse_string_2('12345') == '54321'
    assert reverse_string_2('abcdefg') == 'gfedcba'
    assert reverse_string_2('!@#$%^&*()') == ')(*&^%$#@!'",100.0,0
"def is_palindrome_4(s):
    if len(s) <= 1:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome_4(s[1:-1])","def test_is_palindrome_4():
    assert is_palindrome_4('') is True
    assert is_palindrome_4('a') is True
    assert is_palindrome_4('racecar') is True
    assert is_palindrome_4('level') is True
    assert is_palindrome_4('hello') is False
    assert is_palindrome_4('world') is False
    assert is_palindrome_4('madam') is True
    assert is_palindrome_4('noon') is True
    assert is_palindrome_4('palindrome') is False",100.0,0
"def gsd_2(a, b):
    if b == 0:
        return a
    return gsd_2(b, a % b)","def test_gsd_2():
    assert gsd_2(54, 24) == 6
    assert gsd_2(48, 18) == 6
    assert gsd_2(101, 10) == 1
    assert gsd_2(0, 10) == 10
    assert gsd_2(10, 0) == 10
    assert gsd_2(10, 5) == 5
    assert gsd_2(7, 3) == 1
    assert gsd_2(50, 100) == 50
    assert gsd_2(37, 600) == 1",100.0,0
"def count_occurrences_3(lst, x):
    if not lst:
        return 0
    return (1 if lst[0] == x else 0) + count_occurrences_3(lst[1:], x)","def test_count_occurrences_3():
    assert count_occurrences_3([1, 2, 3, 4, 1, 2, 1], 1) == 3
    assert count_occurrences_3([1, 2, 3, 4, 5], 6) == 0
    assert count_occurrences_3([1, 1, 1, 1], 1) == 4
    assert count_occurrences_3([], 1) == 0
    assert count_occurrences_3([2, 3, 4, 5], 1) == 0
    assert count_occurrences_3([5, 5, 5, 5, 5], 5) == 5
    assert count_occurrences_3([0, 0, 0, 0], 0) == 4
    assert count_occurrences_3([-1, -1, -1], -1) == 3
    assert count_occurrences_3([1, 2, 3], 2) == 1",100.0,0
"def is_prime_4(n, divisor=None):
    if n <= 1:
        return False
    if divisor is None:
        divisor = n - 1
    if divisor == 1:
        return True
    if n % divisor == 0:
        return False
    return is_prime_4(n, divisor - 1)","def test_is_prime_4():
    assert is_prime_4(2) is True
    assert is_prime_4(3) is True
    assert is_prime_4(4) is False
    assert is_prime_4(17) is True
    assert is_prime_4(20) is False
    assert is_prime_4(1) is False
    assert is_prime_4(0) is False
    assert is_prime_4(-5) is False
    assert is_prime_4(23) is True",100.0,0
"def find_max_in_tree(tree):
    if tree is None:
        return float('-inf')
    left_max = find_max_in_tree(tree.get('left'))
    right_max = find_max_in_tree(tree.get('right'))
    return max(tree.get('value', float('-inf')), left_max, right_max)","def test_find_max_in_tree():
    assert find_max_in_tree({'value': 5, 'left': {'value': 3}, 'right': {'value': 7}}) == 7
    assert find_max_in_tree({'value': 10, 'left': None, 'right': {'value': 20}}) == 20
    assert find_max_in_tree({'value': -1, 'left': {'value': -3}, 'right': {'value': -2}}) == -1
    assert find_max_in_tree({'value': 42}) == 42
    assert find_max_in_tree({'value': -100, 'left': None, 'right': None}) == -100
    assert find_max_in_tree(None) == float('-inf')
    assert find_max_in_tree({'value': 0, 'left': {'value': -5}, 'right': {'value': 5}}) == 5
    assert find_max_in_tree({'value': 6, 'left': {'value': 6}, 'right': {'value': 6}}) == 6
    assert find_max_in_tree({'value': -50, 'left': {'value': -60}, 'right': {'value': -70}}) == -50",100.0,0
"def is_even_2(n):
    if n < 0:
        n = abs(n)
    if n == 0:
        return True
    if n == 1:
        return False
    return is_even_2(n - 2)","def test_is_even_2():
    assert is_even_2(0) is True
    assert is_even_2(1) is False
    assert is_even_2(2) is True
    assert is_even_2(3) is False
    assert is_even_2(4) is True
    assert is_even_2(5) is False
    assert is_even_2(-2) is True
    assert is_even_2(-3) is False
    assert is_even_2(100) is True",100.0,0
"def sum_less_than_x(lst, x):
    if not lst:
        return 0
    return (lst[0] if lst[0] < x else 0) + sum_less_than_x(lst[1:], x)","def test_sum_less_than_x():
    assert sum_less_than_x([1, 2, 3, 4, 5], 3) == 3
    assert sum_less_than_x([10, 20, 30, 40, 50], 25) == 30
    assert sum_less_than_x([5, 5, 5, 5, 5], 10) == 25
    assert sum_less_than_x([], 5) == 0
    assert sum_less_than_x([1, 2, 3, 4, 5], 0) == 0
    assert sum_less_than_x([-1, -2, -3, 4, 5], 0) == -6
    assert sum_less_than_x([100, 200, 300], 150) == 100
    assert sum_less_than_x([1, 1, 1, 1, 1], 2) == 5
    assert sum_less_than_x([6, 7, 8, 9, 10], 5) == 0",100.0,0
"def factorial_tail(n, acc=1):
    if n == 0 or n == 1:
        return acc
    return factorial_tail(n - 1, acc * n)","def test_factorial_tail():
    assert factorial_tail(5) == 120
    assert factorial_tail(0) == 1
    assert factorial_tail(1) == 1
    assert factorial_tail(3) == 6
    assert factorial_tail(4) == 24
    assert factorial_tail(6) == 720
    assert factorial_tail(2) == 2
    assert factorial_tail(7) == 5040
    assert factorial_tail(8) == 40320",100.0,0
"def sum_with_step(n):
    if n <= 0:
        return 0
    return n + sum_with_step(n - 2)","def test_sum_with_step():
    assert sum_with_step(10) == 30
    assert sum_with_step(1) == 1
    assert sum_with_step(0) == 0
    assert sum_with_step(2) == 2
    assert sum_with_step(3) == 4
    assert sum_with_step(4) == 6
    assert sum_with_step(5) == 9
    assert sum_with_step(6) == 12
    assert sum_with_step(7) == 16",100.0,0
"def fibonacci_up_to_n(n, a=0, b=1):
    if a > n:
        return []
    return [a] + fibonacci_up_to_n(n, b, a + b)","def test_fibonacci_up_to_n():
    assert fibonacci_up_to_n(0) == [0]
    assert fibonacci_up_to_n(1) == [0, 1, 1]
    assert fibonacci_up_to_n(2) == [0, 1, 1, 2]
    assert fibonacci_up_to_n(5) == [0, 1, 1, 2, 3, 5]
    assert fibonacci_up_to_n(10) == [0, 1, 1, 2, 3, 5, 8]
    assert fibonacci_up_to_n(15) == [0, 1, 1, 2, 3, 5, 8, 13]
    assert fibonacci_up_to_n(20) == [0, 1, 1, 2, 3, 5, 8, 13]
    assert fibonacci_up_to_n(25) == [0, 1, 1, 2, 3, 5, 8, 13, 21]
    assert fibonacci_up_to_n(30) == [0, 1, 1, 2, 3, 5, 8, 13, 21]",100.0,0
"def find_divisible(lst, x):
    if not lst:
        return []
    return ([lst[0]] if lst[0] % x == 0 else []) + find_divisible(lst[1:], x)","def test_find_divisible():
    assert find_divisible([1, 2, 3, 4, 5], 2) == [2, 4]
    assert find_divisible([10, 20, 30, 40, 50], 10) == [10, 20, 30, 40, 50]
    assert find_divisible([5, 7, 11], 2) == []
    assert find_divisible([], 5) == []
    assert find_divisible([1, 2, 3, 4, 5], 3) == [3]
    assert find_divisible([9, 12, 15, 18, 21], 3) == [9, 12, 15, 18, 21]
    assert find_divisible([100, 200, 300], 100) == [100, 200, 300]
    assert find_divisible([1, 1, 1, 1], 1) == [1, 1, 1, 1]
    assert find_divisible([6, 7, 8, 9, 10], 2) == [6, 8, 10]",100.0,0
"def count_even(lst):
    if not lst:
        return 0
    return (1 if lst[0] % 2 == 0 else 0) + count_even(lst[1:])","def test_count_even():
    assert count_even([1, 2, 3, 4, 5]) == 2
    assert count_even([10, 20, 30, 40, 50]) == 5
    assert count_even([5, 7, 11]) == 0
    assert count_even([5]) == 0
    assert count_even([1, 3, 5, 7, 9]) == 0
    assert count_even([2, 4, 6, 8, 10]) == 5
    assert count_even([100, 200, 300]) == 3
    assert count_even([0, 0, 0, 0]) == 4
    assert count_even([-2, -4, -6]) == 3",100.0,0
"def count_negatives(lst):
    if not lst:
        return 0
    return (1 if lst[0] < 0 else 0) + count_negatives(lst[1:])","def test_count_negatives():
    assert count_negatives([-1, -2, -3, 4, 5]) == 3
    assert count_negatives([-10, -20, -30, -40, -50]) == 5
    assert count_negatives([5, 7, 11]) == 0
    assert count_negatives([]) == 0
    assert count_negatives([1, 2, 3, 4, 5]) == 0
    assert count_negatives([-1, -2, -3, -4, -5]) == 5
    assert count_negatives([-100, -200, -300]) == 3
    assert count_negatives([0, 0, 0, 0]) == 0
    assert count_negatives([-2, -4, 6, 8, 10]) == 2",100.0,0
"def greater_than_average_3(lst, avg=None):
    if not lst:
        return []
    if avg is None:
        avg = sum(lst) / len(lst)
    return ([lst[0]] if lst[0] > avg else []) + greater_than_average_3(lst[1:], avg)","def test_greater_than_average_3():
    assert greater_than_average_3([1, 2, 3, 4, 5]) == [4, 5]
    assert greater_than_average_3([10, 20, 30, 40, 50]) == [40, 50]
    assert greater_than_average_3([5, 7, 11, 13, 15]) == [11, 13, 15]
    assert greater_than_average_3([]) == []
    assert greater_than_average_3([1, 2, 3, 4]) == [3, 4]
    assert greater_than_average_3([10, 20, 30]) == [30]
    assert greater_than_average_3([0, 1, 2, 3]) == [2, 3]
    assert greater_than_average_3([-1, -2, -3, 0]) == [-1, 0]
    assert greater_than_average_3([6, 7, 8, 9, 10]) == [9, 10]",100.0,0
"def sum_greater_than_x(lst, x):
    if not lst:
        return 0
    return (lst[0] if lst[0] > x else 0) + sum_greater_than_x(lst[1:], x)","def test_sum_greater_than_x():
    assert sum_greater_than_x([1, 2, 3, 4, 5], 3) == 9
    assert sum_greater_than_x([10, 20, 30, 40, 50], 25) == 120
    assert sum_greater_than_x([5, 5, 5, 5, 5], 10) == 0
    assert sum_greater_than_x([], 5) == 0
    assert sum_greater_than_x([1, 2, 3, 4, 5], 5) == 0
    assert sum_greater_than_x([-1, -2, -3, 4, 5], 0) == 9
    assert sum_greater_than_x([100, 200, 300], 150) == 500
    assert sum_greater_than_x([1, 1, 1, 1, 1], 2) == 0
    assert sum_greater_than_x([6, 7, 8, 9, 10], 5) == 40",100.0,0
"def string_length(s):
    if s == """":
        return 0
    return 1 + string_length(s[1:])","def test_string_length():
    assert string_length("""") == 0
    assert string_length(""hello"") == 5
    assert string_length(""a"") == 1
    assert string_length(""Python"") == 6
    assert string_length(""length"") == 6
    assert string_length(""test"") == 4
    assert string_length(""pytest"") == 6
    assert string_length(""recursion"") == 9
    assert string_length(""1234567890"") == 10",100.0,0
"def count_evens_in_range(n):
    if n == 0:
        return 0
    if n % 2 == 0:
        return 1 + count_evens_in_range(n - 1)
    return count_evens_in_range(n - 1)","def test_count_evens_in_range():
    assert count_evens_in_range(0) == 0
    assert count_evens_in_range(1) == 0
    assert count_evens_in_range(2) == 1
    assert count_evens_in_range(3) == 1
    assert count_evens_in_range(4) == 2
    assert count_evens_in_range(5) == 2
    assert count_evens_in_range(6) == 3
    assert count_evens_in_range(10) == 5
    assert count_evens_in_range(15) == 7",100.0,0
"def sum_in_range(lst, low, high):
    if not lst:
        return 0
    return (lst[0] if low <= lst[0] <= high else 0) + sum_in_range(lst[1:], low, high)","def test_sum_in_range():
    assert sum_in_range([1, 2, 3, 4, 5], 2, 4) == 9
    assert sum_in_range([10, 20, 30, 40, 50], 15, 35) == 50
    assert sum_in_range([5, 5, 5, 5, 5], 5, 5) == 25
    assert sum_in_range([], 5, 10) == 0
    assert sum_in_range([1, 2, 3, 4, 5], 0, 2) == 3
    assert sum_in_range([1, 2, 3, 4, 5], 4, 6) == 9
    assert sum_in_range([1, 2, 3, 4, 5], 10, 20) == 0
    assert sum_in_range([1, 5, 9, 13, 17], 5, 15) == 27
    assert sum_in_range([-1, -2, -3, 4, 5], -3, 3) == -6",100.0,0
